// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: srvEbm.proto
#ifndef GRPC_srvEbm_2eproto__INCLUDED
#define GRPC_srvEbm_2eproto__INCLUDED

#include "srvEbm.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace srvEbm {

class Ebm final {
 public:
  static constexpr char const* service_full_name() {
    return "srvEbm.Ebm";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Security
    virtual ::grpc::Status SubmitSecurityConfigReq(::grpc::ClientContext* context, const ::srvEbm::SecurityConfigReq& request, ::structure::ReqReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>> AsyncSubmitSecurityConfigReq(::grpc::ClientContext* context, const ::srvEbm::SecurityConfigReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>>(AsyncSubmitSecurityConfigReqRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>> PrepareAsyncSubmitSecurityConfigReq(::grpc::ClientContext* context, const ::srvEbm::SecurityConfigReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>>(PrepareAsyncSubmitSecurityConfigReqRaw(context, request, cq));
    }
    // Tunnel
    virtual ::grpc::Status SubmitCreateTunnelReq(::grpc::ClientContext* context, const ::srvEbm::CreateTunnelReq& request, ::structure::ReqReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>> AsyncSubmitCreateTunnelReq(::grpc::ClientContext* context, const ::srvEbm::CreateTunnelReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>>(AsyncSubmitCreateTunnelReqRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>> PrepareAsyncSubmitCreateTunnelReq(::grpc::ClientContext* context, const ::srvEbm::CreateTunnelReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>>(PrepareAsyncSubmitCreateTunnelReqRaw(context, request, cq));
    }
    virtual ::grpc::Status SubmitModifyTunnelReq(::grpc::ClientContext* context, const ::srvEbm::ModifyTunnelReq& request, ::structure::ReqReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>> AsyncSubmitModifyTunnelReq(::grpc::ClientContext* context, const ::srvEbm::ModifyTunnelReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>>(AsyncSubmitModifyTunnelReqRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>> PrepareAsyncSubmitModifyTunnelReq(::grpc::ClientContext* context, const ::srvEbm::ModifyTunnelReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>>(PrepareAsyncSubmitModifyTunnelReqRaw(context, request, cq));
    }
    virtual ::grpc::Status SubmitDeleteTunnelReq(::grpc::ClientContext* context, const ::srvEbm::DeleteTunnelReq& request, ::structure::ReqReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>> AsyncSubmitDeleteTunnelReq(::grpc::ClientContext* context, const ::srvEbm::DeleteTunnelReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>>(AsyncSubmitDeleteTunnelReqRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>> PrepareAsyncSubmitDeleteTunnelReq(::grpc::ClientContext* context, const ::srvEbm::DeleteTunnelReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>>(PrepareAsyncSubmitDeleteTunnelReqRaw(context, request, cq));
    }
    // RB
    virtual ::grpc::Status SubmitAddRbConfigReq(::grpc::ClientContext* context, const ::srvEbm::AddRbConfigReq& request, ::structure::ReqReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>> AsyncSubmitAddRbConfigReq(::grpc::ClientContext* context, const ::srvEbm::AddRbConfigReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>>(AsyncSubmitAddRbConfigReqRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>> PrepareAsyncSubmitAddRbConfigReq(::grpc::ClientContext* context, const ::srvEbm::AddRbConfigReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>>(PrepareAsyncSubmitAddRbConfigReqRaw(context, request, cq));
    }
    virtual ::grpc::Status SubmitModifyRbConfigReq(::grpc::ClientContext* context, const ::srvEbm::ModifyRbConfigReq& request, ::structure::ReqReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>> AsyncSubmitModifyRbConfigReq(::grpc::ClientContext* context, const ::srvEbm::ModifyRbConfigReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>>(AsyncSubmitModifyRbConfigReqRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>> PrepareAsyncSubmitModifyRbConfigReq(::grpc::ClientContext* context, const ::srvEbm::ModifyRbConfigReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>>(PrepareAsyncSubmitModifyRbConfigReqRaw(context, request, cq));
    }
    virtual ::grpc::Status SubmitDeleteRbConfigReq(::grpc::ClientContext* context, const ::srvEbm::DeleteRbConfigReq& request, ::structure::ReqReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>> AsyncSubmitDeleteRbConfigReq(::grpc::ClientContext* context, const ::srvEbm::DeleteRbConfigReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>>(AsyncSubmitDeleteRbConfigReqRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>> PrepareAsyncSubmitDeleteRbConfigReq(::grpc::ClientContext* context, const ::srvEbm::DeleteRbConfigReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>>(PrepareAsyncSubmitDeleteRbConfigReqRaw(context, request, cq));
    }
    // Intra BBU handover
    virtual ::grpc::Status SubmitPauseResumeDataReq(::grpc::ClientContext* context, const ::srvEbm::PauseResumeDataReq& request, ::structure::ReqReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>> AsyncSubmitPauseResumeDataReq(::grpc::ClientContext* context, const ::srvEbm::PauseResumeDataReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>>(AsyncSubmitPauseResumeDataReqRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>> PrepareAsyncSubmitPauseResumeDataReq(::grpc::ClientContext* context, const ::srvEbm::PauseResumeDataReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>>(PrepareAsyncSubmitPauseResumeDataReqRaw(context, request, cq));
    }
    virtual ::grpc::Status SubmitPDCPSduStatusReq(::grpc::ClientContext* context, const ::srvEbm::PDCPSduStatusReq& request, ::structure::ReqReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>> AsyncSubmitPDCPSduStatusReq(::grpc::ClientContext* context, const ::srvEbm::PDCPSduStatusReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>>(AsyncSubmitPDCPSduStatusReqRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>> PrepareAsyncSubmitPDCPSduStatusReq(::grpc::ClientContext* context, const ::srvEbm::PDCPSduStatusReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>>(PrepareAsyncSubmitPDCPSduStatusReqRaw(context, request, cq));
    }
    virtual ::grpc::Status SubmitDataForwardingReq(::grpc::ClientContext* context, const ::srvEbm::DataForwardingReq& request, ::structure::ReqReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>> AsyncSubmitDataForwardingReq(::grpc::ClientContext* context, const ::srvEbm::DataForwardingReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>>(AsyncSubmitDataForwardingReqRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>> PrepareAsyncSubmitDataForwardingReq(::grpc::ClientContext* context, const ::srvEbm::DataForwardingReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>>(PrepareAsyncSubmitDataForwardingReqRaw(context, request, cq));
    }
    virtual ::grpc::Status SubmitUeInactivityTimerReq(::grpc::ClientContext* context, const ::srvEbm::UeInactivityTimerReq& request, ::structure::ReqReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>> AsyncSubmitUeInactivityTimerReq(::grpc::ClientContext* context, const ::srvEbm::UeInactivityTimerReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>>(AsyncSubmitUeInactivityTimerReqRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>> PrepareAsyncSubmitUeInactivityTimerReq(::grpc::ClientContext* context, const ::srvEbm::UeInactivityTimerReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>>(PrepareAsyncSubmitUeInactivityTimerReqRaw(context, request, cq));
    }
    // service provided to DPCM to configure/update ipAddress of interface
    virtual ::grpc::Status SubmitIpAddressConfMsg(::grpc::ClientContext* context, const ::srvEbm::IpAddressConfigMsg& request, ::structure::ReqReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>> AsyncSubmitIpAddressConfMsg(::grpc::ClientContext* context, const ::srvEbm::IpAddressConfigMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>>(AsyncSubmitIpAddressConfMsgRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>> PrepareAsyncSubmitIpAddressConfMsg(::grpc::ClientContext* context, const ::srvEbm::IpAddressConfigMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>>(PrepareAsyncSubmitIpAddressConfMsgRaw(context, request, cq));
    }
    virtual ::grpc::Status SubmitPathManagementConfMsg(::grpc::ClientContext* context, const ::srvEbm::PathManagementConfigMsg& request, ::structure::ReqReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>> AsyncSubmitPathManagementConfMsg(::grpc::ClientContext* context, const ::srvEbm::PathManagementConfigMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>>(AsyncSubmitPathManagementConfMsgRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>> PrepareAsyncSubmitPathManagementConfMsg(::grpc::ClientContext* context, const ::srvEbm::PathManagementConfigMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>>(PrepareAsyncSubmitPathManagementConfMsgRaw(context, request, cq));
    }
    // S1&X2 handover
    virtual ::grpc::Status SubmitAddPDCPConfigReq(::grpc::ClientContext* context, const ::srvEbm::AddPDCPConfigReq& request, ::structure::ReqReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>> AsyncSubmitAddPDCPConfigReq(::grpc::ClientContext* context, const ::srvEbm::AddPDCPConfigReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>>(AsyncSubmitAddPDCPConfigReqRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>> PrepareAsyncSubmitAddPDCPConfigReq(::grpc::ClientContext* context, const ::srvEbm::AddPDCPConfigReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>>(PrepareAsyncSubmitAddPDCPConfigReqRaw(context, request, cq));
    }
    virtual ::grpc::Status SubmitModifyPDCPConfigReq(::grpc::ClientContext* context, const ::srvEbm::ModifyPDCPConfigReq& request, ::structure::ReqReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>> AsyncSubmitModifyPDCPConfigReq(::grpc::ClientContext* context, const ::srvEbm::ModifyPDCPConfigReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>>(AsyncSubmitModifyPDCPConfigReqRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>> PrepareAsyncSubmitModifyPDCPConfigReq(::grpc::ClientContext* context, const ::srvEbm::ModifyPDCPConfigReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>>(PrepareAsyncSubmitModifyPDCPConfigReqRaw(context, request, cq));
    }
    virtual ::grpc::Status SubmitTunnelStateChangeReq(::grpc::ClientContext* context, const ::srvEbm::TunnelStateChangeReq& request, ::structure::ReqReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>> AsyncSubmitTunnelStateChangeReq(::grpc::ClientContext* context, const ::srvEbm::TunnelStateChangeReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>>(AsyncSubmitTunnelStateChangeReqRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>> PrepareAsyncSubmitTunnelStateChangeReq(::grpc::ClientContext* context, const ::srvEbm::TunnelStateChangeReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>>(PrepareAsyncSubmitTunnelStateChangeReqRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Security
      virtual void SubmitSecurityConfigReq(::grpc::ClientContext* context, const ::srvEbm::SecurityConfigReq* request, ::structure::ReqReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SubmitSecurityConfigReq(::grpc::ClientContext* context, const ::srvEbm::SecurityConfigReq* request, ::structure::ReqReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SubmitSecurityConfigReq(::grpc::ClientContext* context, const ::srvEbm::SecurityConfigReq* request, ::structure::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Tunnel
      virtual void SubmitCreateTunnelReq(::grpc::ClientContext* context, const ::srvEbm::CreateTunnelReq* request, ::structure::ReqReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SubmitCreateTunnelReq(::grpc::ClientContext* context, const ::srvEbm::CreateTunnelReq* request, ::structure::ReqReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SubmitCreateTunnelReq(::grpc::ClientContext* context, const ::srvEbm::CreateTunnelReq* request, ::structure::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SubmitModifyTunnelReq(::grpc::ClientContext* context, const ::srvEbm::ModifyTunnelReq* request, ::structure::ReqReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SubmitModifyTunnelReq(::grpc::ClientContext* context, const ::srvEbm::ModifyTunnelReq* request, ::structure::ReqReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SubmitModifyTunnelReq(::grpc::ClientContext* context, const ::srvEbm::ModifyTunnelReq* request, ::structure::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SubmitDeleteTunnelReq(::grpc::ClientContext* context, const ::srvEbm::DeleteTunnelReq* request, ::structure::ReqReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SubmitDeleteTunnelReq(::grpc::ClientContext* context, const ::srvEbm::DeleteTunnelReq* request, ::structure::ReqReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SubmitDeleteTunnelReq(::grpc::ClientContext* context, const ::srvEbm::DeleteTunnelReq* request, ::structure::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // RB
      virtual void SubmitAddRbConfigReq(::grpc::ClientContext* context, const ::srvEbm::AddRbConfigReq* request, ::structure::ReqReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SubmitAddRbConfigReq(::grpc::ClientContext* context, const ::srvEbm::AddRbConfigReq* request, ::structure::ReqReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SubmitAddRbConfigReq(::grpc::ClientContext* context, const ::srvEbm::AddRbConfigReq* request, ::structure::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SubmitModifyRbConfigReq(::grpc::ClientContext* context, const ::srvEbm::ModifyRbConfigReq* request, ::structure::ReqReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SubmitModifyRbConfigReq(::grpc::ClientContext* context, const ::srvEbm::ModifyRbConfigReq* request, ::structure::ReqReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SubmitModifyRbConfigReq(::grpc::ClientContext* context, const ::srvEbm::ModifyRbConfigReq* request, ::structure::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SubmitDeleteRbConfigReq(::grpc::ClientContext* context, const ::srvEbm::DeleteRbConfigReq* request, ::structure::ReqReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SubmitDeleteRbConfigReq(::grpc::ClientContext* context, const ::srvEbm::DeleteRbConfigReq* request, ::structure::ReqReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SubmitDeleteRbConfigReq(::grpc::ClientContext* context, const ::srvEbm::DeleteRbConfigReq* request, ::structure::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Intra BBU handover
      virtual void SubmitPauseResumeDataReq(::grpc::ClientContext* context, const ::srvEbm::PauseResumeDataReq* request, ::structure::ReqReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SubmitPauseResumeDataReq(::grpc::ClientContext* context, const ::srvEbm::PauseResumeDataReq* request, ::structure::ReqReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SubmitPauseResumeDataReq(::grpc::ClientContext* context, const ::srvEbm::PauseResumeDataReq* request, ::structure::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SubmitPDCPSduStatusReq(::grpc::ClientContext* context, const ::srvEbm::PDCPSduStatusReq* request, ::structure::ReqReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SubmitPDCPSduStatusReq(::grpc::ClientContext* context, const ::srvEbm::PDCPSduStatusReq* request, ::structure::ReqReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SubmitPDCPSduStatusReq(::grpc::ClientContext* context, const ::srvEbm::PDCPSduStatusReq* request, ::structure::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SubmitDataForwardingReq(::grpc::ClientContext* context, const ::srvEbm::DataForwardingReq* request, ::structure::ReqReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SubmitDataForwardingReq(::grpc::ClientContext* context, const ::srvEbm::DataForwardingReq* request, ::structure::ReqReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SubmitDataForwardingReq(::grpc::ClientContext* context, const ::srvEbm::DataForwardingReq* request, ::structure::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SubmitUeInactivityTimerReq(::grpc::ClientContext* context, const ::srvEbm::UeInactivityTimerReq* request, ::structure::ReqReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SubmitUeInactivityTimerReq(::grpc::ClientContext* context, const ::srvEbm::UeInactivityTimerReq* request, ::structure::ReqReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SubmitUeInactivityTimerReq(::grpc::ClientContext* context, const ::srvEbm::UeInactivityTimerReq* request, ::structure::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // service provided to DPCM to configure/update ipAddress of interface
      virtual void SubmitIpAddressConfMsg(::grpc::ClientContext* context, const ::srvEbm::IpAddressConfigMsg* request, ::structure::ReqReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SubmitIpAddressConfMsg(::grpc::ClientContext* context, const ::srvEbm::IpAddressConfigMsg* request, ::structure::ReqReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SubmitIpAddressConfMsg(::grpc::ClientContext* context, const ::srvEbm::IpAddressConfigMsg* request, ::structure::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SubmitPathManagementConfMsg(::grpc::ClientContext* context, const ::srvEbm::PathManagementConfigMsg* request, ::structure::ReqReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SubmitPathManagementConfMsg(::grpc::ClientContext* context, const ::srvEbm::PathManagementConfigMsg* request, ::structure::ReqReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SubmitPathManagementConfMsg(::grpc::ClientContext* context, const ::srvEbm::PathManagementConfigMsg* request, ::structure::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // S1&X2 handover
      virtual void SubmitAddPDCPConfigReq(::grpc::ClientContext* context, const ::srvEbm::AddPDCPConfigReq* request, ::structure::ReqReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SubmitAddPDCPConfigReq(::grpc::ClientContext* context, const ::srvEbm::AddPDCPConfigReq* request, ::structure::ReqReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SubmitAddPDCPConfigReq(::grpc::ClientContext* context, const ::srvEbm::AddPDCPConfigReq* request, ::structure::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SubmitModifyPDCPConfigReq(::grpc::ClientContext* context, const ::srvEbm::ModifyPDCPConfigReq* request, ::structure::ReqReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SubmitModifyPDCPConfigReq(::grpc::ClientContext* context, const ::srvEbm::ModifyPDCPConfigReq* request, ::structure::ReqReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SubmitModifyPDCPConfigReq(::grpc::ClientContext* context, const ::srvEbm::ModifyPDCPConfigReq* request, ::structure::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SubmitTunnelStateChangeReq(::grpc::ClientContext* context, const ::srvEbm::TunnelStateChangeReq* request, ::structure::ReqReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SubmitTunnelStateChangeReq(::grpc::ClientContext* context, const ::srvEbm::TunnelStateChangeReq* request, ::structure::ReqReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SubmitTunnelStateChangeReq(::grpc::ClientContext* context, const ::srvEbm::TunnelStateChangeReq* request, ::structure::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>* AsyncSubmitSecurityConfigReqRaw(::grpc::ClientContext* context, const ::srvEbm::SecurityConfigReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>* PrepareAsyncSubmitSecurityConfigReqRaw(::grpc::ClientContext* context, const ::srvEbm::SecurityConfigReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>* AsyncSubmitCreateTunnelReqRaw(::grpc::ClientContext* context, const ::srvEbm::CreateTunnelReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>* PrepareAsyncSubmitCreateTunnelReqRaw(::grpc::ClientContext* context, const ::srvEbm::CreateTunnelReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>* AsyncSubmitModifyTunnelReqRaw(::grpc::ClientContext* context, const ::srvEbm::ModifyTunnelReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>* PrepareAsyncSubmitModifyTunnelReqRaw(::grpc::ClientContext* context, const ::srvEbm::ModifyTunnelReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>* AsyncSubmitDeleteTunnelReqRaw(::grpc::ClientContext* context, const ::srvEbm::DeleteTunnelReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>* PrepareAsyncSubmitDeleteTunnelReqRaw(::grpc::ClientContext* context, const ::srvEbm::DeleteTunnelReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>* AsyncSubmitAddRbConfigReqRaw(::grpc::ClientContext* context, const ::srvEbm::AddRbConfigReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>* PrepareAsyncSubmitAddRbConfigReqRaw(::grpc::ClientContext* context, const ::srvEbm::AddRbConfigReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>* AsyncSubmitModifyRbConfigReqRaw(::grpc::ClientContext* context, const ::srvEbm::ModifyRbConfigReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>* PrepareAsyncSubmitModifyRbConfigReqRaw(::grpc::ClientContext* context, const ::srvEbm::ModifyRbConfigReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>* AsyncSubmitDeleteRbConfigReqRaw(::grpc::ClientContext* context, const ::srvEbm::DeleteRbConfigReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>* PrepareAsyncSubmitDeleteRbConfigReqRaw(::grpc::ClientContext* context, const ::srvEbm::DeleteRbConfigReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>* AsyncSubmitPauseResumeDataReqRaw(::grpc::ClientContext* context, const ::srvEbm::PauseResumeDataReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>* PrepareAsyncSubmitPauseResumeDataReqRaw(::grpc::ClientContext* context, const ::srvEbm::PauseResumeDataReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>* AsyncSubmitPDCPSduStatusReqRaw(::grpc::ClientContext* context, const ::srvEbm::PDCPSduStatusReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>* PrepareAsyncSubmitPDCPSduStatusReqRaw(::grpc::ClientContext* context, const ::srvEbm::PDCPSduStatusReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>* AsyncSubmitDataForwardingReqRaw(::grpc::ClientContext* context, const ::srvEbm::DataForwardingReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>* PrepareAsyncSubmitDataForwardingReqRaw(::grpc::ClientContext* context, const ::srvEbm::DataForwardingReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>* AsyncSubmitUeInactivityTimerReqRaw(::grpc::ClientContext* context, const ::srvEbm::UeInactivityTimerReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>* PrepareAsyncSubmitUeInactivityTimerReqRaw(::grpc::ClientContext* context, const ::srvEbm::UeInactivityTimerReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>* AsyncSubmitIpAddressConfMsgRaw(::grpc::ClientContext* context, const ::srvEbm::IpAddressConfigMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>* PrepareAsyncSubmitIpAddressConfMsgRaw(::grpc::ClientContext* context, const ::srvEbm::IpAddressConfigMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>* AsyncSubmitPathManagementConfMsgRaw(::grpc::ClientContext* context, const ::srvEbm::PathManagementConfigMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>* PrepareAsyncSubmitPathManagementConfMsgRaw(::grpc::ClientContext* context, const ::srvEbm::PathManagementConfigMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>* AsyncSubmitAddPDCPConfigReqRaw(::grpc::ClientContext* context, const ::srvEbm::AddPDCPConfigReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>* PrepareAsyncSubmitAddPDCPConfigReqRaw(::grpc::ClientContext* context, const ::srvEbm::AddPDCPConfigReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>* AsyncSubmitModifyPDCPConfigReqRaw(::grpc::ClientContext* context, const ::srvEbm::ModifyPDCPConfigReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>* PrepareAsyncSubmitModifyPDCPConfigReqRaw(::grpc::ClientContext* context, const ::srvEbm::ModifyPDCPConfigReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>* AsyncSubmitTunnelStateChangeReqRaw(::grpc::ClientContext* context, const ::srvEbm::TunnelStateChangeReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::structure::ReqReply>* PrepareAsyncSubmitTunnelStateChangeReqRaw(::grpc::ClientContext* context, const ::srvEbm::TunnelStateChangeReq& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status SubmitSecurityConfigReq(::grpc::ClientContext* context, const ::srvEbm::SecurityConfigReq& request, ::structure::ReqReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>> AsyncSubmitSecurityConfigReq(::grpc::ClientContext* context, const ::srvEbm::SecurityConfigReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>>(AsyncSubmitSecurityConfigReqRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>> PrepareAsyncSubmitSecurityConfigReq(::grpc::ClientContext* context, const ::srvEbm::SecurityConfigReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>>(PrepareAsyncSubmitSecurityConfigReqRaw(context, request, cq));
    }
    ::grpc::Status SubmitCreateTunnelReq(::grpc::ClientContext* context, const ::srvEbm::CreateTunnelReq& request, ::structure::ReqReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>> AsyncSubmitCreateTunnelReq(::grpc::ClientContext* context, const ::srvEbm::CreateTunnelReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>>(AsyncSubmitCreateTunnelReqRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>> PrepareAsyncSubmitCreateTunnelReq(::grpc::ClientContext* context, const ::srvEbm::CreateTunnelReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>>(PrepareAsyncSubmitCreateTunnelReqRaw(context, request, cq));
    }
    ::grpc::Status SubmitModifyTunnelReq(::grpc::ClientContext* context, const ::srvEbm::ModifyTunnelReq& request, ::structure::ReqReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>> AsyncSubmitModifyTunnelReq(::grpc::ClientContext* context, const ::srvEbm::ModifyTunnelReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>>(AsyncSubmitModifyTunnelReqRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>> PrepareAsyncSubmitModifyTunnelReq(::grpc::ClientContext* context, const ::srvEbm::ModifyTunnelReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>>(PrepareAsyncSubmitModifyTunnelReqRaw(context, request, cq));
    }
    ::grpc::Status SubmitDeleteTunnelReq(::grpc::ClientContext* context, const ::srvEbm::DeleteTunnelReq& request, ::structure::ReqReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>> AsyncSubmitDeleteTunnelReq(::grpc::ClientContext* context, const ::srvEbm::DeleteTunnelReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>>(AsyncSubmitDeleteTunnelReqRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>> PrepareAsyncSubmitDeleteTunnelReq(::grpc::ClientContext* context, const ::srvEbm::DeleteTunnelReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>>(PrepareAsyncSubmitDeleteTunnelReqRaw(context, request, cq));
    }
    ::grpc::Status SubmitAddRbConfigReq(::grpc::ClientContext* context, const ::srvEbm::AddRbConfigReq& request, ::structure::ReqReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>> AsyncSubmitAddRbConfigReq(::grpc::ClientContext* context, const ::srvEbm::AddRbConfigReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>>(AsyncSubmitAddRbConfigReqRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>> PrepareAsyncSubmitAddRbConfigReq(::grpc::ClientContext* context, const ::srvEbm::AddRbConfigReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>>(PrepareAsyncSubmitAddRbConfigReqRaw(context, request, cq));
    }
    ::grpc::Status SubmitModifyRbConfigReq(::grpc::ClientContext* context, const ::srvEbm::ModifyRbConfigReq& request, ::structure::ReqReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>> AsyncSubmitModifyRbConfigReq(::grpc::ClientContext* context, const ::srvEbm::ModifyRbConfigReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>>(AsyncSubmitModifyRbConfigReqRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>> PrepareAsyncSubmitModifyRbConfigReq(::grpc::ClientContext* context, const ::srvEbm::ModifyRbConfigReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>>(PrepareAsyncSubmitModifyRbConfigReqRaw(context, request, cq));
    }
    ::grpc::Status SubmitDeleteRbConfigReq(::grpc::ClientContext* context, const ::srvEbm::DeleteRbConfigReq& request, ::structure::ReqReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>> AsyncSubmitDeleteRbConfigReq(::grpc::ClientContext* context, const ::srvEbm::DeleteRbConfigReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>>(AsyncSubmitDeleteRbConfigReqRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>> PrepareAsyncSubmitDeleteRbConfigReq(::grpc::ClientContext* context, const ::srvEbm::DeleteRbConfigReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>>(PrepareAsyncSubmitDeleteRbConfigReqRaw(context, request, cq));
    }
    ::grpc::Status SubmitPauseResumeDataReq(::grpc::ClientContext* context, const ::srvEbm::PauseResumeDataReq& request, ::structure::ReqReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>> AsyncSubmitPauseResumeDataReq(::grpc::ClientContext* context, const ::srvEbm::PauseResumeDataReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>>(AsyncSubmitPauseResumeDataReqRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>> PrepareAsyncSubmitPauseResumeDataReq(::grpc::ClientContext* context, const ::srvEbm::PauseResumeDataReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>>(PrepareAsyncSubmitPauseResumeDataReqRaw(context, request, cq));
    }
    ::grpc::Status SubmitPDCPSduStatusReq(::grpc::ClientContext* context, const ::srvEbm::PDCPSduStatusReq& request, ::structure::ReqReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>> AsyncSubmitPDCPSduStatusReq(::grpc::ClientContext* context, const ::srvEbm::PDCPSduStatusReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>>(AsyncSubmitPDCPSduStatusReqRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>> PrepareAsyncSubmitPDCPSduStatusReq(::grpc::ClientContext* context, const ::srvEbm::PDCPSduStatusReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>>(PrepareAsyncSubmitPDCPSduStatusReqRaw(context, request, cq));
    }
    ::grpc::Status SubmitDataForwardingReq(::grpc::ClientContext* context, const ::srvEbm::DataForwardingReq& request, ::structure::ReqReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>> AsyncSubmitDataForwardingReq(::grpc::ClientContext* context, const ::srvEbm::DataForwardingReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>>(AsyncSubmitDataForwardingReqRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>> PrepareAsyncSubmitDataForwardingReq(::grpc::ClientContext* context, const ::srvEbm::DataForwardingReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>>(PrepareAsyncSubmitDataForwardingReqRaw(context, request, cq));
    }
    ::grpc::Status SubmitUeInactivityTimerReq(::grpc::ClientContext* context, const ::srvEbm::UeInactivityTimerReq& request, ::structure::ReqReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>> AsyncSubmitUeInactivityTimerReq(::grpc::ClientContext* context, const ::srvEbm::UeInactivityTimerReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>>(AsyncSubmitUeInactivityTimerReqRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>> PrepareAsyncSubmitUeInactivityTimerReq(::grpc::ClientContext* context, const ::srvEbm::UeInactivityTimerReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>>(PrepareAsyncSubmitUeInactivityTimerReqRaw(context, request, cq));
    }
    ::grpc::Status SubmitIpAddressConfMsg(::grpc::ClientContext* context, const ::srvEbm::IpAddressConfigMsg& request, ::structure::ReqReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>> AsyncSubmitIpAddressConfMsg(::grpc::ClientContext* context, const ::srvEbm::IpAddressConfigMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>>(AsyncSubmitIpAddressConfMsgRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>> PrepareAsyncSubmitIpAddressConfMsg(::grpc::ClientContext* context, const ::srvEbm::IpAddressConfigMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>>(PrepareAsyncSubmitIpAddressConfMsgRaw(context, request, cq));
    }
    ::grpc::Status SubmitPathManagementConfMsg(::grpc::ClientContext* context, const ::srvEbm::PathManagementConfigMsg& request, ::structure::ReqReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>> AsyncSubmitPathManagementConfMsg(::grpc::ClientContext* context, const ::srvEbm::PathManagementConfigMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>>(AsyncSubmitPathManagementConfMsgRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>> PrepareAsyncSubmitPathManagementConfMsg(::grpc::ClientContext* context, const ::srvEbm::PathManagementConfigMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>>(PrepareAsyncSubmitPathManagementConfMsgRaw(context, request, cq));
    }
    ::grpc::Status SubmitAddPDCPConfigReq(::grpc::ClientContext* context, const ::srvEbm::AddPDCPConfigReq& request, ::structure::ReqReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>> AsyncSubmitAddPDCPConfigReq(::grpc::ClientContext* context, const ::srvEbm::AddPDCPConfigReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>>(AsyncSubmitAddPDCPConfigReqRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>> PrepareAsyncSubmitAddPDCPConfigReq(::grpc::ClientContext* context, const ::srvEbm::AddPDCPConfigReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>>(PrepareAsyncSubmitAddPDCPConfigReqRaw(context, request, cq));
    }
    ::grpc::Status SubmitModifyPDCPConfigReq(::grpc::ClientContext* context, const ::srvEbm::ModifyPDCPConfigReq& request, ::structure::ReqReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>> AsyncSubmitModifyPDCPConfigReq(::grpc::ClientContext* context, const ::srvEbm::ModifyPDCPConfigReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>>(AsyncSubmitModifyPDCPConfigReqRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>> PrepareAsyncSubmitModifyPDCPConfigReq(::grpc::ClientContext* context, const ::srvEbm::ModifyPDCPConfigReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>>(PrepareAsyncSubmitModifyPDCPConfigReqRaw(context, request, cq));
    }
    ::grpc::Status SubmitTunnelStateChangeReq(::grpc::ClientContext* context, const ::srvEbm::TunnelStateChangeReq& request, ::structure::ReqReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>> AsyncSubmitTunnelStateChangeReq(::grpc::ClientContext* context, const ::srvEbm::TunnelStateChangeReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>>(AsyncSubmitTunnelStateChangeReqRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>> PrepareAsyncSubmitTunnelStateChangeReq(::grpc::ClientContext* context, const ::srvEbm::TunnelStateChangeReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>>(PrepareAsyncSubmitTunnelStateChangeReqRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void SubmitSecurityConfigReq(::grpc::ClientContext* context, const ::srvEbm::SecurityConfigReq* request, ::structure::ReqReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SubmitSecurityConfigReq(::grpc::ClientContext* context, const ::srvEbm::SecurityConfigReq* request, ::structure::ReqReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SubmitSecurityConfigReq(::grpc::ClientContext* context, const ::srvEbm::SecurityConfigReq* request, ::structure::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SubmitCreateTunnelReq(::grpc::ClientContext* context, const ::srvEbm::CreateTunnelReq* request, ::structure::ReqReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SubmitCreateTunnelReq(::grpc::ClientContext* context, const ::srvEbm::CreateTunnelReq* request, ::structure::ReqReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SubmitCreateTunnelReq(::grpc::ClientContext* context, const ::srvEbm::CreateTunnelReq* request, ::structure::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SubmitModifyTunnelReq(::grpc::ClientContext* context, const ::srvEbm::ModifyTunnelReq* request, ::structure::ReqReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SubmitModifyTunnelReq(::grpc::ClientContext* context, const ::srvEbm::ModifyTunnelReq* request, ::structure::ReqReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SubmitModifyTunnelReq(::grpc::ClientContext* context, const ::srvEbm::ModifyTunnelReq* request, ::structure::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SubmitDeleteTunnelReq(::grpc::ClientContext* context, const ::srvEbm::DeleteTunnelReq* request, ::structure::ReqReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SubmitDeleteTunnelReq(::grpc::ClientContext* context, const ::srvEbm::DeleteTunnelReq* request, ::structure::ReqReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SubmitDeleteTunnelReq(::grpc::ClientContext* context, const ::srvEbm::DeleteTunnelReq* request, ::structure::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SubmitAddRbConfigReq(::grpc::ClientContext* context, const ::srvEbm::AddRbConfigReq* request, ::structure::ReqReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SubmitAddRbConfigReq(::grpc::ClientContext* context, const ::srvEbm::AddRbConfigReq* request, ::structure::ReqReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SubmitAddRbConfigReq(::grpc::ClientContext* context, const ::srvEbm::AddRbConfigReq* request, ::structure::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SubmitModifyRbConfigReq(::grpc::ClientContext* context, const ::srvEbm::ModifyRbConfigReq* request, ::structure::ReqReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SubmitModifyRbConfigReq(::grpc::ClientContext* context, const ::srvEbm::ModifyRbConfigReq* request, ::structure::ReqReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SubmitModifyRbConfigReq(::grpc::ClientContext* context, const ::srvEbm::ModifyRbConfigReq* request, ::structure::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SubmitDeleteRbConfigReq(::grpc::ClientContext* context, const ::srvEbm::DeleteRbConfigReq* request, ::structure::ReqReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SubmitDeleteRbConfigReq(::grpc::ClientContext* context, const ::srvEbm::DeleteRbConfigReq* request, ::structure::ReqReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SubmitDeleteRbConfigReq(::grpc::ClientContext* context, const ::srvEbm::DeleteRbConfigReq* request, ::structure::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SubmitPauseResumeDataReq(::grpc::ClientContext* context, const ::srvEbm::PauseResumeDataReq* request, ::structure::ReqReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SubmitPauseResumeDataReq(::grpc::ClientContext* context, const ::srvEbm::PauseResumeDataReq* request, ::structure::ReqReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SubmitPauseResumeDataReq(::grpc::ClientContext* context, const ::srvEbm::PauseResumeDataReq* request, ::structure::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SubmitPDCPSduStatusReq(::grpc::ClientContext* context, const ::srvEbm::PDCPSduStatusReq* request, ::structure::ReqReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SubmitPDCPSduStatusReq(::grpc::ClientContext* context, const ::srvEbm::PDCPSduStatusReq* request, ::structure::ReqReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SubmitPDCPSduStatusReq(::grpc::ClientContext* context, const ::srvEbm::PDCPSduStatusReq* request, ::structure::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SubmitDataForwardingReq(::grpc::ClientContext* context, const ::srvEbm::DataForwardingReq* request, ::structure::ReqReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SubmitDataForwardingReq(::grpc::ClientContext* context, const ::srvEbm::DataForwardingReq* request, ::structure::ReqReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SubmitDataForwardingReq(::grpc::ClientContext* context, const ::srvEbm::DataForwardingReq* request, ::structure::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SubmitUeInactivityTimerReq(::grpc::ClientContext* context, const ::srvEbm::UeInactivityTimerReq* request, ::structure::ReqReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SubmitUeInactivityTimerReq(::grpc::ClientContext* context, const ::srvEbm::UeInactivityTimerReq* request, ::structure::ReqReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SubmitUeInactivityTimerReq(::grpc::ClientContext* context, const ::srvEbm::UeInactivityTimerReq* request, ::structure::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SubmitIpAddressConfMsg(::grpc::ClientContext* context, const ::srvEbm::IpAddressConfigMsg* request, ::structure::ReqReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SubmitIpAddressConfMsg(::grpc::ClientContext* context, const ::srvEbm::IpAddressConfigMsg* request, ::structure::ReqReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SubmitIpAddressConfMsg(::grpc::ClientContext* context, const ::srvEbm::IpAddressConfigMsg* request, ::structure::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SubmitPathManagementConfMsg(::grpc::ClientContext* context, const ::srvEbm::PathManagementConfigMsg* request, ::structure::ReqReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SubmitPathManagementConfMsg(::grpc::ClientContext* context, const ::srvEbm::PathManagementConfigMsg* request, ::structure::ReqReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SubmitPathManagementConfMsg(::grpc::ClientContext* context, const ::srvEbm::PathManagementConfigMsg* request, ::structure::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SubmitAddPDCPConfigReq(::grpc::ClientContext* context, const ::srvEbm::AddPDCPConfigReq* request, ::structure::ReqReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SubmitAddPDCPConfigReq(::grpc::ClientContext* context, const ::srvEbm::AddPDCPConfigReq* request, ::structure::ReqReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SubmitAddPDCPConfigReq(::grpc::ClientContext* context, const ::srvEbm::AddPDCPConfigReq* request, ::structure::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SubmitModifyPDCPConfigReq(::grpc::ClientContext* context, const ::srvEbm::ModifyPDCPConfigReq* request, ::structure::ReqReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SubmitModifyPDCPConfigReq(::grpc::ClientContext* context, const ::srvEbm::ModifyPDCPConfigReq* request, ::structure::ReqReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SubmitModifyPDCPConfigReq(::grpc::ClientContext* context, const ::srvEbm::ModifyPDCPConfigReq* request, ::structure::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SubmitTunnelStateChangeReq(::grpc::ClientContext* context, const ::srvEbm::TunnelStateChangeReq* request, ::structure::ReqReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SubmitTunnelStateChangeReq(::grpc::ClientContext* context, const ::srvEbm::TunnelStateChangeReq* request, ::structure::ReqReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SubmitTunnelStateChangeReq(::grpc::ClientContext* context, const ::srvEbm::TunnelStateChangeReq* request, ::structure::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* AsyncSubmitSecurityConfigReqRaw(::grpc::ClientContext* context, const ::srvEbm::SecurityConfigReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* PrepareAsyncSubmitSecurityConfigReqRaw(::grpc::ClientContext* context, const ::srvEbm::SecurityConfigReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* AsyncSubmitCreateTunnelReqRaw(::grpc::ClientContext* context, const ::srvEbm::CreateTunnelReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* PrepareAsyncSubmitCreateTunnelReqRaw(::grpc::ClientContext* context, const ::srvEbm::CreateTunnelReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* AsyncSubmitModifyTunnelReqRaw(::grpc::ClientContext* context, const ::srvEbm::ModifyTunnelReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* PrepareAsyncSubmitModifyTunnelReqRaw(::grpc::ClientContext* context, const ::srvEbm::ModifyTunnelReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* AsyncSubmitDeleteTunnelReqRaw(::grpc::ClientContext* context, const ::srvEbm::DeleteTunnelReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* PrepareAsyncSubmitDeleteTunnelReqRaw(::grpc::ClientContext* context, const ::srvEbm::DeleteTunnelReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* AsyncSubmitAddRbConfigReqRaw(::grpc::ClientContext* context, const ::srvEbm::AddRbConfigReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* PrepareAsyncSubmitAddRbConfigReqRaw(::grpc::ClientContext* context, const ::srvEbm::AddRbConfigReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* AsyncSubmitModifyRbConfigReqRaw(::grpc::ClientContext* context, const ::srvEbm::ModifyRbConfigReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* PrepareAsyncSubmitModifyRbConfigReqRaw(::grpc::ClientContext* context, const ::srvEbm::ModifyRbConfigReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* AsyncSubmitDeleteRbConfigReqRaw(::grpc::ClientContext* context, const ::srvEbm::DeleteRbConfigReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* PrepareAsyncSubmitDeleteRbConfigReqRaw(::grpc::ClientContext* context, const ::srvEbm::DeleteRbConfigReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* AsyncSubmitPauseResumeDataReqRaw(::grpc::ClientContext* context, const ::srvEbm::PauseResumeDataReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* PrepareAsyncSubmitPauseResumeDataReqRaw(::grpc::ClientContext* context, const ::srvEbm::PauseResumeDataReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* AsyncSubmitPDCPSduStatusReqRaw(::grpc::ClientContext* context, const ::srvEbm::PDCPSduStatusReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* PrepareAsyncSubmitPDCPSduStatusReqRaw(::grpc::ClientContext* context, const ::srvEbm::PDCPSduStatusReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* AsyncSubmitDataForwardingReqRaw(::grpc::ClientContext* context, const ::srvEbm::DataForwardingReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* PrepareAsyncSubmitDataForwardingReqRaw(::grpc::ClientContext* context, const ::srvEbm::DataForwardingReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* AsyncSubmitUeInactivityTimerReqRaw(::grpc::ClientContext* context, const ::srvEbm::UeInactivityTimerReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* PrepareAsyncSubmitUeInactivityTimerReqRaw(::grpc::ClientContext* context, const ::srvEbm::UeInactivityTimerReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* AsyncSubmitIpAddressConfMsgRaw(::grpc::ClientContext* context, const ::srvEbm::IpAddressConfigMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* PrepareAsyncSubmitIpAddressConfMsgRaw(::grpc::ClientContext* context, const ::srvEbm::IpAddressConfigMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* AsyncSubmitPathManagementConfMsgRaw(::grpc::ClientContext* context, const ::srvEbm::PathManagementConfigMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* PrepareAsyncSubmitPathManagementConfMsgRaw(::grpc::ClientContext* context, const ::srvEbm::PathManagementConfigMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* AsyncSubmitAddPDCPConfigReqRaw(::grpc::ClientContext* context, const ::srvEbm::AddPDCPConfigReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* PrepareAsyncSubmitAddPDCPConfigReqRaw(::grpc::ClientContext* context, const ::srvEbm::AddPDCPConfigReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* AsyncSubmitModifyPDCPConfigReqRaw(::grpc::ClientContext* context, const ::srvEbm::ModifyPDCPConfigReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* PrepareAsyncSubmitModifyPDCPConfigReqRaw(::grpc::ClientContext* context, const ::srvEbm::ModifyPDCPConfigReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* AsyncSubmitTunnelStateChangeReqRaw(::grpc::ClientContext* context, const ::srvEbm::TunnelStateChangeReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* PrepareAsyncSubmitTunnelStateChangeReqRaw(::grpc::ClientContext* context, const ::srvEbm::TunnelStateChangeReq& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SubmitSecurityConfigReq_;
    const ::grpc::internal::RpcMethod rpcmethod_SubmitCreateTunnelReq_;
    const ::grpc::internal::RpcMethod rpcmethod_SubmitModifyTunnelReq_;
    const ::grpc::internal::RpcMethod rpcmethod_SubmitDeleteTunnelReq_;
    const ::grpc::internal::RpcMethod rpcmethod_SubmitAddRbConfigReq_;
    const ::grpc::internal::RpcMethod rpcmethod_SubmitModifyRbConfigReq_;
    const ::grpc::internal::RpcMethod rpcmethod_SubmitDeleteRbConfigReq_;
    const ::grpc::internal::RpcMethod rpcmethod_SubmitPauseResumeDataReq_;
    const ::grpc::internal::RpcMethod rpcmethod_SubmitPDCPSduStatusReq_;
    const ::grpc::internal::RpcMethod rpcmethod_SubmitDataForwardingReq_;
    const ::grpc::internal::RpcMethod rpcmethod_SubmitUeInactivityTimerReq_;
    const ::grpc::internal::RpcMethod rpcmethod_SubmitIpAddressConfMsg_;
    const ::grpc::internal::RpcMethod rpcmethod_SubmitPathManagementConfMsg_;
    const ::grpc::internal::RpcMethod rpcmethod_SubmitAddPDCPConfigReq_;
    const ::grpc::internal::RpcMethod rpcmethod_SubmitModifyPDCPConfigReq_;
    const ::grpc::internal::RpcMethod rpcmethod_SubmitTunnelStateChangeReq_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Security
    virtual ::grpc::Status SubmitSecurityConfigReq(::grpc::ServerContext* context, const ::srvEbm::SecurityConfigReq* request, ::structure::ReqReply* response);
    // Tunnel
    virtual ::grpc::Status SubmitCreateTunnelReq(::grpc::ServerContext* context, const ::srvEbm::CreateTunnelReq* request, ::structure::ReqReply* response);
    virtual ::grpc::Status SubmitModifyTunnelReq(::grpc::ServerContext* context, const ::srvEbm::ModifyTunnelReq* request, ::structure::ReqReply* response);
    virtual ::grpc::Status SubmitDeleteTunnelReq(::grpc::ServerContext* context, const ::srvEbm::DeleteTunnelReq* request, ::structure::ReqReply* response);
    // RB
    virtual ::grpc::Status SubmitAddRbConfigReq(::grpc::ServerContext* context, const ::srvEbm::AddRbConfigReq* request, ::structure::ReqReply* response);
    virtual ::grpc::Status SubmitModifyRbConfigReq(::grpc::ServerContext* context, const ::srvEbm::ModifyRbConfigReq* request, ::structure::ReqReply* response);
    virtual ::grpc::Status SubmitDeleteRbConfigReq(::grpc::ServerContext* context, const ::srvEbm::DeleteRbConfigReq* request, ::structure::ReqReply* response);
    // Intra BBU handover
    virtual ::grpc::Status SubmitPauseResumeDataReq(::grpc::ServerContext* context, const ::srvEbm::PauseResumeDataReq* request, ::structure::ReqReply* response);
    virtual ::grpc::Status SubmitPDCPSduStatusReq(::grpc::ServerContext* context, const ::srvEbm::PDCPSduStatusReq* request, ::structure::ReqReply* response);
    virtual ::grpc::Status SubmitDataForwardingReq(::grpc::ServerContext* context, const ::srvEbm::DataForwardingReq* request, ::structure::ReqReply* response);
    virtual ::grpc::Status SubmitUeInactivityTimerReq(::grpc::ServerContext* context, const ::srvEbm::UeInactivityTimerReq* request, ::structure::ReqReply* response);
    // service provided to DPCM to configure/update ipAddress of interface
    virtual ::grpc::Status SubmitIpAddressConfMsg(::grpc::ServerContext* context, const ::srvEbm::IpAddressConfigMsg* request, ::structure::ReqReply* response);
    virtual ::grpc::Status SubmitPathManagementConfMsg(::grpc::ServerContext* context, const ::srvEbm::PathManagementConfigMsg* request, ::structure::ReqReply* response);
    // S1&X2 handover
    virtual ::grpc::Status SubmitAddPDCPConfigReq(::grpc::ServerContext* context, const ::srvEbm::AddPDCPConfigReq* request, ::structure::ReqReply* response);
    virtual ::grpc::Status SubmitModifyPDCPConfigReq(::grpc::ServerContext* context, const ::srvEbm::ModifyPDCPConfigReq* request, ::structure::ReqReply* response);
    virtual ::grpc::Status SubmitTunnelStateChangeReq(::grpc::ServerContext* context, const ::srvEbm::TunnelStateChangeReq* request, ::structure::ReqReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SubmitSecurityConfigReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubmitSecurityConfigReq() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SubmitSecurityConfigReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitSecurityConfigReq(::grpc::ServerContext* /*context*/, const ::srvEbm::SecurityConfigReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitSecurityConfigReq(::grpc::ServerContext* context, ::srvEbm::SecurityConfigReq* request, ::grpc::ServerAsyncResponseWriter< ::structure::ReqReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubmitCreateTunnelReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubmitCreateTunnelReq() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SubmitCreateTunnelReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitCreateTunnelReq(::grpc::ServerContext* /*context*/, const ::srvEbm::CreateTunnelReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitCreateTunnelReq(::grpc::ServerContext* context, ::srvEbm::CreateTunnelReq* request, ::grpc::ServerAsyncResponseWriter< ::structure::ReqReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubmitModifyTunnelReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubmitModifyTunnelReq() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SubmitModifyTunnelReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitModifyTunnelReq(::grpc::ServerContext* /*context*/, const ::srvEbm::ModifyTunnelReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitModifyTunnelReq(::grpc::ServerContext* context, ::srvEbm::ModifyTunnelReq* request, ::grpc::ServerAsyncResponseWriter< ::structure::ReqReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubmitDeleteTunnelReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubmitDeleteTunnelReq() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SubmitDeleteTunnelReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitDeleteTunnelReq(::grpc::ServerContext* /*context*/, const ::srvEbm::DeleteTunnelReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitDeleteTunnelReq(::grpc::ServerContext* context, ::srvEbm::DeleteTunnelReq* request, ::grpc::ServerAsyncResponseWriter< ::structure::ReqReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubmitAddRbConfigReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubmitAddRbConfigReq() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_SubmitAddRbConfigReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitAddRbConfigReq(::grpc::ServerContext* /*context*/, const ::srvEbm::AddRbConfigReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitAddRbConfigReq(::grpc::ServerContext* context, ::srvEbm::AddRbConfigReq* request, ::grpc::ServerAsyncResponseWriter< ::structure::ReqReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubmitModifyRbConfigReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubmitModifyRbConfigReq() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_SubmitModifyRbConfigReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitModifyRbConfigReq(::grpc::ServerContext* /*context*/, const ::srvEbm::ModifyRbConfigReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitModifyRbConfigReq(::grpc::ServerContext* context, ::srvEbm::ModifyRbConfigReq* request, ::grpc::ServerAsyncResponseWriter< ::structure::ReqReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubmitDeleteRbConfigReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubmitDeleteRbConfigReq() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_SubmitDeleteRbConfigReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitDeleteRbConfigReq(::grpc::ServerContext* /*context*/, const ::srvEbm::DeleteRbConfigReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitDeleteRbConfigReq(::grpc::ServerContext* context, ::srvEbm::DeleteRbConfigReq* request, ::grpc::ServerAsyncResponseWriter< ::structure::ReqReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubmitPauseResumeDataReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubmitPauseResumeDataReq() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_SubmitPauseResumeDataReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitPauseResumeDataReq(::grpc::ServerContext* /*context*/, const ::srvEbm::PauseResumeDataReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitPauseResumeDataReq(::grpc::ServerContext* context, ::srvEbm::PauseResumeDataReq* request, ::grpc::ServerAsyncResponseWriter< ::structure::ReqReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubmitPDCPSduStatusReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubmitPDCPSduStatusReq() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_SubmitPDCPSduStatusReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitPDCPSduStatusReq(::grpc::ServerContext* /*context*/, const ::srvEbm::PDCPSduStatusReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitPDCPSduStatusReq(::grpc::ServerContext* context, ::srvEbm::PDCPSduStatusReq* request, ::grpc::ServerAsyncResponseWriter< ::structure::ReqReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubmitDataForwardingReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubmitDataForwardingReq() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_SubmitDataForwardingReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitDataForwardingReq(::grpc::ServerContext* /*context*/, const ::srvEbm::DataForwardingReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitDataForwardingReq(::grpc::ServerContext* context, ::srvEbm::DataForwardingReq* request, ::grpc::ServerAsyncResponseWriter< ::structure::ReqReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubmitUeInactivityTimerReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubmitUeInactivityTimerReq() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_SubmitUeInactivityTimerReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitUeInactivityTimerReq(::grpc::ServerContext* /*context*/, const ::srvEbm::UeInactivityTimerReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitUeInactivityTimerReq(::grpc::ServerContext* context, ::srvEbm::UeInactivityTimerReq* request, ::grpc::ServerAsyncResponseWriter< ::structure::ReqReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubmitIpAddressConfMsg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubmitIpAddressConfMsg() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_SubmitIpAddressConfMsg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitIpAddressConfMsg(::grpc::ServerContext* /*context*/, const ::srvEbm::IpAddressConfigMsg* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitIpAddressConfMsg(::grpc::ServerContext* context, ::srvEbm::IpAddressConfigMsg* request, ::grpc::ServerAsyncResponseWriter< ::structure::ReqReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubmitPathManagementConfMsg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubmitPathManagementConfMsg() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_SubmitPathManagementConfMsg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitPathManagementConfMsg(::grpc::ServerContext* /*context*/, const ::srvEbm::PathManagementConfigMsg* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitPathManagementConfMsg(::grpc::ServerContext* context, ::srvEbm::PathManagementConfigMsg* request, ::grpc::ServerAsyncResponseWriter< ::structure::ReqReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubmitAddPDCPConfigReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubmitAddPDCPConfigReq() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_SubmitAddPDCPConfigReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitAddPDCPConfigReq(::grpc::ServerContext* /*context*/, const ::srvEbm::AddPDCPConfigReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitAddPDCPConfigReq(::grpc::ServerContext* context, ::srvEbm::AddPDCPConfigReq* request, ::grpc::ServerAsyncResponseWriter< ::structure::ReqReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubmitModifyPDCPConfigReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubmitModifyPDCPConfigReq() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_SubmitModifyPDCPConfigReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitModifyPDCPConfigReq(::grpc::ServerContext* /*context*/, const ::srvEbm::ModifyPDCPConfigReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitModifyPDCPConfigReq(::grpc::ServerContext* context, ::srvEbm::ModifyPDCPConfigReq* request, ::grpc::ServerAsyncResponseWriter< ::structure::ReqReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubmitTunnelStateChangeReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubmitTunnelStateChangeReq() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_SubmitTunnelStateChangeReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitTunnelStateChangeReq(::grpc::ServerContext* /*context*/, const ::srvEbm::TunnelStateChangeReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitTunnelStateChangeReq(::grpc::ServerContext* context, ::srvEbm::TunnelStateChangeReq* request, ::grpc::ServerAsyncResponseWriter< ::structure::ReqReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SubmitSecurityConfigReq<WithAsyncMethod_SubmitCreateTunnelReq<WithAsyncMethod_SubmitModifyTunnelReq<WithAsyncMethod_SubmitDeleteTunnelReq<WithAsyncMethod_SubmitAddRbConfigReq<WithAsyncMethod_SubmitModifyRbConfigReq<WithAsyncMethod_SubmitDeleteRbConfigReq<WithAsyncMethod_SubmitPauseResumeDataReq<WithAsyncMethod_SubmitPDCPSduStatusReq<WithAsyncMethod_SubmitDataForwardingReq<WithAsyncMethod_SubmitUeInactivityTimerReq<WithAsyncMethod_SubmitIpAddressConfMsg<WithAsyncMethod_SubmitPathManagementConfMsg<WithAsyncMethod_SubmitAddPDCPConfigReq<WithAsyncMethod_SubmitModifyPDCPConfigReq<WithAsyncMethod_SubmitTunnelStateChangeReq<Service > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SubmitSecurityConfigReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SubmitSecurityConfigReq() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::srvEbm::SecurityConfigReq, ::structure::ReqReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::srvEbm::SecurityConfigReq* request, ::structure::ReqReply* response) { return this->SubmitSecurityConfigReq(context, request, response); }));}
    void SetMessageAllocatorFor_SubmitSecurityConfigReq(
        ::grpc::experimental::MessageAllocator< ::srvEbm::SecurityConfigReq, ::structure::ReqReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::srvEbm::SecurityConfigReq, ::structure::ReqReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SubmitSecurityConfigReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitSecurityConfigReq(::grpc::ServerContext* /*context*/, const ::srvEbm::SecurityConfigReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubmitSecurityConfigReq(
      ::grpc::CallbackServerContext* /*context*/, const ::srvEbm::SecurityConfigReq* /*request*/, ::structure::ReqReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubmitSecurityConfigReq(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::srvEbm::SecurityConfigReq* /*request*/, ::structure::ReqReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SubmitCreateTunnelReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SubmitCreateTunnelReq() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::srvEbm::CreateTunnelReq, ::structure::ReqReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::srvEbm::CreateTunnelReq* request, ::structure::ReqReply* response) { return this->SubmitCreateTunnelReq(context, request, response); }));}
    void SetMessageAllocatorFor_SubmitCreateTunnelReq(
        ::grpc::experimental::MessageAllocator< ::srvEbm::CreateTunnelReq, ::structure::ReqReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::srvEbm::CreateTunnelReq, ::structure::ReqReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SubmitCreateTunnelReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitCreateTunnelReq(::grpc::ServerContext* /*context*/, const ::srvEbm::CreateTunnelReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubmitCreateTunnelReq(
      ::grpc::CallbackServerContext* /*context*/, const ::srvEbm::CreateTunnelReq* /*request*/, ::structure::ReqReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubmitCreateTunnelReq(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::srvEbm::CreateTunnelReq* /*request*/, ::structure::ReqReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SubmitModifyTunnelReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SubmitModifyTunnelReq() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::srvEbm::ModifyTunnelReq, ::structure::ReqReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::srvEbm::ModifyTunnelReq* request, ::structure::ReqReply* response) { return this->SubmitModifyTunnelReq(context, request, response); }));}
    void SetMessageAllocatorFor_SubmitModifyTunnelReq(
        ::grpc::experimental::MessageAllocator< ::srvEbm::ModifyTunnelReq, ::structure::ReqReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::srvEbm::ModifyTunnelReq, ::structure::ReqReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SubmitModifyTunnelReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitModifyTunnelReq(::grpc::ServerContext* /*context*/, const ::srvEbm::ModifyTunnelReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubmitModifyTunnelReq(
      ::grpc::CallbackServerContext* /*context*/, const ::srvEbm::ModifyTunnelReq* /*request*/, ::structure::ReqReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubmitModifyTunnelReq(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::srvEbm::ModifyTunnelReq* /*request*/, ::structure::ReqReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SubmitDeleteTunnelReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SubmitDeleteTunnelReq() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::srvEbm::DeleteTunnelReq, ::structure::ReqReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::srvEbm::DeleteTunnelReq* request, ::structure::ReqReply* response) { return this->SubmitDeleteTunnelReq(context, request, response); }));}
    void SetMessageAllocatorFor_SubmitDeleteTunnelReq(
        ::grpc::experimental::MessageAllocator< ::srvEbm::DeleteTunnelReq, ::structure::ReqReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::srvEbm::DeleteTunnelReq, ::structure::ReqReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SubmitDeleteTunnelReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitDeleteTunnelReq(::grpc::ServerContext* /*context*/, const ::srvEbm::DeleteTunnelReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubmitDeleteTunnelReq(
      ::grpc::CallbackServerContext* /*context*/, const ::srvEbm::DeleteTunnelReq* /*request*/, ::structure::ReqReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubmitDeleteTunnelReq(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::srvEbm::DeleteTunnelReq* /*request*/, ::structure::ReqReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SubmitAddRbConfigReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SubmitAddRbConfigReq() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::srvEbm::AddRbConfigReq, ::structure::ReqReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::srvEbm::AddRbConfigReq* request, ::structure::ReqReply* response) { return this->SubmitAddRbConfigReq(context, request, response); }));}
    void SetMessageAllocatorFor_SubmitAddRbConfigReq(
        ::grpc::experimental::MessageAllocator< ::srvEbm::AddRbConfigReq, ::structure::ReqReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::srvEbm::AddRbConfigReq, ::structure::ReqReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SubmitAddRbConfigReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitAddRbConfigReq(::grpc::ServerContext* /*context*/, const ::srvEbm::AddRbConfigReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubmitAddRbConfigReq(
      ::grpc::CallbackServerContext* /*context*/, const ::srvEbm::AddRbConfigReq* /*request*/, ::structure::ReqReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubmitAddRbConfigReq(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::srvEbm::AddRbConfigReq* /*request*/, ::structure::ReqReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SubmitModifyRbConfigReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SubmitModifyRbConfigReq() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::srvEbm::ModifyRbConfigReq, ::structure::ReqReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::srvEbm::ModifyRbConfigReq* request, ::structure::ReqReply* response) { return this->SubmitModifyRbConfigReq(context, request, response); }));}
    void SetMessageAllocatorFor_SubmitModifyRbConfigReq(
        ::grpc::experimental::MessageAllocator< ::srvEbm::ModifyRbConfigReq, ::structure::ReqReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::srvEbm::ModifyRbConfigReq, ::structure::ReqReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SubmitModifyRbConfigReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitModifyRbConfigReq(::grpc::ServerContext* /*context*/, const ::srvEbm::ModifyRbConfigReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubmitModifyRbConfigReq(
      ::grpc::CallbackServerContext* /*context*/, const ::srvEbm::ModifyRbConfigReq* /*request*/, ::structure::ReqReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubmitModifyRbConfigReq(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::srvEbm::ModifyRbConfigReq* /*request*/, ::structure::ReqReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SubmitDeleteRbConfigReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SubmitDeleteRbConfigReq() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::srvEbm::DeleteRbConfigReq, ::structure::ReqReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::srvEbm::DeleteRbConfigReq* request, ::structure::ReqReply* response) { return this->SubmitDeleteRbConfigReq(context, request, response); }));}
    void SetMessageAllocatorFor_SubmitDeleteRbConfigReq(
        ::grpc::experimental::MessageAllocator< ::srvEbm::DeleteRbConfigReq, ::structure::ReqReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::srvEbm::DeleteRbConfigReq, ::structure::ReqReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SubmitDeleteRbConfigReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitDeleteRbConfigReq(::grpc::ServerContext* /*context*/, const ::srvEbm::DeleteRbConfigReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubmitDeleteRbConfigReq(
      ::grpc::CallbackServerContext* /*context*/, const ::srvEbm::DeleteRbConfigReq* /*request*/, ::structure::ReqReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubmitDeleteRbConfigReq(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::srvEbm::DeleteRbConfigReq* /*request*/, ::structure::ReqReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SubmitPauseResumeDataReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SubmitPauseResumeDataReq() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::srvEbm::PauseResumeDataReq, ::structure::ReqReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::srvEbm::PauseResumeDataReq* request, ::structure::ReqReply* response) { return this->SubmitPauseResumeDataReq(context, request, response); }));}
    void SetMessageAllocatorFor_SubmitPauseResumeDataReq(
        ::grpc::experimental::MessageAllocator< ::srvEbm::PauseResumeDataReq, ::structure::ReqReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(7);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::srvEbm::PauseResumeDataReq, ::structure::ReqReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SubmitPauseResumeDataReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitPauseResumeDataReq(::grpc::ServerContext* /*context*/, const ::srvEbm::PauseResumeDataReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubmitPauseResumeDataReq(
      ::grpc::CallbackServerContext* /*context*/, const ::srvEbm::PauseResumeDataReq* /*request*/, ::structure::ReqReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubmitPauseResumeDataReq(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::srvEbm::PauseResumeDataReq* /*request*/, ::structure::ReqReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SubmitPDCPSduStatusReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SubmitPDCPSduStatusReq() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::srvEbm::PDCPSduStatusReq, ::structure::ReqReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::srvEbm::PDCPSduStatusReq* request, ::structure::ReqReply* response) { return this->SubmitPDCPSduStatusReq(context, request, response); }));}
    void SetMessageAllocatorFor_SubmitPDCPSduStatusReq(
        ::grpc::experimental::MessageAllocator< ::srvEbm::PDCPSduStatusReq, ::structure::ReqReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(8);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::srvEbm::PDCPSduStatusReq, ::structure::ReqReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SubmitPDCPSduStatusReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitPDCPSduStatusReq(::grpc::ServerContext* /*context*/, const ::srvEbm::PDCPSduStatusReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubmitPDCPSduStatusReq(
      ::grpc::CallbackServerContext* /*context*/, const ::srvEbm::PDCPSduStatusReq* /*request*/, ::structure::ReqReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubmitPDCPSduStatusReq(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::srvEbm::PDCPSduStatusReq* /*request*/, ::structure::ReqReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SubmitDataForwardingReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SubmitDataForwardingReq() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::srvEbm::DataForwardingReq, ::structure::ReqReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::srvEbm::DataForwardingReq* request, ::structure::ReqReply* response) { return this->SubmitDataForwardingReq(context, request, response); }));}
    void SetMessageAllocatorFor_SubmitDataForwardingReq(
        ::grpc::experimental::MessageAllocator< ::srvEbm::DataForwardingReq, ::structure::ReqReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(9);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::srvEbm::DataForwardingReq, ::structure::ReqReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SubmitDataForwardingReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitDataForwardingReq(::grpc::ServerContext* /*context*/, const ::srvEbm::DataForwardingReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubmitDataForwardingReq(
      ::grpc::CallbackServerContext* /*context*/, const ::srvEbm::DataForwardingReq* /*request*/, ::structure::ReqReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubmitDataForwardingReq(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::srvEbm::DataForwardingReq* /*request*/, ::structure::ReqReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SubmitUeInactivityTimerReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SubmitUeInactivityTimerReq() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::srvEbm::UeInactivityTimerReq, ::structure::ReqReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::srvEbm::UeInactivityTimerReq* request, ::structure::ReqReply* response) { return this->SubmitUeInactivityTimerReq(context, request, response); }));}
    void SetMessageAllocatorFor_SubmitUeInactivityTimerReq(
        ::grpc::experimental::MessageAllocator< ::srvEbm::UeInactivityTimerReq, ::structure::ReqReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(10);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::srvEbm::UeInactivityTimerReq, ::structure::ReqReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SubmitUeInactivityTimerReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitUeInactivityTimerReq(::grpc::ServerContext* /*context*/, const ::srvEbm::UeInactivityTimerReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubmitUeInactivityTimerReq(
      ::grpc::CallbackServerContext* /*context*/, const ::srvEbm::UeInactivityTimerReq* /*request*/, ::structure::ReqReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubmitUeInactivityTimerReq(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::srvEbm::UeInactivityTimerReq* /*request*/, ::structure::ReqReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SubmitIpAddressConfMsg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SubmitIpAddressConfMsg() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::srvEbm::IpAddressConfigMsg, ::structure::ReqReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::srvEbm::IpAddressConfigMsg* request, ::structure::ReqReply* response) { return this->SubmitIpAddressConfMsg(context, request, response); }));}
    void SetMessageAllocatorFor_SubmitIpAddressConfMsg(
        ::grpc::experimental::MessageAllocator< ::srvEbm::IpAddressConfigMsg, ::structure::ReqReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(11);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::srvEbm::IpAddressConfigMsg, ::structure::ReqReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SubmitIpAddressConfMsg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitIpAddressConfMsg(::grpc::ServerContext* /*context*/, const ::srvEbm::IpAddressConfigMsg* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubmitIpAddressConfMsg(
      ::grpc::CallbackServerContext* /*context*/, const ::srvEbm::IpAddressConfigMsg* /*request*/, ::structure::ReqReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubmitIpAddressConfMsg(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::srvEbm::IpAddressConfigMsg* /*request*/, ::structure::ReqReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SubmitPathManagementConfMsg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SubmitPathManagementConfMsg() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::srvEbm::PathManagementConfigMsg, ::structure::ReqReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::srvEbm::PathManagementConfigMsg* request, ::structure::ReqReply* response) { return this->SubmitPathManagementConfMsg(context, request, response); }));}
    void SetMessageAllocatorFor_SubmitPathManagementConfMsg(
        ::grpc::experimental::MessageAllocator< ::srvEbm::PathManagementConfigMsg, ::structure::ReqReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(12);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::srvEbm::PathManagementConfigMsg, ::structure::ReqReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SubmitPathManagementConfMsg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitPathManagementConfMsg(::grpc::ServerContext* /*context*/, const ::srvEbm::PathManagementConfigMsg* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubmitPathManagementConfMsg(
      ::grpc::CallbackServerContext* /*context*/, const ::srvEbm::PathManagementConfigMsg* /*request*/, ::structure::ReqReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubmitPathManagementConfMsg(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::srvEbm::PathManagementConfigMsg* /*request*/, ::structure::ReqReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SubmitAddPDCPConfigReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SubmitAddPDCPConfigReq() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::srvEbm::AddPDCPConfigReq, ::structure::ReqReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::srvEbm::AddPDCPConfigReq* request, ::structure::ReqReply* response) { return this->SubmitAddPDCPConfigReq(context, request, response); }));}
    void SetMessageAllocatorFor_SubmitAddPDCPConfigReq(
        ::grpc::experimental::MessageAllocator< ::srvEbm::AddPDCPConfigReq, ::structure::ReqReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(13);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::srvEbm::AddPDCPConfigReq, ::structure::ReqReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SubmitAddPDCPConfigReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitAddPDCPConfigReq(::grpc::ServerContext* /*context*/, const ::srvEbm::AddPDCPConfigReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubmitAddPDCPConfigReq(
      ::grpc::CallbackServerContext* /*context*/, const ::srvEbm::AddPDCPConfigReq* /*request*/, ::structure::ReqReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubmitAddPDCPConfigReq(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::srvEbm::AddPDCPConfigReq* /*request*/, ::structure::ReqReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SubmitModifyPDCPConfigReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SubmitModifyPDCPConfigReq() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::srvEbm::ModifyPDCPConfigReq, ::structure::ReqReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::srvEbm::ModifyPDCPConfigReq* request, ::structure::ReqReply* response) { return this->SubmitModifyPDCPConfigReq(context, request, response); }));}
    void SetMessageAllocatorFor_SubmitModifyPDCPConfigReq(
        ::grpc::experimental::MessageAllocator< ::srvEbm::ModifyPDCPConfigReq, ::structure::ReqReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(14);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::srvEbm::ModifyPDCPConfigReq, ::structure::ReqReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SubmitModifyPDCPConfigReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitModifyPDCPConfigReq(::grpc::ServerContext* /*context*/, const ::srvEbm::ModifyPDCPConfigReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubmitModifyPDCPConfigReq(
      ::grpc::CallbackServerContext* /*context*/, const ::srvEbm::ModifyPDCPConfigReq* /*request*/, ::structure::ReqReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubmitModifyPDCPConfigReq(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::srvEbm::ModifyPDCPConfigReq* /*request*/, ::structure::ReqReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SubmitTunnelStateChangeReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SubmitTunnelStateChangeReq() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::srvEbm::TunnelStateChangeReq, ::structure::ReqReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::srvEbm::TunnelStateChangeReq* request, ::structure::ReqReply* response) { return this->SubmitTunnelStateChangeReq(context, request, response); }));}
    void SetMessageAllocatorFor_SubmitTunnelStateChangeReq(
        ::grpc::experimental::MessageAllocator< ::srvEbm::TunnelStateChangeReq, ::structure::ReqReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(15);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(15);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::srvEbm::TunnelStateChangeReq, ::structure::ReqReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SubmitTunnelStateChangeReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitTunnelStateChangeReq(::grpc::ServerContext* /*context*/, const ::srvEbm::TunnelStateChangeReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubmitTunnelStateChangeReq(
      ::grpc::CallbackServerContext* /*context*/, const ::srvEbm::TunnelStateChangeReq* /*request*/, ::structure::ReqReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubmitTunnelStateChangeReq(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::srvEbm::TunnelStateChangeReq* /*request*/, ::structure::ReqReply* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_SubmitSecurityConfigReq<ExperimentalWithCallbackMethod_SubmitCreateTunnelReq<ExperimentalWithCallbackMethod_SubmitModifyTunnelReq<ExperimentalWithCallbackMethod_SubmitDeleteTunnelReq<ExperimentalWithCallbackMethod_SubmitAddRbConfigReq<ExperimentalWithCallbackMethod_SubmitModifyRbConfigReq<ExperimentalWithCallbackMethod_SubmitDeleteRbConfigReq<ExperimentalWithCallbackMethod_SubmitPauseResumeDataReq<ExperimentalWithCallbackMethod_SubmitPDCPSduStatusReq<ExperimentalWithCallbackMethod_SubmitDataForwardingReq<ExperimentalWithCallbackMethod_SubmitUeInactivityTimerReq<ExperimentalWithCallbackMethod_SubmitIpAddressConfMsg<ExperimentalWithCallbackMethod_SubmitPathManagementConfMsg<ExperimentalWithCallbackMethod_SubmitAddPDCPConfigReq<ExperimentalWithCallbackMethod_SubmitModifyPDCPConfigReq<ExperimentalWithCallbackMethod_SubmitTunnelStateChangeReq<Service > > > > > > > > > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_SubmitSecurityConfigReq<ExperimentalWithCallbackMethod_SubmitCreateTunnelReq<ExperimentalWithCallbackMethod_SubmitModifyTunnelReq<ExperimentalWithCallbackMethod_SubmitDeleteTunnelReq<ExperimentalWithCallbackMethod_SubmitAddRbConfigReq<ExperimentalWithCallbackMethod_SubmitModifyRbConfigReq<ExperimentalWithCallbackMethod_SubmitDeleteRbConfigReq<ExperimentalWithCallbackMethod_SubmitPauseResumeDataReq<ExperimentalWithCallbackMethod_SubmitPDCPSduStatusReq<ExperimentalWithCallbackMethod_SubmitDataForwardingReq<ExperimentalWithCallbackMethod_SubmitUeInactivityTimerReq<ExperimentalWithCallbackMethod_SubmitIpAddressConfMsg<ExperimentalWithCallbackMethod_SubmitPathManagementConfMsg<ExperimentalWithCallbackMethod_SubmitAddPDCPConfigReq<ExperimentalWithCallbackMethod_SubmitModifyPDCPConfigReq<ExperimentalWithCallbackMethod_SubmitTunnelStateChangeReq<Service > > > > > > > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SubmitSecurityConfigReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubmitSecurityConfigReq() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SubmitSecurityConfigReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitSecurityConfigReq(::grpc::ServerContext* /*context*/, const ::srvEbm::SecurityConfigReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubmitCreateTunnelReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubmitCreateTunnelReq() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SubmitCreateTunnelReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitCreateTunnelReq(::grpc::ServerContext* /*context*/, const ::srvEbm::CreateTunnelReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubmitModifyTunnelReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubmitModifyTunnelReq() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SubmitModifyTunnelReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitModifyTunnelReq(::grpc::ServerContext* /*context*/, const ::srvEbm::ModifyTunnelReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubmitDeleteTunnelReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubmitDeleteTunnelReq() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SubmitDeleteTunnelReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitDeleteTunnelReq(::grpc::ServerContext* /*context*/, const ::srvEbm::DeleteTunnelReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubmitAddRbConfigReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubmitAddRbConfigReq() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_SubmitAddRbConfigReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitAddRbConfigReq(::grpc::ServerContext* /*context*/, const ::srvEbm::AddRbConfigReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubmitModifyRbConfigReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubmitModifyRbConfigReq() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_SubmitModifyRbConfigReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitModifyRbConfigReq(::grpc::ServerContext* /*context*/, const ::srvEbm::ModifyRbConfigReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubmitDeleteRbConfigReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubmitDeleteRbConfigReq() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_SubmitDeleteRbConfigReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitDeleteRbConfigReq(::grpc::ServerContext* /*context*/, const ::srvEbm::DeleteRbConfigReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubmitPauseResumeDataReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubmitPauseResumeDataReq() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_SubmitPauseResumeDataReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitPauseResumeDataReq(::grpc::ServerContext* /*context*/, const ::srvEbm::PauseResumeDataReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubmitPDCPSduStatusReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubmitPDCPSduStatusReq() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_SubmitPDCPSduStatusReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitPDCPSduStatusReq(::grpc::ServerContext* /*context*/, const ::srvEbm::PDCPSduStatusReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubmitDataForwardingReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubmitDataForwardingReq() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_SubmitDataForwardingReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitDataForwardingReq(::grpc::ServerContext* /*context*/, const ::srvEbm::DataForwardingReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubmitUeInactivityTimerReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubmitUeInactivityTimerReq() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_SubmitUeInactivityTimerReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitUeInactivityTimerReq(::grpc::ServerContext* /*context*/, const ::srvEbm::UeInactivityTimerReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubmitIpAddressConfMsg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubmitIpAddressConfMsg() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_SubmitIpAddressConfMsg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitIpAddressConfMsg(::grpc::ServerContext* /*context*/, const ::srvEbm::IpAddressConfigMsg* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubmitPathManagementConfMsg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubmitPathManagementConfMsg() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_SubmitPathManagementConfMsg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitPathManagementConfMsg(::grpc::ServerContext* /*context*/, const ::srvEbm::PathManagementConfigMsg* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubmitAddPDCPConfigReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubmitAddPDCPConfigReq() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_SubmitAddPDCPConfigReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitAddPDCPConfigReq(::grpc::ServerContext* /*context*/, const ::srvEbm::AddPDCPConfigReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubmitModifyPDCPConfigReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubmitModifyPDCPConfigReq() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_SubmitModifyPDCPConfigReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitModifyPDCPConfigReq(::grpc::ServerContext* /*context*/, const ::srvEbm::ModifyPDCPConfigReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubmitTunnelStateChangeReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubmitTunnelStateChangeReq() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_SubmitTunnelStateChangeReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitTunnelStateChangeReq(::grpc::ServerContext* /*context*/, const ::srvEbm::TunnelStateChangeReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubmitSecurityConfigReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubmitSecurityConfigReq() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SubmitSecurityConfigReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitSecurityConfigReq(::grpc::ServerContext* /*context*/, const ::srvEbm::SecurityConfigReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitSecurityConfigReq(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubmitCreateTunnelReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubmitCreateTunnelReq() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SubmitCreateTunnelReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitCreateTunnelReq(::grpc::ServerContext* /*context*/, const ::srvEbm::CreateTunnelReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitCreateTunnelReq(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubmitModifyTunnelReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubmitModifyTunnelReq() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SubmitModifyTunnelReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitModifyTunnelReq(::grpc::ServerContext* /*context*/, const ::srvEbm::ModifyTunnelReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitModifyTunnelReq(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubmitDeleteTunnelReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubmitDeleteTunnelReq() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SubmitDeleteTunnelReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitDeleteTunnelReq(::grpc::ServerContext* /*context*/, const ::srvEbm::DeleteTunnelReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitDeleteTunnelReq(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubmitAddRbConfigReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubmitAddRbConfigReq() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_SubmitAddRbConfigReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitAddRbConfigReq(::grpc::ServerContext* /*context*/, const ::srvEbm::AddRbConfigReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitAddRbConfigReq(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubmitModifyRbConfigReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubmitModifyRbConfigReq() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_SubmitModifyRbConfigReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitModifyRbConfigReq(::grpc::ServerContext* /*context*/, const ::srvEbm::ModifyRbConfigReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitModifyRbConfigReq(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubmitDeleteRbConfigReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubmitDeleteRbConfigReq() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_SubmitDeleteRbConfigReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitDeleteRbConfigReq(::grpc::ServerContext* /*context*/, const ::srvEbm::DeleteRbConfigReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitDeleteRbConfigReq(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubmitPauseResumeDataReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubmitPauseResumeDataReq() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_SubmitPauseResumeDataReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitPauseResumeDataReq(::grpc::ServerContext* /*context*/, const ::srvEbm::PauseResumeDataReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitPauseResumeDataReq(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubmitPDCPSduStatusReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubmitPDCPSduStatusReq() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_SubmitPDCPSduStatusReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitPDCPSduStatusReq(::grpc::ServerContext* /*context*/, const ::srvEbm::PDCPSduStatusReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitPDCPSduStatusReq(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubmitDataForwardingReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubmitDataForwardingReq() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_SubmitDataForwardingReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitDataForwardingReq(::grpc::ServerContext* /*context*/, const ::srvEbm::DataForwardingReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitDataForwardingReq(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubmitUeInactivityTimerReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubmitUeInactivityTimerReq() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_SubmitUeInactivityTimerReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitUeInactivityTimerReq(::grpc::ServerContext* /*context*/, const ::srvEbm::UeInactivityTimerReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitUeInactivityTimerReq(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubmitIpAddressConfMsg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubmitIpAddressConfMsg() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_SubmitIpAddressConfMsg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitIpAddressConfMsg(::grpc::ServerContext* /*context*/, const ::srvEbm::IpAddressConfigMsg* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitIpAddressConfMsg(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubmitPathManagementConfMsg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubmitPathManagementConfMsg() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_SubmitPathManagementConfMsg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitPathManagementConfMsg(::grpc::ServerContext* /*context*/, const ::srvEbm::PathManagementConfigMsg* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitPathManagementConfMsg(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubmitAddPDCPConfigReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubmitAddPDCPConfigReq() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_SubmitAddPDCPConfigReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitAddPDCPConfigReq(::grpc::ServerContext* /*context*/, const ::srvEbm::AddPDCPConfigReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitAddPDCPConfigReq(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubmitModifyPDCPConfigReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubmitModifyPDCPConfigReq() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_SubmitModifyPDCPConfigReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitModifyPDCPConfigReq(::grpc::ServerContext* /*context*/, const ::srvEbm::ModifyPDCPConfigReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitModifyPDCPConfigReq(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubmitTunnelStateChangeReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubmitTunnelStateChangeReq() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_SubmitTunnelStateChangeReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitTunnelStateChangeReq(::grpc::ServerContext* /*context*/, const ::srvEbm::TunnelStateChangeReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitTunnelStateChangeReq(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SubmitSecurityConfigReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SubmitSecurityConfigReq() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SubmitSecurityConfigReq(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SubmitSecurityConfigReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitSecurityConfigReq(::grpc::ServerContext* /*context*/, const ::srvEbm::SecurityConfigReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubmitSecurityConfigReq(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubmitSecurityConfigReq(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SubmitCreateTunnelReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SubmitCreateTunnelReq() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SubmitCreateTunnelReq(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SubmitCreateTunnelReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitCreateTunnelReq(::grpc::ServerContext* /*context*/, const ::srvEbm::CreateTunnelReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubmitCreateTunnelReq(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubmitCreateTunnelReq(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SubmitModifyTunnelReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SubmitModifyTunnelReq() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SubmitModifyTunnelReq(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SubmitModifyTunnelReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitModifyTunnelReq(::grpc::ServerContext* /*context*/, const ::srvEbm::ModifyTunnelReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubmitModifyTunnelReq(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubmitModifyTunnelReq(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SubmitDeleteTunnelReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SubmitDeleteTunnelReq() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SubmitDeleteTunnelReq(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SubmitDeleteTunnelReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitDeleteTunnelReq(::grpc::ServerContext* /*context*/, const ::srvEbm::DeleteTunnelReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubmitDeleteTunnelReq(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubmitDeleteTunnelReq(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SubmitAddRbConfigReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SubmitAddRbConfigReq() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SubmitAddRbConfigReq(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SubmitAddRbConfigReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitAddRbConfigReq(::grpc::ServerContext* /*context*/, const ::srvEbm::AddRbConfigReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubmitAddRbConfigReq(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubmitAddRbConfigReq(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SubmitModifyRbConfigReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SubmitModifyRbConfigReq() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SubmitModifyRbConfigReq(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SubmitModifyRbConfigReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitModifyRbConfigReq(::grpc::ServerContext* /*context*/, const ::srvEbm::ModifyRbConfigReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubmitModifyRbConfigReq(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubmitModifyRbConfigReq(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SubmitDeleteRbConfigReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SubmitDeleteRbConfigReq() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SubmitDeleteRbConfigReq(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SubmitDeleteRbConfigReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitDeleteRbConfigReq(::grpc::ServerContext* /*context*/, const ::srvEbm::DeleteRbConfigReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubmitDeleteRbConfigReq(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubmitDeleteRbConfigReq(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SubmitPauseResumeDataReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SubmitPauseResumeDataReq() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SubmitPauseResumeDataReq(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SubmitPauseResumeDataReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitPauseResumeDataReq(::grpc::ServerContext* /*context*/, const ::srvEbm::PauseResumeDataReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubmitPauseResumeDataReq(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubmitPauseResumeDataReq(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SubmitPDCPSduStatusReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SubmitPDCPSduStatusReq() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SubmitPDCPSduStatusReq(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SubmitPDCPSduStatusReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitPDCPSduStatusReq(::grpc::ServerContext* /*context*/, const ::srvEbm::PDCPSduStatusReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubmitPDCPSduStatusReq(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubmitPDCPSduStatusReq(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SubmitDataForwardingReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SubmitDataForwardingReq() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SubmitDataForwardingReq(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SubmitDataForwardingReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitDataForwardingReq(::grpc::ServerContext* /*context*/, const ::srvEbm::DataForwardingReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubmitDataForwardingReq(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubmitDataForwardingReq(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SubmitUeInactivityTimerReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SubmitUeInactivityTimerReq() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SubmitUeInactivityTimerReq(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SubmitUeInactivityTimerReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitUeInactivityTimerReq(::grpc::ServerContext* /*context*/, const ::srvEbm::UeInactivityTimerReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubmitUeInactivityTimerReq(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubmitUeInactivityTimerReq(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SubmitIpAddressConfMsg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SubmitIpAddressConfMsg() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SubmitIpAddressConfMsg(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SubmitIpAddressConfMsg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitIpAddressConfMsg(::grpc::ServerContext* /*context*/, const ::srvEbm::IpAddressConfigMsg* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubmitIpAddressConfMsg(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubmitIpAddressConfMsg(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SubmitPathManagementConfMsg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SubmitPathManagementConfMsg() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SubmitPathManagementConfMsg(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SubmitPathManagementConfMsg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitPathManagementConfMsg(::grpc::ServerContext* /*context*/, const ::srvEbm::PathManagementConfigMsg* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubmitPathManagementConfMsg(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubmitPathManagementConfMsg(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SubmitAddPDCPConfigReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SubmitAddPDCPConfigReq() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SubmitAddPDCPConfigReq(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SubmitAddPDCPConfigReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitAddPDCPConfigReq(::grpc::ServerContext* /*context*/, const ::srvEbm::AddPDCPConfigReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubmitAddPDCPConfigReq(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubmitAddPDCPConfigReq(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SubmitModifyPDCPConfigReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SubmitModifyPDCPConfigReq() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SubmitModifyPDCPConfigReq(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SubmitModifyPDCPConfigReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitModifyPDCPConfigReq(::grpc::ServerContext* /*context*/, const ::srvEbm::ModifyPDCPConfigReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubmitModifyPDCPConfigReq(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubmitModifyPDCPConfigReq(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SubmitTunnelStateChangeReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SubmitTunnelStateChangeReq() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SubmitTunnelStateChangeReq(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SubmitTunnelStateChangeReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitTunnelStateChangeReq(::grpc::ServerContext* /*context*/, const ::srvEbm::TunnelStateChangeReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubmitTunnelStateChangeReq(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubmitTunnelStateChangeReq(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SubmitSecurityConfigReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SubmitSecurityConfigReq() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::srvEbm::SecurityConfigReq, ::structure::ReqReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::srvEbm::SecurityConfigReq, ::structure::ReqReply>* streamer) {
                       return this->StreamedSubmitSecurityConfigReq(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SubmitSecurityConfigReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubmitSecurityConfigReq(::grpc::ServerContext* /*context*/, const ::srvEbm::SecurityConfigReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubmitSecurityConfigReq(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::srvEbm::SecurityConfigReq,::structure::ReqReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SubmitCreateTunnelReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SubmitCreateTunnelReq() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::srvEbm::CreateTunnelReq, ::structure::ReqReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::srvEbm::CreateTunnelReq, ::structure::ReqReply>* streamer) {
                       return this->StreamedSubmitCreateTunnelReq(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SubmitCreateTunnelReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubmitCreateTunnelReq(::grpc::ServerContext* /*context*/, const ::srvEbm::CreateTunnelReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubmitCreateTunnelReq(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::srvEbm::CreateTunnelReq,::structure::ReqReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SubmitModifyTunnelReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SubmitModifyTunnelReq() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::srvEbm::ModifyTunnelReq, ::structure::ReqReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::srvEbm::ModifyTunnelReq, ::structure::ReqReply>* streamer) {
                       return this->StreamedSubmitModifyTunnelReq(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SubmitModifyTunnelReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubmitModifyTunnelReq(::grpc::ServerContext* /*context*/, const ::srvEbm::ModifyTunnelReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubmitModifyTunnelReq(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::srvEbm::ModifyTunnelReq,::structure::ReqReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SubmitDeleteTunnelReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SubmitDeleteTunnelReq() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::srvEbm::DeleteTunnelReq, ::structure::ReqReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::srvEbm::DeleteTunnelReq, ::structure::ReqReply>* streamer) {
                       return this->StreamedSubmitDeleteTunnelReq(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SubmitDeleteTunnelReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubmitDeleteTunnelReq(::grpc::ServerContext* /*context*/, const ::srvEbm::DeleteTunnelReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubmitDeleteTunnelReq(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::srvEbm::DeleteTunnelReq,::structure::ReqReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SubmitAddRbConfigReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SubmitAddRbConfigReq() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::srvEbm::AddRbConfigReq, ::structure::ReqReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::srvEbm::AddRbConfigReq, ::structure::ReqReply>* streamer) {
                       return this->StreamedSubmitAddRbConfigReq(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SubmitAddRbConfigReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubmitAddRbConfigReq(::grpc::ServerContext* /*context*/, const ::srvEbm::AddRbConfigReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubmitAddRbConfigReq(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::srvEbm::AddRbConfigReq,::structure::ReqReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SubmitModifyRbConfigReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SubmitModifyRbConfigReq() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::srvEbm::ModifyRbConfigReq, ::structure::ReqReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::srvEbm::ModifyRbConfigReq, ::structure::ReqReply>* streamer) {
                       return this->StreamedSubmitModifyRbConfigReq(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SubmitModifyRbConfigReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubmitModifyRbConfigReq(::grpc::ServerContext* /*context*/, const ::srvEbm::ModifyRbConfigReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubmitModifyRbConfigReq(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::srvEbm::ModifyRbConfigReq,::structure::ReqReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SubmitDeleteRbConfigReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SubmitDeleteRbConfigReq() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::srvEbm::DeleteRbConfigReq, ::structure::ReqReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::srvEbm::DeleteRbConfigReq, ::structure::ReqReply>* streamer) {
                       return this->StreamedSubmitDeleteRbConfigReq(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SubmitDeleteRbConfigReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubmitDeleteRbConfigReq(::grpc::ServerContext* /*context*/, const ::srvEbm::DeleteRbConfigReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubmitDeleteRbConfigReq(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::srvEbm::DeleteRbConfigReq,::structure::ReqReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SubmitPauseResumeDataReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SubmitPauseResumeDataReq() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::srvEbm::PauseResumeDataReq, ::structure::ReqReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::srvEbm::PauseResumeDataReq, ::structure::ReqReply>* streamer) {
                       return this->StreamedSubmitPauseResumeDataReq(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SubmitPauseResumeDataReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubmitPauseResumeDataReq(::grpc::ServerContext* /*context*/, const ::srvEbm::PauseResumeDataReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubmitPauseResumeDataReq(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::srvEbm::PauseResumeDataReq,::structure::ReqReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SubmitPDCPSduStatusReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SubmitPDCPSduStatusReq() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::srvEbm::PDCPSduStatusReq, ::structure::ReqReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::srvEbm::PDCPSduStatusReq, ::structure::ReqReply>* streamer) {
                       return this->StreamedSubmitPDCPSduStatusReq(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SubmitPDCPSduStatusReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubmitPDCPSduStatusReq(::grpc::ServerContext* /*context*/, const ::srvEbm::PDCPSduStatusReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubmitPDCPSduStatusReq(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::srvEbm::PDCPSduStatusReq,::structure::ReqReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SubmitDataForwardingReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SubmitDataForwardingReq() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::srvEbm::DataForwardingReq, ::structure::ReqReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::srvEbm::DataForwardingReq, ::structure::ReqReply>* streamer) {
                       return this->StreamedSubmitDataForwardingReq(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SubmitDataForwardingReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubmitDataForwardingReq(::grpc::ServerContext* /*context*/, const ::srvEbm::DataForwardingReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubmitDataForwardingReq(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::srvEbm::DataForwardingReq,::structure::ReqReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SubmitUeInactivityTimerReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SubmitUeInactivityTimerReq() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::srvEbm::UeInactivityTimerReq, ::structure::ReqReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::srvEbm::UeInactivityTimerReq, ::structure::ReqReply>* streamer) {
                       return this->StreamedSubmitUeInactivityTimerReq(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SubmitUeInactivityTimerReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubmitUeInactivityTimerReq(::grpc::ServerContext* /*context*/, const ::srvEbm::UeInactivityTimerReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubmitUeInactivityTimerReq(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::srvEbm::UeInactivityTimerReq,::structure::ReqReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SubmitIpAddressConfMsg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SubmitIpAddressConfMsg() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::srvEbm::IpAddressConfigMsg, ::structure::ReqReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::srvEbm::IpAddressConfigMsg, ::structure::ReqReply>* streamer) {
                       return this->StreamedSubmitIpAddressConfMsg(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SubmitIpAddressConfMsg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubmitIpAddressConfMsg(::grpc::ServerContext* /*context*/, const ::srvEbm::IpAddressConfigMsg* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubmitIpAddressConfMsg(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::srvEbm::IpAddressConfigMsg,::structure::ReqReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SubmitPathManagementConfMsg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SubmitPathManagementConfMsg() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::srvEbm::PathManagementConfigMsg, ::structure::ReqReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::srvEbm::PathManagementConfigMsg, ::structure::ReqReply>* streamer) {
                       return this->StreamedSubmitPathManagementConfMsg(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SubmitPathManagementConfMsg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubmitPathManagementConfMsg(::grpc::ServerContext* /*context*/, const ::srvEbm::PathManagementConfigMsg* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubmitPathManagementConfMsg(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::srvEbm::PathManagementConfigMsg,::structure::ReqReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SubmitAddPDCPConfigReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SubmitAddPDCPConfigReq() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::srvEbm::AddPDCPConfigReq, ::structure::ReqReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::srvEbm::AddPDCPConfigReq, ::structure::ReqReply>* streamer) {
                       return this->StreamedSubmitAddPDCPConfigReq(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SubmitAddPDCPConfigReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubmitAddPDCPConfigReq(::grpc::ServerContext* /*context*/, const ::srvEbm::AddPDCPConfigReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubmitAddPDCPConfigReq(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::srvEbm::AddPDCPConfigReq,::structure::ReqReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SubmitModifyPDCPConfigReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SubmitModifyPDCPConfigReq() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::srvEbm::ModifyPDCPConfigReq, ::structure::ReqReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::srvEbm::ModifyPDCPConfigReq, ::structure::ReqReply>* streamer) {
                       return this->StreamedSubmitModifyPDCPConfigReq(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SubmitModifyPDCPConfigReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubmitModifyPDCPConfigReq(::grpc::ServerContext* /*context*/, const ::srvEbm::ModifyPDCPConfigReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubmitModifyPDCPConfigReq(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::srvEbm::ModifyPDCPConfigReq,::structure::ReqReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SubmitTunnelStateChangeReq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SubmitTunnelStateChangeReq() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler<
          ::srvEbm::TunnelStateChangeReq, ::structure::ReqReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::srvEbm::TunnelStateChangeReq, ::structure::ReqReply>* streamer) {
                       return this->StreamedSubmitTunnelStateChangeReq(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SubmitTunnelStateChangeReq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubmitTunnelStateChangeReq(::grpc::ServerContext* /*context*/, const ::srvEbm::TunnelStateChangeReq* /*request*/, ::structure::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubmitTunnelStateChangeReq(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::srvEbm::TunnelStateChangeReq,::structure::ReqReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SubmitSecurityConfigReq<WithStreamedUnaryMethod_SubmitCreateTunnelReq<WithStreamedUnaryMethod_SubmitModifyTunnelReq<WithStreamedUnaryMethod_SubmitDeleteTunnelReq<WithStreamedUnaryMethod_SubmitAddRbConfigReq<WithStreamedUnaryMethod_SubmitModifyRbConfigReq<WithStreamedUnaryMethod_SubmitDeleteRbConfigReq<WithStreamedUnaryMethod_SubmitPauseResumeDataReq<WithStreamedUnaryMethod_SubmitPDCPSduStatusReq<WithStreamedUnaryMethod_SubmitDataForwardingReq<WithStreamedUnaryMethod_SubmitUeInactivityTimerReq<WithStreamedUnaryMethod_SubmitIpAddressConfMsg<WithStreamedUnaryMethod_SubmitPathManagementConfMsg<WithStreamedUnaryMethod_SubmitAddPDCPConfigReq<WithStreamedUnaryMethod_SubmitModifyPDCPConfigReq<WithStreamedUnaryMethod_SubmitTunnelStateChangeReq<Service > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SubmitSecurityConfigReq<WithStreamedUnaryMethod_SubmitCreateTunnelReq<WithStreamedUnaryMethod_SubmitModifyTunnelReq<WithStreamedUnaryMethod_SubmitDeleteTunnelReq<WithStreamedUnaryMethod_SubmitAddRbConfigReq<WithStreamedUnaryMethod_SubmitModifyRbConfigReq<WithStreamedUnaryMethod_SubmitDeleteRbConfigReq<WithStreamedUnaryMethod_SubmitPauseResumeDataReq<WithStreamedUnaryMethod_SubmitPDCPSduStatusReq<WithStreamedUnaryMethod_SubmitDataForwardingReq<WithStreamedUnaryMethod_SubmitUeInactivityTimerReq<WithStreamedUnaryMethod_SubmitIpAddressConfMsg<WithStreamedUnaryMethod_SubmitPathManagementConfMsg<WithStreamedUnaryMethod_SubmitAddPDCPConfigReq<WithStreamedUnaryMethod_SubmitModifyPDCPConfigReq<WithStreamedUnaryMethod_SubmitTunnelStateChangeReq<Service > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace srvEbm


#endif  // GRPC_srvEbm_2eproto__INCLUDED
