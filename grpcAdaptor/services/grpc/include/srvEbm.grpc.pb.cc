// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: srvEbm.proto

#include "srvEbm.pb.h"
#include "srvEbm.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace srvEbm {

static const char* Ebm_method_names[] = {
  "/srvEbm.Ebm/SubmitSecurityConfigReq",
  "/srvEbm.Ebm/SubmitCreateTunnelReq",
  "/srvEbm.Ebm/SubmitModifyTunnelReq",
  "/srvEbm.Ebm/SubmitDeleteTunnelReq",
  "/srvEbm.Ebm/SubmitAddRbConfigReq",
  "/srvEbm.Ebm/SubmitModifyRbConfigReq",
  "/srvEbm.Ebm/SubmitDeleteRbConfigReq",
  "/srvEbm.Ebm/SubmitPauseResumeDataReq",
  "/srvEbm.Ebm/SubmitPDCPSduStatusReq",
  "/srvEbm.Ebm/SubmitDataForwardingReq",
  "/srvEbm.Ebm/SubmitUeInactivityTimerReq",
  "/srvEbm.Ebm/SubmitIpAddressConfMsg",
  "/srvEbm.Ebm/SubmitPathManagementConfMsg",
  "/srvEbm.Ebm/SubmitAddPDCPConfigReq",
  "/srvEbm.Ebm/SubmitModifyPDCPConfigReq",
  "/srvEbm.Ebm/SubmitTunnelStateChangeReq",
};

std::unique_ptr< Ebm::Stub> Ebm::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Ebm::Stub> stub(new Ebm::Stub(channel));
  return stub;
}

Ebm::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SubmitSecurityConfigReq_(Ebm_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubmitCreateTunnelReq_(Ebm_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubmitModifyTunnelReq_(Ebm_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubmitDeleteTunnelReq_(Ebm_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubmitAddRbConfigReq_(Ebm_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubmitModifyRbConfigReq_(Ebm_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubmitDeleteRbConfigReq_(Ebm_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubmitPauseResumeDataReq_(Ebm_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubmitPDCPSduStatusReq_(Ebm_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubmitDataForwardingReq_(Ebm_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubmitUeInactivityTimerReq_(Ebm_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubmitIpAddressConfMsg_(Ebm_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubmitPathManagementConfMsg_(Ebm_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubmitAddPDCPConfigReq_(Ebm_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubmitModifyPDCPConfigReq_(Ebm_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubmitTunnelStateChangeReq_(Ebm_method_names[15], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Ebm::Stub::SubmitSecurityConfigReq(::grpc::ClientContext* context, const ::srvEbm::SecurityConfigReq& request, ::structure::ReqReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::srvEbm::SecurityConfigReq, ::structure::ReqReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubmitSecurityConfigReq_, context, request, response);
}

void Ebm::Stub::experimental_async::SubmitSecurityConfigReq(::grpc::ClientContext* context, const ::srvEbm::SecurityConfigReq* request, ::structure::ReqReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::srvEbm::SecurityConfigReq, ::structure::ReqReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitSecurityConfigReq_, context, request, response, std::move(f));
}

void Ebm::Stub::experimental_async::SubmitSecurityConfigReq(::grpc::ClientContext* context, const ::srvEbm::SecurityConfigReq* request, ::structure::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitSecurityConfigReq_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* Ebm::Stub::PrepareAsyncSubmitSecurityConfigReqRaw(::grpc::ClientContext* context, const ::srvEbm::SecurityConfigReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::structure::ReqReply>::Create(channel_.get(), cq, rpcmethod_SubmitSecurityConfigReq_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* Ebm::Stub::AsyncSubmitSecurityConfigReqRaw(::grpc::ClientContext* context, const ::srvEbm::SecurityConfigReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubmitSecurityConfigReqRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Ebm::Stub::SubmitCreateTunnelReq(::grpc::ClientContext* context, const ::srvEbm::CreateTunnelReq& request, ::structure::ReqReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::srvEbm::CreateTunnelReq, ::structure::ReqReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubmitCreateTunnelReq_, context, request, response);
}

void Ebm::Stub::experimental_async::SubmitCreateTunnelReq(::grpc::ClientContext* context, const ::srvEbm::CreateTunnelReq* request, ::structure::ReqReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::srvEbm::CreateTunnelReq, ::structure::ReqReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitCreateTunnelReq_, context, request, response, std::move(f));
}

void Ebm::Stub::experimental_async::SubmitCreateTunnelReq(::grpc::ClientContext* context, const ::srvEbm::CreateTunnelReq* request, ::structure::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitCreateTunnelReq_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* Ebm::Stub::PrepareAsyncSubmitCreateTunnelReqRaw(::grpc::ClientContext* context, const ::srvEbm::CreateTunnelReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::structure::ReqReply>::Create(channel_.get(), cq, rpcmethod_SubmitCreateTunnelReq_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* Ebm::Stub::AsyncSubmitCreateTunnelReqRaw(::grpc::ClientContext* context, const ::srvEbm::CreateTunnelReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubmitCreateTunnelReqRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Ebm::Stub::SubmitModifyTunnelReq(::grpc::ClientContext* context, const ::srvEbm::ModifyTunnelReq& request, ::structure::ReqReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::srvEbm::ModifyTunnelReq, ::structure::ReqReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubmitModifyTunnelReq_, context, request, response);
}

void Ebm::Stub::experimental_async::SubmitModifyTunnelReq(::grpc::ClientContext* context, const ::srvEbm::ModifyTunnelReq* request, ::structure::ReqReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::srvEbm::ModifyTunnelReq, ::structure::ReqReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitModifyTunnelReq_, context, request, response, std::move(f));
}

void Ebm::Stub::experimental_async::SubmitModifyTunnelReq(::grpc::ClientContext* context, const ::srvEbm::ModifyTunnelReq* request, ::structure::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitModifyTunnelReq_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* Ebm::Stub::PrepareAsyncSubmitModifyTunnelReqRaw(::grpc::ClientContext* context, const ::srvEbm::ModifyTunnelReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::structure::ReqReply>::Create(channel_.get(), cq, rpcmethod_SubmitModifyTunnelReq_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* Ebm::Stub::AsyncSubmitModifyTunnelReqRaw(::grpc::ClientContext* context, const ::srvEbm::ModifyTunnelReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubmitModifyTunnelReqRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Ebm::Stub::SubmitDeleteTunnelReq(::grpc::ClientContext* context, const ::srvEbm::DeleteTunnelReq& request, ::structure::ReqReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::srvEbm::DeleteTunnelReq, ::structure::ReqReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubmitDeleteTunnelReq_, context, request, response);
}

void Ebm::Stub::experimental_async::SubmitDeleteTunnelReq(::grpc::ClientContext* context, const ::srvEbm::DeleteTunnelReq* request, ::structure::ReqReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::srvEbm::DeleteTunnelReq, ::structure::ReqReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitDeleteTunnelReq_, context, request, response, std::move(f));
}

void Ebm::Stub::experimental_async::SubmitDeleteTunnelReq(::grpc::ClientContext* context, const ::srvEbm::DeleteTunnelReq* request, ::structure::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitDeleteTunnelReq_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* Ebm::Stub::PrepareAsyncSubmitDeleteTunnelReqRaw(::grpc::ClientContext* context, const ::srvEbm::DeleteTunnelReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::structure::ReqReply>::Create(channel_.get(), cq, rpcmethod_SubmitDeleteTunnelReq_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* Ebm::Stub::AsyncSubmitDeleteTunnelReqRaw(::grpc::ClientContext* context, const ::srvEbm::DeleteTunnelReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubmitDeleteTunnelReqRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Ebm::Stub::SubmitAddRbConfigReq(::grpc::ClientContext* context, const ::srvEbm::AddRbConfigReq& request, ::structure::ReqReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::srvEbm::AddRbConfigReq, ::structure::ReqReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubmitAddRbConfigReq_, context, request, response);
}

void Ebm::Stub::experimental_async::SubmitAddRbConfigReq(::grpc::ClientContext* context, const ::srvEbm::AddRbConfigReq* request, ::structure::ReqReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::srvEbm::AddRbConfigReq, ::structure::ReqReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitAddRbConfigReq_, context, request, response, std::move(f));
}

void Ebm::Stub::experimental_async::SubmitAddRbConfigReq(::grpc::ClientContext* context, const ::srvEbm::AddRbConfigReq* request, ::structure::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitAddRbConfigReq_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* Ebm::Stub::PrepareAsyncSubmitAddRbConfigReqRaw(::grpc::ClientContext* context, const ::srvEbm::AddRbConfigReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::structure::ReqReply>::Create(channel_.get(), cq, rpcmethod_SubmitAddRbConfigReq_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* Ebm::Stub::AsyncSubmitAddRbConfigReqRaw(::grpc::ClientContext* context, const ::srvEbm::AddRbConfigReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubmitAddRbConfigReqRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Ebm::Stub::SubmitModifyRbConfigReq(::grpc::ClientContext* context, const ::srvEbm::ModifyRbConfigReq& request, ::structure::ReqReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::srvEbm::ModifyRbConfigReq, ::structure::ReqReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubmitModifyRbConfigReq_, context, request, response);
}

void Ebm::Stub::experimental_async::SubmitModifyRbConfigReq(::grpc::ClientContext* context, const ::srvEbm::ModifyRbConfigReq* request, ::structure::ReqReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::srvEbm::ModifyRbConfigReq, ::structure::ReqReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitModifyRbConfigReq_, context, request, response, std::move(f));
}

void Ebm::Stub::experimental_async::SubmitModifyRbConfigReq(::grpc::ClientContext* context, const ::srvEbm::ModifyRbConfigReq* request, ::structure::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitModifyRbConfigReq_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* Ebm::Stub::PrepareAsyncSubmitModifyRbConfigReqRaw(::grpc::ClientContext* context, const ::srvEbm::ModifyRbConfigReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::structure::ReqReply>::Create(channel_.get(), cq, rpcmethod_SubmitModifyRbConfigReq_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* Ebm::Stub::AsyncSubmitModifyRbConfigReqRaw(::grpc::ClientContext* context, const ::srvEbm::ModifyRbConfigReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubmitModifyRbConfigReqRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Ebm::Stub::SubmitDeleteRbConfigReq(::grpc::ClientContext* context, const ::srvEbm::DeleteRbConfigReq& request, ::structure::ReqReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::srvEbm::DeleteRbConfigReq, ::structure::ReqReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubmitDeleteRbConfigReq_, context, request, response);
}

void Ebm::Stub::experimental_async::SubmitDeleteRbConfigReq(::grpc::ClientContext* context, const ::srvEbm::DeleteRbConfigReq* request, ::structure::ReqReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::srvEbm::DeleteRbConfigReq, ::structure::ReqReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitDeleteRbConfigReq_, context, request, response, std::move(f));
}

void Ebm::Stub::experimental_async::SubmitDeleteRbConfigReq(::grpc::ClientContext* context, const ::srvEbm::DeleteRbConfigReq* request, ::structure::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitDeleteRbConfigReq_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* Ebm::Stub::PrepareAsyncSubmitDeleteRbConfigReqRaw(::grpc::ClientContext* context, const ::srvEbm::DeleteRbConfigReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::structure::ReqReply>::Create(channel_.get(), cq, rpcmethod_SubmitDeleteRbConfigReq_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* Ebm::Stub::AsyncSubmitDeleteRbConfigReqRaw(::grpc::ClientContext* context, const ::srvEbm::DeleteRbConfigReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubmitDeleteRbConfigReqRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Ebm::Stub::SubmitPauseResumeDataReq(::grpc::ClientContext* context, const ::srvEbm::PauseResumeDataReq& request, ::structure::ReqReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::srvEbm::PauseResumeDataReq, ::structure::ReqReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubmitPauseResumeDataReq_, context, request, response);
}

void Ebm::Stub::experimental_async::SubmitPauseResumeDataReq(::grpc::ClientContext* context, const ::srvEbm::PauseResumeDataReq* request, ::structure::ReqReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::srvEbm::PauseResumeDataReq, ::structure::ReqReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitPauseResumeDataReq_, context, request, response, std::move(f));
}

void Ebm::Stub::experimental_async::SubmitPauseResumeDataReq(::grpc::ClientContext* context, const ::srvEbm::PauseResumeDataReq* request, ::structure::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitPauseResumeDataReq_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* Ebm::Stub::PrepareAsyncSubmitPauseResumeDataReqRaw(::grpc::ClientContext* context, const ::srvEbm::PauseResumeDataReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::structure::ReqReply>::Create(channel_.get(), cq, rpcmethod_SubmitPauseResumeDataReq_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* Ebm::Stub::AsyncSubmitPauseResumeDataReqRaw(::grpc::ClientContext* context, const ::srvEbm::PauseResumeDataReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubmitPauseResumeDataReqRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Ebm::Stub::SubmitPDCPSduStatusReq(::grpc::ClientContext* context, const ::srvEbm::PDCPSduStatusReq& request, ::structure::ReqReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::srvEbm::PDCPSduStatusReq, ::structure::ReqReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubmitPDCPSduStatusReq_, context, request, response);
}

void Ebm::Stub::experimental_async::SubmitPDCPSduStatusReq(::grpc::ClientContext* context, const ::srvEbm::PDCPSduStatusReq* request, ::structure::ReqReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::srvEbm::PDCPSduStatusReq, ::structure::ReqReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitPDCPSduStatusReq_, context, request, response, std::move(f));
}

void Ebm::Stub::experimental_async::SubmitPDCPSduStatusReq(::grpc::ClientContext* context, const ::srvEbm::PDCPSduStatusReq* request, ::structure::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitPDCPSduStatusReq_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* Ebm::Stub::PrepareAsyncSubmitPDCPSduStatusReqRaw(::grpc::ClientContext* context, const ::srvEbm::PDCPSduStatusReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::structure::ReqReply>::Create(channel_.get(), cq, rpcmethod_SubmitPDCPSduStatusReq_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* Ebm::Stub::AsyncSubmitPDCPSduStatusReqRaw(::grpc::ClientContext* context, const ::srvEbm::PDCPSduStatusReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubmitPDCPSduStatusReqRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Ebm::Stub::SubmitDataForwardingReq(::grpc::ClientContext* context, const ::srvEbm::DataForwardingReq& request, ::structure::ReqReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::srvEbm::DataForwardingReq, ::structure::ReqReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubmitDataForwardingReq_, context, request, response);
}

void Ebm::Stub::experimental_async::SubmitDataForwardingReq(::grpc::ClientContext* context, const ::srvEbm::DataForwardingReq* request, ::structure::ReqReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::srvEbm::DataForwardingReq, ::structure::ReqReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitDataForwardingReq_, context, request, response, std::move(f));
}

void Ebm::Stub::experimental_async::SubmitDataForwardingReq(::grpc::ClientContext* context, const ::srvEbm::DataForwardingReq* request, ::structure::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitDataForwardingReq_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* Ebm::Stub::PrepareAsyncSubmitDataForwardingReqRaw(::grpc::ClientContext* context, const ::srvEbm::DataForwardingReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::structure::ReqReply>::Create(channel_.get(), cq, rpcmethod_SubmitDataForwardingReq_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* Ebm::Stub::AsyncSubmitDataForwardingReqRaw(::grpc::ClientContext* context, const ::srvEbm::DataForwardingReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubmitDataForwardingReqRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Ebm::Stub::SubmitUeInactivityTimerReq(::grpc::ClientContext* context, const ::srvEbm::UeInactivityTimerReq& request, ::structure::ReqReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::srvEbm::UeInactivityTimerReq, ::structure::ReqReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubmitUeInactivityTimerReq_, context, request, response);
}

void Ebm::Stub::experimental_async::SubmitUeInactivityTimerReq(::grpc::ClientContext* context, const ::srvEbm::UeInactivityTimerReq* request, ::structure::ReqReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::srvEbm::UeInactivityTimerReq, ::structure::ReqReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitUeInactivityTimerReq_, context, request, response, std::move(f));
}

void Ebm::Stub::experimental_async::SubmitUeInactivityTimerReq(::grpc::ClientContext* context, const ::srvEbm::UeInactivityTimerReq* request, ::structure::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitUeInactivityTimerReq_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* Ebm::Stub::PrepareAsyncSubmitUeInactivityTimerReqRaw(::grpc::ClientContext* context, const ::srvEbm::UeInactivityTimerReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::structure::ReqReply>::Create(channel_.get(), cq, rpcmethod_SubmitUeInactivityTimerReq_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* Ebm::Stub::AsyncSubmitUeInactivityTimerReqRaw(::grpc::ClientContext* context, const ::srvEbm::UeInactivityTimerReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubmitUeInactivityTimerReqRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Ebm::Stub::SubmitIpAddressConfMsg(::grpc::ClientContext* context, const ::srvEbm::IpAddressConfigMsg& request, ::structure::ReqReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::srvEbm::IpAddressConfigMsg, ::structure::ReqReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubmitIpAddressConfMsg_, context, request, response);
}

void Ebm::Stub::experimental_async::SubmitIpAddressConfMsg(::grpc::ClientContext* context, const ::srvEbm::IpAddressConfigMsg* request, ::structure::ReqReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::srvEbm::IpAddressConfigMsg, ::structure::ReqReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitIpAddressConfMsg_, context, request, response, std::move(f));
}

void Ebm::Stub::experimental_async::SubmitIpAddressConfMsg(::grpc::ClientContext* context, const ::srvEbm::IpAddressConfigMsg* request, ::structure::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitIpAddressConfMsg_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* Ebm::Stub::PrepareAsyncSubmitIpAddressConfMsgRaw(::grpc::ClientContext* context, const ::srvEbm::IpAddressConfigMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::structure::ReqReply>::Create(channel_.get(), cq, rpcmethod_SubmitIpAddressConfMsg_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* Ebm::Stub::AsyncSubmitIpAddressConfMsgRaw(::grpc::ClientContext* context, const ::srvEbm::IpAddressConfigMsg& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubmitIpAddressConfMsgRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Ebm::Stub::SubmitPathManagementConfMsg(::grpc::ClientContext* context, const ::srvEbm::PathManagementConfigMsg& request, ::structure::ReqReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::srvEbm::PathManagementConfigMsg, ::structure::ReqReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubmitPathManagementConfMsg_, context, request, response);
}

void Ebm::Stub::experimental_async::SubmitPathManagementConfMsg(::grpc::ClientContext* context, const ::srvEbm::PathManagementConfigMsg* request, ::structure::ReqReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::srvEbm::PathManagementConfigMsg, ::structure::ReqReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitPathManagementConfMsg_, context, request, response, std::move(f));
}

void Ebm::Stub::experimental_async::SubmitPathManagementConfMsg(::grpc::ClientContext* context, const ::srvEbm::PathManagementConfigMsg* request, ::structure::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitPathManagementConfMsg_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* Ebm::Stub::PrepareAsyncSubmitPathManagementConfMsgRaw(::grpc::ClientContext* context, const ::srvEbm::PathManagementConfigMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::structure::ReqReply>::Create(channel_.get(), cq, rpcmethod_SubmitPathManagementConfMsg_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* Ebm::Stub::AsyncSubmitPathManagementConfMsgRaw(::grpc::ClientContext* context, const ::srvEbm::PathManagementConfigMsg& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubmitPathManagementConfMsgRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Ebm::Stub::SubmitAddPDCPConfigReq(::grpc::ClientContext* context, const ::srvEbm::AddPDCPConfigReq& request, ::structure::ReqReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::srvEbm::AddPDCPConfigReq, ::structure::ReqReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubmitAddPDCPConfigReq_, context, request, response);
}

void Ebm::Stub::experimental_async::SubmitAddPDCPConfigReq(::grpc::ClientContext* context, const ::srvEbm::AddPDCPConfigReq* request, ::structure::ReqReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::srvEbm::AddPDCPConfigReq, ::structure::ReqReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitAddPDCPConfigReq_, context, request, response, std::move(f));
}

void Ebm::Stub::experimental_async::SubmitAddPDCPConfigReq(::grpc::ClientContext* context, const ::srvEbm::AddPDCPConfigReq* request, ::structure::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitAddPDCPConfigReq_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* Ebm::Stub::PrepareAsyncSubmitAddPDCPConfigReqRaw(::grpc::ClientContext* context, const ::srvEbm::AddPDCPConfigReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::structure::ReqReply>::Create(channel_.get(), cq, rpcmethod_SubmitAddPDCPConfigReq_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* Ebm::Stub::AsyncSubmitAddPDCPConfigReqRaw(::grpc::ClientContext* context, const ::srvEbm::AddPDCPConfigReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubmitAddPDCPConfigReqRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Ebm::Stub::SubmitModifyPDCPConfigReq(::grpc::ClientContext* context, const ::srvEbm::ModifyPDCPConfigReq& request, ::structure::ReqReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::srvEbm::ModifyPDCPConfigReq, ::structure::ReqReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubmitModifyPDCPConfigReq_, context, request, response);
}

void Ebm::Stub::experimental_async::SubmitModifyPDCPConfigReq(::grpc::ClientContext* context, const ::srvEbm::ModifyPDCPConfigReq* request, ::structure::ReqReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::srvEbm::ModifyPDCPConfigReq, ::structure::ReqReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitModifyPDCPConfigReq_, context, request, response, std::move(f));
}

void Ebm::Stub::experimental_async::SubmitModifyPDCPConfigReq(::grpc::ClientContext* context, const ::srvEbm::ModifyPDCPConfigReq* request, ::structure::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitModifyPDCPConfigReq_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* Ebm::Stub::PrepareAsyncSubmitModifyPDCPConfigReqRaw(::grpc::ClientContext* context, const ::srvEbm::ModifyPDCPConfigReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::structure::ReqReply>::Create(channel_.get(), cq, rpcmethod_SubmitModifyPDCPConfigReq_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* Ebm::Stub::AsyncSubmitModifyPDCPConfigReqRaw(::grpc::ClientContext* context, const ::srvEbm::ModifyPDCPConfigReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubmitModifyPDCPConfigReqRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Ebm::Stub::SubmitTunnelStateChangeReq(::grpc::ClientContext* context, const ::srvEbm::TunnelStateChangeReq& request, ::structure::ReqReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::srvEbm::TunnelStateChangeReq, ::structure::ReqReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubmitTunnelStateChangeReq_, context, request, response);
}

void Ebm::Stub::experimental_async::SubmitTunnelStateChangeReq(::grpc::ClientContext* context, const ::srvEbm::TunnelStateChangeReq* request, ::structure::ReqReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::srvEbm::TunnelStateChangeReq, ::structure::ReqReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitTunnelStateChangeReq_, context, request, response, std::move(f));
}

void Ebm::Stub::experimental_async::SubmitTunnelStateChangeReq(::grpc::ClientContext* context, const ::srvEbm::TunnelStateChangeReq* request, ::structure::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitTunnelStateChangeReq_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* Ebm::Stub::PrepareAsyncSubmitTunnelStateChangeReqRaw(::grpc::ClientContext* context, const ::srvEbm::TunnelStateChangeReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::structure::ReqReply>::Create(channel_.get(), cq, rpcmethod_SubmitTunnelStateChangeReq_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::structure::ReqReply>* Ebm::Stub::AsyncSubmitTunnelStateChangeReqRaw(::grpc::ClientContext* context, const ::srvEbm::TunnelStateChangeReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubmitTunnelStateChangeReqRaw(context, request, cq);
  result->StartCall();
  return result;
}

Ebm::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Ebm_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Ebm::Service, ::srvEbm::SecurityConfigReq, ::structure::ReqReply>(
          [](Ebm::Service* service,
             ::grpc::ServerContext* ctx,
             const ::srvEbm::SecurityConfigReq* req,
             ::structure::ReqReply* resp) {
               return service->SubmitSecurityConfigReq(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Ebm_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Ebm::Service, ::srvEbm::CreateTunnelReq, ::structure::ReqReply>(
          [](Ebm::Service* service,
             ::grpc::ServerContext* ctx,
             const ::srvEbm::CreateTunnelReq* req,
             ::structure::ReqReply* resp) {
               return service->SubmitCreateTunnelReq(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Ebm_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Ebm::Service, ::srvEbm::ModifyTunnelReq, ::structure::ReqReply>(
          [](Ebm::Service* service,
             ::grpc::ServerContext* ctx,
             const ::srvEbm::ModifyTunnelReq* req,
             ::structure::ReqReply* resp) {
               return service->SubmitModifyTunnelReq(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Ebm_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Ebm::Service, ::srvEbm::DeleteTunnelReq, ::structure::ReqReply>(
          [](Ebm::Service* service,
             ::grpc::ServerContext* ctx,
             const ::srvEbm::DeleteTunnelReq* req,
             ::structure::ReqReply* resp) {
               return service->SubmitDeleteTunnelReq(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Ebm_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Ebm::Service, ::srvEbm::AddRbConfigReq, ::structure::ReqReply>(
          [](Ebm::Service* service,
             ::grpc::ServerContext* ctx,
             const ::srvEbm::AddRbConfigReq* req,
             ::structure::ReqReply* resp) {
               return service->SubmitAddRbConfigReq(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Ebm_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Ebm::Service, ::srvEbm::ModifyRbConfigReq, ::structure::ReqReply>(
          [](Ebm::Service* service,
             ::grpc::ServerContext* ctx,
             const ::srvEbm::ModifyRbConfigReq* req,
             ::structure::ReqReply* resp) {
               return service->SubmitModifyRbConfigReq(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Ebm_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Ebm::Service, ::srvEbm::DeleteRbConfigReq, ::structure::ReqReply>(
          [](Ebm::Service* service,
             ::grpc::ServerContext* ctx,
             const ::srvEbm::DeleteRbConfigReq* req,
             ::structure::ReqReply* resp) {
               return service->SubmitDeleteRbConfigReq(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Ebm_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Ebm::Service, ::srvEbm::PauseResumeDataReq, ::structure::ReqReply>(
          [](Ebm::Service* service,
             ::grpc::ServerContext* ctx,
             const ::srvEbm::PauseResumeDataReq* req,
             ::structure::ReqReply* resp) {
               return service->SubmitPauseResumeDataReq(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Ebm_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Ebm::Service, ::srvEbm::PDCPSduStatusReq, ::structure::ReqReply>(
          [](Ebm::Service* service,
             ::grpc::ServerContext* ctx,
             const ::srvEbm::PDCPSduStatusReq* req,
             ::structure::ReqReply* resp) {
               return service->SubmitPDCPSduStatusReq(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Ebm_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Ebm::Service, ::srvEbm::DataForwardingReq, ::structure::ReqReply>(
          [](Ebm::Service* service,
             ::grpc::ServerContext* ctx,
             const ::srvEbm::DataForwardingReq* req,
             ::structure::ReqReply* resp) {
               return service->SubmitDataForwardingReq(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Ebm_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Ebm::Service, ::srvEbm::UeInactivityTimerReq, ::structure::ReqReply>(
          [](Ebm::Service* service,
             ::grpc::ServerContext* ctx,
             const ::srvEbm::UeInactivityTimerReq* req,
             ::structure::ReqReply* resp) {
               return service->SubmitUeInactivityTimerReq(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Ebm_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Ebm::Service, ::srvEbm::IpAddressConfigMsg, ::structure::ReqReply>(
          [](Ebm::Service* service,
             ::grpc::ServerContext* ctx,
             const ::srvEbm::IpAddressConfigMsg* req,
             ::structure::ReqReply* resp) {
               return service->SubmitIpAddressConfMsg(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Ebm_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Ebm::Service, ::srvEbm::PathManagementConfigMsg, ::structure::ReqReply>(
          [](Ebm::Service* service,
             ::grpc::ServerContext* ctx,
             const ::srvEbm::PathManagementConfigMsg* req,
             ::structure::ReqReply* resp) {
               return service->SubmitPathManagementConfMsg(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Ebm_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Ebm::Service, ::srvEbm::AddPDCPConfigReq, ::structure::ReqReply>(
          [](Ebm::Service* service,
             ::grpc::ServerContext* ctx,
             const ::srvEbm::AddPDCPConfigReq* req,
             ::structure::ReqReply* resp) {
               return service->SubmitAddPDCPConfigReq(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Ebm_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Ebm::Service, ::srvEbm::ModifyPDCPConfigReq, ::structure::ReqReply>(
          [](Ebm::Service* service,
             ::grpc::ServerContext* ctx,
             const ::srvEbm::ModifyPDCPConfigReq* req,
             ::structure::ReqReply* resp) {
               return service->SubmitModifyPDCPConfigReq(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Ebm_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Ebm::Service, ::srvEbm::TunnelStateChangeReq, ::structure::ReqReply>(
          [](Ebm::Service* service,
             ::grpc::ServerContext* ctx,
             const ::srvEbm::TunnelStateChangeReq* req,
             ::structure::ReqReply* resp) {
               return service->SubmitTunnelStateChangeReq(ctx, req, resp);
             }, this)));
}

Ebm::Service::~Service() {
}

::grpc::Status Ebm::Service::SubmitSecurityConfigReq(::grpc::ServerContext* context, const ::srvEbm::SecurityConfigReq* request, ::structure::ReqReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Ebm::Service::SubmitCreateTunnelReq(::grpc::ServerContext* context, const ::srvEbm::CreateTunnelReq* request, ::structure::ReqReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Ebm::Service::SubmitModifyTunnelReq(::grpc::ServerContext* context, const ::srvEbm::ModifyTunnelReq* request, ::structure::ReqReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Ebm::Service::SubmitDeleteTunnelReq(::grpc::ServerContext* context, const ::srvEbm::DeleteTunnelReq* request, ::structure::ReqReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Ebm::Service::SubmitAddRbConfigReq(::grpc::ServerContext* context, const ::srvEbm::AddRbConfigReq* request, ::structure::ReqReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Ebm::Service::SubmitModifyRbConfigReq(::grpc::ServerContext* context, const ::srvEbm::ModifyRbConfigReq* request, ::structure::ReqReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Ebm::Service::SubmitDeleteRbConfigReq(::grpc::ServerContext* context, const ::srvEbm::DeleteRbConfigReq* request, ::structure::ReqReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Ebm::Service::SubmitPauseResumeDataReq(::grpc::ServerContext* context, const ::srvEbm::PauseResumeDataReq* request, ::structure::ReqReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Ebm::Service::SubmitPDCPSduStatusReq(::grpc::ServerContext* context, const ::srvEbm::PDCPSduStatusReq* request, ::structure::ReqReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Ebm::Service::SubmitDataForwardingReq(::grpc::ServerContext* context, const ::srvEbm::DataForwardingReq* request, ::structure::ReqReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Ebm::Service::SubmitUeInactivityTimerReq(::grpc::ServerContext* context, const ::srvEbm::UeInactivityTimerReq* request, ::structure::ReqReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Ebm::Service::SubmitIpAddressConfMsg(::grpc::ServerContext* context, const ::srvEbm::IpAddressConfigMsg* request, ::structure::ReqReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Ebm::Service::SubmitPathManagementConfMsg(::grpc::ServerContext* context, const ::srvEbm::PathManagementConfigMsg* request, ::structure::ReqReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Ebm::Service::SubmitAddPDCPConfigReq(::grpc::ServerContext* context, const ::srvEbm::AddPDCPConfigReq* request, ::structure::ReqReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Ebm::Service::SubmitModifyPDCPConfigReq(::grpc::ServerContext* context, const ::srvEbm::ModifyPDCPConfigReq* request, ::structure::ReqReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Ebm::Service::SubmitTunnelStateChangeReq(::grpc::ServerContext* context, const ::srvEbm::TunnelStateChangeReq* request, ::structure::ReqReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace srvEbm

