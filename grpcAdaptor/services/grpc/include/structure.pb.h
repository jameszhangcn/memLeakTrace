// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: structure.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_structure_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_structure_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "mhdr.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_structure_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_structure_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[28]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_structure_2eproto;
namespace structure {
class CpUpHdr;
class CpUpHdrDefaultTypeInternal;
extern CpUpHdrDefaultTypeInternal _CpUpHdr_default_instance_;
class CreateTnlCfmEnt;
class CreateTnlCfmEntDefaultTypeInternal;
extern CreateTnlCfmEntDefaultTypeInternal _CreateTnlCfmEnt_default_instance_;
class CuCpID;
class CuCpIDDefaultTypeInternal;
extern CuCpIDDefaultTypeInternal _CuCpID_default_instance_;
class CuUpID;
class CuUpIDDefaultTypeInternal;
extern CuUpIDDefaultTypeInternal _CuUpID_default_instance_;
class DelTnlCfmEnt;
class DelTnlCfmEntDefaultTypeInternal;
extern DelTnlCfmEntDefaultTypeInternal _DelTnlCfmEnt_default_instance_;
class DlSduStaInfo;
class DlSduStaInfoDefaultTypeInternal;
extern DlSduStaInfoDefaultTypeInternal _DlSduStaInfo_default_instance_;
class GtpTunnelId;
class GtpTunnelIdDefaultTypeInternal;
extern GtpTunnelIdDefaultTypeInternal _GtpTunnelId_default_instance_;
class GtpTunnelInfo;
class GtpTunnelInfoDefaultTypeInternal;
extern GtpTunnelInfoDefaultTypeInternal _GtpTunnelInfo_default_instance_;
class HeaderCompressionConfig;
class HeaderCompressionConfigDefaultTypeInternal;
extern HeaderCompressionConfigDefaultTypeInternal _HeaderCompressionConfig_default_instance_;
class ModTnlCfmEnt;
class ModTnlCfmEntDefaultTypeInternal;
extern ModTnlCfmEntDefaultTypeInternal _ModTnlCfmEnt_default_instance_;
class PDCPAddCfgCfmEnt;
class PDCPAddCfgCfmEntDefaultTypeInternal;
extern PDCPAddCfgCfmEntDefaultTypeInternal _PDCPAddCfgCfmEnt_default_instance_;
class PDCPAddCfgEnt;
class PDCPAddCfgEntDefaultTypeInternal;
extern PDCPAddCfgEntDefaultTypeInternal _PDCPAddCfgEnt_default_instance_;
class PDCPDCBearerInfo;
class PDCPDCBearerInfoDefaultTypeInternal;
extern PDCPDCBearerInfoDefaultTypeInternal _PDCPDCBearerInfo_default_instance_;
class PDCPDelCfgCfmEnt;
class PDCPDelCfgCfmEntDefaultTypeInternal;
extern PDCPDelCfgCfmEntDefaultTypeInternal _PDCPDelCfgCfmEnt_default_instance_;
class PDCPDelCfgEnt;
class PDCPDelCfgEntDefaultTypeInternal;
extern PDCPDelCfgEntDefaultTypeInternal _PDCPDelCfgEnt_default_instance_;
class PDCPHoInfo;
class PDCPHoInfoDefaultTypeInternal;
extern PDCPHoInfoDefaultTypeInternal _PDCPHoInfo_default_instance_;
class PDCPModCfgCfmEnt;
class PDCPModCfgCfmEntDefaultTypeInternal;
extern PDCPModCfgCfmEntDefaultTypeInternal _PDCPModCfgCfmEnt_default_instance_;
class PDCPModCfgEnt;
class PDCPModCfgEntDefaultTypeInternal;
extern PDCPModCfgEntDefaultTypeInternal _PDCPModCfgEnt_default_instance_;
class Pst;
class PstDefaultTypeInternal;
extern PstDefaultTypeInternal _Pst_default_instance_;
class ReqReply;
class ReqReplyDefaultTypeInternal;
extern ReqReplyDefaultTypeInternal _ReqReply_default_instance_;
class RlcInfo;
class RlcInfoDefaultTypeInternal;
extern RlcInfoDefaultTypeInternal _RlcInfo_default_instance_;
class SduStatusInfo;
class SduStatusInfoDefaultTypeInternal;
extern SduStatusInfoDefaultTypeInternal _SduStatusInfo_default_instance_;
class SecurityCfgCfm;
class SecurityCfgCfmDefaultTypeInternal;
extern SecurityCfgCfmDefaultTypeInternal _SecurityCfgCfm_default_instance_;
class SecurityConfig;
class SecurityConfigDefaultTypeInternal;
extern SecurityConfigDefaultTypeInternal _SecurityConfig_default_instance_;
class SuSpID;
class SuSpIDDefaultTypeInternal;
extern SuSpIDDefaultTypeInternal _SuSpID_default_instance_;
class TunnelStateInfo;
class TunnelStateInfoDefaultTypeInternal;
extern TunnelStateInfoDefaultTypeInternal _TunnelStateInfo_default_instance_;
class UeInfo;
class UeInfoDefaultTypeInternal;
extern UeInfoDefaultTypeInternal _UeInfo_default_instance_;
class UlSduStaInfo;
class UlSduStaInfoDefaultTypeInternal;
extern UlSduStaInfoDefaultTypeInternal _UlSduStaInfo_default_instance_;
}  // namespace structure
PROTOBUF_NAMESPACE_OPEN
template<> ::structure::CpUpHdr* Arena::CreateMaybeMessage<::structure::CpUpHdr>(Arena*);
template<> ::structure::CreateTnlCfmEnt* Arena::CreateMaybeMessage<::structure::CreateTnlCfmEnt>(Arena*);
template<> ::structure::CuCpID* Arena::CreateMaybeMessage<::structure::CuCpID>(Arena*);
template<> ::structure::CuUpID* Arena::CreateMaybeMessage<::structure::CuUpID>(Arena*);
template<> ::structure::DelTnlCfmEnt* Arena::CreateMaybeMessage<::structure::DelTnlCfmEnt>(Arena*);
template<> ::structure::DlSduStaInfo* Arena::CreateMaybeMessage<::structure::DlSduStaInfo>(Arena*);
template<> ::structure::GtpTunnelId* Arena::CreateMaybeMessage<::structure::GtpTunnelId>(Arena*);
template<> ::structure::GtpTunnelInfo* Arena::CreateMaybeMessage<::structure::GtpTunnelInfo>(Arena*);
template<> ::structure::HeaderCompressionConfig* Arena::CreateMaybeMessage<::structure::HeaderCompressionConfig>(Arena*);
template<> ::structure::ModTnlCfmEnt* Arena::CreateMaybeMessage<::structure::ModTnlCfmEnt>(Arena*);
template<> ::structure::PDCPAddCfgCfmEnt* Arena::CreateMaybeMessage<::structure::PDCPAddCfgCfmEnt>(Arena*);
template<> ::structure::PDCPAddCfgEnt* Arena::CreateMaybeMessage<::structure::PDCPAddCfgEnt>(Arena*);
template<> ::structure::PDCPDCBearerInfo* Arena::CreateMaybeMessage<::structure::PDCPDCBearerInfo>(Arena*);
template<> ::structure::PDCPDelCfgCfmEnt* Arena::CreateMaybeMessage<::structure::PDCPDelCfgCfmEnt>(Arena*);
template<> ::structure::PDCPDelCfgEnt* Arena::CreateMaybeMessage<::structure::PDCPDelCfgEnt>(Arena*);
template<> ::structure::PDCPHoInfo* Arena::CreateMaybeMessage<::structure::PDCPHoInfo>(Arena*);
template<> ::structure::PDCPModCfgCfmEnt* Arena::CreateMaybeMessage<::structure::PDCPModCfgCfmEnt>(Arena*);
template<> ::structure::PDCPModCfgEnt* Arena::CreateMaybeMessage<::structure::PDCPModCfgEnt>(Arena*);
template<> ::structure::Pst* Arena::CreateMaybeMessage<::structure::Pst>(Arena*);
template<> ::structure::ReqReply* Arena::CreateMaybeMessage<::structure::ReqReply>(Arena*);
template<> ::structure::RlcInfo* Arena::CreateMaybeMessage<::structure::RlcInfo>(Arena*);
template<> ::structure::SduStatusInfo* Arena::CreateMaybeMessage<::structure::SduStatusInfo>(Arena*);
template<> ::structure::SecurityCfgCfm* Arena::CreateMaybeMessage<::structure::SecurityCfgCfm>(Arena*);
template<> ::structure::SecurityConfig* Arena::CreateMaybeMessage<::structure::SecurityConfig>(Arena*);
template<> ::structure::SuSpID* Arena::CreateMaybeMessage<::structure::SuSpID>(Arena*);
template<> ::structure::TunnelStateInfo* Arena::CreateMaybeMessage<::structure::TunnelStateInfo>(Arena*);
template<> ::structure::UeInfo* Arena::CreateMaybeMessage<::structure::UeInfo>(Arena*);
template<> ::structure::UlSduStaInfo* Arena::CreateMaybeMessage<::structure::UlSduStaInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace structure {

enum TunnelType : int {
  DL = 0,
  UL = 1,
  Dl_DATA_FWD = 2,
  UL_DATA_FWD = 3,
  LIPA = 4,
  TunnelType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TunnelType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TunnelType_IsValid(int value);
constexpr TunnelType TunnelType_MIN = DL;
constexpr TunnelType TunnelType_MAX = LIPA;
constexpr int TunnelType_ARRAYSIZE = TunnelType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TunnelType_descriptor();
template<typename T>
inline const std::string& TunnelType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TunnelType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TunnelType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TunnelType_descriptor(), enum_t_value);
}
inline bool TunnelType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TunnelType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TunnelType>(
    TunnelType_descriptor(), name, value);
}
enum InterfaceType : int {
  INTERFACE_NONE = 0,
  S1 = 1,
  V1 = 2,
  X2 = 3,
  InterfaceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  InterfaceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool InterfaceType_IsValid(int value);
constexpr InterfaceType InterfaceType_MIN = INTERFACE_NONE;
constexpr InterfaceType InterfaceType_MAX = X2;
constexpr int InterfaceType_ARRAYSIZE = InterfaceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InterfaceType_descriptor();
template<typename T>
inline const std::string& InterfaceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, InterfaceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function InterfaceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    InterfaceType_descriptor(), enum_t_value);
}
inline bool InterfaceType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, InterfaceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<InterfaceType>(
    InterfaceType_descriptor(), name, value);
}
enum HandoverType : int {
  HO_TYPE_NONE = 0,
  S1_BASED = 1,
  X2_BASED = 2,
  INTRA_BBU = 3,
  INTRA_DU_BBU = 4,
  INTER_DU_BBU = 5,
  HandoverType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  HandoverType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool HandoverType_IsValid(int value);
constexpr HandoverType HandoverType_MIN = HO_TYPE_NONE;
constexpr HandoverType HandoverType_MAX = INTER_DU_BBU;
constexpr int HandoverType_ARRAYSIZE = HandoverType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HandoverType_descriptor();
template<typename T>
inline const std::string& HandoverType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HandoverType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HandoverType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HandoverType_descriptor(), enum_t_value);
}
inline bool HandoverType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, HandoverType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HandoverType>(
    HandoverType_descriptor(), name, value);
}
enum PDCPConfigFailureReason : int {
  REAS_NONE = 0,
  ENT_CREAT_FAIL = 1,
  INVALID_RLC_MODE = 5,
  CIPHER_ALGO_INVALID = 8,
  ENT_DEL_FAIL = 9,
  UE_DEL_FAIL = 10,
  REEST_FAIL = 11,
  COMP_ALGO_INVALID = 12,
  SAME_UEID = 15,
  SAME_RBID = 16,
  INVALID_RBID = 17,
  PDCPConfigFailureReason_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PDCPConfigFailureReason_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PDCPConfigFailureReason_IsValid(int value);
constexpr PDCPConfigFailureReason PDCPConfigFailureReason_MIN = REAS_NONE;
constexpr PDCPConfigFailureReason PDCPConfigFailureReason_MAX = INVALID_RBID;
constexpr int PDCPConfigFailureReason_ARRAYSIZE = PDCPConfigFailureReason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PDCPConfigFailureReason_descriptor();
template<typename T>
inline const std::string& PDCPConfigFailureReason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PDCPConfigFailureReason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PDCPConfigFailureReason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PDCPConfigFailureReason_descriptor(), enum_t_value);
}
inline bool PDCPConfigFailureReason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PDCPConfigFailureReason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PDCPConfigFailureReason>(
    PDCPConfigFailureReason_descriptor(), name, value);
}
enum PDCPConfigType : int {
  CFG_ADD = 0,
  CFG_MODIFY = 1,
  CFG_DELETE = 2,
  REESTABLISH = 3,
  CFG_DELETE_UE = 4,
  PDCPConfigType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PDCPConfigType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PDCPConfigType_IsValid(int value);
constexpr PDCPConfigType PDCPConfigType_MIN = CFG_ADD;
constexpr PDCPConfigType PDCPConfigType_MAX = CFG_DELETE_UE;
constexpr int PDCPConfigType_ARRAYSIZE = PDCPConfigType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PDCPConfigType_descriptor();
template<typename T>
inline const std::string& PDCPConfigType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PDCPConfigType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PDCPConfigType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PDCPConfigType_descriptor(), enum_t_value);
}
inline bool PDCPConfigType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PDCPConfigType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PDCPConfigType>(
    PDCPConfigType_descriptor(), name, value);
}
enum PDCPHoPres : int {
  HO_NOT_PRSNT = 0,
  HO_UL = 1,
  HO_DL = 2,
  PDCPHoPres_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PDCPHoPres_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PDCPHoPres_IsValid(int value);
constexpr PDCPHoPres PDCPHoPres_MIN = HO_NOT_PRSNT;
constexpr PDCPHoPres PDCPHoPres_MAX = HO_DL;
constexpr int PDCPHoPres_ARRAYSIZE = PDCPHoPres_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PDCPHoPres_descriptor();
template<typename T>
inline const std::string& PDCPHoPres_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PDCPHoPres>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PDCPHoPres_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PDCPHoPres_descriptor(), enum_t_value);
}
inline bool PDCPHoPres_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PDCPHoPres* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PDCPHoPres>(
    PDCPHoPres_descriptor(), name, value);
}
enum TunnelState : int {
  TNL_STATE_ERROR = 0,
  DRB_STATE_NORMAL = 1,
  DRB_STATE_BUFFERIN = 2,
  TNL_DL_FWDSTATE_NEW = 3,
  TunnelState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TunnelState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TunnelState_IsValid(int value);
constexpr TunnelState TunnelState_MIN = TNL_STATE_ERROR;
constexpr TunnelState TunnelState_MAX = TNL_DL_FWDSTATE_NEW;
constexpr int TunnelState_ARRAYSIZE = TunnelState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TunnelState_descriptor();
template<typename T>
inline const std::string& TunnelState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TunnelState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TunnelState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TunnelState_descriptor(), enum_t_value);
}
inline bool TunnelState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TunnelState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TunnelState>(
    TunnelState_descriptor(), name, value);
}
enum IpAddressAction : int {
  Action_add = 0,
  Action_del = 1,
  IpAddressAction_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  IpAddressAction_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool IpAddressAction_IsValid(int value);
constexpr IpAddressAction IpAddressAction_MIN = Action_add;
constexpr IpAddressAction IpAddressAction_MAX = Action_del;
constexpr int IpAddressAction_ARRAYSIZE = IpAddressAction_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IpAddressAction_descriptor();
template<typename T>
inline const std::string& IpAddressAction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IpAddressAction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IpAddressAction_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IpAddressAction_descriptor(), enum_t_value);
}
inline bool IpAddressAction_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, IpAddressAction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IpAddressAction>(
    IpAddressAction_descriptor(), name, value);
}
enum PathStatus : int {
  StatusActive = 0,
  StatusInactive = 1,
  StatusDeleted = 2,
  PathStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PathStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PathStatus_IsValid(int value);
constexpr PathStatus PathStatus_MIN = StatusActive;
constexpr PathStatus PathStatus_MAX = StatusDeleted;
constexpr int PathStatus_ARRAYSIZE = PathStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PathStatus_descriptor();
template<typename T>
inline const std::string& PathStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PathStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PathStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PathStatus_descriptor(), enum_t_value);
}
inline bool PathStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PathStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PathStatus>(
    PathStatus_descriptor(), name, value);
}
// ===================================================================

class Pst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:structure.Pst) */ {
 public:
  inline Pst() : Pst(nullptr) {}
  virtual ~Pst();

  Pst(const Pst& from);
  Pst(Pst&& from) noexcept
    : Pst() {
    *this = ::std::move(from);
  }

  inline Pst& operator=(const Pst& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pst& operator=(Pst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pst* internal_default_instance() {
    return reinterpret_cast<const Pst*>(
               &_Pst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Pst& a, Pst& b) {
    a.Swap(&b);
  }
  inline void Swap(Pst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pst* New() const final {
    return CreateMaybeMessage<Pst>(nullptr);
  }

  Pst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pst& from);
  void MergeFrom(const Pst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "structure.Pst";
  }
  protected:
  explicit Pst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_structure_2eproto);
    return ::descriptor_table_structure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDstProcIdFieldNumber = 10,
    kSrcProcIdFieldNumber = 11,
    kDstEntFieldNumber = 20,
    kDstInstFieldNumber = 21,
    kSrcEntFieldNumber = 30,
    kSrcInstFieldNumber = 31,
    kPriorFieldNumber = 40,
    kRouteFieldNumber = 45,
    kEventFieldNumber = 50,
    kRegionFieldNumber = 55,
    kPoolFieldNumber = 60,
    kSelectorFieldNumber = 65,
    kInterfaceVersionFieldNumber = 70,
    kCellIdFieldNumber = 75,
  };
  // uint32 dst_proc_id = 10;
  void clear_dst_proc_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 dst_proc_id() const;
  void set_dst_proc_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dst_proc_id() const;
  void _internal_set_dst_proc_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 src_proc_id = 11;
  void clear_src_proc_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 src_proc_id() const;
  void set_src_proc_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_src_proc_id() const;
  void _internal_set_src_proc_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 dst_ent = 20;
  void clear_dst_ent();
  ::PROTOBUF_NAMESPACE_ID::uint32 dst_ent() const;
  void set_dst_ent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dst_ent() const;
  void _internal_set_dst_ent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 dst_inst = 21;
  void clear_dst_inst();
  ::PROTOBUF_NAMESPACE_ID::uint32 dst_inst() const;
  void set_dst_inst(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dst_inst() const;
  void _internal_set_dst_inst(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 src_ent = 30;
  void clear_src_ent();
  ::PROTOBUF_NAMESPACE_ID::uint32 src_ent() const;
  void set_src_ent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_src_ent() const;
  void _internal_set_src_ent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 src_inst = 31;
  void clear_src_inst();
  ::PROTOBUF_NAMESPACE_ID::uint32 src_inst() const;
  void set_src_inst(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_src_inst() const;
  void _internal_set_src_inst(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 prior = 40;
  void clear_prior();
  ::PROTOBUF_NAMESPACE_ID::uint32 prior() const;
  void set_prior(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_prior() const;
  void _internal_set_prior(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 route = 45;
  void clear_route();
  ::PROTOBUF_NAMESPACE_ID::uint32 route() const;
  void set_route(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_route() const;
  void _internal_set_route(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 event = 50;
  void clear_event();
  ::PROTOBUF_NAMESPACE_ID::uint32 event() const;
  void set_event(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_event() const;
  void _internal_set_event(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 region = 55;
  void clear_region();
  ::PROTOBUF_NAMESPACE_ID::uint32 region() const;
  void set_region(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_region() const;
  void _internal_set_region(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 pool = 60;
  void clear_pool();
  ::PROTOBUF_NAMESPACE_ID::uint32 pool() const;
  void set_pool(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pool() const;
  void _internal_set_pool(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 selector = 65;
  void clear_selector();
  ::PROTOBUF_NAMESPACE_ID::uint32 selector() const;
  void set_selector(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_selector() const;
  void _internal_set_selector(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 interface_version = 70;
  void clear_interface_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 interface_version() const;
  void set_interface_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_interface_version() const;
  void _internal_set_interface_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 cell_id = 75;
  void clear_cell_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 cell_id() const;
  void set_cell_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cell_id() const;
  void _internal_set_cell_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:structure.Pst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dst_proc_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 src_proc_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dst_ent_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dst_inst_;
  ::PROTOBUF_NAMESPACE_ID::uint32 src_ent_;
  ::PROTOBUF_NAMESPACE_ID::uint32 src_inst_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prior_;
  ::PROTOBUF_NAMESPACE_ID::uint32 route_;
  ::PROTOBUF_NAMESPACE_ID::uint32 event_;
  ::PROTOBUF_NAMESPACE_ID::uint32 region_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pool_;
  ::PROTOBUF_NAMESPACE_ID::uint32 selector_;
  ::PROTOBUF_NAMESPACE_ID::uint32 interface_version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cell_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_structure_2eproto;
};
// -------------------------------------------------------------------

class CuCpID PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:structure.CuCpID) */ {
 public:
  inline CuCpID() : CuCpID(nullptr) {}
  virtual ~CuCpID();

  CuCpID(const CuCpID& from);
  CuCpID(CuCpID&& from) noexcept
    : CuCpID() {
    *this = ::std::move(from);
  }

  inline CuCpID& operator=(const CuCpID& from) {
    CopyFrom(from);
    return *this;
  }
  inline CuCpID& operator=(CuCpID&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CuCpID& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CuCpID* internal_default_instance() {
    return reinterpret_cast<const CuCpID*>(
               &_CuCpID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CuCpID& a, CuCpID& b) {
    a.Swap(&b);
  }
  inline void Swap(CuCpID* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CuCpID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CuCpID* New() const final {
    return CreateMaybeMessage<CuCpID>(nullptr);
  }

  CuCpID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CuCpID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CuCpID& from);
  void MergeFrom(const CuCpID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CuCpID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "structure.CuCpID";
  }
  protected:
  explicit CuCpID(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_structure_2eproto);
    return ::descriptor_table_structure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUeIdFieldNumber = 30,
    kCpIdFieldNumber = 10,
    kCellIdFieldNumber = 20,
  };
  // uint32 ue_id = 30;
  void clear_ue_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 ue_id() const;
  void set_ue_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ue_id() const;
  void _internal_set_ue_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 cp_id = 10;
  void clear_cp_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 cp_id() const;
  void set_cp_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cp_id() const;
  void _internal_set_cp_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 cell_id = 20;
  void clear_cell_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 cell_id() const;
  void set_cell_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cell_id() const;
  void _internal_set_cell_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:structure.CuCpID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ue_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cp_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cell_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_structure_2eproto;
};
// -------------------------------------------------------------------

class CuUpID PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:structure.CuUpID) */ {
 public:
  inline CuUpID() : CuUpID(nullptr) {}
  virtual ~CuUpID();

  CuUpID(const CuUpID& from);
  CuUpID(CuUpID&& from) noexcept
    : CuUpID() {
    *this = ::std::move(from);
  }

  inline CuUpID& operator=(const CuUpID& from) {
    CopyFrom(from);
    return *this;
  }
  inline CuUpID& operator=(CuUpID&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CuUpID& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CuUpID* internal_default_instance() {
    return reinterpret_cast<const CuUpID*>(
               &_CuUpID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CuUpID& a, CuUpID& b) {
    a.Swap(&b);
  }
  inline void Swap(CuUpID* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CuUpID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CuUpID* New() const final {
    return CreateMaybeMessage<CuUpID>(nullptr);
  }

  CuUpID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CuUpID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CuUpID& from);
  void MergeFrom(const CuUpID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CuUpID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "structure.CuUpID";
  }
  protected:
  explicit CuUpID(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_structure_2eproto);
    return ::descriptor_table_structure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpIdFieldNumber = 10,
    kCellIdFieldNumber = 20,
    kUeIdFieldNumber = 30,
  };
  // uint32 up_id = 10;
  void clear_up_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 up_id() const;
  void set_up_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_up_id() const;
  void _internal_set_up_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 cell_id = 20;
  void clear_cell_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 cell_id() const;
  void set_cell_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cell_id() const;
  void _internal_set_cell_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 ue_id = 30;
  void clear_ue_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 ue_id() const;
  void set_ue_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ue_id() const;
  void _internal_set_ue_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:structure.CuUpID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 up_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cell_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ue_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_structure_2eproto;
};
// -------------------------------------------------------------------

class SuSpID PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:structure.SuSpID) */ {
 public:
  inline SuSpID() : SuSpID(nullptr) {}
  virtual ~SuSpID();

  SuSpID(const SuSpID& from);
  SuSpID(SuSpID&& from) noexcept
    : SuSpID() {
    *this = ::std::move(from);
  }

  inline SuSpID& operator=(const SuSpID& from) {
    CopyFrom(from);
    return *this;
  }
  inline SuSpID& operator=(SuSpID&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SuSpID& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SuSpID* internal_default_instance() {
    return reinterpret_cast<const SuSpID*>(
               &_SuSpID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SuSpID& a, SuSpID& b) {
    a.Swap(&b);
  }
  inline void Swap(SuSpID* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SuSpID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SuSpID* New() const final {
    return CreateMaybeMessage<SuSpID>(nullptr);
  }

  SuSpID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SuSpID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SuSpID& from);
  void MergeFrom(const SuSpID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SuSpID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "structure.SuSpID";
  }
  protected:
  explicit SuSpID(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_structure_2eproto);
    return ::descriptor_table_structure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuIdFieldNumber = 10,
    kSpIdFieldNumber = 20,
  };
  // uint32 su_id = 10;
  void clear_su_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 su_id() const;
  void set_su_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_su_id() const;
  void _internal_set_su_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 sp_id = 20;
  void clear_sp_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 sp_id() const;
  void set_sp_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sp_id() const;
  void _internal_set_sp_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:structure.SuSpID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 su_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sp_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_structure_2eproto;
};
// -------------------------------------------------------------------

class CpUpHdr PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:structure.CpUpHdr) */ {
 public:
  inline CpUpHdr() : CpUpHdr(nullptr) {}
  virtual ~CpUpHdr();

  CpUpHdr(const CpUpHdr& from);
  CpUpHdr(CpUpHdr&& from) noexcept
    : CpUpHdr() {
    *this = ::std::move(from);
  }

  inline CpUpHdr& operator=(const CpUpHdr& from) {
    CopyFrom(from);
    return *this;
  }
  inline CpUpHdr& operator=(CpUpHdr&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CpUpHdr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CpUpHdr* internal_default_instance() {
    return reinterpret_cast<const CpUpHdr*>(
               &_CpUpHdr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CpUpHdr& a, CpUpHdr& b) {
    a.Swap(&b);
  }
  inline void Swap(CpUpHdr* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CpUpHdr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CpUpHdr* New() const final {
    return CreateMaybeMessage<CpUpHdr>(nullptr);
  }

  CpUpHdr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CpUpHdr>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CpUpHdr& from);
  void MergeFrom(const CpUpHdr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CpUpHdr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "structure.CpUpHdr";
  }
  protected:
  explicit CpUpHdr(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_structure_2eproto);
    return ::descriptor_table_structure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPstFieldNumber = 10,
    kCuCpIdFieldNumber = 20,
    kCuUpIdFieldNumber = 30,
    kSuSpIdFieldNumber = 40,
    kTransIdFieldNumber = 50,
  };
  // .structure.Pst pst = 10;
  bool has_pst() const;
  private:
  bool _internal_has_pst() const;
  public:
  void clear_pst();
  const ::structure::Pst& pst() const;
  ::structure::Pst* release_pst();
  ::structure::Pst* mutable_pst();
  void set_allocated_pst(::structure::Pst* pst);
  private:
  const ::structure::Pst& _internal_pst() const;
  ::structure::Pst* _internal_mutable_pst();
  public:
  void unsafe_arena_set_allocated_pst(
      ::structure::Pst* pst);
  ::structure::Pst* unsafe_arena_release_pst();

  // .structure.CuCpID cu_cp_id = 20;
  bool has_cu_cp_id() const;
  private:
  bool _internal_has_cu_cp_id() const;
  public:
  void clear_cu_cp_id();
  const ::structure::CuCpID& cu_cp_id() const;
  ::structure::CuCpID* release_cu_cp_id();
  ::structure::CuCpID* mutable_cu_cp_id();
  void set_allocated_cu_cp_id(::structure::CuCpID* cu_cp_id);
  private:
  const ::structure::CuCpID& _internal_cu_cp_id() const;
  ::structure::CuCpID* _internal_mutable_cu_cp_id();
  public:
  void unsafe_arena_set_allocated_cu_cp_id(
      ::structure::CuCpID* cu_cp_id);
  ::structure::CuCpID* unsafe_arena_release_cu_cp_id();

  // .structure.CuUpID cu_up_id = 30;
  bool has_cu_up_id() const;
  private:
  bool _internal_has_cu_up_id() const;
  public:
  void clear_cu_up_id();
  const ::structure::CuUpID& cu_up_id() const;
  ::structure::CuUpID* release_cu_up_id();
  ::structure::CuUpID* mutable_cu_up_id();
  void set_allocated_cu_up_id(::structure::CuUpID* cu_up_id);
  private:
  const ::structure::CuUpID& _internal_cu_up_id() const;
  ::structure::CuUpID* _internal_mutable_cu_up_id();
  public:
  void unsafe_arena_set_allocated_cu_up_id(
      ::structure::CuUpID* cu_up_id);
  ::structure::CuUpID* unsafe_arena_release_cu_up_id();

  // .structure.SuSpID su_sp_id = 40;
  bool has_su_sp_id() const;
  private:
  bool _internal_has_su_sp_id() const;
  public:
  void clear_su_sp_id();
  const ::structure::SuSpID& su_sp_id() const;
  ::structure::SuSpID* release_su_sp_id();
  ::structure::SuSpID* mutable_su_sp_id();
  void set_allocated_su_sp_id(::structure::SuSpID* su_sp_id);
  private:
  const ::structure::SuSpID& _internal_su_sp_id() const;
  ::structure::SuSpID* _internal_mutable_su_sp_id();
  public:
  void unsafe_arena_set_allocated_su_sp_id(
      ::structure::SuSpID* su_sp_id);
  ::structure::SuSpID* unsafe_arena_release_su_sp_id();

  // uint32 trans_id = 50;
  void clear_trans_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 trans_id() const;
  void set_trans_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_trans_id() const;
  void _internal_set_trans_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:structure.CpUpHdr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::structure::Pst* pst_;
  ::structure::CuCpID* cu_cp_id_;
  ::structure::CuUpID* cu_up_id_;
  ::structure::SuSpID* su_sp_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 trans_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_structure_2eproto;
};
// -------------------------------------------------------------------

class SecurityConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:structure.SecurityConfig) */ {
 public:
  inline SecurityConfig() : SecurityConfig(nullptr) {}
  virtual ~SecurityConfig();

  SecurityConfig(const SecurityConfig& from);
  SecurityConfig(SecurityConfig&& from) noexcept
    : SecurityConfig() {
    *this = ::std::move(from);
  }

  inline SecurityConfig& operator=(const SecurityConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecurityConfig& operator=(SecurityConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecurityConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecurityConfig* internal_default_instance() {
    return reinterpret_cast<const SecurityConfig*>(
               &_SecurityConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SecurityConfig& a, SecurityConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(SecurityConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecurityConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecurityConfig* New() const final {
    return CreateMaybeMessage<SecurityConfig>(nullptr);
  }

  SecurityConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecurityConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecurityConfig& from);
  void MergeFrom(const SecurityConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecurityConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "structure.SecurityConfig";
  }
  protected:
  explicit SecurityConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_structure_2eproto);
    return ::descriptor_table_structure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncryptionKeyFieldNumber = 20,
    kAlgorithmTypeFieldNumber = 10,
  };
  // repeated uint32 encryption_key = 20;
  int encryption_key_size() const;
  private:
  int _internal_encryption_key_size() const;
  public:
  void clear_encryption_key();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_encryption_key(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_encryption_key() const;
  void _internal_add_encryption_key(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_encryption_key();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 encryption_key(int index) const;
  void set_encryption_key(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_encryption_key(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      encryption_key() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_encryption_key();

  // uint32 algorithm_type = 10;
  void clear_algorithm_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 algorithm_type() const;
  void set_algorithm_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_algorithm_type() const;
  void _internal_set_algorithm_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:structure.SecurityConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > encryption_key_;
  mutable std::atomic<int> _encryption_key_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 algorithm_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_structure_2eproto;
};
// -------------------------------------------------------------------

class SecurityCfgCfm PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:structure.SecurityCfgCfm) */ {
 public:
  inline SecurityCfgCfm() : SecurityCfgCfm(nullptr) {}
  virtual ~SecurityCfgCfm();

  SecurityCfgCfm(const SecurityCfgCfm& from);
  SecurityCfgCfm(SecurityCfgCfm&& from) noexcept
    : SecurityCfgCfm() {
    *this = ::std::move(from);
  }

  inline SecurityCfgCfm& operator=(const SecurityCfgCfm& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecurityCfgCfm& operator=(SecurityCfgCfm&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecurityCfgCfm& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecurityCfgCfm* internal_default_instance() {
    return reinterpret_cast<const SecurityCfgCfm*>(
               &_SecurityCfgCfm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SecurityCfgCfm& a, SecurityCfgCfm& b) {
    a.Swap(&b);
  }
  inline void Swap(SecurityCfgCfm* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecurityCfgCfm* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecurityCfgCfm* New() const final {
    return CreateMaybeMessage<SecurityCfgCfm>(nullptr);
  }

  SecurityCfgCfm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecurityCfgCfm>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecurityCfgCfm& from);
  void MergeFrom(const SecurityCfgCfm& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecurityCfgCfm* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "structure.SecurityCfgCfm";
  }
  protected:
  explicit SecurityCfgCfm(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_structure_2eproto);
    return ::descriptor_table_structure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 40,
    kStatusFieldNumber = 30,
  };
  // string reason = 40;
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // bool status = 30;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:structure.SecurityCfgCfm)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_structure_2eproto;
};
// -------------------------------------------------------------------

class GtpTunnelId PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:structure.GtpTunnelId) */ {
 public:
  inline GtpTunnelId() : GtpTunnelId(nullptr) {}
  virtual ~GtpTunnelId();

  GtpTunnelId(const GtpTunnelId& from);
  GtpTunnelId(GtpTunnelId&& from) noexcept
    : GtpTunnelId() {
    *this = ::std::move(from);
  }

  inline GtpTunnelId& operator=(const GtpTunnelId& from) {
    CopyFrom(from);
    return *this;
  }
  inline GtpTunnelId& operator=(GtpTunnelId&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GtpTunnelId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GtpTunnelId* internal_default_instance() {
    return reinterpret_cast<const GtpTunnelId*>(
               &_GtpTunnelId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GtpTunnelId& a, GtpTunnelId& b) {
    a.Swap(&b);
  }
  inline void Swap(GtpTunnelId* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GtpTunnelId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GtpTunnelId* New() const final {
    return CreateMaybeMessage<GtpTunnelId>(nullptr);
  }

  GtpTunnelId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GtpTunnelId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GtpTunnelId& from);
  void MergeFrom(const GtpTunnelId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GtpTunnelId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "structure.GtpTunnelId";
  }
  protected:
  explicit GtpTunnelId(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_structure_2eproto);
    return ::descriptor_table_structure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellIdFieldNumber = 10,
    kCrntiFieldNumber = 20,
    kRbIdFieldNumber = 30,
    kTnlTypeFieldNumber = 40,
    kTnlPriorityFieldNumber = 50,
    kRbKeepIndicatorFieldNumber = 60,
  };
  // uint32 cell_id = 10;
  void clear_cell_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 cell_id() const;
  void set_cell_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cell_id() const;
  void _internal_set_cell_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 crnti = 20;
  void clear_crnti();
  ::PROTOBUF_NAMESPACE_ID::uint32 crnti() const;
  void set_crnti(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_crnti() const;
  void _internal_set_crnti(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 rb_id = 30;
  void clear_rb_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 rb_id() const;
  void set_rb_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rb_id() const;
  void _internal_set_rb_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .structure.TunnelType tnl_type = 40;
  void clear_tnl_type();
  ::structure::TunnelType tnl_type() const;
  void set_tnl_type(::structure::TunnelType value);
  private:
  ::structure::TunnelType _internal_tnl_type() const;
  void _internal_set_tnl_type(::structure::TunnelType value);
  public:

  // uint32 tnl_priority = 50;
  void clear_tnl_priority();
  ::PROTOBUF_NAMESPACE_ID::uint32 tnl_priority() const;
  void set_tnl_priority(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tnl_priority() const;
  void _internal_set_tnl_priority(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 rb_keep_indicator = 60;
  void clear_rb_keep_indicator();
  ::PROTOBUF_NAMESPACE_ID::uint32 rb_keep_indicator() const;
  void set_rb_keep_indicator(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rb_keep_indicator() const;
  void _internal_set_rb_keep_indicator(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:structure.GtpTunnelId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cell_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 crnti_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rb_id_;
  int tnl_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tnl_priority_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rb_keep_indicator_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_structure_2eproto;
};
// -------------------------------------------------------------------

class GtpTunnelInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:structure.GtpTunnelInfo) */ {
 public:
  inline GtpTunnelInfo() : GtpTunnelInfo(nullptr) {}
  virtual ~GtpTunnelInfo();

  GtpTunnelInfo(const GtpTunnelInfo& from);
  GtpTunnelInfo(GtpTunnelInfo&& from) noexcept
    : GtpTunnelInfo() {
    *this = ::std::move(from);
  }

  inline GtpTunnelInfo& operator=(const GtpTunnelInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GtpTunnelInfo& operator=(GtpTunnelInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GtpTunnelInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GtpTunnelInfo* internal_default_instance() {
    return reinterpret_cast<const GtpTunnelInfo*>(
               &_GtpTunnelInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GtpTunnelInfo& a, GtpTunnelInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GtpTunnelInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GtpTunnelInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GtpTunnelInfo* New() const final {
    return CreateMaybeMessage<GtpTunnelInfo>(nullptr);
  }

  GtpTunnelInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GtpTunnelInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GtpTunnelInfo& from);
  void MergeFrom(const GtpTunnelInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GtpTunnelInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "structure.GtpTunnelInfo";
  }
  protected:
  explicit GtpTunnelInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_structure_2eproto);
    return ::descriptor_table_structure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTnlIdFieldNumber = 10,
    kDstAddrFieldNumber = 30,
    kSrcAddrFieldNumber = 31,
    kDscpFieldNumber = 20,
    kTunnelTypeFieldNumber = 21,
    kInterfaceTypeFieldNumber = 22,
    kRemTeidFieldNumber = 40,
    kCorrIdFieldNumber = 41,
    kHoTypeFieldNumber = 51,
    kHoSrcEnodebFieldNumber = 50,
    kIsFullCfgFieldNumber = 60,
    kOldCellIdFieldNumber = 61,
    kOldCrntiFieldNumber = 62,
    kRlcModeFieldNumber = 63,
    kQciFieldNumber = 70,
    kEndCbrTypeFieldNumber = 71,
  };
  // .structure.GtpTunnelId tnl_id = 10;
  bool has_tnl_id() const;
  private:
  bool _internal_has_tnl_id() const;
  public:
  void clear_tnl_id();
  const ::structure::GtpTunnelId& tnl_id() const;
  ::structure::GtpTunnelId* release_tnl_id();
  ::structure::GtpTunnelId* mutable_tnl_id();
  void set_allocated_tnl_id(::structure::GtpTunnelId* tnl_id);
  private:
  const ::structure::GtpTunnelId& _internal_tnl_id() const;
  ::structure::GtpTunnelId* _internal_mutable_tnl_id();
  public:
  void unsafe_arena_set_allocated_tnl_id(
      ::structure::GtpTunnelId* tnl_id);
  ::structure::GtpTunnelId* unsafe_arena_release_tnl_id();

  // .common.IpAddress dst_addr = 30;
  bool has_dst_addr() const;
  private:
  bool _internal_has_dst_addr() const;
  public:
  void clear_dst_addr();
  const ::common::IpAddress& dst_addr() const;
  ::common::IpAddress* release_dst_addr();
  ::common::IpAddress* mutable_dst_addr();
  void set_allocated_dst_addr(::common::IpAddress* dst_addr);
  private:
  const ::common::IpAddress& _internal_dst_addr() const;
  ::common::IpAddress* _internal_mutable_dst_addr();
  public:
  void unsafe_arena_set_allocated_dst_addr(
      ::common::IpAddress* dst_addr);
  ::common::IpAddress* unsafe_arena_release_dst_addr();

  // .common.IpAddress src_addr = 31;
  bool has_src_addr() const;
  private:
  bool _internal_has_src_addr() const;
  public:
  void clear_src_addr();
  const ::common::IpAddress& src_addr() const;
  ::common::IpAddress* release_src_addr();
  ::common::IpAddress* mutable_src_addr();
  void set_allocated_src_addr(::common::IpAddress* src_addr);
  private:
  const ::common::IpAddress& _internal_src_addr() const;
  ::common::IpAddress* _internal_mutable_src_addr();
  public:
  void unsafe_arena_set_allocated_src_addr(
      ::common::IpAddress* src_addr);
  ::common::IpAddress* unsafe_arena_release_src_addr();

  // uint32 dscp = 20;
  void clear_dscp();
  ::PROTOBUF_NAMESPACE_ID::uint32 dscp() const;
  void set_dscp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dscp() const;
  void _internal_set_dscp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .structure.TunnelType tunnel_type = 21;
  void clear_tunnel_type();
  ::structure::TunnelType tunnel_type() const;
  void set_tunnel_type(::structure::TunnelType value);
  private:
  ::structure::TunnelType _internal_tunnel_type() const;
  void _internal_set_tunnel_type(::structure::TunnelType value);
  public:

  // .structure.InterfaceType interface_type = 22;
  void clear_interface_type();
  ::structure::InterfaceType interface_type() const;
  void set_interface_type(::structure::InterfaceType value);
  private:
  ::structure::InterfaceType _internal_interface_type() const;
  void _internal_set_interface_type(::structure::InterfaceType value);
  public:

  // uint32 rem_teid = 40;
  void clear_rem_teid();
  ::PROTOBUF_NAMESPACE_ID::uint32 rem_teid() const;
  void set_rem_teid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rem_teid() const;
  void _internal_set_rem_teid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 corr_id = 41;
  void clear_corr_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 corr_id() const;
  void set_corr_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_corr_id() const;
  void _internal_set_corr_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .structure.HandoverType ho_type = 51;
  void clear_ho_type();
  ::structure::HandoverType ho_type() const;
  void set_ho_type(::structure::HandoverType value);
  private:
  ::structure::HandoverType _internal_ho_type() const;
  void _internal_set_ho_type(::structure::HandoverType value);
  public:

  // bool ho_src_enodeb = 50;
  void clear_ho_src_enodeb();
  bool ho_src_enodeb() const;
  void set_ho_src_enodeb(bool value);
  private:
  bool _internal_ho_src_enodeb() const;
  void _internal_set_ho_src_enodeb(bool value);
  public:

  // bool is_fullCfg = 60;
  void clear_is_fullcfg();
  bool is_fullcfg() const;
  void set_is_fullcfg(bool value);
  private:
  bool _internal_is_fullcfg() const;
  void _internal_set_is_fullcfg(bool value);
  public:

  // uint32 old_cell_id = 61;
  void clear_old_cell_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 old_cell_id() const;
  void set_old_cell_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_old_cell_id() const;
  void _internal_set_old_cell_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 old_crnti = 62;
  void clear_old_crnti();
  ::PROTOBUF_NAMESPACE_ID::uint32 old_crnti() const;
  void set_old_crnti(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_old_crnti() const;
  void _internal_set_old_crnti(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 rlc_mode = 63;
  void clear_rlc_mode();
  ::PROTOBUF_NAMESPACE_ID::uint32 rlc_mode() const;
  void set_rlc_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rlc_mode() const;
  void _internal_set_rlc_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 qci = 70;
  void clear_qci();
  ::PROTOBUF_NAMESPACE_ID::uint32 qci() const;
  void set_qci(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_qci() const;
  void _internal_set_qci(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 end_cbr_type = 71;
  void clear_end_cbr_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 end_cbr_type() const;
  void set_end_cbr_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_end_cbr_type() const;
  void _internal_set_end_cbr_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:structure.GtpTunnelInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::structure::GtpTunnelId* tnl_id_;
  ::common::IpAddress* dst_addr_;
  ::common::IpAddress* src_addr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dscp_;
  int tunnel_type_;
  int interface_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rem_teid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 corr_id_;
  int ho_type_;
  bool ho_src_enodeb_;
  bool is_fullcfg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 old_cell_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 old_crnti_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rlc_mode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 qci_;
  ::PROTOBUF_NAMESPACE_ID::uint32 end_cbr_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_structure_2eproto;
};
// -------------------------------------------------------------------

class RlcInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:structure.RlcInfo) */ {
 public:
  inline RlcInfo() : RlcInfo(nullptr) {}
  virtual ~RlcInfo();

  RlcInfo(const RlcInfo& from);
  RlcInfo(RlcInfo&& from) noexcept
    : RlcInfo() {
    *this = ::std::move(from);
  }

  inline RlcInfo& operator=(const RlcInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RlcInfo& operator=(RlcInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RlcInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RlcInfo* internal_default_instance() {
    return reinterpret_cast<const RlcInfo*>(
               &_RlcInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(RlcInfo& a, RlcInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RlcInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RlcInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RlcInfo* New() const final {
    return CreateMaybeMessage<RlcInfo>(nullptr);
  }

  RlcInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RlcInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RlcInfo& from);
  void MergeFrom(const RlcInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RlcInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "structure.RlcInfo";
  }
  protected:
  explicit RlcInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_structure_2eproto);
    return ::descriptor_table_structure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDirectionFieldNumber = 10,
    kModeFieldNumber = 20,
    kStatusRepRequireFieldNumber = 30,
    kPdcpSnSizeFieldNumber = 40,
  };
  // uint32 direction = 10;
  void clear_direction();
  ::PROTOBUF_NAMESPACE_ID::uint32 direction() const;
  void set_direction(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_direction() const;
  void _internal_set_direction(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 mode = 20;
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::uint32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mode() const;
  void _internal_set_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool status_rep_require = 30;
  void clear_status_rep_require();
  bool status_rep_require() const;
  void set_status_rep_require(bool value);
  private:
  bool _internal_status_rep_require() const;
  void _internal_set_status_rep_require(bool value);
  public:

  // uint32 pdcp_sn_size = 40;
  void clear_pdcp_sn_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 pdcp_sn_size() const;
  void set_pdcp_sn_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pdcp_sn_size() const;
  void _internal_set_pdcp_sn_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:structure.RlcInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 direction_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mode_;
  bool status_rep_require_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pdcp_sn_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_structure_2eproto;
};
// -------------------------------------------------------------------

class HeaderCompressionConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:structure.HeaderCompressionConfig) */ {
 public:
  inline HeaderCompressionConfig() : HeaderCompressionConfig(nullptr) {}
  virtual ~HeaderCompressionConfig();

  HeaderCompressionConfig(const HeaderCompressionConfig& from);
  HeaderCompressionConfig(HeaderCompressionConfig&& from) noexcept
    : HeaderCompressionConfig() {
    *this = ::std::move(from);
  }

  inline HeaderCompressionConfig& operator=(const HeaderCompressionConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeaderCompressionConfig& operator=(HeaderCompressionConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HeaderCompressionConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HeaderCompressionConfig* internal_default_instance() {
    return reinterpret_cast<const HeaderCompressionConfig*>(
               &_HeaderCompressionConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(HeaderCompressionConfig& a, HeaderCompressionConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(HeaderCompressionConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeaderCompressionConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HeaderCompressionConfig* New() const final {
    return CreateMaybeMessage<HeaderCompressionConfig>(nullptr);
  }

  HeaderCompressionConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HeaderCompressionConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HeaderCompressionConfig& from);
  void MergeFrom(const HeaderCompressionConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeaderCompressionConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "structure.HeaderCompressionConfig";
  }
  protected:
  explicit HeaderCompressionConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_structure_2eproto);
    return ::descriptor_table_structure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProfileListFieldNumber = 30,
    kHdrCompUsedFieldNumber = 10,
    kMaxCidFieldNumber = 20,
  };
  // repeated uint32 profile_list = 30;
  int profile_list_size() const;
  private:
  int _internal_profile_list_size() const;
  public:
  void clear_profile_list();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_profile_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_profile_list() const;
  void _internal_add_profile_list(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_profile_list();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 profile_list(int index) const;
  void set_profile_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_profile_list(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      profile_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_profile_list();

  // bool hdr_comp_used = 10;
  void clear_hdr_comp_used();
  bool hdr_comp_used() const;
  void set_hdr_comp_used(bool value);
  private:
  bool _internal_hdr_comp_used() const;
  void _internal_set_hdr_comp_used(bool value);
  public:

  // uint32 max_cid = 20;
  void clear_max_cid();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_cid() const;
  void set_max_cid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_cid() const;
  void _internal_set_max_cid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:structure.HeaderCompressionConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > profile_list_;
  mutable std::atomic<int> _profile_list_cached_byte_size_;
  bool hdr_comp_used_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_cid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_structure_2eproto;
};
// -------------------------------------------------------------------

class PDCPHoInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:structure.PDCPHoInfo) */ {
 public:
  inline PDCPHoInfo() : PDCPHoInfo(nullptr) {}
  virtual ~PDCPHoInfo();

  PDCPHoInfo(const PDCPHoInfo& from);
  PDCPHoInfo(PDCPHoInfo&& from) noexcept
    : PDCPHoInfo() {
    *this = ::std::move(from);
  }

  inline PDCPHoInfo& operator=(const PDCPHoInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PDCPHoInfo& operator=(PDCPHoInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PDCPHoInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PDCPHoInfo* internal_default_instance() {
    return reinterpret_cast<const PDCPHoInfo*>(
               &_PDCPHoInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PDCPHoInfo& a, PDCPHoInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PDCPHoInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PDCPHoInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PDCPHoInfo* New() const final {
    return CreateMaybeMessage<PDCPHoInfo>(nullptr);
  }

  PDCPHoInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PDCPHoInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PDCPHoInfo& from);
  void MergeFrom(const PDCPHoInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PDCPHoInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "structure.PDCPHoInfo";
  }
  protected:
  explicit PDCPHoInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_structure_2eproto);
    return ::descriptor_table_structure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBitMapFieldNumber = 60,
    kNumBitsFieldNumber = 50,
    kIsHoPresFieldNumber = 10,
    kSnLenFieldNumber = 20,
    kDlCountFieldNumber = 30,
    kUlCountFieldNumber = 40,
  };
  // repeated uint32 bit_map = 60;
  int bit_map_size() const;
  private:
  int _internal_bit_map_size() const;
  public:
  void clear_bit_map();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bit_map(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_bit_map() const;
  void _internal_add_bit_map(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_bit_map();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 bit_map(int index) const;
  void set_bit_map(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_bit_map(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      bit_map() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_bit_map();

  // uint32 num_bits = 50;
  void clear_num_bits();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_bits() const;
  void set_num_bits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_bits() const;
  void _internal_set_num_bits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .structure.PDCPHoPres is_ho_pres = 10;
  void clear_is_ho_pres();
  ::structure::PDCPHoPres is_ho_pres() const;
  void set_is_ho_pres(::structure::PDCPHoPres value);
  private:
  ::structure::PDCPHoPres _internal_is_ho_pres() const;
  void _internal_set_is_ho_pres(::structure::PDCPHoPres value);
  public:

  // uint32 sn_len = 20;
  void clear_sn_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 sn_len() const;
  void set_sn_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sn_len() const;
  void _internal_set_sn_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 dl_count = 30;
  void clear_dl_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 dl_count() const;
  void set_dl_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dl_count() const;
  void _internal_set_dl_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 ul_count = 40;
  void clear_ul_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 ul_count() const;
  void set_ul_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ul_count() const;
  void _internal_set_ul_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:structure.PDCPHoInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > bit_map_;
  mutable std::atomic<int> _bit_map_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_bits_;
  int is_ho_pres_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sn_len_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dl_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ul_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_structure_2eproto;
};
// -------------------------------------------------------------------

class PDCPDCBearerInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:structure.PDCPDCBearerInfo) */ {
 public:
  inline PDCPDCBearerInfo() : PDCPDCBearerInfo(nullptr) {}
  virtual ~PDCPDCBearerInfo();

  PDCPDCBearerInfo(const PDCPDCBearerInfo& from);
  PDCPDCBearerInfo(PDCPDCBearerInfo&& from) noexcept
    : PDCPDCBearerInfo() {
    *this = ::std::move(from);
  }

  inline PDCPDCBearerInfo& operator=(const PDCPDCBearerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PDCPDCBearerInfo& operator=(PDCPDCBearerInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PDCPDCBearerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PDCPDCBearerInfo* internal_default_instance() {
    return reinterpret_cast<const PDCPDCBearerInfo*>(
               &_PDCPDCBearerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(PDCPDCBearerInfo& a, PDCPDCBearerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PDCPDCBearerInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PDCPDCBearerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PDCPDCBearerInfo* New() const final {
    return CreateMaybeMessage<PDCPDCBearerInfo>(nullptr);
  }

  PDCPDCBearerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PDCPDCBearerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PDCPDCBearerInfo& from);
  void MergeFrom(const PDCPDCBearerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PDCPDCBearerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "structure.PDCPDCBearerInfo";
  }
  protected:
  explicit PDCPDCBearerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_structure_2eproto);
    return ::descriptor_table_structure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSplitRatioFieldNumber = 30,
    kSnLenFieldNumber = 10,
    kBearerTypeFieldNumber = 20,
  };
  // uint32 split_ratio = 30;
  void clear_split_ratio();
  ::PROTOBUF_NAMESPACE_ID::uint32 split_ratio() const;
  void set_split_ratio(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_split_ratio() const;
  void _internal_set_split_ratio(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 sn_len = 10;
  void clear_sn_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 sn_len() const;
  void set_sn_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sn_len() const;
  void _internal_set_sn_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 bearer_type = 20;
  void clear_bearer_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 bearer_type() const;
  void set_bearer_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bearer_type() const;
  void _internal_set_bearer_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:structure.PDCPDCBearerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 split_ratio_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sn_len_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bearer_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_structure_2eproto;
};
// -------------------------------------------------------------------

class PDCPAddCfgEnt PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:structure.PDCPAddCfgEnt) */ {
 public:
  inline PDCPAddCfgEnt() : PDCPAddCfgEnt(nullptr) {}
  virtual ~PDCPAddCfgEnt();

  PDCPAddCfgEnt(const PDCPAddCfgEnt& from);
  PDCPAddCfgEnt(PDCPAddCfgEnt&& from) noexcept
    : PDCPAddCfgEnt() {
    *this = ::std::move(from);
  }

  inline PDCPAddCfgEnt& operator=(const PDCPAddCfgEnt& from) {
    CopyFrom(from);
    return *this;
  }
  inline PDCPAddCfgEnt& operator=(PDCPAddCfgEnt&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PDCPAddCfgEnt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PDCPAddCfgEnt* internal_default_instance() {
    return reinterpret_cast<const PDCPAddCfgEnt*>(
               &_PDCPAddCfgEnt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(PDCPAddCfgEnt& a, PDCPAddCfgEnt& b) {
    a.Swap(&b);
  }
  inline void Swap(PDCPAddCfgEnt* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PDCPAddCfgEnt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PDCPAddCfgEnt* New() const final {
    return CreateMaybeMessage<PDCPAddCfgEnt>(nullptr);
  }

  PDCPAddCfgEnt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PDCPAddCfgEnt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PDCPAddCfgEnt& from);
  void MergeFrom(const PDCPAddCfgEnt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PDCPAddCfgEnt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "structure.PDCPAddCfgEnt";
  }
  protected:
  explicit PDCPAddCfgEnt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_structure_2eproto);
    return ::descriptor_table_structure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRlcInfoFieldNumber = 30,
    kHdrCmpCfgFieldNumber = 60,
    kRbIdFieldNumber = 10,
    kQciFieldNumber = 20,
    kDiscardTimerFieldNumber = 40,
    kReOrdTmrValFieldNumber = 50,
  };
  // .structure.RlcInfo rlc_info = 30;
  bool has_rlc_info() const;
  private:
  bool _internal_has_rlc_info() const;
  public:
  void clear_rlc_info();
  const ::structure::RlcInfo& rlc_info() const;
  ::structure::RlcInfo* release_rlc_info();
  ::structure::RlcInfo* mutable_rlc_info();
  void set_allocated_rlc_info(::structure::RlcInfo* rlc_info);
  private:
  const ::structure::RlcInfo& _internal_rlc_info() const;
  ::structure::RlcInfo* _internal_mutable_rlc_info();
  public:
  void unsafe_arena_set_allocated_rlc_info(
      ::structure::RlcInfo* rlc_info);
  ::structure::RlcInfo* unsafe_arena_release_rlc_info();

  // .structure.HeaderCompressionConfig hdr_cmp_cfg = 60;
  bool has_hdr_cmp_cfg() const;
  private:
  bool _internal_has_hdr_cmp_cfg() const;
  public:
  void clear_hdr_cmp_cfg();
  const ::structure::HeaderCompressionConfig& hdr_cmp_cfg() const;
  ::structure::HeaderCompressionConfig* release_hdr_cmp_cfg();
  ::structure::HeaderCompressionConfig* mutable_hdr_cmp_cfg();
  void set_allocated_hdr_cmp_cfg(::structure::HeaderCompressionConfig* hdr_cmp_cfg);
  private:
  const ::structure::HeaderCompressionConfig& _internal_hdr_cmp_cfg() const;
  ::structure::HeaderCompressionConfig* _internal_mutable_hdr_cmp_cfg();
  public:
  void unsafe_arena_set_allocated_hdr_cmp_cfg(
      ::structure::HeaderCompressionConfig* hdr_cmp_cfg);
  ::structure::HeaderCompressionConfig* unsafe_arena_release_hdr_cmp_cfg();

  // uint32 rb_id = 10;
  void clear_rb_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 rb_id() const;
  void set_rb_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rb_id() const;
  void _internal_set_rb_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 qci = 20;
  void clear_qci();
  ::PROTOBUF_NAMESPACE_ID::uint32 qci() const;
  void set_qci(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_qci() const;
  void _internal_set_qci(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 discard_timer = 40;
  void clear_discard_timer();
  ::PROTOBUF_NAMESPACE_ID::uint32 discard_timer() const;
  void set_discard_timer(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_discard_timer() const;
  void _internal_set_discard_timer(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 re_ord_tmr_val = 50;
  void clear_re_ord_tmr_val();
  ::PROTOBUF_NAMESPACE_ID::uint32 re_ord_tmr_val() const;
  void set_re_ord_tmr_val(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_re_ord_tmr_val() const;
  void _internal_set_re_ord_tmr_val(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:structure.PDCPAddCfgEnt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::structure::RlcInfo* rlc_info_;
  ::structure::HeaderCompressionConfig* hdr_cmp_cfg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rb_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 qci_;
  ::PROTOBUF_NAMESPACE_ID::uint32 discard_timer_;
  ::PROTOBUF_NAMESPACE_ID::uint32 re_ord_tmr_val_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_structure_2eproto;
};
// -------------------------------------------------------------------

class PDCPModCfgEnt PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:structure.PDCPModCfgEnt) */ {
 public:
  inline PDCPModCfgEnt() : PDCPModCfgEnt(nullptr) {}
  virtual ~PDCPModCfgEnt();

  PDCPModCfgEnt(const PDCPModCfgEnt& from);
  PDCPModCfgEnt(PDCPModCfgEnt&& from) noexcept
    : PDCPModCfgEnt() {
    *this = ::std::move(from);
  }

  inline PDCPModCfgEnt& operator=(const PDCPModCfgEnt& from) {
    CopyFrom(from);
    return *this;
  }
  inline PDCPModCfgEnt& operator=(PDCPModCfgEnt&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PDCPModCfgEnt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PDCPModCfgEnt* internal_default_instance() {
    return reinterpret_cast<const PDCPModCfgEnt*>(
               &_PDCPModCfgEnt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(PDCPModCfgEnt& a, PDCPModCfgEnt& b) {
    a.Swap(&b);
  }
  inline void Swap(PDCPModCfgEnt* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PDCPModCfgEnt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PDCPModCfgEnt* New() const final {
    return CreateMaybeMessage<PDCPModCfgEnt>(nullptr);
  }

  PDCPModCfgEnt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PDCPModCfgEnt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PDCPModCfgEnt& from);
  void MergeFrom(const PDCPModCfgEnt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PDCPModCfgEnt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "structure.PDCPModCfgEnt";
  }
  protected:
  explicit PDCPModCfgEnt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_structure_2eproto);
    return ::descriptor_table_structure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHdrCmpCfgFieldNumber = 30,
    kHoInfoFieldNumber = 40,
    kDcBearerInfoFieldNumber = 60,
    kReOrdTmrValFieldNumber = 50,
    kRbIdFieldNumber = 10,
    kBitFlagFieldNumber = 20,
  };
  // .structure.HeaderCompressionConfig hdr_cmp_cfg = 30;
  bool has_hdr_cmp_cfg() const;
  private:
  bool _internal_has_hdr_cmp_cfg() const;
  public:
  void clear_hdr_cmp_cfg();
  const ::structure::HeaderCompressionConfig& hdr_cmp_cfg() const;
  ::structure::HeaderCompressionConfig* release_hdr_cmp_cfg();
  ::structure::HeaderCompressionConfig* mutable_hdr_cmp_cfg();
  void set_allocated_hdr_cmp_cfg(::structure::HeaderCompressionConfig* hdr_cmp_cfg);
  private:
  const ::structure::HeaderCompressionConfig& _internal_hdr_cmp_cfg() const;
  ::structure::HeaderCompressionConfig* _internal_mutable_hdr_cmp_cfg();
  public:
  void unsafe_arena_set_allocated_hdr_cmp_cfg(
      ::structure::HeaderCompressionConfig* hdr_cmp_cfg);
  ::structure::HeaderCompressionConfig* unsafe_arena_release_hdr_cmp_cfg();

  // .structure.PDCPHoInfo ho_info = 40;
  bool has_ho_info() const;
  private:
  bool _internal_has_ho_info() const;
  public:
  void clear_ho_info();
  const ::structure::PDCPHoInfo& ho_info() const;
  ::structure::PDCPHoInfo* release_ho_info();
  ::structure::PDCPHoInfo* mutable_ho_info();
  void set_allocated_ho_info(::structure::PDCPHoInfo* ho_info);
  private:
  const ::structure::PDCPHoInfo& _internal_ho_info() const;
  ::structure::PDCPHoInfo* _internal_mutable_ho_info();
  public:
  void unsafe_arena_set_allocated_ho_info(
      ::structure::PDCPHoInfo* ho_info);
  ::structure::PDCPHoInfo* unsafe_arena_release_ho_info();

  // .structure.PDCPDCBearerInfo dc_bearer_info = 60;
  bool has_dc_bearer_info() const;
  private:
  bool _internal_has_dc_bearer_info() const;
  public:
  void clear_dc_bearer_info();
  const ::structure::PDCPDCBearerInfo& dc_bearer_info() const;
  ::structure::PDCPDCBearerInfo* release_dc_bearer_info();
  ::structure::PDCPDCBearerInfo* mutable_dc_bearer_info();
  void set_allocated_dc_bearer_info(::structure::PDCPDCBearerInfo* dc_bearer_info);
  private:
  const ::structure::PDCPDCBearerInfo& _internal_dc_bearer_info() const;
  ::structure::PDCPDCBearerInfo* _internal_mutable_dc_bearer_info();
  public:
  void unsafe_arena_set_allocated_dc_bearer_info(
      ::structure::PDCPDCBearerInfo* dc_bearer_info);
  ::structure::PDCPDCBearerInfo* unsafe_arena_release_dc_bearer_info();

  // uint32 re_ord_tmr_val = 50;
  void clear_re_ord_tmr_val();
  ::PROTOBUF_NAMESPACE_ID::uint32 re_ord_tmr_val() const;
  void set_re_ord_tmr_val(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_re_ord_tmr_val() const;
  void _internal_set_re_ord_tmr_val(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 rb_id = 10;
  void clear_rb_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 rb_id() const;
  void set_rb_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rb_id() const;
  void _internal_set_rb_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 bit_flag = 20;
  void clear_bit_flag();
  ::PROTOBUF_NAMESPACE_ID::uint32 bit_flag() const;
  void set_bit_flag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bit_flag() const;
  void _internal_set_bit_flag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:structure.PDCPModCfgEnt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::structure::HeaderCompressionConfig* hdr_cmp_cfg_;
  ::structure::PDCPHoInfo* ho_info_;
  ::structure::PDCPDCBearerInfo* dc_bearer_info_;
  ::PROTOBUF_NAMESPACE_ID::uint32 re_ord_tmr_val_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rb_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bit_flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_structure_2eproto;
};
// -------------------------------------------------------------------

class PDCPDelCfgEnt PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:structure.PDCPDelCfgEnt) */ {
 public:
  inline PDCPDelCfgEnt() : PDCPDelCfgEnt(nullptr) {}
  virtual ~PDCPDelCfgEnt();

  PDCPDelCfgEnt(const PDCPDelCfgEnt& from);
  PDCPDelCfgEnt(PDCPDelCfgEnt&& from) noexcept
    : PDCPDelCfgEnt() {
    *this = ::std::move(from);
  }

  inline PDCPDelCfgEnt& operator=(const PDCPDelCfgEnt& from) {
    CopyFrom(from);
    return *this;
  }
  inline PDCPDelCfgEnt& operator=(PDCPDelCfgEnt&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PDCPDelCfgEnt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PDCPDelCfgEnt* internal_default_instance() {
    return reinterpret_cast<const PDCPDelCfgEnt*>(
               &_PDCPDelCfgEnt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(PDCPDelCfgEnt& a, PDCPDelCfgEnt& b) {
    a.Swap(&b);
  }
  inline void Swap(PDCPDelCfgEnt* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PDCPDelCfgEnt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PDCPDelCfgEnt* New() const final {
    return CreateMaybeMessage<PDCPDelCfgEnt>(nullptr);
  }

  PDCPDelCfgEnt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PDCPDelCfgEnt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PDCPDelCfgEnt& from);
  void MergeFrom(const PDCPDelCfgEnt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PDCPDelCfgEnt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "structure.PDCPDelCfgEnt";
  }
  protected:
  explicit PDCPDelCfgEnt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_structure_2eproto);
    return ::descriptor_table_structure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRbIdFieldNumber = 10,
  };
  // uint32 rb_id = 10;
  void clear_rb_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 rb_id() const;
  void set_rb_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rb_id() const;
  void _internal_set_rb_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:structure.PDCPDelCfgEnt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rb_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_structure_2eproto;
};
// -------------------------------------------------------------------

class CreateTnlCfmEnt PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:structure.CreateTnlCfmEnt) */ {
 public:
  inline CreateTnlCfmEnt() : CreateTnlCfmEnt(nullptr) {}
  virtual ~CreateTnlCfmEnt();

  CreateTnlCfmEnt(const CreateTnlCfmEnt& from);
  CreateTnlCfmEnt(CreateTnlCfmEnt&& from) noexcept
    : CreateTnlCfmEnt() {
    *this = ::std::move(from);
  }

  inline CreateTnlCfmEnt& operator=(const CreateTnlCfmEnt& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateTnlCfmEnt& operator=(CreateTnlCfmEnt&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateTnlCfmEnt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateTnlCfmEnt* internal_default_instance() {
    return reinterpret_cast<const CreateTnlCfmEnt*>(
               &_CreateTnlCfmEnt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CreateTnlCfmEnt& a, CreateTnlCfmEnt& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateTnlCfmEnt* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateTnlCfmEnt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateTnlCfmEnt* New() const final {
    return CreateMaybeMessage<CreateTnlCfmEnt>(nullptr);
  }

  CreateTnlCfmEnt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateTnlCfmEnt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateTnlCfmEnt& from);
  void MergeFrom(const CreateTnlCfmEnt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTnlCfmEnt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "structure.CreateTnlCfmEnt";
  }
  protected:
  explicit CreateTnlCfmEnt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_structure_2eproto);
    return ::descriptor_table_structure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGtpTunnelIdFieldNumber = 25,
    kDstAddrFieldNumber = 26,
    kSrcAddrFieldNumber = 27,
    kInterfaceTypeFieldNumber = 24,
    kLocalGtpTeidFieldNumber = 30,
    kRemoteGtpTeidFieldNumber = 35,
    kOldCellIdFieldNumber = 36,
    kOldCrntiFieldNumber = 37,
    kStatusFieldNumber = 40,
  };
  // .structure.GtpTunnelId gtp_tunnel_id = 25;
  bool has_gtp_tunnel_id() const;
  private:
  bool _internal_has_gtp_tunnel_id() const;
  public:
  void clear_gtp_tunnel_id();
  const ::structure::GtpTunnelId& gtp_tunnel_id() const;
  ::structure::GtpTunnelId* release_gtp_tunnel_id();
  ::structure::GtpTunnelId* mutable_gtp_tunnel_id();
  void set_allocated_gtp_tunnel_id(::structure::GtpTunnelId* gtp_tunnel_id);
  private:
  const ::structure::GtpTunnelId& _internal_gtp_tunnel_id() const;
  ::structure::GtpTunnelId* _internal_mutable_gtp_tunnel_id();
  public:
  void unsafe_arena_set_allocated_gtp_tunnel_id(
      ::structure::GtpTunnelId* gtp_tunnel_id);
  ::structure::GtpTunnelId* unsafe_arena_release_gtp_tunnel_id();

  // .common.IpAddress dst_addr = 26;
  bool has_dst_addr() const;
  private:
  bool _internal_has_dst_addr() const;
  public:
  void clear_dst_addr();
  const ::common::IpAddress& dst_addr() const;
  ::common::IpAddress* release_dst_addr();
  ::common::IpAddress* mutable_dst_addr();
  void set_allocated_dst_addr(::common::IpAddress* dst_addr);
  private:
  const ::common::IpAddress& _internal_dst_addr() const;
  ::common::IpAddress* _internal_mutable_dst_addr();
  public:
  void unsafe_arena_set_allocated_dst_addr(
      ::common::IpAddress* dst_addr);
  ::common::IpAddress* unsafe_arena_release_dst_addr();

  // .common.IpAddress src_addr = 27;
  bool has_src_addr() const;
  private:
  bool _internal_has_src_addr() const;
  public:
  void clear_src_addr();
  const ::common::IpAddress& src_addr() const;
  ::common::IpAddress* release_src_addr();
  ::common::IpAddress* mutable_src_addr();
  void set_allocated_src_addr(::common::IpAddress* src_addr);
  private:
  const ::common::IpAddress& _internal_src_addr() const;
  ::common::IpAddress* _internal_mutable_src_addr();
  public:
  void unsafe_arena_set_allocated_src_addr(
      ::common::IpAddress* src_addr);
  ::common::IpAddress* unsafe_arena_release_src_addr();

  // .structure.InterfaceType interface_type = 24;
  void clear_interface_type();
  ::structure::InterfaceType interface_type() const;
  void set_interface_type(::structure::InterfaceType value);
  private:
  ::structure::InterfaceType _internal_interface_type() const;
  void _internal_set_interface_type(::structure::InterfaceType value);
  public:

  // uint32 local_gtp_teid = 30;
  void clear_local_gtp_teid();
  ::PROTOBUF_NAMESPACE_ID::uint32 local_gtp_teid() const;
  void set_local_gtp_teid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_local_gtp_teid() const;
  void _internal_set_local_gtp_teid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 remote_gtp_teid = 35;
  void clear_remote_gtp_teid();
  ::PROTOBUF_NAMESPACE_ID::uint32 remote_gtp_teid() const;
  void set_remote_gtp_teid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_remote_gtp_teid() const;
  void _internal_set_remote_gtp_teid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 old_cell_id = 36;
  void clear_old_cell_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 old_cell_id() const;
  void set_old_cell_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_old_cell_id() const;
  void _internal_set_old_cell_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 old_crnti = 37;
  void clear_old_crnti();
  ::PROTOBUF_NAMESPACE_ID::uint32 old_crnti() const;
  void set_old_crnti(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_old_crnti() const;
  void _internal_set_old_crnti(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool status = 40;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:structure.CreateTnlCfmEnt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::structure::GtpTunnelId* gtp_tunnel_id_;
  ::common::IpAddress* dst_addr_;
  ::common::IpAddress* src_addr_;
  int interface_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 local_gtp_teid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 remote_gtp_teid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 old_cell_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 old_crnti_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_structure_2eproto;
};
// -------------------------------------------------------------------

class ModTnlCfmEnt PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:structure.ModTnlCfmEnt) */ {
 public:
  inline ModTnlCfmEnt() : ModTnlCfmEnt(nullptr) {}
  virtual ~ModTnlCfmEnt();

  ModTnlCfmEnt(const ModTnlCfmEnt& from);
  ModTnlCfmEnt(ModTnlCfmEnt&& from) noexcept
    : ModTnlCfmEnt() {
    *this = ::std::move(from);
  }

  inline ModTnlCfmEnt& operator=(const ModTnlCfmEnt& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModTnlCfmEnt& operator=(ModTnlCfmEnt&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModTnlCfmEnt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModTnlCfmEnt* internal_default_instance() {
    return reinterpret_cast<const ModTnlCfmEnt*>(
               &_ModTnlCfmEnt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ModTnlCfmEnt& a, ModTnlCfmEnt& b) {
    a.Swap(&b);
  }
  inline void Swap(ModTnlCfmEnt* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModTnlCfmEnt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModTnlCfmEnt* New() const final {
    return CreateMaybeMessage<ModTnlCfmEnt>(nullptr);
  }

  ModTnlCfmEnt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModTnlCfmEnt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModTnlCfmEnt& from);
  void MergeFrom(const ModTnlCfmEnt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModTnlCfmEnt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "structure.ModTnlCfmEnt";
  }
  protected:
  explicit ModTnlCfmEnt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_structure_2eproto);
    return ::descriptor_table_structure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGtpTunnelIdFieldNumber = 25,
    kDstAddrFieldNumber = 26,
    kSrcAddrFieldNumber = 27,
    kOldCellIdFieldNumber = 20,
    kOldCrntiFieldNumber = 22,
    kInterfaceTypeFieldNumber = 24,
    kLocalGtpTeidFieldNumber = 30,
    kRemoteGtpTeidFieldNumber = 35,
    kStatusFieldNumber = 40,
  };
  // .structure.GtpTunnelId gtp_tunnel_id = 25;
  bool has_gtp_tunnel_id() const;
  private:
  bool _internal_has_gtp_tunnel_id() const;
  public:
  void clear_gtp_tunnel_id();
  const ::structure::GtpTunnelId& gtp_tunnel_id() const;
  ::structure::GtpTunnelId* release_gtp_tunnel_id();
  ::structure::GtpTunnelId* mutable_gtp_tunnel_id();
  void set_allocated_gtp_tunnel_id(::structure::GtpTunnelId* gtp_tunnel_id);
  private:
  const ::structure::GtpTunnelId& _internal_gtp_tunnel_id() const;
  ::structure::GtpTunnelId* _internal_mutable_gtp_tunnel_id();
  public:
  void unsafe_arena_set_allocated_gtp_tunnel_id(
      ::structure::GtpTunnelId* gtp_tunnel_id);
  ::structure::GtpTunnelId* unsafe_arena_release_gtp_tunnel_id();

  // .common.IpAddress dst_addr = 26;
  bool has_dst_addr() const;
  private:
  bool _internal_has_dst_addr() const;
  public:
  void clear_dst_addr();
  const ::common::IpAddress& dst_addr() const;
  ::common::IpAddress* release_dst_addr();
  ::common::IpAddress* mutable_dst_addr();
  void set_allocated_dst_addr(::common::IpAddress* dst_addr);
  private:
  const ::common::IpAddress& _internal_dst_addr() const;
  ::common::IpAddress* _internal_mutable_dst_addr();
  public:
  void unsafe_arena_set_allocated_dst_addr(
      ::common::IpAddress* dst_addr);
  ::common::IpAddress* unsafe_arena_release_dst_addr();

  // .common.IpAddress src_addr = 27;
  bool has_src_addr() const;
  private:
  bool _internal_has_src_addr() const;
  public:
  void clear_src_addr();
  const ::common::IpAddress& src_addr() const;
  ::common::IpAddress* release_src_addr();
  ::common::IpAddress* mutable_src_addr();
  void set_allocated_src_addr(::common::IpAddress* src_addr);
  private:
  const ::common::IpAddress& _internal_src_addr() const;
  ::common::IpAddress* _internal_mutable_src_addr();
  public:
  void unsafe_arena_set_allocated_src_addr(
      ::common::IpAddress* src_addr);
  ::common::IpAddress* unsafe_arena_release_src_addr();

  // uint32 old_cell_id = 20;
  void clear_old_cell_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 old_cell_id() const;
  void set_old_cell_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_old_cell_id() const;
  void _internal_set_old_cell_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 old_crnti = 22;
  void clear_old_crnti();
  ::PROTOBUF_NAMESPACE_ID::uint32 old_crnti() const;
  void set_old_crnti(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_old_crnti() const;
  void _internal_set_old_crnti(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .structure.InterfaceType interface_type = 24;
  void clear_interface_type();
  ::structure::InterfaceType interface_type() const;
  void set_interface_type(::structure::InterfaceType value);
  private:
  ::structure::InterfaceType _internal_interface_type() const;
  void _internal_set_interface_type(::structure::InterfaceType value);
  public:

  // uint32 local_gtp_teid = 30;
  void clear_local_gtp_teid();
  ::PROTOBUF_NAMESPACE_ID::uint32 local_gtp_teid() const;
  void set_local_gtp_teid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_local_gtp_teid() const;
  void _internal_set_local_gtp_teid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 remote_gtp_teid = 35;
  void clear_remote_gtp_teid();
  ::PROTOBUF_NAMESPACE_ID::uint32 remote_gtp_teid() const;
  void set_remote_gtp_teid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_remote_gtp_teid() const;
  void _internal_set_remote_gtp_teid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool status = 40;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:structure.ModTnlCfmEnt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::structure::GtpTunnelId* gtp_tunnel_id_;
  ::common::IpAddress* dst_addr_;
  ::common::IpAddress* src_addr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 old_cell_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 old_crnti_;
  int interface_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 local_gtp_teid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 remote_gtp_teid_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_structure_2eproto;
};
// -------------------------------------------------------------------

class DelTnlCfmEnt PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:structure.DelTnlCfmEnt) */ {
 public:
  inline DelTnlCfmEnt() : DelTnlCfmEnt(nullptr) {}
  virtual ~DelTnlCfmEnt();

  DelTnlCfmEnt(const DelTnlCfmEnt& from);
  DelTnlCfmEnt(DelTnlCfmEnt&& from) noexcept
    : DelTnlCfmEnt() {
    *this = ::std::move(from);
  }

  inline DelTnlCfmEnt& operator=(const DelTnlCfmEnt& from) {
    CopyFrom(from);
    return *this;
  }
  inline DelTnlCfmEnt& operator=(DelTnlCfmEnt&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DelTnlCfmEnt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DelTnlCfmEnt* internal_default_instance() {
    return reinterpret_cast<const DelTnlCfmEnt*>(
               &_DelTnlCfmEnt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(DelTnlCfmEnt& a, DelTnlCfmEnt& b) {
    a.Swap(&b);
  }
  inline void Swap(DelTnlCfmEnt* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DelTnlCfmEnt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DelTnlCfmEnt* New() const final {
    return CreateMaybeMessage<DelTnlCfmEnt>(nullptr);
  }

  DelTnlCfmEnt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DelTnlCfmEnt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DelTnlCfmEnt& from);
  void MergeFrom(const DelTnlCfmEnt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelTnlCfmEnt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "structure.DelTnlCfmEnt";
  }
  protected:
  explicit DelTnlCfmEnt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_structure_2eproto);
    return ::descriptor_table_structure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGtpTunnelIdFieldNumber = 25,
    kDstAddrFieldNumber = 26,
    kSrcAddrFieldNumber = 27,
    kInterfaceTypeFieldNumber = 24,
    kLocalGtpTeidFieldNumber = 30,
    kRemoteGtpTeidFieldNumber = 35,
    kStatusFieldNumber = 40,
  };
  // .structure.GtpTunnelId gtp_tunnel_id = 25;
  bool has_gtp_tunnel_id() const;
  private:
  bool _internal_has_gtp_tunnel_id() const;
  public:
  void clear_gtp_tunnel_id();
  const ::structure::GtpTunnelId& gtp_tunnel_id() const;
  ::structure::GtpTunnelId* release_gtp_tunnel_id();
  ::structure::GtpTunnelId* mutable_gtp_tunnel_id();
  void set_allocated_gtp_tunnel_id(::structure::GtpTunnelId* gtp_tunnel_id);
  private:
  const ::structure::GtpTunnelId& _internal_gtp_tunnel_id() const;
  ::structure::GtpTunnelId* _internal_mutable_gtp_tunnel_id();
  public:
  void unsafe_arena_set_allocated_gtp_tunnel_id(
      ::structure::GtpTunnelId* gtp_tunnel_id);
  ::structure::GtpTunnelId* unsafe_arena_release_gtp_tunnel_id();

  // .common.IpAddress dst_addr = 26;
  bool has_dst_addr() const;
  private:
  bool _internal_has_dst_addr() const;
  public:
  void clear_dst_addr();
  const ::common::IpAddress& dst_addr() const;
  ::common::IpAddress* release_dst_addr();
  ::common::IpAddress* mutable_dst_addr();
  void set_allocated_dst_addr(::common::IpAddress* dst_addr);
  private:
  const ::common::IpAddress& _internal_dst_addr() const;
  ::common::IpAddress* _internal_mutable_dst_addr();
  public:
  void unsafe_arena_set_allocated_dst_addr(
      ::common::IpAddress* dst_addr);
  ::common::IpAddress* unsafe_arena_release_dst_addr();

  // .common.IpAddress src_addr = 27;
  bool has_src_addr() const;
  private:
  bool _internal_has_src_addr() const;
  public:
  void clear_src_addr();
  const ::common::IpAddress& src_addr() const;
  ::common::IpAddress* release_src_addr();
  ::common::IpAddress* mutable_src_addr();
  void set_allocated_src_addr(::common::IpAddress* src_addr);
  private:
  const ::common::IpAddress& _internal_src_addr() const;
  ::common::IpAddress* _internal_mutable_src_addr();
  public:
  void unsafe_arena_set_allocated_src_addr(
      ::common::IpAddress* src_addr);
  ::common::IpAddress* unsafe_arena_release_src_addr();

  // .structure.InterfaceType interface_type = 24;
  void clear_interface_type();
  ::structure::InterfaceType interface_type() const;
  void set_interface_type(::structure::InterfaceType value);
  private:
  ::structure::InterfaceType _internal_interface_type() const;
  void _internal_set_interface_type(::structure::InterfaceType value);
  public:

  // uint32 local_gtp_teid = 30;
  void clear_local_gtp_teid();
  ::PROTOBUF_NAMESPACE_ID::uint32 local_gtp_teid() const;
  void set_local_gtp_teid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_local_gtp_teid() const;
  void _internal_set_local_gtp_teid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 remote_gtp_teid = 35;
  void clear_remote_gtp_teid();
  ::PROTOBUF_NAMESPACE_ID::uint32 remote_gtp_teid() const;
  void set_remote_gtp_teid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_remote_gtp_teid() const;
  void _internal_set_remote_gtp_teid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool status = 40;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:structure.DelTnlCfmEnt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::structure::GtpTunnelId* gtp_tunnel_id_;
  ::common::IpAddress* dst_addr_;
  ::common::IpAddress* src_addr_;
  int interface_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 local_gtp_teid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 remote_gtp_teid_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_structure_2eproto;
};
// -------------------------------------------------------------------

class PDCPAddCfgCfmEnt PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:structure.PDCPAddCfgCfmEnt) */ {
 public:
  inline PDCPAddCfgCfmEnt() : PDCPAddCfgCfmEnt(nullptr) {}
  virtual ~PDCPAddCfgCfmEnt();

  PDCPAddCfgCfmEnt(const PDCPAddCfgCfmEnt& from);
  PDCPAddCfgCfmEnt(PDCPAddCfgCfmEnt&& from) noexcept
    : PDCPAddCfgCfmEnt() {
    *this = ::std::move(from);
  }

  inline PDCPAddCfgCfmEnt& operator=(const PDCPAddCfgCfmEnt& from) {
    CopyFrom(from);
    return *this;
  }
  inline PDCPAddCfgCfmEnt& operator=(PDCPAddCfgCfmEnt&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PDCPAddCfgCfmEnt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PDCPAddCfgCfmEnt* internal_default_instance() {
    return reinterpret_cast<const PDCPAddCfgCfmEnt*>(
               &_PDCPAddCfgCfmEnt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(PDCPAddCfgCfmEnt& a, PDCPAddCfgCfmEnt& b) {
    a.Swap(&b);
  }
  inline void Swap(PDCPAddCfgCfmEnt* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PDCPAddCfgCfmEnt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PDCPAddCfgCfmEnt* New() const final {
    return CreateMaybeMessage<PDCPAddCfgCfmEnt>(nullptr);
  }

  PDCPAddCfgCfmEnt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PDCPAddCfgCfmEnt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PDCPAddCfgCfmEnt& from);
  void MergeFrom(const PDCPAddCfgCfmEnt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PDCPAddCfgCfmEnt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "structure.PDCPAddCfgCfmEnt";
  }
  protected:
  explicit PDCPAddCfgCfmEnt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_structure_2eproto);
    return ::descriptor_table_structure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 30,
    kRbIdFieldNumber = 10,
    kStatusFieldNumber = 20,
  };
  // .structure.PDCPConfigFailureReason reason = 30;
  void clear_reason();
  ::structure::PDCPConfigFailureReason reason() const;
  void set_reason(::structure::PDCPConfigFailureReason value);
  private:
  ::structure::PDCPConfigFailureReason _internal_reason() const;
  void _internal_set_reason(::structure::PDCPConfigFailureReason value);
  public:

  // uint32 rb_id = 10;
  void clear_rb_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 rb_id() const;
  void set_rb_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rb_id() const;
  void _internal_set_rb_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool status = 20;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:structure.PDCPAddCfgCfmEnt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int reason_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rb_id_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_structure_2eproto;
};
// -------------------------------------------------------------------

class PDCPModCfgCfmEnt PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:structure.PDCPModCfgCfmEnt) */ {
 public:
  inline PDCPModCfgCfmEnt() : PDCPModCfgCfmEnt(nullptr) {}
  virtual ~PDCPModCfgCfmEnt();

  PDCPModCfgCfmEnt(const PDCPModCfgCfmEnt& from);
  PDCPModCfgCfmEnt(PDCPModCfgCfmEnt&& from) noexcept
    : PDCPModCfgCfmEnt() {
    *this = ::std::move(from);
  }

  inline PDCPModCfgCfmEnt& operator=(const PDCPModCfgCfmEnt& from) {
    CopyFrom(from);
    return *this;
  }
  inline PDCPModCfgCfmEnt& operator=(PDCPModCfgCfmEnt&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PDCPModCfgCfmEnt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PDCPModCfgCfmEnt* internal_default_instance() {
    return reinterpret_cast<const PDCPModCfgCfmEnt*>(
               &_PDCPModCfgCfmEnt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(PDCPModCfgCfmEnt& a, PDCPModCfgCfmEnt& b) {
    a.Swap(&b);
  }
  inline void Swap(PDCPModCfgCfmEnt* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PDCPModCfgCfmEnt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PDCPModCfgCfmEnt* New() const final {
    return CreateMaybeMessage<PDCPModCfgCfmEnt>(nullptr);
  }

  PDCPModCfgCfmEnt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PDCPModCfgCfmEnt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PDCPModCfgCfmEnt& from);
  void MergeFrom(const PDCPModCfgCfmEnt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PDCPModCfgCfmEnt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "structure.PDCPModCfgCfmEnt";
  }
  protected:
  explicit PDCPModCfgCfmEnt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_structure_2eproto);
    return ::descriptor_table_structure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 30,
    kRbIdFieldNumber = 10,
    kStatusFieldNumber = 20,
  };
  // .structure.PDCPConfigFailureReason reason = 30;
  void clear_reason();
  ::structure::PDCPConfigFailureReason reason() const;
  void set_reason(::structure::PDCPConfigFailureReason value);
  private:
  ::structure::PDCPConfigFailureReason _internal_reason() const;
  void _internal_set_reason(::structure::PDCPConfigFailureReason value);
  public:

  // uint32 rb_id = 10;
  void clear_rb_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 rb_id() const;
  void set_rb_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rb_id() const;
  void _internal_set_rb_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool status = 20;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:structure.PDCPModCfgCfmEnt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int reason_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rb_id_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_structure_2eproto;
};
// -------------------------------------------------------------------

class PDCPDelCfgCfmEnt PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:structure.PDCPDelCfgCfmEnt) */ {
 public:
  inline PDCPDelCfgCfmEnt() : PDCPDelCfgCfmEnt(nullptr) {}
  virtual ~PDCPDelCfgCfmEnt();

  PDCPDelCfgCfmEnt(const PDCPDelCfgCfmEnt& from);
  PDCPDelCfgCfmEnt(PDCPDelCfgCfmEnt&& from) noexcept
    : PDCPDelCfgCfmEnt() {
    *this = ::std::move(from);
  }

  inline PDCPDelCfgCfmEnt& operator=(const PDCPDelCfgCfmEnt& from) {
    CopyFrom(from);
    return *this;
  }
  inline PDCPDelCfgCfmEnt& operator=(PDCPDelCfgCfmEnt&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PDCPDelCfgCfmEnt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PDCPDelCfgCfmEnt* internal_default_instance() {
    return reinterpret_cast<const PDCPDelCfgCfmEnt*>(
               &_PDCPDelCfgCfmEnt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(PDCPDelCfgCfmEnt& a, PDCPDelCfgCfmEnt& b) {
    a.Swap(&b);
  }
  inline void Swap(PDCPDelCfgCfmEnt* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PDCPDelCfgCfmEnt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PDCPDelCfgCfmEnt* New() const final {
    return CreateMaybeMessage<PDCPDelCfgCfmEnt>(nullptr);
  }

  PDCPDelCfgCfmEnt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PDCPDelCfgCfmEnt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PDCPDelCfgCfmEnt& from);
  void MergeFrom(const PDCPDelCfgCfmEnt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PDCPDelCfgCfmEnt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "structure.PDCPDelCfgCfmEnt";
  }
  protected:
  explicit PDCPDelCfgCfmEnt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_structure_2eproto);
    return ::descriptor_table_structure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 30,
    kRbIdFieldNumber = 10,
    kStatusFieldNumber = 20,
  };
  // .structure.PDCPConfigFailureReason reason = 30;
  void clear_reason();
  ::structure::PDCPConfigFailureReason reason() const;
  void set_reason(::structure::PDCPConfigFailureReason value);
  private:
  ::structure::PDCPConfigFailureReason _internal_reason() const;
  void _internal_set_reason(::structure::PDCPConfigFailureReason value);
  public:

  // uint32 rb_id = 10;
  void clear_rb_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 rb_id() const;
  void set_rb_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rb_id() const;
  void _internal_set_rb_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool status = 20;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:structure.PDCPDelCfgCfmEnt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int reason_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rb_id_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_structure_2eproto;
};
// -------------------------------------------------------------------

class UlSduStaInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:structure.UlSduStaInfo) */ {
 public:
  inline UlSduStaInfo() : UlSduStaInfo(nullptr) {}
  virtual ~UlSduStaInfo();

  UlSduStaInfo(const UlSduStaInfo& from);
  UlSduStaInfo(UlSduStaInfo&& from) noexcept
    : UlSduStaInfo() {
    *this = ::std::move(from);
  }

  inline UlSduStaInfo& operator=(const UlSduStaInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UlSduStaInfo& operator=(UlSduStaInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UlSduStaInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UlSduStaInfo* internal_default_instance() {
    return reinterpret_cast<const UlSduStaInfo*>(
               &_UlSduStaInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(UlSduStaInfo& a, UlSduStaInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UlSduStaInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UlSduStaInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UlSduStaInfo* New() const final {
    return CreateMaybeMessage<UlSduStaInfo>(nullptr);
  }

  UlSduStaInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UlSduStaInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UlSduStaInfo& from);
  void MergeFrom(const UlSduStaInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UlSduStaInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "structure.UlSduStaInfo";
  }
  protected:
  explicit UlSduStaInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_structure_2eproto);
    return ::descriptor_table_structure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumBitsFieldNumber = 10,
    kCountFieldNumber = 20,
  };
  // uint32 numBits = 10;
  void clear_numbits();
  ::PROTOBUF_NAMESPACE_ID::uint32 numbits() const;
  void set_numbits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_numbits() const;
  void _internal_set_numbits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 count = 20;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:structure.UlSduStaInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 numbits_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_structure_2eproto;
};
// -------------------------------------------------------------------

class DlSduStaInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:structure.DlSduStaInfo) */ {
 public:
  inline DlSduStaInfo() : DlSduStaInfo(nullptr) {}
  virtual ~DlSduStaInfo();

  DlSduStaInfo(const DlSduStaInfo& from);
  DlSduStaInfo(DlSduStaInfo&& from) noexcept
    : DlSduStaInfo() {
    *this = ::std::move(from);
  }

  inline DlSduStaInfo& operator=(const DlSduStaInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DlSduStaInfo& operator=(DlSduStaInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DlSduStaInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DlSduStaInfo* internal_default_instance() {
    return reinterpret_cast<const DlSduStaInfo*>(
               &_DlSduStaInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(DlSduStaInfo& a, DlSduStaInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DlSduStaInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DlSduStaInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DlSduStaInfo* New() const final {
    return CreateMaybeMessage<DlSduStaInfo>(nullptr);
  }

  DlSduStaInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DlSduStaInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DlSduStaInfo& from);
  void MergeFrom(const DlSduStaInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DlSduStaInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "structure.DlSduStaInfo";
  }
  protected:
  explicit DlSduStaInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_structure_2eproto);
    return ::descriptor_table_structure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountFieldNumber = 10,
  };
  // uint32 count = 10;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:structure.DlSduStaInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_structure_2eproto;
};
// -------------------------------------------------------------------

class SduStatusInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:structure.SduStatusInfo) */ {
 public:
  inline SduStatusInfo() : SduStatusInfo(nullptr) {}
  virtual ~SduStatusInfo();

  SduStatusInfo(const SduStatusInfo& from);
  SduStatusInfo(SduStatusInfo&& from) noexcept
    : SduStatusInfo() {
    *this = ::std::move(from);
  }

  inline SduStatusInfo& operator=(const SduStatusInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SduStatusInfo& operator=(SduStatusInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SduStatusInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SduStatusInfo* internal_default_instance() {
    return reinterpret_cast<const SduStatusInfo*>(
               &_SduStatusInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(SduStatusInfo& a, SduStatusInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SduStatusInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SduStatusInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SduStatusInfo* New() const final {
    return CreateMaybeMessage<SduStatusInfo>(nullptr);
  }

  SduStatusInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SduStatusInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SduStatusInfo& from);
  void MergeFrom(const SduStatusInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SduStatusInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "structure.SduStatusInfo";
  }
  protected:
  explicit SduStatusInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_structure_2eproto);
    return ::descriptor_table_structure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUlSduStaInfoFieldNumber = 40,
    kDlSduStaInfoFieldNumber = 50,
    kSnLenFieldNumber = 30,
    kRbIdFieldNumber = 10,
    kDirFieldNumber = 20,
  };
  // .structure.UlSduStaInfo ulSduStaInfo = 40;
  bool has_ulsdustainfo() const;
  private:
  bool _internal_has_ulsdustainfo() const;
  public:
  void clear_ulsdustainfo();
  const ::structure::UlSduStaInfo& ulsdustainfo() const;
  ::structure::UlSduStaInfo* release_ulsdustainfo();
  ::structure::UlSduStaInfo* mutable_ulsdustainfo();
  void set_allocated_ulsdustainfo(::structure::UlSduStaInfo* ulsdustainfo);
  private:
  const ::structure::UlSduStaInfo& _internal_ulsdustainfo() const;
  ::structure::UlSduStaInfo* _internal_mutable_ulsdustainfo();
  public:
  void unsafe_arena_set_allocated_ulsdustainfo(
      ::structure::UlSduStaInfo* ulsdustainfo);
  ::structure::UlSduStaInfo* unsafe_arena_release_ulsdustainfo();

  // .structure.DlSduStaInfo dlSduStaInfo = 50;
  bool has_dlsdustainfo() const;
  private:
  bool _internal_has_dlsdustainfo() const;
  public:
  void clear_dlsdustainfo();
  const ::structure::DlSduStaInfo& dlsdustainfo() const;
  ::structure::DlSduStaInfo* release_dlsdustainfo();
  ::structure::DlSduStaInfo* mutable_dlsdustainfo();
  void set_allocated_dlsdustainfo(::structure::DlSduStaInfo* dlsdustainfo);
  private:
  const ::structure::DlSduStaInfo& _internal_dlsdustainfo() const;
  ::structure::DlSduStaInfo* _internal_mutable_dlsdustainfo();
  public:
  void unsafe_arena_set_allocated_dlsdustainfo(
      ::structure::DlSduStaInfo* dlsdustainfo);
  ::structure::DlSduStaInfo* unsafe_arena_release_dlsdustainfo();

  // uint32 snLen = 30;
  void clear_snlen();
  ::PROTOBUF_NAMESPACE_ID::uint32 snlen() const;
  void set_snlen(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_snlen() const;
  void _internal_set_snlen(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 rbId = 10;
  void clear_rbid();
  ::PROTOBUF_NAMESPACE_ID::uint32 rbid() const;
  void set_rbid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rbid() const;
  void _internal_set_rbid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 dir = 20;
  void clear_dir();
  ::PROTOBUF_NAMESPACE_ID::uint32 dir() const;
  void set_dir(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dir() const;
  void _internal_set_dir(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:structure.SduStatusInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::structure::UlSduStaInfo* ulsdustainfo_;
  ::structure::DlSduStaInfo* dlsdustainfo_;
  ::PROTOBUF_NAMESPACE_ID::uint32 snlen_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rbid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dir_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_structure_2eproto;
};
// -------------------------------------------------------------------

class TunnelStateInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:structure.TunnelStateInfo) */ {
 public:
  inline TunnelStateInfo() : TunnelStateInfo(nullptr) {}
  virtual ~TunnelStateInfo();

  TunnelStateInfo(const TunnelStateInfo& from);
  TunnelStateInfo(TunnelStateInfo&& from) noexcept
    : TunnelStateInfo() {
    *this = ::std::move(from);
  }

  inline TunnelStateInfo& operator=(const TunnelStateInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TunnelStateInfo& operator=(TunnelStateInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TunnelStateInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TunnelStateInfo* internal_default_instance() {
    return reinterpret_cast<const TunnelStateInfo*>(
               &_TunnelStateInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(TunnelStateInfo& a, TunnelStateInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TunnelStateInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TunnelStateInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TunnelStateInfo* New() const final {
    return CreateMaybeMessage<TunnelStateInfo>(nullptr);
  }

  TunnelStateInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TunnelStateInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TunnelStateInfo& from);
  void MergeFrom(const TunnelStateInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TunnelStateInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "structure.TunnelStateInfo";
  }
  protected:
  explicit TunnelStateInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_structure_2eproto);
    return ::descriptor_table_structure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalGtpTeidFieldNumber = 30,
    kStateFieldNumber = 10,
    kCauseFieldNumber = 20,
  };
  // uint32 local_gtp_teid = 30;
  void clear_local_gtp_teid();
  ::PROTOBUF_NAMESPACE_ID::uint32 local_gtp_teid() const;
  void set_local_gtp_teid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_local_gtp_teid() const;
  void _internal_set_local_gtp_teid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .structure.TunnelState state = 10;
  void clear_state();
  ::structure::TunnelState state() const;
  void set_state(::structure::TunnelState value);
  private:
  ::structure::TunnelState _internal_state() const;
  void _internal_set_state(::structure::TunnelState value);
  public:

  // uint32 cause = 20;
  void clear_cause();
  ::PROTOBUF_NAMESPACE_ID::uint32 cause() const;
  void set_cause(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cause() const;
  void _internal_set_cause(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:structure.TunnelStateInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 local_gtp_teid_;
  int state_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cause_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_structure_2eproto;
};
// -------------------------------------------------------------------

class UeInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:structure.UeInfo) */ {
 public:
  inline UeInfo() : UeInfo(nullptr) {}
  virtual ~UeInfo();

  UeInfo(const UeInfo& from);
  UeInfo(UeInfo&& from) noexcept
    : UeInfo() {
    *this = ::std::move(from);
  }

  inline UeInfo& operator=(const UeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UeInfo& operator=(UeInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UeInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UeInfo* internal_default_instance() {
    return reinterpret_cast<const UeInfo*>(
               &_UeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(UeInfo& a, UeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UeInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UeInfo* New() const final {
    return CreateMaybeMessage<UeInfo>(nullptr);
  }

  UeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UeInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UeInfo& from);
  void MergeFrom(const UeInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "structure.UeInfo";
  }
  protected:
  explicit UeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_structure_2eproto);
    return ::descriptor_table_structure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRbIdFieldNumber = 20,
    kUeIdFieldNumber = 10,
  };
  // repeated uint32 rb_id = 20;
  int rb_id_size() const;
  private:
  int _internal_rb_id_size() const;
  public:
  void clear_rb_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rb_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_rb_id() const;
  void _internal_add_rb_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_rb_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 rb_id(int index) const;
  void set_rb_id(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_rb_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      rb_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_rb_id();

  // uint64 ue_id = 10;
  void clear_ue_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 ue_id() const;
  void set_ue_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ue_id() const;
  void _internal_set_ue_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:structure.UeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > rb_id_;
  mutable std::atomic<int> _rb_id_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ue_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_structure_2eproto;
};
// -------------------------------------------------------------------

class ReqReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:structure.ReqReply) */ {
 public:
  inline ReqReply() : ReqReply(nullptr) {}
  virtual ~ReqReply();

  ReqReply(const ReqReply& from);
  ReqReply(ReqReply&& from) noexcept
    : ReqReply() {
    *this = ::std::move(from);
  }

  inline ReqReply& operator=(const ReqReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqReply& operator=(ReqReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqReply* internal_default_instance() {
    return reinterpret_cast<const ReqReply*>(
               &_ReqReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(ReqReply& a, ReqReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqReply* New() const final {
    return CreateMaybeMessage<ReqReply>(nullptr);
  }

  ReqReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqReply& from);
  void MergeFrom(const ReqReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "structure.ReqReply";
  }
  protected:
  explicit ReqReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_structure_2eproto);
    return ::descriptor_table_structure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHdrFieldNumber = 10,
  };
  // .mhdr.MsgHdr hdr = 10;
  bool has_hdr() const;
  private:
  bool _internal_has_hdr() const;
  public:
  void clear_hdr();
  const ::mhdr::MsgHdr& hdr() const;
  ::mhdr::MsgHdr* release_hdr();
  ::mhdr::MsgHdr* mutable_hdr();
  void set_allocated_hdr(::mhdr::MsgHdr* hdr);
  private:
  const ::mhdr::MsgHdr& _internal_hdr() const;
  ::mhdr::MsgHdr* _internal_mutable_hdr();
  public:
  void unsafe_arena_set_allocated_hdr(
      ::mhdr::MsgHdr* hdr);
  ::mhdr::MsgHdr* unsafe_arena_release_hdr();

  // @@protoc_insertion_point(class_scope:structure.ReqReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mhdr::MsgHdr* hdr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_structure_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Pst

// uint32 dst_proc_id = 10;
inline void Pst::clear_dst_proc_id() {
  dst_proc_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pst::_internal_dst_proc_id() const {
  return dst_proc_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pst::dst_proc_id() const {
  // @@protoc_insertion_point(field_get:structure.Pst.dst_proc_id)
  return _internal_dst_proc_id();
}
inline void Pst::_internal_set_dst_proc_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  dst_proc_id_ = value;
}
inline void Pst::set_dst_proc_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dst_proc_id(value);
  // @@protoc_insertion_point(field_set:structure.Pst.dst_proc_id)
}

// uint32 src_proc_id = 11;
inline void Pst::clear_src_proc_id() {
  src_proc_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pst::_internal_src_proc_id() const {
  return src_proc_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pst::src_proc_id() const {
  // @@protoc_insertion_point(field_get:structure.Pst.src_proc_id)
  return _internal_src_proc_id();
}
inline void Pst::_internal_set_src_proc_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  src_proc_id_ = value;
}
inline void Pst::set_src_proc_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_src_proc_id(value);
  // @@protoc_insertion_point(field_set:structure.Pst.src_proc_id)
}

// uint32 dst_ent = 20;
inline void Pst::clear_dst_ent() {
  dst_ent_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pst::_internal_dst_ent() const {
  return dst_ent_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pst::dst_ent() const {
  // @@protoc_insertion_point(field_get:structure.Pst.dst_ent)
  return _internal_dst_ent();
}
inline void Pst::_internal_set_dst_ent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  dst_ent_ = value;
}
inline void Pst::set_dst_ent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dst_ent(value);
  // @@protoc_insertion_point(field_set:structure.Pst.dst_ent)
}

// uint32 dst_inst = 21;
inline void Pst::clear_dst_inst() {
  dst_inst_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pst::_internal_dst_inst() const {
  return dst_inst_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pst::dst_inst() const {
  // @@protoc_insertion_point(field_get:structure.Pst.dst_inst)
  return _internal_dst_inst();
}
inline void Pst::_internal_set_dst_inst(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  dst_inst_ = value;
}
inline void Pst::set_dst_inst(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dst_inst(value);
  // @@protoc_insertion_point(field_set:structure.Pst.dst_inst)
}

// uint32 src_ent = 30;
inline void Pst::clear_src_ent() {
  src_ent_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pst::_internal_src_ent() const {
  return src_ent_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pst::src_ent() const {
  // @@protoc_insertion_point(field_get:structure.Pst.src_ent)
  return _internal_src_ent();
}
inline void Pst::_internal_set_src_ent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  src_ent_ = value;
}
inline void Pst::set_src_ent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_src_ent(value);
  // @@protoc_insertion_point(field_set:structure.Pst.src_ent)
}

// uint32 src_inst = 31;
inline void Pst::clear_src_inst() {
  src_inst_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pst::_internal_src_inst() const {
  return src_inst_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pst::src_inst() const {
  // @@protoc_insertion_point(field_get:structure.Pst.src_inst)
  return _internal_src_inst();
}
inline void Pst::_internal_set_src_inst(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  src_inst_ = value;
}
inline void Pst::set_src_inst(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_src_inst(value);
  // @@protoc_insertion_point(field_set:structure.Pst.src_inst)
}

// uint32 prior = 40;
inline void Pst::clear_prior() {
  prior_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pst::_internal_prior() const {
  return prior_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pst::prior() const {
  // @@protoc_insertion_point(field_get:structure.Pst.prior)
  return _internal_prior();
}
inline void Pst::_internal_set_prior(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  prior_ = value;
}
inline void Pst::set_prior(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_prior(value);
  // @@protoc_insertion_point(field_set:structure.Pst.prior)
}

// uint32 route = 45;
inline void Pst::clear_route() {
  route_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pst::_internal_route() const {
  return route_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pst::route() const {
  // @@protoc_insertion_point(field_get:structure.Pst.route)
  return _internal_route();
}
inline void Pst::_internal_set_route(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  route_ = value;
}
inline void Pst::set_route(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_route(value);
  // @@protoc_insertion_point(field_set:structure.Pst.route)
}

// uint32 event = 50;
inline void Pst::clear_event() {
  event_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pst::_internal_event() const {
  return event_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pst::event() const {
  // @@protoc_insertion_point(field_get:structure.Pst.event)
  return _internal_event();
}
inline void Pst::_internal_set_event(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  event_ = value;
}
inline void Pst::set_event(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_event(value);
  // @@protoc_insertion_point(field_set:structure.Pst.event)
}

// uint32 region = 55;
inline void Pst::clear_region() {
  region_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pst::_internal_region() const {
  return region_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pst::region() const {
  // @@protoc_insertion_point(field_get:structure.Pst.region)
  return _internal_region();
}
inline void Pst::_internal_set_region(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  region_ = value;
}
inline void Pst::set_region(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_region(value);
  // @@protoc_insertion_point(field_set:structure.Pst.region)
}

// uint32 pool = 60;
inline void Pst::clear_pool() {
  pool_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pst::_internal_pool() const {
  return pool_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pst::pool() const {
  // @@protoc_insertion_point(field_get:structure.Pst.pool)
  return _internal_pool();
}
inline void Pst::_internal_set_pool(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pool_ = value;
}
inline void Pst::set_pool(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pool(value);
  // @@protoc_insertion_point(field_set:structure.Pst.pool)
}

// uint32 selector = 65;
inline void Pst::clear_selector() {
  selector_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pst::_internal_selector() const {
  return selector_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pst::selector() const {
  // @@protoc_insertion_point(field_get:structure.Pst.selector)
  return _internal_selector();
}
inline void Pst::_internal_set_selector(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  selector_ = value;
}
inline void Pst::set_selector(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_selector(value);
  // @@protoc_insertion_point(field_set:structure.Pst.selector)
}

// uint32 interface_version = 70;
inline void Pst::clear_interface_version() {
  interface_version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pst::_internal_interface_version() const {
  return interface_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pst::interface_version() const {
  // @@protoc_insertion_point(field_get:structure.Pst.interface_version)
  return _internal_interface_version();
}
inline void Pst::_internal_set_interface_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  interface_version_ = value;
}
inline void Pst::set_interface_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_interface_version(value);
  // @@protoc_insertion_point(field_set:structure.Pst.interface_version)
}

// uint32 cell_id = 75;
inline void Pst::clear_cell_id() {
  cell_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pst::_internal_cell_id() const {
  return cell_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pst::cell_id() const {
  // @@protoc_insertion_point(field_get:structure.Pst.cell_id)
  return _internal_cell_id();
}
inline void Pst::_internal_set_cell_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cell_id_ = value;
}
inline void Pst::set_cell_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cell_id(value);
  // @@protoc_insertion_point(field_set:structure.Pst.cell_id)
}

// -------------------------------------------------------------------

// CuCpID

// uint32 cp_id = 10;
inline void CuCpID::clear_cp_id() {
  cp_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CuCpID::_internal_cp_id() const {
  return cp_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CuCpID::cp_id() const {
  // @@protoc_insertion_point(field_get:structure.CuCpID.cp_id)
  return _internal_cp_id();
}
inline void CuCpID::_internal_set_cp_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cp_id_ = value;
}
inline void CuCpID::set_cp_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cp_id(value);
  // @@protoc_insertion_point(field_set:structure.CuCpID.cp_id)
}

// uint32 cell_id = 20;
inline void CuCpID::clear_cell_id() {
  cell_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CuCpID::_internal_cell_id() const {
  return cell_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CuCpID::cell_id() const {
  // @@protoc_insertion_point(field_get:structure.CuCpID.cell_id)
  return _internal_cell_id();
}
inline void CuCpID::_internal_set_cell_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cell_id_ = value;
}
inline void CuCpID::set_cell_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cell_id(value);
  // @@protoc_insertion_point(field_set:structure.CuCpID.cell_id)
}

// uint32 ue_id = 30;
inline void CuCpID::clear_ue_id() {
  ue_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CuCpID::_internal_ue_id() const {
  return ue_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CuCpID::ue_id() const {
  // @@protoc_insertion_point(field_get:structure.CuCpID.ue_id)
  return _internal_ue_id();
}
inline void CuCpID::_internal_set_ue_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ue_id_ = value;
}
inline void CuCpID::set_ue_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ue_id(value);
  // @@protoc_insertion_point(field_set:structure.CuCpID.ue_id)
}

// -------------------------------------------------------------------

// CuUpID

// uint32 up_id = 10;
inline void CuUpID::clear_up_id() {
  up_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CuUpID::_internal_up_id() const {
  return up_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CuUpID::up_id() const {
  // @@protoc_insertion_point(field_get:structure.CuUpID.up_id)
  return _internal_up_id();
}
inline void CuUpID::_internal_set_up_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  up_id_ = value;
}
inline void CuUpID::set_up_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_up_id(value);
  // @@protoc_insertion_point(field_set:structure.CuUpID.up_id)
}

// uint32 cell_id = 20;
inline void CuUpID::clear_cell_id() {
  cell_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CuUpID::_internal_cell_id() const {
  return cell_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CuUpID::cell_id() const {
  // @@protoc_insertion_point(field_get:structure.CuUpID.cell_id)
  return _internal_cell_id();
}
inline void CuUpID::_internal_set_cell_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cell_id_ = value;
}
inline void CuUpID::set_cell_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cell_id(value);
  // @@protoc_insertion_point(field_set:structure.CuUpID.cell_id)
}

// uint64 ue_id = 30;
inline void CuUpID::clear_ue_id() {
  ue_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CuUpID::_internal_ue_id() const {
  return ue_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CuUpID::ue_id() const {
  // @@protoc_insertion_point(field_get:structure.CuUpID.ue_id)
  return _internal_ue_id();
}
inline void CuUpID::_internal_set_ue_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  ue_id_ = value;
}
inline void CuUpID::set_ue_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_ue_id(value);
  // @@protoc_insertion_point(field_set:structure.CuUpID.ue_id)
}

// -------------------------------------------------------------------

// SuSpID

// uint32 su_id = 10;
inline void SuSpID::clear_su_id() {
  su_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SuSpID::_internal_su_id() const {
  return su_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SuSpID::su_id() const {
  // @@protoc_insertion_point(field_get:structure.SuSpID.su_id)
  return _internal_su_id();
}
inline void SuSpID::_internal_set_su_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  su_id_ = value;
}
inline void SuSpID::set_su_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_su_id(value);
  // @@protoc_insertion_point(field_set:structure.SuSpID.su_id)
}

// uint32 sp_id = 20;
inline void SuSpID::clear_sp_id() {
  sp_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SuSpID::_internal_sp_id() const {
  return sp_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SuSpID::sp_id() const {
  // @@protoc_insertion_point(field_get:structure.SuSpID.sp_id)
  return _internal_sp_id();
}
inline void SuSpID::_internal_set_sp_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sp_id_ = value;
}
inline void SuSpID::set_sp_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sp_id(value);
  // @@protoc_insertion_point(field_set:structure.SuSpID.sp_id)
}

// -------------------------------------------------------------------

// CpUpHdr

// .structure.Pst pst = 10;
inline bool CpUpHdr::_internal_has_pst() const {
  return this != internal_default_instance() && pst_ != nullptr;
}
inline bool CpUpHdr::has_pst() const {
  return _internal_has_pst();
}
inline void CpUpHdr::clear_pst() {
  if (GetArena() == nullptr && pst_ != nullptr) {
    delete pst_;
  }
  pst_ = nullptr;
}
inline const ::structure::Pst& CpUpHdr::_internal_pst() const {
  const ::structure::Pst* p = pst_;
  return p != nullptr ? *p : *reinterpret_cast<const ::structure::Pst*>(
      &::structure::_Pst_default_instance_);
}
inline const ::structure::Pst& CpUpHdr::pst() const {
  // @@protoc_insertion_point(field_get:structure.CpUpHdr.pst)
  return _internal_pst();
}
inline void CpUpHdr::unsafe_arena_set_allocated_pst(
    ::structure::Pst* pst) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pst_);
  }
  pst_ = pst;
  if (pst) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:structure.CpUpHdr.pst)
}
inline ::structure::Pst* CpUpHdr::release_pst() {
  
  ::structure::Pst* temp = pst_;
  pst_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::structure::Pst* CpUpHdr::unsafe_arena_release_pst() {
  // @@protoc_insertion_point(field_release:structure.CpUpHdr.pst)
  
  ::structure::Pst* temp = pst_;
  pst_ = nullptr;
  return temp;
}
inline ::structure::Pst* CpUpHdr::_internal_mutable_pst() {
  
  if (pst_ == nullptr) {
    auto* p = CreateMaybeMessage<::structure::Pst>(GetArena());
    pst_ = p;
  }
  return pst_;
}
inline ::structure::Pst* CpUpHdr::mutable_pst() {
  // @@protoc_insertion_point(field_mutable:structure.CpUpHdr.pst)
  return _internal_mutable_pst();
}
inline void CpUpHdr::set_allocated_pst(::structure::Pst* pst) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pst_;
  }
  if (pst) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pst);
    if (message_arena != submessage_arena) {
      pst = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pst, submessage_arena);
    }
    
  } else {
    
  }
  pst_ = pst;
  // @@protoc_insertion_point(field_set_allocated:structure.CpUpHdr.pst)
}

// .structure.CuCpID cu_cp_id = 20;
inline bool CpUpHdr::_internal_has_cu_cp_id() const {
  return this != internal_default_instance() && cu_cp_id_ != nullptr;
}
inline bool CpUpHdr::has_cu_cp_id() const {
  return _internal_has_cu_cp_id();
}
inline void CpUpHdr::clear_cu_cp_id() {
  if (GetArena() == nullptr && cu_cp_id_ != nullptr) {
    delete cu_cp_id_;
  }
  cu_cp_id_ = nullptr;
}
inline const ::structure::CuCpID& CpUpHdr::_internal_cu_cp_id() const {
  const ::structure::CuCpID* p = cu_cp_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::structure::CuCpID*>(
      &::structure::_CuCpID_default_instance_);
}
inline const ::structure::CuCpID& CpUpHdr::cu_cp_id() const {
  // @@protoc_insertion_point(field_get:structure.CpUpHdr.cu_cp_id)
  return _internal_cu_cp_id();
}
inline void CpUpHdr::unsafe_arena_set_allocated_cu_cp_id(
    ::structure::CuCpID* cu_cp_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cu_cp_id_);
  }
  cu_cp_id_ = cu_cp_id;
  if (cu_cp_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:structure.CpUpHdr.cu_cp_id)
}
inline ::structure::CuCpID* CpUpHdr::release_cu_cp_id() {
  
  ::structure::CuCpID* temp = cu_cp_id_;
  cu_cp_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::structure::CuCpID* CpUpHdr::unsafe_arena_release_cu_cp_id() {
  // @@protoc_insertion_point(field_release:structure.CpUpHdr.cu_cp_id)
  
  ::structure::CuCpID* temp = cu_cp_id_;
  cu_cp_id_ = nullptr;
  return temp;
}
inline ::structure::CuCpID* CpUpHdr::_internal_mutable_cu_cp_id() {
  
  if (cu_cp_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::structure::CuCpID>(GetArena());
    cu_cp_id_ = p;
  }
  return cu_cp_id_;
}
inline ::structure::CuCpID* CpUpHdr::mutable_cu_cp_id() {
  // @@protoc_insertion_point(field_mutable:structure.CpUpHdr.cu_cp_id)
  return _internal_mutable_cu_cp_id();
}
inline void CpUpHdr::set_allocated_cu_cp_id(::structure::CuCpID* cu_cp_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cu_cp_id_;
  }
  if (cu_cp_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cu_cp_id);
    if (message_arena != submessage_arena) {
      cu_cp_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cu_cp_id, submessage_arena);
    }
    
  } else {
    
  }
  cu_cp_id_ = cu_cp_id;
  // @@protoc_insertion_point(field_set_allocated:structure.CpUpHdr.cu_cp_id)
}

// .structure.CuUpID cu_up_id = 30;
inline bool CpUpHdr::_internal_has_cu_up_id() const {
  return this != internal_default_instance() && cu_up_id_ != nullptr;
}
inline bool CpUpHdr::has_cu_up_id() const {
  return _internal_has_cu_up_id();
}
inline void CpUpHdr::clear_cu_up_id() {
  if (GetArena() == nullptr && cu_up_id_ != nullptr) {
    delete cu_up_id_;
  }
  cu_up_id_ = nullptr;
}
inline const ::structure::CuUpID& CpUpHdr::_internal_cu_up_id() const {
  const ::structure::CuUpID* p = cu_up_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::structure::CuUpID*>(
      &::structure::_CuUpID_default_instance_);
}
inline const ::structure::CuUpID& CpUpHdr::cu_up_id() const {
  // @@protoc_insertion_point(field_get:structure.CpUpHdr.cu_up_id)
  return _internal_cu_up_id();
}
inline void CpUpHdr::unsafe_arena_set_allocated_cu_up_id(
    ::structure::CuUpID* cu_up_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cu_up_id_);
  }
  cu_up_id_ = cu_up_id;
  if (cu_up_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:structure.CpUpHdr.cu_up_id)
}
inline ::structure::CuUpID* CpUpHdr::release_cu_up_id() {
  
  ::structure::CuUpID* temp = cu_up_id_;
  cu_up_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::structure::CuUpID* CpUpHdr::unsafe_arena_release_cu_up_id() {
  // @@protoc_insertion_point(field_release:structure.CpUpHdr.cu_up_id)
  
  ::structure::CuUpID* temp = cu_up_id_;
  cu_up_id_ = nullptr;
  return temp;
}
inline ::structure::CuUpID* CpUpHdr::_internal_mutable_cu_up_id() {
  
  if (cu_up_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::structure::CuUpID>(GetArena());
    cu_up_id_ = p;
  }
  return cu_up_id_;
}
inline ::structure::CuUpID* CpUpHdr::mutable_cu_up_id() {
  // @@protoc_insertion_point(field_mutable:structure.CpUpHdr.cu_up_id)
  return _internal_mutable_cu_up_id();
}
inline void CpUpHdr::set_allocated_cu_up_id(::structure::CuUpID* cu_up_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cu_up_id_;
  }
  if (cu_up_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cu_up_id);
    if (message_arena != submessage_arena) {
      cu_up_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cu_up_id, submessage_arena);
    }
    
  } else {
    
  }
  cu_up_id_ = cu_up_id;
  // @@protoc_insertion_point(field_set_allocated:structure.CpUpHdr.cu_up_id)
}

// .structure.SuSpID su_sp_id = 40;
inline bool CpUpHdr::_internal_has_su_sp_id() const {
  return this != internal_default_instance() && su_sp_id_ != nullptr;
}
inline bool CpUpHdr::has_su_sp_id() const {
  return _internal_has_su_sp_id();
}
inline void CpUpHdr::clear_su_sp_id() {
  if (GetArena() == nullptr && su_sp_id_ != nullptr) {
    delete su_sp_id_;
  }
  su_sp_id_ = nullptr;
}
inline const ::structure::SuSpID& CpUpHdr::_internal_su_sp_id() const {
  const ::structure::SuSpID* p = su_sp_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::structure::SuSpID*>(
      &::structure::_SuSpID_default_instance_);
}
inline const ::structure::SuSpID& CpUpHdr::su_sp_id() const {
  // @@protoc_insertion_point(field_get:structure.CpUpHdr.su_sp_id)
  return _internal_su_sp_id();
}
inline void CpUpHdr::unsafe_arena_set_allocated_su_sp_id(
    ::structure::SuSpID* su_sp_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(su_sp_id_);
  }
  su_sp_id_ = su_sp_id;
  if (su_sp_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:structure.CpUpHdr.su_sp_id)
}
inline ::structure::SuSpID* CpUpHdr::release_su_sp_id() {
  
  ::structure::SuSpID* temp = su_sp_id_;
  su_sp_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::structure::SuSpID* CpUpHdr::unsafe_arena_release_su_sp_id() {
  // @@protoc_insertion_point(field_release:structure.CpUpHdr.su_sp_id)
  
  ::structure::SuSpID* temp = su_sp_id_;
  su_sp_id_ = nullptr;
  return temp;
}
inline ::structure::SuSpID* CpUpHdr::_internal_mutable_su_sp_id() {
  
  if (su_sp_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::structure::SuSpID>(GetArena());
    su_sp_id_ = p;
  }
  return su_sp_id_;
}
inline ::structure::SuSpID* CpUpHdr::mutable_su_sp_id() {
  // @@protoc_insertion_point(field_mutable:structure.CpUpHdr.su_sp_id)
  return _internal_mutable_su_sp_id();
}
inline void CpUpHdr::set_allocated_su_sp_id(::structure::SuSpID* su_sp_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete su_sp_id_;
  }
  if (su_sp_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(su_sp_id);
    if (message_arena != submessage_arena) {
      su_sp_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, su_sp_id, submessage_arena);
    }
    
  } else {
    
  }
  su_sp_id_ = su_sp_id;
  // @@protoc_insertion_point(field_set_allocated:structure.CpUpHdr.su_sp_id)
}

// uint32 trans_id = 50;
inline void CpUpHdr::clear_trans_id() {
  trans_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CpUpHdr::_internal_trans_id() const {
  return trans_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CpUpHdr::trans_id() const {
  // @@protoc_insertion_point(field_get:structure.CpUpHdr.trans_id)
  return _internal_trans_id();
}
inline void CpUpHdr::_internal_set_trans_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  trans_id_ = value;
}
inline void CpUpHdr::set_trans_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_trans_id(value);
  // @@protoc_insertion_point(field_set:structure.CpUpHdr.trans_id)
}

// -------------------------------------------------------------------

// SecurityConfig

// uint32 algorithm_type = 10;
inline void SecurityConfig::clear_algorithm_type() {
  algorithm_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SecurityConfig::_internal_algorithm_type() const {
  return algorithm_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SecurityConfig::algorithm_type() const {
  // @@protoc_insertion_point(field_get:structure.SecurityConfig.algorithm_type)
  return _internal_algorithm_type();
}
inline void SecurityConfig::_internal_set_algorithm_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  algorithm_type_ = value;
}
inline void SecurityConfig::set_algorithm_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_algorithm_type(value);
  // @@protoc_insertion_point(field_set:structure.SecurityConfig.algorithm_type)
}

// repeated uint32 encryption_key = 20;
inline int SecurityConfig::_internal_encryption_key_size() const {
  return encryption_key_.size();
}
inline int SecurityConfig::encryption_key_size() const {
  return _internal_encryption_key_size();
}
inline void SecurityConfig::clear_encryption_key() {
  encryption_key_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SecurityConfig::_internal_encryption_key(int index) const {
  return encryption_key_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SecurityConfig::encryption_key(int index) const {
  // @@protoc_insertion_point(field_get:structure.SecurityConfig.encryption_key)
  return _internal_encryption_key(index);
}
inline void SecurityConfig::set_encryption_key(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  encryption_key_.Set(index, value);
  // @@protoc_insertion_point(field_set:structure.SecurityConfig.encryption_key)
}
inline void SecurityConfig::_internal_add_encryption_key(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  encryption_key_.Add(value);
}
inline void SecurityConfig::add_encryption_key(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_encryption_key(value);
  // @@protoc_insertion_point(field_add:structure.SecurityConfig.encryption_key)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SecurityConfig::_internal_encryption_key() const {
  return encryption_key_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SecurityConfig::encryption_key() const {
  // @@protoc_insertion_point(field_list:structure.SecurityConfig.encryption_key)
  return _internal_encryption_key();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SecurityConfig::_internal_mutable_encryption_key() {
  return &encryption_key_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SecurityConfig::mutable_encryption_key() {
  // @@protoc_insertion_point(field_mutable_list:structure.SecurityConfig.encryption_key)
  return _internal_mutable_encryption_key();
}

// -------------------------------------------------------------------

// SecurityCfgCfm

// bool status = 30;
inline void SecurityCfgCfm::clear_status() {
  status_ = false;
}
inline bool SecurityCfgCfm::_internal_status() const {
  return status_;
}
inline bool SecurityCfgCfm::status() const {
  // @@protoc_insertion_point(field_get:structure.SecurityCfgCfm.status)
  return _internal_status();
}
inline void SecurityCfgCfm::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void SecurityCfgCfm::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:structure.SecurityCfgCfm.status)
}

// string reason = 40;
inline void SecurityCfgCfm::clear_reason() {
  reason_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SecurityCfgCfm::reason() const {
  // @@protoc_insertion_point(field_get:structure.SecurityCfgCfm.reason)
  return _internal_reason();
}
inline void SecurityCfgCfm::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:structure.SecurityCfgCfm.reason)
}
inline std::string* SecurityCfgCfm::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:structure.SecurityCfgCfm.reason)
  return _internal_mutable_reason();
}
inline const std::string& SecurityCfgCfm::_internal_reason() const {
  return reason_.Get();
}
inline void SecurityCfgCfm::_internal_set_reason(const std::string& value) {
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SecurityCfgCfm::set_reason(std::string&& value) {
  
  reason_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:structure.SecurityCfgCfm.reason)
}
inline void SecurityCfgCfm::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:structure.SecurityCfgCfm.reason)
}
inline void SecurityCfgCfm::set_reason(const char* value,
    size_t size) {
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:structure.SecurityCfgCfm.reason)
}
inline std::string* SecurityCfgCfm::_internal_mutable_reason() {
  
  return reason_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SecurityCfgCfm::release_reason() {
  // @@protoc_insertion_point(field_release:structure.SecurityCfgCfm.reason)
  return reason_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SecurityCfgCfm::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:structure.SecurityCfgCfm.reason)
}

// -------------------------------------------------------------------

// GtpTunnelId

// uint32 cell_id = 10;
inline void GtpTunnelId::clear_cell_id() {
  cell_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GtpTunnelId::_internal_cell_id() const {
  return cell_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GtpTunnelId::cell_id() const {
  // @@protoc_insertion_point(field_get:structure.GtpTunnelId.cell_id)
  return _internal_cell_id();
}
inline void GtpTunnelId::_internal_set_cell_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cell_id_ = value;
}
inline void GtpTunnelId::set_cell_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cell_id(value);
  // @@protoc_insertion_point(field_set:structure.GtpTunnelId.cell_id)
}

// uint32 crnti = 20;
inline void GtpTunnelId::clear_crnti() {
  crnti_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GtpTunnelId::_internal_crnti() const {
  return crnti_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GtpTunnelId::crnti() const {
  // @@protoc_insertion_point(field_get:structure.GtpTunnelId.crnti)
  return _internal_crnti();
}
inline void GtpTunnelId::_internal_set_crnti(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  crnti_ = value;
}
inline void GtpTunnelId::set_crnti(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_crnti(value);
  // @@protoc_insertion_point(field_set:structure.GtpTunnelId.crnti)
}

// uint32 rb_id = 30;
inline void GtpTunnelId::clear_rb_id() {
  rb_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GtpTunnelId::_internal_rb_id() const {
  return rb_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GtpTunnelId::rb_id() const {
  // @@protoc_insertion_point(field_get:structure.GtpTunnelId.rb_id)
  return _internal_rb_id();
}
inline void GtpTunnelId::_internal_set_rb_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rb_id_ = value;
}
inline void GtpTunnelId::set_rb_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rb_id(value);
  // @@protoc_insertion_point(field_set:structure.GtpTunnelId.rb_id)
}

// .structure.TunnelType tnl_type = 40;
inline void GtpTunnelId::clear_tnl_type() {
  tnl_type_ = 0;
}
inline ::structure::TunnelType GtpTunnelId::_internal_tnl_type() const {
  return static_cast< ::structure::TunnelType >(tnl_type_);
}
inline ::structure::TunnelType GtpTunnelId::tnl_type() const {
  // @@protoc_insertion_point(field_get:structure.GtpTunnelId.tnl_type)
  return _internal_tnl_type();
}
inline void GtpTunnelId::_internal_set_tnl_type(::structure::TunnelType value) {
  
  tnl_type_ = value;
}
inline void GtpTunnelId::set_tnl_type(::structure::TunnelType value) {
  _internal_set_tnl_type(value);
  // @@protoc_insertion_point(field_set:structure.GtpTunnelId.tnl_type)
}

// uint32 tnl_priority = 50;
inline void GtpTunnelId::clear_tnl_priority() {
  tnl_priority_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GtpTunnelId::_internal_tnl_priority() const {
  return tnl_priority_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GtpTunnelId::tnl_priority() const {
  // @@protoc_insertion_point(field_get:structure.GtpTunnelId.tnl_priority)
  return _internal_tnl_priority();
}
inline void GtpTunnelId::_internal_set_tnl_priority(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tnl_priority_ = value;
}
inline void GtpTunnelId::set_tnl_priority(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tnl_priority(value);
  // @@protoc_insertion_point(field_set:structure.GtpTunnelId.tnl_priority)
}

// uint32 rb_keep_indicator = 60;
inline void GtpTunnelId::clear_rb_keep_indicator() {
  rb_keep_indicator_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GtpTunnelId::_internal_rb_keep_indicator() const {
  return rb_keep_indicator_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GtpTunnelId::rb_keep_indicator() const {
  // @@protoc_insertion_point(field_get:structure.GtpTunnelId.rb_keep_indicator)
  return _internal_rb_keep_indicator();
}
inline void GtpTunnelId::_internal_set_rb_keep_indicator(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rb_keep_indicator_ = value;
}
inline void GtpTunnelId::set_rb_keep_indicator(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rb_keep_indicator(value);
  // @@protoc_insertion_point(field_set:structure.GtpTunnelId.rb_keep_indicator)
}

// -------------------------------------------------------------------

// GtpTunnelInfo

// .structure.GtpTunnelId tnl_id = 10;
inline bool GtpTunnelInfo::_internal_has_tnl_id() const {
  return this != internal_default_instance() && tnl_id_ != nullptr;
}
inline bool GtpTunnelInfo::has_tnl_id() const {
  return _internal_has_tnl_id();
}
inline void GtpTunnelInfo::clear_tnl_id() {
  if (GetArena() == nullptr && tnl_id_ != nullptr) {
    delete tnl_id_;
  }
  tnl_id_ = nullptr;
}
inline const ::structure::GtpTunnelId& GtpTunnelInfo::_internal_tnl_id() const {
  const ::structure::GtpTunnelId* p = tnl_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::structure::GtpTunnelId*>(
      &::structure::_GtpTunnelId_default_instance_);
}
inline const ::structure::GtpTunnelId& GtpTunnelInfo::tnl_id() const {
  // @@protoc_insertion_point(field_get:structure.GtpTunnelInfo.tnl_id)
  return _internal_tnl_id();
}
inline void GtpTunnelInfo::unsafe_arena_set_allocated_tnl_id(
    ::structure::GtpTunnelId* tnl_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tnl_id_);
  }
  tnl_id_ = tnl_id;
  if (tnl_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:structure.GtpTunnelInfo.tnl_id)
}
inline ::structure::GtpTunnelId* GtpTunnelInfo::release_tnl_id() {
  
  ::structure::GtpTunnelId* temp = tnl_id_;
  tnl_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::structure::GtpTunnelId* GtpTunnelInfo::unsafe_arena_release_tnl_id() {
  // @@protoc_insertion_point(field_release:structure.GtpTunnelInfo.tnl_id)
  
  ::structure::GtpTunnelId* temp = tnl_id_;
  tnl_id_ = nullptr;
  return temp;
}
inline ::structure::GtpTunnelId* GtpTunnelInfo::_internal_mutable_tnl_id() {
  
  if (tnl_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::structure::GtpTunnelId>(GetArena());
    tnl_id_ = p;
  }
  return tnl_id_;
}
inline ::structure::GtpTunnelId* GtpTunnelInfo::mutable_tnl_id() {
  // @@protoc_insertion_point(field_mutable:structure.GtpTunnelInfo.tnl_id)
  return _internal_mutable_tnl_id();
}
inline void GtpTunnelInfo::set_allocated_tnl_id(::structure::GtpTunnelId* tnl_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tnl_id_;
  }
  if (tnl_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tnl_id);
    if (message_arena != submessage_arena) {
      tnl_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tnl_id, submessage_arena);
    }
    
  } else {
    
  }
  tnl_id_ = tnl_id;
  // @@protoc_insertion_point(field_set_allocated:structure.GtpTunnelInfo.tnl_id)
}

// uint32 dscp = 20;
inline void GtpTunnelInfo::clear_dscp() {
  dscp_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GtpTunnelInfo::_internal_dscp() const {
  return dscp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GtpTunnelInfo::dscp() const {
  // @@protoc_insertion_point(field_get:structure.GtpTunnelInfo.dscp)
  return _internal_dscp();
}
inline void GtpTunnelInfo::_internal_set_dscp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  dscp_ = value;
}
inline void GtpTunnelInfo::set_dscp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dscp(value);
  // @@protoc_insertion_point(field_set:structure.GtpTunnelInfo.dscp)
}

// .structure.TunnelType tunnel_type = 21;
inline void GtpTunnelInfo::clear_tunnel_type() {
  tunnel_type_ = 0;
}
inline ::structure::TunnelType GtpTunnelInfo::_internal_tunnel_type() const {
  return static_cast< ::structure::TunnelType >(tunnel_type_);
}
inline ::structure::TunnelType GtpTunnelInfo::tunnel_type() const {
  // @@protoc_insertion_point(field_get:structure.GtpTunnelInfo.tunnel_type)
  return _internal_tunnel_type();
}
inline void GtpTunnelInfo::_internal_set_tunnel_type(::structure::TunnelType value) {
  
  tunnel_type_ = value;
}
inline void GtpTunnelInfo::set_tunnel_type(::structure::TunnelType value) {
  _internal_set_tunnel_type(value);
  // @@protoc_insertion_point(field_set:structure.GtpTunnelInfo.tunnel_type)
}

// .structure.InterfaceType interface_type = 22;
inline void GtpTunnelInfo::clear_interface_type() {
  interface_type_ = 0;
}
inline ::structure::InterfaceType GtpTunnelInfo::_internal_interface_type() const {
  return static_cast< ::structure::InterfaceType >(interface_type_);
}
inline ::structure::InterfaceType GtpTunnelInfo::interface_type() const {
  // @@protoc_insertion_point(field_get:structure.GtpTunnelInfo.interface_type)
  return _internal_interface_type();
}
inline void GtpTunnelInfo::_internal_set_interface_type(::structure::InterfaceType value) {
  
  interface_type_ = value;
}
inline void GtpTunnelInfo::set_interface_type(::structure::InterfaceType value) {
  _internal_set_interface_type(value);
  // @@protoc_insertion_point(field_set:structure.GtpTunnelInfo.interface_type)
}

// .common.IpAddress dst_addr = 30;
inline bool GtpTunnelInfo::_internal_has_dst_addr() const {
  return this != internal_default_instance() && dst_addr_ != nullptr;
}
inline bool GtpTunnelInfo::has_dst_addr() const {
  return _internal_has_dst_addr();
}
inline const ::common::IpAddress& GtpTunnelInfo::_internal_dst_addr() const {
  const ::common::IpAddress* p = dst_addr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::common::IpAddress*>(
      &::common::_IpAddress_default_instance_);
}
inline const ::common::IpAddress& GtpTunnelInfo::dst_addr() const {
  // @@protoc_insertion_point(field_get:structure.GtpTunnelInfo.dst_addr)
  return _internal_dst_addr();
}
inline void GtpTunnelInfo::unsafe_arena_set_allocated_dst_addr(
    ::common::IpAddress* dst_addr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dst_addr_);
  }
  dst_addr_ = dst_addr;
  if (dst_addr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:structure.GtpTunnelInfo.dst_addr)
}
inline ::common::IpAddress* GtpTunnelInfo::release_dst_addr() {
  
  ::common::IpAddress* temp = dst_addr_;
  dst_addr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::IpAddress* GtpTunnelInfo::unsafe_arena_release_dst_addr() {
  // @@protoc_insertion_point(field_release:structure.GtpTunnelInfo.dst_addr)
  
  ::common::IpAddress* temp = dst_addr_;
  dst_addr_ = nullptr;
  return temp;
}
inline ::common::IpAddress* GtpTunnelInfo::_internal_mutable_dst_addr() {
  
  if (dst_addr_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::IpAddress>(GetArena());
    dst_addr_ = p;
  }
  return dst_addr_;
}
inline ::common::IpAddress* GtpTunnelInfo::mutable_dst_addr() {
  // @@protoc_insertion_point(field_mutable:structure.GtpTunnelInfo.dst_addr)
  return _internal_mutable_dst_addr();
}
inline void GtpTunnelInfo::set_allocated_dst_addr(::common::IpAddress* dst_addr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dst_addr_);
  }
  if (dst_addr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dst_addr)->GetArena();
    if (message_arena != submessage_arena) {
      dst_addr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dst_addr, submessage_arena);
    }
    
  } else {
    
  }
  dst_addr_ = dst_addr;
  // @@protoc_insertion_point(field_set_allocated:structure.GtpTunnelInfo.dst_addr)
}

// .common.IpAddress src_addr = 31;
inline bool GtpTunnelInfo::_internal_has_src_addr() const {
  return this != internal_default_instance() && src_addr_ != nullptr;
}
inline bool GtpTunnelInfo::has_src_addr() const {
  return _internal_has_src_addr();
}
inline const ::common::IpAddress& GtpTunnelInfo::_internal_src_addr() const {
  const ::common::IpAddress* p = src_addr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::common::IpAddress*>(
      &::common::_IpAddress_default_instance_);
}
inline const ::common::IpAddress& GtpTunnelInfo::src_addr() const {
  // @@protoc_insertion_point(field_get:structure.GtpTunnelInfo.src_addr)
  return _internal_src_addr();
}
inline void GtpTunnelInfo::unsafe_arena_set_allocated_src_addr(
    ::common::IpAddress* src_addr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(src_addr_);
  }
  src_addr_ = src_addr;
  if (src_addr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:structure.GtpTunnelInfo.src_addr)
}
inline ::common::IpAddress* GtpTunnelInfo::release_src_addr() {
  
  ::common::IpAddress* temp = src_addr_;
  src_addr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::IpAddress* GtpTunnelInfo::unsafe_arena_release_src_addr() {
  // @@protoc_insertion_point(field_release:structure.GtpTunnelInfo.src_addr)
  
  ::common::IpAddress* temp = src_addr_;
  src_addr_ = nullptr;
  return temp;
}
inline ::common::IpAddress* GtpTunnelInfo::_internal_mutable_src_addr() {
  
  if (src_addr_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::IpAddress>(GetArena());
    src_addr_ = p;
  }
  return src_addr_;
}
inline ::common::IpAddress* GtpTunnelInfo::mutable_src_addr() {
  // @@protoc_insertion_point(field_mutable:structure.GtpTunnelInfo.src_addr)
  return _internal_mutable_src_addr();
}
inline void GtpTunnelInfo::set_allocated_src_addr(::common::IpAddress* src_addr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(src_addr_);
  }
  if (src_addr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(src_addr)->GetArena();
    if (message_arena != submessage_arena) {
      src_addr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, src_addr, submessage_arena);
    }
    
  } else {
    
  }
  src_addr_ = src_addr;
  // @@protoc_insertion_point(field_set_allocated:structure.GtpTunnelInfo.src_addr)
}

// uint32 rem_teid = 40;
inline void GtpTunnelInfo::clear_rem_teid() {
  rem_teid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GtpTunnelInfo::_internal_rem_teid() const {
  return rem_teid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GtpTunnelInfo::rem_teid() const {
  // @@protoc_insertion_point(field_get:structure.GtpTunnelInfo.rem_teid)
  return _internal_rem_teid();
}
inline void GtpTunnelInfo::_internal_set_rem_teid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rem_teid_ = value;
}
inline void GtpTunnelInfo::set_rem_teid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rem_teid(value);
  // @@protoc_insertion_point(field_set:structure.GtpTunnelInfo.rem_teid)
}

// uint32 corr_id = 41;
inline void GtpTunnelInfo::clear_corr_id() {
  corr_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GtpTunnelInfo::_internal_corr_id() const {
  return corr_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GtpTunnelInfo::corr_id() const {
  // @@protoc_insertion_point(field_get:structure.GtpTunnelInfo.corr_id)
  return _internal_corr_id();
}
inline void GtpTunnelInfo::_internal_set_corr_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  corr_id_ = value;
}
inline void GtpTunnelInfo::set_corr_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_corr_id(value);
  // @@protoc_insertion_point(field_set:structure.GtpTunnelInfo.corr_id)
}

// bool ho_src_enodeb = 50;
inline void GtpTunnelInfo::clear_ho_src_enodeb() {
  ho_src_enodeb_ = false;
}
inline bool GtpTunnelInfo::_internal_ho_src_enodeb() const {
  return ho_src_enodeb_;
}
inline bool GtpTunnelInfo::ho_src_enodeb() const {
  // @@protoc_insertion_point(field_get:structure.GtpTunnelInfo.ho_src_enodeb)
  return _internal_ho_src_enodeb();
}
inline void GtpTunnelInfo::_internal_set_ho_src_enodeb(bool value) {
  
  ho_src_enodeb_ = value;
}
inline void GtpTunnelInfo::set_ho_src_enodeb(bool value) {
  _internal_set_ho_src_enodeb(value);
  // @@protoc_insertion_point(field_set:structure.GtpTunnelInfo.ho_src_enodeb)
}

// .structure.HandoverType ho_type = 51;
inline void GtpTunnelInfo::clear_ho_type() {
  ho_type_ = 0;
}
inline ::structure::HandoverType GtpTunnelInfo::_internal_ho_type() const {
  return static_cast< ::structure::HandoverType >(ho_type_);
}
inline ::structure::HandoverType GtpTunnelInfo::ho_type() const {
  // @@protoc_insertion_point(field_get:structure.GtpTunnelInfo.ho_type)
  return _internal_ho_type();
}
inline void GtpTunnelInfo::_internal_set_ho_type(::structure::HandoverType value) {
  
  ho_type_ = value;
}
inline void GtpTunnelInfo::set_ho_type(::structure::HandoverType value) {
  _internal_set_ho_type(value);
  // @@protoc_insertion_point(field_set:structure.GtpTunnelInfo.ho_type)
}

// bool is_fullCfg = 60;
inline void GtpTunnelInfo::clear_is_fullcfg() {
  is_fullcfg_ = false;
}
inline bool GtpTunnelInfo::_internal_is_fullcfg() const {
  return is_fullcfg_;
}
inline bool GtpTunnelInfo::is_fullcfg() const {
  // @@protoc_insertion_point(field_get:structure.GtpTunnelInfo.is_fullCfg)
  return _internal_is_fullcfg();
}
inline void GtpTunnelInfo::_internal_set_is_fullcfg(bool value) {
  
  is_fullcfg_ = value;
}
inline void GtpTunnelInfo::set_is_fullcfg(bool value) {
  _internal_set_is_fullcfg(value);
  // @@protoc_insertion_point(field_set:structure.GtpTunnelInfo.is_fullCfg)
}

// uint32 old_cell_id = 61;
inline void GtpTunnelInfo::clear_old_cell_id() {
  old_cell_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GtpTunnelInfo::_internal_old_cell_id() const {
  return old_cell_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GtpTunnelInfo::old_cell_id() const {
  // @@protoc_insertion_point(field_get:structure.GtpTunnelInfo.old_cell_id)
  return _internal_old_cell_id();
}
inline void GtpTunnelInfo::_internal_set_old_cell_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  old_cell_id_ = value;
}
inline void GtpTunnelInfo::set_old_cell_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_old_cell_id(value);
  // @@protoc_insertion_point(field_set:structure.GtpTunnelInfo.old_cell_id)
}

// uint32 old_crnti = 62;
inline void GtpTunnelInfo::clear_old_crnti() {
  old_crnti_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GtpTunnelInfo::_internal_old_crnti() const {
  return old_crnti_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GtpTunnelInfo::old_crnti() const {
  // @@protoc_insertion_point(field_get:structure.GtpTunnelInfo.old_crnti)
  return _internal_old_crnti();
}
inline void GtpTunnelInfo::_internal_set_old_crnti(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  old_crnti_ = value;
}
inline void GtpTunnelInfo::set_old_crnti(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_old_crnti(value);
  // @@protoc_insertion_point(field_set:structure.GtpTunnelInfo.old_crnti)
}

// uint32 rlc_mode = 63;
inline void GtpTunnelInfo::clear_rlc_mode() {
  rlc_mode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GtpTunnelInfo::_internal_rlc_mode() const {
  return rlc_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GtpTunnelInfo::rlc_mode() const {
  // @@protoc_insertion_point(field_get:structure.GtpTunnelInfo.rlc_mode)
  return _internal_rlc_mode();
}
inline void GtpTunnelInfo::_internal_set_rlc_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rlc_mode_ = value;
}
inline void GtpTunnelInfo::set_rlc_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rlc_mode(value);
  // @@protoc_insertion_point(field_set:structure.GtpTunnelInfo.rlc_mode)
}

// uint32 qci = 70;
inline void GtpTunnelInfo::clear_qci() {
  qci_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GtpTunnelInfo::_internal_qci() const {
  return qci_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GtpTunnelInfo::qci() const {
  // @@protoc_insertion_point(field_get:structure.GtpTunnelInfo.qci)
  return _internal_qci();
}
inline void GtpTunnelInfo::_internal_set_qci(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  qci_ = value;
}
inline void GtpTunnelInfo::set_qci(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_qci(value);
  // @@protoc_insertion_point(field_set:structure.GtpTunnelInfo.qci)
}

// uint32 end_cbr_type = 71;
inline void GtpTunnelInfo::clear_end_cbr_type() {
  end_cbr_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GtpTunnelInfo::_internal_end_cbr_type() const {
  return end_cbr_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GtpTunnelInfo::end_cbr_type() const {
  // @@protoc_insertion_point(field_get:structure.GtpTunnelInfo.end_cbr_type)
  return _internal_end_cbr_type();
}
inline void GtpTunnelInfo::_internal_set_end_cbr_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  end_cbr_type_ = value;
}
inline void GtpTunnelInfo::set_end_cbr_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_end_cbr_type(value);
  // @@protoc_insertion_point(field_set:structure.GtpTunnelInfo.end_cbr_type)
}

// -------------------------------------------------------------------

// RlcInfo

// uint32 direction = 10;
inline void RlcInfo::clear_direction() {
  direction_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RlcInfo::_internal_direction() const {
  return direction_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RlcInfo::direction() const {
  // @@protoc_insertion_point(field_get:structure.RlcInfo.direction)
  return _internal_direction();
}
inline void RlcInfo::_internal_set_direction(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  direction_ = value;
}
inline void RlcInfo::set_direction(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:structure.RlcInfo.direction)
}

// uint32 mode = 20;
inline void RlcInfo::clear_mode() {
  mode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RlcInfo::_internal_mode() const {
  return mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RlcInfo::mode() const {
  // @@protoc_insertion_point(field_get:structure.RlcInfo.mode)
  return _internal_mode();
}
inline void RlcInfo::_internal_set_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  mode_ = value;
}
inline void RlcInfo::set_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:structure.RlcInfo.mode)
}

// bool status_rep_require = 30;
inline void RlcInfo::clear_status_rep_require() {
  status_rep_require_ = false;
}
inline bool RlcInfo::_internal_status_rep_require() const {
  return status_rep_require_;
}
inline bool RlcInfo::status_rep_require() const {
  // @@protoc_insertion_point(field_get:structure.RlcInfo.status_rep_require)
  return _internal_status_rep_require();
}
inline void RlcInfo::_internal_set_status_rep_require(bool value) {
  
  status_rep_require_ = value;
}
inline void RlcInfo::set_status_rep_require(bool value) {
  _internal_set_status_rep_require(value);
  // @@protoc_insertion_point(field_set:structure.RlcInfo.status_rep_require)
}

// uint32 pdcp_sn_size = 40;
inline void RlcInfo::clear_pdcp_sn_size() {
  pdcp_sn_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RlcInfo::_internal_pdcp_sn_size() const {
  return pdcp_sn_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RlcInfo::pdcp_sn_size() const {
  // @@protoc_insertion_point(field_get:structure.RlcInfo.pdcp_sn_size)
  return _internal_pdcp_sn_size();
}
inline void RlcInfo::_internal_set_pdcp_sn_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pdcp_sn_size_ = value;
}
inline void RlcInfo::set_pdcp_sn_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pdcp_sn_size(value);
  // @@protoc_insertion_point(field_set:structure.RlcInfo.pdcp_sn_size)
}

// -------------------------------------------------------------------

// HeaderCompressionConfig

// bool hdr_comp_used = 10;
inline void HeaderCompressionConfig::clear_hdr_comp_used() {
  hdr_comp_used_ = false;
}
inline bool HeaderCompressionConfig::_internal_hdr_comp_used() const {
  return hdr_comp_used_;
}
inline bool HeaderCompressionConfig::hdr_comp_used() const {
  // @@protoc_insertion_point(field_get:structure.HeaderCompressionConfig.hdr_comp_used)
  return _internal_hdr_comp_used();
}
inline void HeaderCompressionConfig::_internal_set_hdr_comp_used(bool value) {
  
  hdr_comp_used_ = value;
}
inline void HeaderCompressionConfig::set_hdr_comp_used(bool value) {
  _internal_set_hdr_comp_used(value);
  // @@protoc_insertion_point(field_set:structure.HeaderCompressionConfig.hdr_comp_used)
}

// uint32 max_cid = 20;
inline void HeaderCompressionConfig::clear_max_cid() {
  max_cid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HeaderCompressionConfig::_internal_max_cid() const {
  return max_cid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HeaderCompressionConfig::max_cid() const {
  // @@protoc_insertion_point(field_get:structure.HeaderCompressionConfig.max_cid)
  return _internal_max_cid();
}
inline void HeaderCompressionConfig::_internal_set_max_cid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  max_cid_ = value;
}
inline void HeaderCompressionConfig::set_max_cid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_cid(value);
  // @@protoc_insertion_point(field_set:structure.HeaderCompressionConfig.max_cid)
}

// repeated uint32 profile_list = 30;
inline int HeaderCompressionConfig::_internal_profile_list_size() const {
  return profile_list_.size();
}
inline int HeaderCompressionConfig::profile_list_size() const {
  return _internal_profile_list_size();
}
inline void HeaderCompressionConfig::clear_profile_list() {
  profile_list_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HeaderCompressionConfig::_internal_profile_list(int index) const {
  return profile_list_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HeaderCompressionConfig::profile_list(int index) const {
  // @@protoc_insertion_point(field_get:structure.HeaderCompressionConfig.profile_list)
  return _internal_profile_list(index);
}
inline void HeaderCompressionConfig::set_profile_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  profile_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:structure.HeaderCompressionConfig.profile_list)
}
inline void HeaderCompressionConfig::_internal_add_profile_list(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  profile_list_.Add(value);
}
inline void HeaderCompressionConfig::add_profile_list(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_profile_list(value);
  // @@protoc_insertion_point(field_add:structure.HeaderCompressionConfig.profile_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
HeaderCompressionConfig::_internal_profile_list() const {
  return profile_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
HeaderCompressionConfig::profile_list() const {
  // @@protoc_insertion_point(field_list:structure.HeaderCompressionConfig.profile_list)
  return _internal_profile_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
HeaderCompressionConfig::_internal_mutable_profile_list() {
  return &profile_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
HeaderCompressionConfig::mutable_profile_list() {
  // @@protoc_insertion_point(field_mutable_list:structure.HeaderCompressionConfig.profile_list)
  return _internal_mutable_profile_list();
}

// -------------------------------------------------------------------

// PDCPHoInfo

// .structure.PDCPHoPres is_ho_pres = 10;
inline void PDCPHoInfo::clear_is_ho_pres() {
  is_ho_pres_ = 0;
}
inline ::structure::PDCPHoPres PDCPHoInfo::_internal_is_ho_pres() const {
  return static_cast< ::structure::PDCPHoPres >(is_ho_pres_);
}
inline ::structure::PDCPHoPres PDCPHoInfo::is_ho_pres() const {
  // @@protoc_insertion_point(field_get:structure.PDCPHoInfo.is_ho_pres)
  return _internal_is_ho_pres();
}
inline void PDCPHoInfo::_internal_set_is_ho_pres(::structure::PDCPHoPres value) {
  
  is_ho_pres_ = value;
}
inline void PDCPHoInfo::set_is_ho_pres(::structure::PDCPHoPres value) {
  _internal_set_is_ho_pres(value);
  // @@protoc_insertion_point(field_set:structure.PDCPHoInfo.is_ho_pres)
}

// uint32 sn_len = 20;
inline void PDCPHoInfo::clear_sn_len() {
  sn_len_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PDCPHoInfo::_internal_sn_len() const {
  return sn_len_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PDCPHoInfo::sn_len() const {
  // @@protoc_insertion_point(field_get:structure.PDCPHoInfo.sn_len)
  return _internal_sn_len();
}
inline void PDCPHoInfo::_internal_set_sn_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sn_len_ = value;
}
inline void PDCPHoInfo::set_sn_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sn_len(value);
  // @@protoc_insertion_point(field_set:structure.PDCPHoInfo.sn_len)
}

// uint32 dl_count = 30;
inline void PDCPHoInfo::clear_dl_count() {
  dl_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PDCPHoInfo::_internal_dl_count() const {
  return dl_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PDCPHoInfo::dl_count() const {
  // @@protoc_insertion_point(field_get:structure.PDCPHoInfo.dl_count)
  return _internal_dl_count();
}
inline void PDCPHoInfo::_internal_set_dl_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  dl_count_ = value;
}
inline void PDCPHoInfo::set_dl_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dl_count(value);
  // @@protoc_insertion_point(field_set:structure.PDCPHoInfo.dl_count)
}

// uint32 ul_count = 40;
inline void PDCPHoInfo::clear_ul_count() {
  ul_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PDCPHoInfo::_internal_ul_count() const {
  return ul_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PDCPHoInfo::ul_count() const {
  // @@protoc_insertion_point(field_get:structure.PDCPHoInfo.ul_count)
  return _internal_ul_count();
}
inline void PDCPHoInfo::_internal_set_ul_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ul_count_ = value;
}
inline void PDCPHoInfo::set_ul_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ul_count(value);
  // @@protoc_insertion_point(field_set:structure.PDCPHoInfo.ul_count)
}

// uint32 num_bits = 50;
inline void PDCPHoInfo::clear_num_bits() {
  num_bits_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PDCPHoInfo::_internal_num_bits() const {
  return num_bits_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PDCPHoInfo::num_bits() const {
  // @@protoc_insertion_point(field_get:structure.PDCPHoInfo.num_bits)
  return _internal_num_bits();
}
inline void PDCPHoInfo::_internal_set_num_bits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_bits_ = value;
}
inline void PDCPHoInfo::set_num_bits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_bits(value);
  // @@protoc_insertion_point(field_set:structure.PDCPHoInfo.num_bits)
}

// repeated uint32 bit_map = 60;
inline int PDCPHoInfo::_internal_bit_map_size() const {
  return bit_map_.size();
}
inline int PDCPHoInfo::bit_map_size() const {
  return _internal_bit_map_size();
}
inline void PDCPHoInfo::clear_bit_map() {
  bit_map_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PDCPHoInfo::_internal_bit_map(int index) const {
  return bit_map_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PDCPHoInfo::bit_map(int index) const {
  // @@protoc_insertion_point(field_get:structure.PDCPHoInfo.bit_map)
  return _internal_bit_map(index);
}
inline void PDCPHoInfo::set_bit_map(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  bit_map_.Set(index, value);
  // @@protoc_insertion_point(field_set:structure.PDCPHoInfo.bit_map)
}
inline void PDCPHoInfo::_internal_add_bit_map(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  bit_map_.Add(value);
}
inline void PDCPHoInfo::add_bit_map(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_bit_map(value);
  // @@protoc_insertion_point(field_add:structure.PDCPHoInfo.bit_map)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PDCPHoInfo::_internal_bit_map() const {
  return bit_map_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PDCPHoInfo::bit_map() const {
  // @@protoc_insertion_point(field_list:structure.PDCPHoInfo.bit_map)
  return _internal_bit_map();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PDCPHoInfo::_internal_mutable_bit_map() {
  return &bit_map_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PDCPHoInfo::mutable_bit_map() {
  // @@protoc_insertion_point(field_mutable_list:structure.PDCPHoInfo.bit_map)
  return _internal_mutable_bit_map();
}

// -------------------------------------------------------------------

// PDCPDCBearerInfo

// uint32 sn_len = 10;
inline void PDCPDCBearerInfo::clear_sn_len() {
  sn_len_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PDCPDCBearerInfo::_internal_sn_len() const {
  return sn_len_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PDCPDCBearerInfo::sn_len() const {
  // @@protoc_insertion_point(field_get:structure.PDCPDCBearerInfo.sn_len)
  return _internal_sn_len();
}
inline void PDCPDCBearerInfo::_internal_set_sn_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sn_len_ = value;
}
inline void PDCPDCBearerInfo::set_sn_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sn_len(value);
  // @@protoc_insertion_point(field_set:structure.PDCPDCBearerInfo.sn_len)
}

// uint32 bearer_type = 20;
inline void PDCPDCBearerInfo::clear_bearer_type() {
  bearer_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PDCPDCBearerInfo::_internal_bearer_type() const {
  return bearer_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PDCPDCBearerInfo::bearer_type() const {
  // @@protoc_insertion_point(field_get:structure.PDCPDCBearerInfo.bearer_type)
  return _internal_bearer_type();
}
inline void PDCPDCBearerInfo::_internal_set_bearer_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  bearer_type_ = value;
}
inline void PDCPDCBearerInfo::set_bearer_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bearer_type(value);
  // @@protoc_insertion_point(field_set:structure.PDCPDCBearerInfo.bearer_type)
}

// uint32 split_ratio = 30;
inline void PDCPDCBearerInfo::clear_split_ratio() {
  split_ratio_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PDCPDCBearerInfo::_internal_split_ratio() const {
  return split_ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PDCPDCBearerInfo::split_ratio() const {
  // @@protoc_insertion_point(field_get:structure.PDCPDCBearerInfo.split_ratio)
  return _internal_split_ratio();
}
inline void PDCPDCBearerInfo::_internal_set_split_ratio(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  split_ratio_ = value;
}
inline void PDCPDCBearerInfo::set_split_ratio(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_split_ratio(value);
  // @@protoc_insertion_point(field_set:structure.PDCPDCBearerInfo.split_ratio)
}

// -------------------------------------------------------------------

// PDCPAddCfgEnt

// uint32 rb_id = 10;
inline void PDCPAddCfgEnt::clear_rb_id() {
  rb_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PDCPAddCfgEnt::_internal_rb_id() const {
  return rb_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PDCPAddCfgEnt::rb_id() const {
  // @@protoc_insertion_point(field_get:structure.PDCPAddCfgEnt.rb_id)
  return _internal_rb_id();
}
inline void PDCPAddCfgEnt::_internal_set_rb_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rb_id_ = value;
}
inline void PDCPAddCfgEnt::set_rb_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rb_id(value);
  // @@protoc_insertion_point(field_set:structure.PDCPAddCfgEnt.rb_id)
}

// uint32 qci = 20;
inline void PDCPAddCfgEnt::clear_qci() {
  qci_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PDCPAddCfgEnt::_internal_qci() const {
  return qci_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PDCPAddCfgEnt::qci() const {
  // @@protoc_insertion_point(field_get:structure.PDCPAddCfgEnt.qci)
  return _internal_qci();
}
inline void PDCPAddCfgEnt::_internal_set_qci(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  qci_ = value;
}
inline void PDCPAddCfgEnt::set_qci(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_qci(value);
  // @@protoc_insertion_point(field_set:structure.PDCPAddCfgEnt.qci)
}

// .structure.RlcInfo rlc_info = 30;
inline bool PDCPAddCfgEnt::_internal_has_rlc_info() const {
  return this != internal_default_instance() && rlc_info_ != nullptr;
}
inline bool PDCPAddCfgEnt::has_rlc_info() const {
  return _internal_has_rlc_info();
}
inline void PDCPAddCfgEnt::clear_rlc_info() {
  if (GetArena() == nullptr && rlc_info_ != nullptr) {
    delete rlc_info_;
  }
  rlc_info_ = nullptr;
}
inline const ::structure::RlcInfo& PDCPAddCfgEnt::_internal_rlc_info() const {
  const ::structure::RlcInfo* p = rlc_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::structure::RlcInfo*>(
      &::structure::_RlcInfo_default_instance_);
}
inline const ::structure::RlcInfo& PDCPAddCfgEnt::rlc_info() const {
  // @@protoc_insertion_point(field_get:structure.PDCPAddCfgEnt.rlc_info)
  return _internal_rlc_info();
}
inline void PDCPAddCfgEnt::unsafe_arena_set_allocated_rlc_info(
    ::structure::RlcInfo* rlc_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rlc_info_);
  }
  rlc_info_ = rlc_info;
  if (rlc_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:structure.PDCPAddCfgEnt.rlc_info)
}
inline ::structure::RlcInfo* PDCPAddCfgEnt::release_rlc_info() {
  
  ::structure::RlcInfo* temp = rlc_info_;
  rlc_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::structure::RlcInfo* PDCPAddCfgEnt::unsafe_arena_release_rlc_info() {
  // @@protoc_insertion_point(field_release:structure.PDCPAddCfgEnt.rlc_info)
  
  ::structure::RlcInfo* temp = rlc_info_;
  rlc_info_ = nullptr;
  return temp;
}
inline ::structure::RlcInfo* PDCPAddCfgEnt::_internal_mutable_rlc_info() {
  
  if (rlc_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::structure::RlcInfo>(GetArena());
    rlc_info_ = p;
  }
  return rlc_info_;
}
inline ::structure::RlcInfo* PDCPAddCfgEnt::mutable_rlc_info() {
  // @@protoc_insertion_point(field_mutable:structure.PDCPAddCfgEnt.rlc_info)
  return _internal_mutable_rlc_info();
}
inline void PDCPAddCfgEnt::set_allocated_rlc_info(::structure::RlcInfo* rlc_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rlc_info_;
  }
  if (rlc_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rlc_info);
    if (message_arena != submessage_arena) {
      rlc_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rlc_info, submessage_arena);
    }
    
  } else {
    
  }
  rlc_info_ = rlc_info;
  // @@protoc_insertion_point(field_set_allocated:structure.PDCPAddCfgEnt.rlc_info)
}

// uint32 discard_timer = 40;
inline void PDCPAddCfgEnt::clear_discard_timer() {
  discard_timer_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PDCPAddCfgEnt::_internal_discard_timer() const {
  return discard_timer_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PDCPAddCfgEnt::discard_timer() const {
  // @@protoc_insertion_point(field_get:structure.PDCPAddCfgEnt.discard_timer)
  return _internal_discard_timer();
}
inline void PDCPAddCfgEnt::_internal_set_discard_timer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  discard_timer_ = value;
}
inline void PDCPAddCfgEnt::set_discard_timer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_discard_timer(value);
  // @@protoc_insertion_point(field_set:structure.PDCPAddCfgEnt.discard_timer)
}

// uint32 re_ord_tmr_val = 50;
inline void PDCPAddCfgEnt::clear_re_ord_tmr_val() {
  re_ord_tmr_val_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PDCPAddCfgEnt::_internal_re_ord_tmr_val() const {
  return re_ord_tmr_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PDCPAddCfgEnt::re_ord_tmr_val() const {
  // @@protoc_insertion_point(field_get:structure.PDCPAddCfgEnt.re_ord_tmr_val)
  return _internal_re_ord_tmr_val();
}
inline void PDCPAddCfgEnt::_internal_set_re_ord_tmr_val(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  re_ord_tmr_val_ = value;
}
inline void PDCPAddCfgEnt::set_re_ord_tmr_val(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_re_ord_tmr_val(value);
  // @@protoc_insertion_point(field_set:structure.PDCPAddCfgEnt.re_ord_tmr_val)
}

// .structure.HeaderCompressionConfig hdr_cmp_cfg = 60;
inline bool PDCPAddCfgEnt::_internal_has_hdr_cmp_cfg() const {
  return this != internal_default_instance() && hdr_cmp_cfg_ != nullptr;
}
inline bool PDCPAddCfgEnt::has_hdr_cmp_cfg() const {
  return _internal_has_hdr_cmp_cfg();
}
inline void PDCPAddCfgEnt::clear_hdr_cmp_cfg() {
  if (GetArena() == nullptr && hdr_cmp_cfg_ != nullptr) {
    delete hdr_cmp_cfg_;
  }
  hdr_cmp_cfg_ = nullptr;
}
inline const ::structure::HeaderCompressionConfig& PDCPAddCfgEnt::_internal_hdr_cmp_cfg() const {
  const ::structure::HeaderCompressionConfig* p = hdr_cmp_cfg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::structure::HeaderCompressionConfig*>(
      &::structure::_HeaderCompressionConfig_default_instance_);
}
inline const ::structure::HeaderCompressionConfig& PDCPAddCfgEnt::hdr_cmp_cfg() const {
  // @@protoc_insertion_point(field_get:structure.PDCPAddCfgEnt.hdr_cmp_cfg)
  return _internal_hdr_cmp_cfg();
}
inline void PDCPAddCfgEnt::unsafe_arena_set_allocated_hdr_cmp_cfg(
    ::structure::HeaderCompressionConfig* hdr_cmp_cfg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_cmp_cfg_);
  }
  hdr_cmp_cfg_ = hdr_cmp_cfg;
  if (hdr_cmp_cfg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:structure.PDCPAddCfgEnt.hdr_cmp_cfg)
}
inline ::structure::HeaderCompressionConfig* PDCPAddCfgEnt::release_hdr_cmp_cfg() {
  
  ::structure::HeaderCompressionConfig* temp = hdr_cmp_cfg_;
  hdr_cmp_cfg_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::structure::HeaderCompressionConfig* PDCPAddCfgEnt::unsafe_arena_release_hdr_cmp_cfg() {
  // @@protoc_insertion_point(field_release:structure.PDCPAddCfgEnt.hdr_cmp_cfg)
  
  ::structure::HeaderCompressionConfig* temp = hdr_cmp_cfg_;
  hdr_cmp_cfg_ = nullptr;
  return temp;
}
inline ::structure::HeaderCompressionConfig* PDCPAddCfgEnt::_internal_mutable_hdr_cmp_cfg() {
  
  if (hdr_cmp_cfg_ == nullptr) {
    auto* p = CreateMaybeMessage<::structure::HeaderCompressionConfig>(GetArena());
    hdr_cmp_cfg_ = p;
  }
  return hdr_cmp_cfg_;
}
inline ::structure::HeaderCompressionConfig* PDCPAddCfgEnt::mutable_hdr_cmp_cfg() {
  // @@protoc_insertion_point(field_mutable:structure.PDCPAddCfgEnt.hdr_cmp_cfg)
  return _internal_mutable_hdr_cmp_cfg();
}
inline void PDCPAddCfgEnt::set_allocated_hdr_cmp_cfg(::structure::HeaderCompressionConfig* hdr_cmp_cfg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete hdr_cmp_cfg_;
  }
  if (hdr_cmp_cfg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(hdr_cmp_cfg);
    if (message_arena != submessage_arena) {
      hdr_cmp_cfg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hdr_cmp_cfg, submessage_arena);
    }
    
  } else {
    
  }
  hdr_cmp_cfg_ = hdr_cmp_cfg;
  // @@protoc_insertion_point(field_set_allocated:structure.PDCPAddCfgEnt.hdr_cmp_cfg)
}

// -------------------------------------------------------------------

// PDCPModCfgEnt

// uint32 rb_id = 10;
inline void PDCPModCfgEnt::clear_rb_id() {
  rb_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PDCPModCfgEnt::_internal_rb_id() const {
  return rb_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PDCPModCfgEnt::rb_id() const {
  // @@protoc_insertion_point(field_get:structure.PDCPModCfgEnt.rb_id)
  return _internal_rb_id();
}
inline void PDCPModCfgEnt::_internal_set_rb_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rb_id_ = value;
}
inline void PDCPModCfgEnt::set_rb_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rb_id(value);
  // @@protoc_insertion_point(field_set:structure.PDCPModCfgEnt.rb_id)
}

// uint32 bit_flag = 20;
inline void PDCPModCfgEnt::clear_bit_flag() {
  bit_flag_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PDCPModCfgEnt::_internal_bit_flag() const {
  return bit_flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PDCPModCfgEnt::bit_flag() const {
  // @@protoc_insertion_point(field_get:structure.PDCPModCfgEnt.bit_flag)
  return _internal_bit_flag();
}
inline void PDCPModCfgEnt::_internal_set_bit_flag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  bit_flag_ = value;
}
inline void PDCPModCfgEnt::set_bit_flag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bit_flag(value);
  // @@protoc_insertion_point(field_set:structure.PDCPModCfgEnt.bit_flag)
}

// .structure.HeaderCompressionConfig hdr_cmp_cfg = 30;
inline bool PDCPModCfgEnt::_internal_has_hdr_cmp_cfg() const {
  return this != internal_default_instance() && hdr_cmp_cfg_ != nullptr;
}
inline bool PDCPModCfgEnt::has_hdr_cmp_cfg() const {
  return _internal_has_hdr_cmp_cfg();
}
inline void PDCPModCfgEnt::clear_hdr_cmp_cfg() {
  if (GetArena() == nullptr && hdr_cmp_cfg_ != nullptr) {
    delete hdr_cmp_cfg_;
  }
  hdr_cmp_cfg_ = nullptr;
}
inline const ::structure::HeaderCompressionConfig& PDCPModCfgEnt::_internal_hdr_cmp_cfg() const {
  const ::structure::HeaderCompressionConfig* p = hdr_cmp_cfg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::structure::HeaderCompressionConfig*>(
      &::structure::_HeaderCompressionConfig_default_instance_);
}
inline const ::structure::HeaderCompressionConfig& PDCPModCfgEnt::hdr_cmp_cfg() const {
  // @@protoc_insertion_point(field_get:structure.PDCPModCfgEnt.hdr_cmp_cfg)
  return _internal_hdr_cmp_cfg();
}
inline void PDCPModCfgEnt::unsafe_arena_set_allocated_hdr_cmp_cfg(
    ::structure::HeaderCompressionConfig* hdr_cmp_cfg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_cmp_cfg_);
  }
  hdr_cmp_cfg_ = hdr_cmp_cfg;
  if (hdr_cmp_cfg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:structure.PDCPModCfgEnt.hdr_cmp_cfg)
}
inline ::structure::HeaderCompressionConfig* PDCPModCfgEnt::release_hdr_cmp_cfg() {
  
  ::structure::HeaderCompressionConfig* temp = hdr_cmp_cfg_;
  hdr_cmp_cfg_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::structure::HeaderCompressionConfig* PDCPModCfgEnt::unsafe_arena_release_hdr_cmp_cfg() {
  // @@protoc_insertion_point(field_release:structure.PDCPModCfgEnt.hdr_cmp_cfg)
  
  ::structure::HeaderCompressionConfig* temp = hdr_cmp_cfg_;
  hdr_cmp_cfg_ = nullptr;
  return temp;
}
inline ::structure::HeaderCompressionConfig* PDCPModCfgEnt::_internal_mutable_hdr_cmp_cfg() {
  
  if (hdr_cmp_cfg_ == nullptr) {
    auto* p = CreateMaybeMessage<::structure::HeaderCompressionConfig>(GetArena());
    hdr_cmp_cfg_ = p;
  }
  return hdr_cmp_cfg_;
}
inline ::structure::HeaderCompressionConfig* PDCPModCfgEnt::mutable_hdr_cmp_cfg() {
  // @@protoc_insertion_point(field_mutable:structure.PDCPModCfgEnt.hdr_cmp_cfg)
  return _internal_mutable_hdr_cmp_cfg();
}
inline void PDCPModCfgEnt::set_allocated_hdr_cmp_cfg(::structure::HeaderCompressionConfig* hdr_cmp_cfg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete hdr_cmp_cfg_;
  }
  if (hdr_cmp_cfg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(hdr_cmp_cfg);
    if (message_arena != submessage_arena) {
      hdr_cmp_cfg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hdr_cmp_cfg, submessage_arena);
    }
    
  } else {
    
  }
  hdr_cmp_cfg_ = hdr_cmp_cfg;
  // @@protoc_insertion_point(field_set_allocated:structure.PDCPModCfgEnt.hdr_cmp_cfg)
}

// .structure.PDCPHoInfo ho_info = 40;
inline bool PDCPModCfgEnt::_internal_has_ho_info() const {
  return this != internal_default_instance() && ho_info_ != nullptr;
}
inline bool PDCPModCfgEnt::has_ho_info() const {
  return _internal_has_ho_info();
}
inline void PDCPModCfgEnt::clear_ho_info() {
  if (GetArena() == nullptr && ho_info_ != nullptr) {
    delete ho_info_;
  }
  ho_info_ = nullptr;
}
inline const ::structure::PDCPHoInfo& PDCPModCfgEnt::_internal_ho_info() const {
  const ::structure::PDCPHoInfo* p = ho_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::structure::PDCPHoInfo*>(
      &::structure::_PDCPHoInfo_default_instance_);
}
inline const ::structure::PDCPHoInfo& PDCPModCfgEnt::ho_info() const {
  // @@protoc_insertion_point(field_get:structure.PDCPModCfgEnt.ho_info)
  return _internal_ho_info();
}
inline void PDCPModCfgEnt::unsafe_arena_set_allocated_ho_info(
    ::structure::PDCPHoInfo* ho_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ho_info_);
  }
  ho_info_ = ho_info;
  if (ho_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:structure.PDCPModCfgEnt.ho_info)
}
inline ::structure::PDCPHoInfo* PDCPModCfgEnt::release_ho_info() {
  
  ::structure::PDCPHoInfo* temp = ho_info_;
  ho_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::structure::PDCPHoInfo* PDCPModCfgEnt::unsafe_arena_release_ho_info() {
  // @@protoc_insertion_point(field_release:structure.PDCPModCfgEnt.ho_info)
  
  ::structure::PDCPHoInfo* temp = ho_info_;
  ho_info_ = nullptr;
  return temp;
}
inline ::structure::PDCPHoInfo* PDCPModCfgEnt::_internal_mutable_ho_info() {
  
  if (ho_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::structure::PDCPHoInfo>(GetArena());
    ho_info_ = p;
  }
  return ho_info_;
}
inline ::structure::PDCPHoInfo* PDCPModCfgEnt::mutable_ho_info() {
  // @@protoc_insertion_point(field_mutable:structure.PDCPModCfgEnt.ho_info)
  return _internal_mutable_ho_info();
}
inline void PDCPModCfgEnt::set_allocated_ho_info(::structure::PDCPHoInfo* ho_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ho_info_;
  }
  if (ho_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ho_info);
    if (message_arena != submessage_arena) {
      ho_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ho_info, submessage_arena);
    }
    
  } else {
    
  }
  ho_info_ = ho_info;
  // @@protoc_insertion_point(field_set_allocated:structure.PDCPModCfgEnt.ho_info)
}

// uint32 re_ord_tmr_val = 50;
inline void PDCPModCfgEnt::clear_re_ord_tmr_val() {
  re_ord_tmr_val_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PDCPModCfgEnt::_internal_re_ord_tmr_val() const {
  return re_ord_tmr_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PDCPModCfgEnt::re_ord_tmr_val() const {
  // @@protoc_insertion_point(field_get:structure.PDCPModCfgEnt.re_ord_tmr_val)
  return _internal_re_ord_tmr_val();
}
inline void PDCPModCfgEnt::_internal_set_re_ord_tmr_val(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  re_ord_tmr_val_ = value;
}
inline void PDCPModCfgEnt::set_re_ord_tmr_val(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_re_ord_tmr_val(value);
  // @@protoc_insertion_point(field_set:structure.PDCPModCfgEnt.re_ord_tmr_val)
}

// .structure.PDCPDCBearerInfo dc_bearer_info = 60;
inline bool PDCPModCfgEnt::_internal_has_dc_bearer_info() const {
  return this != internal_default_instance() && dc_bearer_info_ != nullptr;
}
inline bool PDCPModCfgEnt::has_dc_bearer_info() const {
  return _internal_has_dc_bearer_info();
}
inline void PDCPModCfgEnt::clear_dc_bearer_info() {
  if (GetArena() == nullptr && dc_bearer_info_ != nullptr) {
    delete dc_bearer_info_;
  }
  dc_bearer_info_ = nullptr;
}
inline const ::structure::PDCPDCBearerInfo& PDCPModCfgEnt::_internal_dc_bearer_info() const {
  const ::structure::PDCPDCBearerInfo* p = dc_bearer_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::structure::PDCPDCBearerInfo*>(
      &::structure::_PDCPDCBearerInfo_default_instance_);
}
inline const ::structure::PDCPDCBearerInfo& PDCPModCfgEnt::dc_bearer_info() const {
  // @@protoc_insertion_point(field_get:structure.PDCPModCfgEnt.dc_bearer_info)
  return _internal_dc_bearer_info();
}
inline void PDCPModCfgEnt::unsafe_arena_set_allocated_dc_bearer_info(
    ::structure::PDCPDCBearerInfo* dc_bearer_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dc_bearer_info_);
  }
  dc_bearer_info_ = dc_bearer_info;
  if (dc_bearer_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:structure.PDCPModCfgEnt.dc_bearer_info)
}
inline ::structure::PDCPDCBearerInfo* PDCPModCfgEnt::release_dc_bearer_info() {
  
  ::structure::PDCPDCBearerInfo* temp = dc_bearer_info_;
  dc_bearer_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::structure::PDCPDCBearerInfo* PDCPModCfgEnt::unsafe_arena_release_dc_bearer_info() {
  // @@protoc_insertion_point(field_release:structure.PDCPModCfgEnt.dc_bearer_info)
  
  ::structure::PDCPDCBearerInfo* temp = dc_bearer_info_;
  dc_bearer_info_ = nullptr;
  return temp;
}
inline ::structure::PDCPDCBearerInfo* PDCPModCfgEnt::_internal_mutable_dc_bearer_info() {
  
  if (dc_bearer_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::structure::PDCPDCBearerInfo>(GetArena());
    dc_bearer_info_ = p;
  }
  return dc_bearer_info_;
}
inline ::structure::PDCPDCBearerInfo* PDCPModCfgEnt::mutable_dc_bearer_info() {
  // @@protoc_insertion_point(field_mutable:structure.PDCPModCfgEnt.dc_bearer_info)
  return _internal_mutable_dc_bearer_info();
}
inline void PDCPModCfgEnt::set_allocated_dc_bearer_info(::structure::PDCPDCBearerInfo* dc_bearer_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dc_bearer_info_;
  }
  if (dc_bearer_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dc_bearer_info);
    if (message_arena != submessage_arena) {
      dc_bearer_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dc_bearer_info, submessage_arena);
    }
    
  } else {
    
  }
  dc_bearer_info_ = dc_bearer_info;
  // @@protoc_insertion_point(field_set_allocated:structure.PDCPModCfgEnt.dc_bearer_info)
}

// -------------------------------------------------------------------

// PDCPDelCfgEnt

// uint32 rb_id = 10;
inline void PDCPDelCfgEnt::clear_rb_id() {
  rb_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PDCPDelCfgEnt::_internal_rb_id() const {
  return rb_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PDCPDelCfgEnt::rb_id() const {
  // @@protoc_insertion_point(field_get:structure.PDCPDelCfgEnt.rb_id)
  return _internal_rb_id();
}
inline void PDCPDelCfgEnt::_internal_set_rb_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rb_id_ = value;
}
inline void PDCPDelCfgEnt::set_rb_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rb_id(value);
  // @@protoc_insertion_point(field_set:structure.PDCPDelCfgEnt.rb_id)
}

// -------------------------------------------------------------------

// CreateTnlCfmEnt

// .structure.InterfaceType interface_type = 24;
inline void CreateTnlCfmEnt::clear_interface_type() {
  interface_type_ = 0;
}
inline ::structure::InterfaceType CreateTnlCfmEnt::_internal_interface_type() const {
  return static_cast< ::structure::InterfaceType >(interface_type_);
}
inline ::structure::InterfaceType CreateTnlCfmEnt::interface_type() const {
  // @@protoc_insertion_point(field_get:structure.CreateTnlCfmEnt.interface_type)
  return _internal_interface_type();
}
inline void CreateTnlCfmEnt::_internal_set_interface_type(::structure::InterfaceType value) {
  
  interface_type_ = value;
}
inline void CreateTnlCfmEnt::set_interface_type(::structure::InterfaceType value) {
  _internal_set_interface_type(value);
  // @@protoc_insertion_point(field_set:structure.CreateTnlCfmEnt.interface_type)
}

// .structure.GtpTunnelId gtp_tunnel_id = 25;
inline bool CreateTnlCfmEnt::_internal_has_gtp_tunnel_id() const {
  return this != internal_default_instance() && gtp_tunnel_id_ != nullptr;
}
inline bool CreateTnlCfmEnt::has_gtp_tunnel_id() const {
  return _internal_has_gtp_tunnel_id();
}
inline void CreateTnlCfmEnt::clear_gtp_tunnel_id() {
  if (GetArena() == nullptr && gtp_tunnel_id_ != nullptr) {
    delete gtp_tunnel_id_;
  }
  gtp_tunnel_id_ = nullptr;
}
inline const ::structure::GtpTunnelId& CreateTnlCfmEnt::_internal_gtp_tunnel_id() const {
  const ::structure::GtpTunnelId* p = gtp_tunnel_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::structure::GtpTunnelId*>(
      &::structure::_GtpTunnelId_default_instance_);
}
inline const ::structure::GtpTunnelId& CreateTnlCfmEnt::gtp_tunnel_id() const {
  // @@protoc_insertion_point(field_get:structure.CreateTnlCfmEnt.gtp_tunnel_id)
  return _internal_gtp_tunnel_id();
}
inline void CreateTnlCfmEnt::unsafe_arena_set_allocated_gtp_tunnel_id(
    ::structure::GtpTunnelId* gtp_tunnel_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gtp_tunnel_id_);
  }
  gtp_tunnel_id_ = gtp_tunnel_id;
  if (gtp_tunnel_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:structure.CreateTnlCfmEnt.gtp_tunnel_id)
}
inline ::structure::GtpTunnelId* CreateTnlCfmEnt::release_gtp_tunnel_id() {
  
  ::structure::GtpTunnelId* temp = gtp_tunnel_id_;
  gtp_tunnel_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::structure::GtpTunnelId* CreateTnlCfmEnt::unsafe_arena_release_gtp_tunnel_id() {
  // @@protoc_insertion_point(field_release:structure.CreateTnlCfmEnt.gtp_tunnel_id)
  
  ::structure::GtpTunnelId* temp = gtp_tunnel_id_;
  gtp_tunnel_id_ = nullptr;
  return temp;
}
inline ::structure::GtpTunnelId* CreateTnlCfmEnt::_internal_mutable_gtp_tunnel_id() {
  
  if (gtp_tunnel_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::structure::GtpTunnelId>(GetArena());
    gtp_tunnel_id_ = p;
  }
  return gtp_tunnel_id_;
}
inline ::structure::GtpTunnelId* CreateTnlCfmEnt::mutable_gtp_tunnel_id() {
  // @@protoc_insertion_point(field_mutable:structure.CreateTnlCfmEnt.gtp_tunnel_id)
  return _internal_mutable_gtp_tunnel_id();
}
inline void CreateTnlCfmEnt::set_allocated_gtp_tunnel_id(::structure::GtpTunnelId* gtp_tunnel_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete gtp_tunnel_id_;
  }
  if (gtp_tunnel_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gtp_tunnel_id);
    if (message_arena != submessage_arena) {
      gtp_tunnel_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gtp_tunnel_id, submessage_arena);
    }
    
  } else {
    
  }
  gtp_tunnel_id_ = gtp_tunnel_id;
  // @@protoc_insertion_point(field_set_allocated:structure.CreateTnlCfmEnt.gtp_tunnel_id)
}

// .common.IpAddress dst_addr = 26;
inline bool CreateTnlCfmEnt::_internal_has_dst_addr() const {
  return this != internal_default_instance() && dst_addr_ != nullptr;
}
inline bool CreateTnlCfmEnt::has_dst_addr() const {
  return _internal_has_dst_addr();
}
inline const ::common::IpAddress& CreateTnlCfmEnt::_internal_dst_addr() const {
  const ::common::IpAddress* p = dst_addr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::common::IpAddress*>(
      &::common::_IpAddress_default_instance_);
}
inline const ::common::IpAddress& CreateTnlCfmEnt::dst_addr() const {
  // @@protoc_insertion_point(field_get:structure.CreateTnlCfmEnt.dst_addr)
  return _internal_dst_addr();
}
inline void CreateTnlCfmEnt::unsafe_arena_set_allocated_dst_addr(
    ::common::IpAddress* dst_addr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dst_addr_);
  }
  dst_addr_ = dst_addr;
  if (dst_addr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:structure.CreateTnlCfmEnt.dst_addr)
}
inline ::common::IpAddress* CreateTnlCfmEnt::release_dst_addr() {
  
  ::common::IpAddress* temp = dst_addr_;
  dst_addr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::IpAddress* CreateTnlCfmEnt::unsafe_arena_release_dst_addr() {
  // @@protoc_insertion_point(field_release:structure.CreateTnlCfmEnt.dst_addr)
  
  ::common::IpAddress* temp = dst_addr_;
  dst_addr_ = nullptr;
  return temp;
}
inline ::common::IpAddress* CreateTnlCfmEnt::_internal_mutable_dst_addr() {
  
  if (dst_addr_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::IpAddress>(GetArena());
    dst_addr_ = p;
  }
  return dst_addr_;
}
inline ::common::IpAddress* CreateTnlCfmEnt::mutable_dst_addr() {
  // @@protoc_insertion_point(field_mutable:structure.CreateTnlCfmEnt.dst_addr)
  return _internal_mutable_dst_addr();
}
inline void CreateTnlCfmEnt::set_allocated_dst_addr(::common::IpAddress* dst_addr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dst_addr_);
  }
  if (dst_addr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dst_addr)->GetArena();
    if (message_arena != submessage_arena) {
      dst_addr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dst_addr, submessage_arena);
    }
    
  } else {
    
  }
  dst_addr_ = dst_addr;
  // @@protoc_insertion_point(field_set_allocated:structure.CreateTnlCfmEnt.dst_addr)
}

// .common.IpAddress src_addr = 27;
inline bool CreateTnlCfmEnt::_internal_has_src_addr() const {
  return this != internal_default_instance() && src_addr_ != nullptr;
}
inline bool CreateTnlCfmEnt::has_src_addr() const {
  return _internal_has_src_addr();
}
inline const ::common::IpAddress& CreateTnlCfmEnt::_internal_src_addr() const {
  const ::common::IpAddress* p = src_addr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::common::IpAddress*>(
      &::common::_IpAddress_default_instance_);
}
inline const ::common::IpAddress& CreateTnlCfmEnt::src_addr() const {
  // @@protoc_insertion_point(field_get:structure.CreateTnlCfmEnt.src_addr)
  return _internal_src_addr();
}
inline void CreateTnlCfmEnt::unsafe_arena_set_allocated_src_addr(
    ::common::IpAddress* src_addr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(src_addr_);
  }
  src_addr_ = src_addr;
  if (src_addr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:structure.CreateTnlCfmEnt.src_addr)
}
inline ::common::IpAddress* CreateTnlCfmEnt::release_src_addr() {
  
  ::common::IpAddress* temp = src_addr_;
  src_addr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::IpAddress* CreateTnlCfmEnt::unsafe_arena_release_src_addr() {
  // @@protoc_insertion_point(field_release:structure.CreateTnlCfmEnt.src_addr)
  
  ::common::IpAddress* temp = src_addr_;
  src_addr_ = nullptr;
  return temp;
}
inline ::common::IpAddress* CreateTnlCfmEnt::_internal_mutable_src_addr() {
  
  if (src_addr_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::IpAddress>(GetArena());
    src_addr_ = p;
  }
  return src_addr_;
}
inline ::common::IpAddress* CreateTnlCfmEnt::mutable_src_addr() {
  // @@protoc_insertion_point(field_mutable:structure.CreateTnlCfmEnt.src_addr)
  return _internal_mutable_src_addr();
}
inline void CreateTnlCfmEnt::set_allocated_src_addr(::common::IpAddress* src_addr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(src_addr_);
  }
  if (src_addr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(src_addr)->GetArena();
    if (message_arena != submessage_arena) {
      src_addr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, src_addr, submessage_arena);
    }
    
  } else {
    
  }
  src_addr_ = src_addr;
  // @@protoc_insertion_point(field_set_allocated:structure.CreateTnlCfmEnt.src_addr)
}

// uint32 local_gtp_teid = 30;
inline void CreateTnlCfmEnt::clear_local_gtp_teid() {
  local_gtp_teid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateTnlCfmEnt::_internal_local_gtp_teid() const {
  return local_gtp_teid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateTnlCfmEnt::local_gtp_teid() const {
  // @@protoc_insertion_point(field_get:structure.CreateTnlCfmEnt.local_gtp_teid)
  return _internal_local_gtp_teid();
}
inline void CreateTnlCfmEnt::_internal_set_local_gtp_teid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  local_gtp_teid_ = value;
}
inline void CreateTnlCfmEnt::set_local_gtp_teid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_local_gtp_teid(value);
  // @@protoc_insertion_point(field_set:structure.CreateTnlCfmEnt.local_gtp_teid)
}

// uint32 remote_gtp_teid = 35;
inline void CreateTnlCfmEnt::clear_remote_gtp_teid() {
  remote_gtp_teid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateTnlCfmEnt::_internal_remote_gtp_teid() const {
  return remote_gtp_teid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateTnlCfmEnt::remote_gtp_teid() const {
  // @@protoc_insertion_point(field_get:structure.CreateTnlCfmEnt.remote_gtp_teid)
  return _internal_remote_gtp_teid();
}
inline void CreateTnlCfmEnt::_internal_set_remote_gtp_teid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  remote_gtp_teid_ = value;
}
inline void CreateTnlCfmEnt::set_remote_gtp_teid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_remote_gtp_teid(value);
  // @@protoc_insertion_point(field_set:structure.CreateTnlCfmEnt.remote_gtp_teid)
}

// uint32 old_cell_id = 36;
inline void CreateTnlCfmEnt::clear_old_cell_id() {
  old_cell_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateTnlCfmEnt::_internal_old_cell_id() const {
  return old_cell_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateTnlCfmEnt::old_cell_id() const {
  // @@protoc_insertion_point(field_get:structure.CreateTnlCfmEnt.old_cell_id)
  return _internal_old_cell_id();
}
inline void CreateTnlCfmEnt::_internal_set_old_cell_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  old_cell_id_ = value;
}
inline void CreateTnlCfmEnt::set_old_cell_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_old_cell_id(value);
  // @@protoc_insertion_point(field_set:structure.CreateTnlCfmEnt.old_cell_id)
}

// uint32 old_crnti = 37;
inline void CreateTnlCfmEnt::clear_old_crnti() {
  old_crnti_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateTnlCfmEnt::_internal_old_crnti() const {
  return old_crnti_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateTnlCfmEnt::old_crnti() const {
  // @@protoc_insertion_point(field_get:structure.CreateTnlCfmEnt.old_crnti)
  return _internal_old_crnti();
}
inline void CreateTnlCfmEnt::_internal_set_old_crnti(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  old_crnti_ = value;
}
inline void CreateTnlCfmEnt::set_old_crnti(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_old_crnti(value);
  // @@protoc_insertion_point(field_set:structure.CreateTnlCfmEnt.old_crnti)
}

// bool status = 40;
inline void CreateTnlCfmEnt::clear_status() {
  status_ = false;
}
inline bool CreateTnlCfmEnt::_internal_status() const {
  return status_;
}
inline bool CreateTnlCfmEnt::status() const {
  // @@protoc_insertion_point(field_get:structure.CreateTnlCfmEnt.status)
  return _internal_status();
}
inline void CreateTnlCfmEnt::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void CreateTnlCfmEnt::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:structure.CreateTnlCfmEnt.status)
}

// -------------------------------------------------------------------

// ModTnlCfmEnt

// uint32 old_cell_id = 20;
inline void ModTnlCfmEnt::clear_old_cell_id() {
  old_cell_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModTnlCfmEnt::_internal_old_cell_id() const {
  return old_cell_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModTnlCfmEnt::old_cell_id() const {
  // @@protoc_insertion_point(field_get:structure.ModTnlCfmEnt.old_cell_id)
  return _internal_old_cell_id();
}
inline void ModTnlCfmEnt::_internal_set_old_cell_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  old_cell_id_ = value;
}
inline void ModTnlCfmEnt::set_old_cell_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_old_cell_id(value);
  // @@protoc_insertion_point(field_set:structure.ModTnlCfmEnt.old_cell_id)
}

// uint32 old_crnti = 22;
inline void ModTnlCfmEnt::clear_old_crnti() {
  old_crnti_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModTnlCfmEnt::_internal_old_crnti() const {
  return old_crnti_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModTnlCfmEnt::old_crnti() const {
  // @@protoc_insertion_point(field_get:structure.ModTnlCfmEnt.old_crnti)
  return _internal_old_crnti();
}
inline void ModTnlCfmEnt::_internal_set_old_crnti(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  old_crnti_ = value;
}
inline void ModTnlCfmEnt::set_old_crnti(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_old_crnti(value);
  // @@protoc_insertion_point(field_set:structure.ModTnlCfmEnt.old_crnti)
}

// .structure.InterfaceType interface_type = 24;
inline void ModTnlCfmEnt::clear_interface_type() {
  interface_type_ = 0;
}
inline ::structure::InterfaceType ModTnlCfmEnt::_internal_interface_type() const {
  return static_cast< ::structure::InterfaceType >(interface_type_);
}
inline ::structure::InterfaceType ModTnlCfmEnt::interface_type() const {
  // @@protoc_insertion_point(field_get:structure.ModTnlCfmEnt.interface_type)
  return _internal_interface_type();
}
inline void ModTnlCfmEnt::_internal_set_interface_type(::structure::InterfaceType value) {
  
  interface_type_ = value;
}
inline void ModTnlCfmEnt::set_interface_type(::structure::InterfaceType value) {
  _internal_set_interface_type(value);
  // @@protoc_insertion_point(field_set:structure.ModTnlCfmEnt.interface_type)
}

// .structure.GtpTunnelId gtp_tunnel_id = 25;
inline bool ModTnlCfmEnt::_internal_has_gtp_tunnel_id() const {
  return this != internal_default_instance() && gtp_tunnel_id_ != nullptr;
}
inline bool ModTnlCfmEnt::has_gtp_tunnel_id() const {
  return _internal_has_gtp_tunnel_id();
}
inline void ModTnlCfmEnt::clear_gtp_tunnel_id() {
  if (GetArena() == nullptr && gtp_tunnel_id_ != nullptr) {
    delete gtp_tunnel_id_;
  }
  gtp_tunnel_id_ = nullptr;
}
inline const ::structure::GtpTunnelId& ModTnlCfmEnt::_internal_gtp_tunnel_id() const {
  const ::structure::GtpTunnelId* p = gtp_tunnel_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::structure::GtpTunnelId*>(
      &::structure::_GtpTunnelId_default_instance_);
}
inline const ::structure::GtpTunnelId& ModTnlCfmEnt::gtp_tunnel_id() const {
  // @@protoc_insertion_point(field_get:structure.ModTnlCfmEnt.gtp_tunnel_id)
  return _internal_gtp_tunnel_id();
}
inline void ModTnlCfmEnt::unsafe_arena_set_allocated_gtp_tunnel_id(
    ::structure::GtpTunnelId* gtp_tunnel_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gtp_tunnel_id_);
  }
  gtp_tunnel_id_ = gtp_tunnel_id;
  if (gtp_tunnel_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:structure.ModTnlCfmEnt.gtp_tunnel_id)
}
inline ::structure::GtpTunnelId* ModTnlCfmEnt::release_gtp_tunnel_id() {
  
  ::structure::GtpTunnelId* temp = gtp_tunnel_id_;
  gtp_tunnel_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::structure::GtpTunnelId* ModTnlCfmEnt::unsafe_arena_release_gtp_tunnel_id() {
  // @@protoc_insertion_point(field_release:structure.ModTnlCfmEnt.gtp_tunnel_id)
  
  ::structure::GtpTunnelId* temp = gtp_tunnel_id_;
  gtp_tunnel_id_ = nullptr;
  return temp;
}
inline ::structure::GtpTunnelId* ModTnlCfmEnt::_internal_mutable_gtp_tunnel_id() {
  
  if (gtp_tunnel_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::structure::GtpTunnelId>(GetArena());
    gtp_tunnel_id_ = p;
  }
  return gtp_tunnel_id_;
}
inline ::structure::GtpTunnelId* ModTnlCfmEnt::mutable_gtp_tunnel_id() {
  // @@protoc_insertion_point(field_mutable:structure.ModTnlCfmEnt.gtp_tunnel_id)
  return _internal_mutable_gtp_tunnel_id();
}
inline void ModTnlCfmEnt::set_allocated_gtp_tunnel_id(::structure::GtpTunnelId* gtp_tunnel_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete gtp_tunnel_id_;
  }
  if (gtp_tunnel_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gtp_tunnel_id);
    if (message_arena != submessage_arena) {
      gtp_tunnel_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gtp_tunnel_id, submessage_arena);
    }
    
  } else {
    
  }
  gtp_tunnel_id_ = gtp_tunnel_id;
  // @@protoc_insertion_point(field_set_allocated:structure.ModTnlCfmEnt.gtp_tunnel_id)
}

// .common.IpAddress dst_addr = 26;
inline bool ModTnlCfmEnt::_internal_has_dst_addr() const {
  return this != internal_default_instance() && dst_addr_ != nullptr;
}
inline bool ModTnlCfmEnt::has_dst_addr() const {
  return _internal_has_dst_addr();
}
inline const ::common::IpAddress& ModTnlCfmEnt::_internal_dst_addr() const {
  const ::common::IpAddress* p = dst_addr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::common::IpAddress*>(
      &::common::_IpAddress_default_instance_);
}
inline const ::common::IpAddress& ModTnlCfmEnt::dst_addr() const {
  // @@protoc_insertion_point(field_get:structure.ModTnlCfmEnt.dst_addr)
  return _internal_dst_addr();
}
inline void ModTnlCfmEnt::unsafe_arena_set_allocated_dst_addr(
    ::common::IpAddress* dst_addr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dst_addr_);
  }
  dst_addr_ = dst_addr;
  if (dst_addr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:structure.ModTnlCfmEnt.dst_addr)
}
inline ::common::IpAddress* ModTnlCfmEnt::release_dst_addr() {
  
  ::common::IpAddress* temp = dst_addr_;
  dst_addr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::IpAddress* ModTnlCfmEnt::unsafe_arena_release_dst_addr() {
  // @@protoc_insertion_point(field_release:structure.ModTnlCfmEnt.dst_addr)
  
  ::common::IpAddress* temp = dst_addr_;
  dst_addr_ = nullptr;
  return temp;
}
inline ::common::IpAddress* ModTnlCfmEnt::_internal_mutable_dst_addr() {
  
  if (dst_addr_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::IpAddress>(GetArena());
    dst_addr_ = p;
  }
  return dst_addr_;
}
inline ::common::IpAddress* ModTnlCfmEnt::mutable_dst_addr() {
  // @@protoc_insertion_point(field_mutable:structure.ModTnlCfmEnt.dst_addr)
  return _internal_mutable_dst_addr();
}
inline void ModTnlCfmEnt::set_allocated_dst_addr(::common::IpAddress* dst_addr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dst_addr_);
  }
  if (dst_addr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dst_addr)->GetArena();
    if (message_arena != submessage_arena) {
      dst_addr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dst_addr, submessage_arena);
    }
    
  } else {
    
  }
  dst_addr_ = dst_addr;
  // @@protoc_insertion_point(field_set_allocated:structure.ModTnlCfmEnt.dst_addr)
}

// .common.IpAddress src_addr = 27;
inline bool ModTnlCfmEnt::_internal_has_src_addr() const {
  return this != internal_default_instance() && src_addr_ != nullptr;
}
inline bool ModTnlCfmEnt::has_src_addr() const {
  return _internal_has_src_addr();
}
inline const ::common::IpAddress& ModTnlCfmEnt::_internal_src_addr() const {
  const ::common::IpAddress* p = src_addr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::common::IpAddress*>(
      &::common::_IpAddress_default_instance_);
}
inline const ::common::IpAddress& ModTnlCfmEnt::src_addr() const {
  // @@protoc_insertion_point(field_get:structure.ModTnlCfmEnt.src_addr)
  return _internal_src_addr();
}
inline void ModTnlCfmEnt::unsafe_arena_set_allocated_src_addr(
    ::common::IpAddress* src_addr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(src_addr_);
  }
  src_addr_ = src_addr;
  if (src_addr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:structure.ModTnlCfmEnt.src_addr)
}
inline ::common::IpAddress* ModTnlCfmEnt::release_src_addr() {
  
  ::common::IpAddress* temp = src_addr_;
  src_addr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::IpAddress* ModTnlCfmEnt::unsafe_arena_release_src_addr() {
  // @@protoc_insertion_point(field_release:structure.ModTnlCfmEnt.src_addr)
  
  ::common::IpAddress* temp = src_addr_;
  src_addr_ = nullptr;
  return temp;
}
inline ::common::IpAddress* ModTnlCfmEnt::_internal_mutable_src_addr() {
  
  if (src_addr_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::IpAddress>(GetArena());
    src_addr_ = p;
  }
  return src_addr_;
}
inline ::common::IpAddress* ModTnlCfmEnt::mutable_src_addr() {
  // @@protoc_insertion_point(field_mutable:structure.ModTnlCfmEnt.src_addr)
  return _internal_mutable_src_addr();
}
inline void ModTnlCfmEnt::set_allocated_src_addr(::common::IpAddress* src_addr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(src_addr_);
  }
  if (src_addr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(src_addr)->GetArena();
    if (message_arena != submessage_arena) {
      src_addr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, src_addr, submessage_arena);
    }
    
  } else {
    
  }
  src_addr_ = src_addr;
  // @@protoc_insertion_point(field_set_allocated:structure.ModTnlCfmEnt.src_addr)
}

// uint32 local_gtp_teid = 30;
inline void ModTnlCfmEnt::clear_local_gtp_teid() {
  local_gtp_teid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModTnlCfmEnt::_internal_local_gtp_teid() const {
  return local_gtp_teid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModTnlCfmEnt::local_gtp_teid() const {
  // @@protoc_insertion_point(field_get:structure.ModTnlCfmEnt.local_gtp_teid)
  return _internal_local_gtp_teid();
}
inline void ModTnlCfmEnt::_internal_set_local_gtp_teid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  local_gtp_teid_ = value;
}
inline void ModTnlCfmEnt::set_local_gtp_teid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_local_gtp_teid(value);
  // @@protoc_insertion_point(field_set:structure.ModTnlCfmEnt.local_gtp_teid)
}

// uint32 remote_gtp_teid = 35;
inline void ModTnlCfmEnt::clear_remote_gtp_teid() {
  remote_gtp_teid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModTnlCfmEnt::_internal_remote_gtp_teid() const {
  return remote_gtp_teid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModTnlCfmEnt::remote_gtp_teid() const {
  // @@protoc_insertion_point(field_get:structure.ModTnlCfmEnt.remote_gtp_teid)
  return _internal_remote_gtp_teid();
}
inline void ModTnlCfmEnt::_internal_set_remote_gtp_teid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  remote_gtp_teid_ = value;
}
inline void ModTnlCfmEnt::set_remote_gtp_teid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_remote_gtp_teid(value);
  // @@protoc_insertion_point(field_set:structure.ModTnlCfmEnt.remote_gtp_teid)
}

// bool status = 40;
inline void ModTnlCfmEnt::clear_status() {
  status_ = false;
}
inline bool ModTnlCfmEnt::_internal_status() const {
  return status_;
}
inline bool ModTnlCfmEnt::status() const {
  // @@protoc_insertion_point(field_get:structure.ModTnlCfmEnt.status)
  return _internal_status();
}
inline void ModTnlCfmEnt::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void ModTnlCfmEnt::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:structure.ModTnlCfmEnt.status)
}

// -------------------------------------------------------------------

// DelTnlCfmEnt

// .structure.InterfaceType interface_type = 24;
inline void DelTnlCfmEnt::clear_interface_type() {
  interface_type_ = 0;
}
inline ::structure::InterfaceType DelTnlCfmEnt::_internal_interface_type() const {
  return static_cast< ::structure::InterfaceType >(interface_type_);
}
inline ::structure::InterfaceType DelTnlCfmEnt::interface_type() const {
  // @@protoc_insertion_point(field_get:structure.DelTnlCfmEnt.interface_type)
  return _internal_interface_type();
}
inline void DelTnlCfmEnt::_internal_set_interface_type(::structure::InterfaceType value) {
  
  interface_type_ = value;
}
inline void DelTnlCfmEnt::set_interface_type(::structure::InterfaceType value) {
  _internal_set_interface_type(value);
  // @@protoc_insertion_point(field_set:structure.DelTnlCfmEnt.interface_type)
}

// .structure.GtpTunnelId gtp_tunnel_id = 25;
inline bool DelTnlCfmEnt::_internal_has_gtp_tunnel_id() const {
  return this != internal_default_instance() && gtp_tunnel_id_ != nullptr;
}
inline bool DelTnlCfmEnt::has_gtp_tunnel_id() const {
  return _internal_has_gtp_tunnel_id();
}
inline void DelTnlCfmEnt::clear_gtp_tunnel_id() {
  if (GetArena() == nullptr && gtp_tunnel_id_ != nullptr) {
    delete gtp_tunnel_id_;
  }
  gtp_tunnel_id_ = nullptr;
}
inline const ::structure::GtpTunnelId& DelTnlCfmEnt::_internal_gtp_tunnel_id() const {
  const ::structure::GtpTunnelId* p = gtp_tunnel_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::structure::GtpTunnelId*>(
      &::structure::_GtpTunnelId_default_instance_);
}
inline const ::structure::GtpTunnelId& DelTnlCfmEnt::gtp_tunnel_id() const {
  // @@protoc_insertion_point(field_get:structure.DelTnlCfmEnt.gtp_tunnel_id)
  return _internal_gtp_tunnel_id();
}
inline void DelTnlCfmEnt::unsafe_arena_set_allocated_gtp_tunnel_id(
    ::structure::GtpTunnelId* gtp_tunnel_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gtp_tunnel_id_);
  }
  gtp_tunnel_id_ = gtp_tunnel_id;
  if (gtp_tunnel_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:structure.DelTnlCfmEnt.gtp_tunnel_id)
}
inline ::structure::GtpTunnelId* DelTnlCfmEnt::release_gtp_tunnel_id() {
  
  ::structure::GtpTunnelId* temp = gtp_tunnel_id_;
  gtp_tunnel_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::structure::GtpTunnelId* DelTnlCfmEnt::unsafe_arena_release_gtp_tunnel_id() {
  // @@protoc_insertion_point(field_release:structure.DelTnlCfmEnt.gtp_tunnel_id)
  
  ::structure::GtpTunnelId* temp = gtp_tunnel_id_;
  gtp_tunnel_id_ = nullptr;
  return temp;
}
inline ::structure::GtpTunnelId* DelTnlCfmEnt::_internal_mutable_gtp_tunnel_id() {
  
  if (gtp_tunnel_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::structure::GtpTunnelId>(GetArena());
    gtp_tunnel_id_ = p;
  }
  return gtp_tunnel_id_;
}
inline ::structure::GtpTunnelId* DelTnlCfmEnt::mutable_gtp_tunnel_id() {
  // @@protoc_insertion_point(field_mutable:structure.DelTnlCfmEnt.gtp_tunnel_id)
  return _internal_mutable_gtp_tunnel_id();
}
inline void DelTnlCfmEnt::set_allocated_gtp_tunnel_id(::structure::GtpTunnelId* gtp_tunnel_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete gtp_tunnel_id_;
  }
  if (gtp_tunnel_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gtp_tunnel_id);
    if (message_arena != submessage_arena) {
      gtp_tunnel_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gtp_tunnel_id, submessage_arena);
    }
    
  } else {
    
  }
  gtp_tunnel_id_ = gtp_tunnel_id;
  // @@protoc_insertion_point(field_set_allocated:structure.DelTnlCfmEnt.gtp_tunnel_id)
}

// .common.IpAddress dst_addr = 26;
inline bool DelTnlCfmEnt::_internal_has_dst_addr() const {
  return this != internal_default_instance() && dst_addr_ != nullptr;
}
inline bool DelTnlCfmEnt::has_dst_addr() const {
  return _internal_has_dst_addr();
}
inline const ::common::IpAddress& DelTnlCfmEnt::_internal_dst_addr() const {
  const ::common::IpAddress* p = dst_addr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::common::IpAddress*>(
      &::common::_IpAddress_default_instance_);
}
inline const ::common::IpAddress& DelTnlCfmEnt::dst_addr() const {
  // @@protoc_insertion_point(field_get:structure.DelTnlCfmEnt.dst_addr)
  return _internal_dst_addr();
}
inline void DelTnlCfmEnt::unsafe_arena_set_allocated_dst_addr(
    ::common::IpAddress* dst_addr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dst_addr_);
  }
  dst_addr_ = dst_addr;
  if (dst_addr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:structure.DelTnlCfmEnt.dst_addr)
}
inline ::common::IpAddress* DelTnlCfmEnt::release_dst_addr() {
  
  ::common::IpAddress* temp = dst_addr_;
  dst_addr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::IpAddress* DelTnlCfmEnt::unsafe_arena_release_dst_addr() {
  // @@protoc_insertion_point(field_release:structure.DelTnlCfmEnt.dst_addr)
  
  ::common::IpAddress* temp = dst_addr_;
  dst_addr_ = nullptr;
  return temp;
}
inline ::common::IpAddress* DelTnlCfmEnt::_internal_mutable_dst_addr() {
  
  if (dst_addr_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::IpAddress>(GetArena());
    dst_addr_ = p;
  }
  return dst_addr_;
}
inline ::common::IpAddress* DelTnlCfmEnt::mutable_dst_addr() {
  // @@protoc_insertion_point(field_mutable:structure.DelTnlCfmEnt.dst_addr)
  return _internal_mutable_dst_addr();
}
inline void DelTnlCfmEnt::set_allocated_dst_addr(::common::IpAddress* dst_addr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dst_addr_);
  }
  if (dst_addr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dst_addr)->GetArena();
    if (message_arena != submessage_arena) {
      dst_addr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dst_addr, submessage_arena);
    }
    
  } else {
    
  }
  dst_addr_ = dst_addr;
  // @@protoc_insertion_point(field_set_allocated:structure.DelTnlCfmEnt.dst_addr)
}

// .common.IpAddress src_addr = 27;
inline bool DelTnlCfmEnt::_internal_has_src_addr() const {
  return this != internal_default_instance() && src_addr_ != nullptr;
}
inline bool DelTnlCfmEnt::has_src_addr() const {
  return _internal_has_src_addr();
}
inline const ::common::IpAddress& DelTnlCfmEnt::_internal_src_addr() const {
  const ::common::IpAddress* p = src_addr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::common::IpAddress*>(
      &::common::_IpAddress_default_instance_);
}
inline const ::common::IpAddress& DelTnlCfmEnt::src_addr() const {
  // @@protoc_insertion_point(field_get:structure.DelTnlCfmEnt.src_addr)
  return _internal_src_addr();
}
inline void DelTnlCfmEnt::unsafe_arena_set_allocated_src_addr(
    ::common::IpAddress* src_addr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(src_addr_);
  }
  src_addr_ = src_addr;
  if (src_addr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:structure.DelTnlCfmEnt.src_addr)
}
inline ::common::IpAddress* DelTnlCfmEnt::release_src_addr() {
  
  ::common::IpAddress* temp = src_addr_;
  src_addr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::IpAddress* DelTnlCfmEnt::unsafe_arena_release_src_addr() {
  // @@protoc_insertion_point(field_release:structure.DelTnlCfmEnt.src_addr)
  
  ::common::IpAddress* temp = src_addr_;
  src_addr_ = nullptr;
  return temp;
}
inline ::common::IpAddress* DelTnlCfmEnt::_internal_mutable_src_addr() {
  
  if (src_addr_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::IpAddress>(GetArena());
    src_addr_ = p;
  }
  return src_addr_;
}
inline ::common::IpAddress* DelTnlCfmEnt::mutable_src_addr() {
  // @@protoc_insertion_point(field_mutable:structure.DelTnlCfmEnt.src_addr)
  return _internal_mutable_src_addr();
}
inline void DelTnlCfmEnt::set_allocated_src_addr(::common::IpAddress* src_addr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(src_addr_);
  }
  if (src_addr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(src_addr)->GetArena();
    if (message_arena != submessage_arena) {
      src_addr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, src_addr, submessage_arena);
    }
    
  } else {
    
  }
  src_addr_ = src_addr;
  // @@protoc_insertion_point(field_set_allocated:structure.DelTnlCfmEnt.src_addr)
}

// uint32 local_gtp_teid = 30;
inline void DelTnlCfmEnt::clear_local_gtp_teid() {
  local_gtp_teid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DelTnlCfmEnt::_internal_local_gtp_teid() const {
  return local_gtp_teid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DelTnlCfmEnt::local_gtp_teid() const {
  // @@protoc_insertion_point(field_get:structure.DelTnlCfmEnt.local_gtp_teid)
  return _internal_local_gtp_teid();
}
inline void DelTnlCfmEnt::_internal_set_local_gtp_teid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  local_gtp_teid_ = value;
}
inline void DelTnlCfmEnt::set_local_gtp_teid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_local_gtp_teid(value);
  // @@protoc_insertion_point(field_set:structure.DelTnlCfmEnt.local_gtp_teid)
}

// uint32 remote_gtp_teid = 35;
inline void DelTnlCfmEnt::clear_remote_gtp_teid() {
  remote_gtp_teid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DelTnlCfmEnt::_internal_remote_gtp_teid() const {
  return remote_gtp_teid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DelTnlCfmEnt::remote_gtp_teid() const {
  // @@protoc_insertion_point(field_get:structure.DelTnlCfmEnt.remote_gtp_teid)
  return _internal_remote_gtp_teid();
}
inline void DelTnlCfmEnt::_internal_set_remote_gtp_teid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  remote_gtp_teid_ = value;
}
inline void DelTnlCfmEnt::set_remote_gtp_teid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_remote_gtp_teid(value);
  // @@protoc_insertion_point(field_set:structure.DelTnlCfmEnt.remote_gtp_teid)
}

// bool status = 40;
inline void DelTnlCfmEnt::clear_status() {
  status_ = false;
}
inline bool DelTnlCfmEnt::_internal_status() const {
  return status_;
}
inline bool DelTnlCfmEnt::status() const {
  // @@protoc_insertion_point(field_get:structure.DelTnlCfmEnt.status)
  return _internal_status();
}
inline void DelTnlCfmEnt::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void DelTnlCfmEnt::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:structure.DelTnlCfmEnt.status)
}

// -------------------------------------------------------------------

// PDCPAddCfgCfmEnt

// uint32 rb_id = 10;
inline void PDCPAddCfgCfmEnt::clear_rb_id() {
  rb_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PDCPAddCfgCfmEnt::_internal_rb_id() const {
  return rb_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PDCPAddCfgCfmEnt::rb_id() const {
  // @@protoc_insertion_point(field_get:structure.PDCPAddCfgCfmEnt.rb_id)
  return _internal_rb_id();
}
inline void PDCPAddCfgCfmEnt::_internal_set_rb_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rb_id_ = value;
}
inline void PDCPAddCfgCfmEnt::set_rb_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rb_id(value);
  // @@protoc_insertion_point(field_set:structure.PDCPAddCfgCfmEnt.rb_id)
}

// bool status = 20;
inline void PDCPAddCfgCfmEnt::clear_status() {
  status_ = false;
}
inline bool PDCPAddCfgCfmEnt::_internal_status() const {
  return status_;
}
inline bool PDCPAddCfgCfmEnt::status() const {
  // @@protoc_insertion_point(field_get:structure.PDCPAddCfgCfmEnt.status)
  return _internal_status();
}
inline void PDCPAddCfgCfmEnt::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void PDCPAddCfgCfmEnt::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:structure.PDCPAddCfgCfmEnt.status)
}

// .structure.PDCPConfigFailureReason reason = 30;
inline void PDCPAddCfgCfmEnt::clear_reason() {
  reason_ = 0;
}
inline ::structure::PDCPConfigFailureReason PDCPAddCfgCfmEnt::_internal_reason() const {
  return static_cast< ::structure::PDCPConfigFailureReason >(reason_);
}
inline ::structure::PDCPConfigFailureReason PDCPAddCfgCfmEnt::reason() const {
  // @@protoc_insertion_point(field_get:structure.PDCPAddCfgCfmEnt.reason)
  return _internal_reason();
}
inline void PDCPAddCfgCfmEnt::_internal_set_reason(::structure::PDCPConfigFailureReason value) {
  
  reason_ = value;
}
inline void PDCPAddCfgCfmEnt::set_reason(::structure::PDCPConfigFailureReason value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:structure.PDCPAddCfgCfmEnt.reason)
}

// -------------------------------------------------------------------

// PDCPModCfgCfmEnt

// uint32 rb_id = 10;
inline void PDCPModCfgCfmEnt::clear_rb_id() {
  rb_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PDCPModCfgCfmEnt::_internal_rb_id() const {
  return rb_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PDCPModCfgCfmEnt::rb_id() const {
  // @@protoc_insertion_point(field_get:structure.PDCPModCfgCfmEnt.rb_id)
  return _internal_rb_id();
}
inline void PDCPModCfgCfmEnt::_internal_set_rb_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rb_id_ = value;
}
inline void PDCPModCfgCfmEnt::set_rb_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rb_id(value);
  // @@protoc_insertion_point(field_set:structure.PDCPModCfgCfmEnt.rb_id)
}

// bool status = 20;
inline void PDCPModCfgCfmEnt::clear_status() {
  status_ = false;
}
inline bool PDCPModCfgCfmEnt::_internal_status() const {
  return status_;
}
inline bool PDCPModCfgCfmEnt::status() const {
  // @@protoc_insertion_point(field_get:structure.PDCPModCfgCfmEnt.status)
  return _internal_status();
}
inline void PDCPModCfgCfmEnt::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void PDCPModCfgCfmEnt::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:structure.PDCPModCfgCfmEnt.status)
}

// .structure.PDCPConfigFailureReason reason = 30;
inline void PDCPModCfgCfmEnt::clear_reason() {
  reason_ = 0;
}
inline ::structure::PDCPConfigFailureReason PDCPModCfgCfmEnt::_internal_reason() const {
  return static_cast< ::structure::PDCPConfigFailureReason >(reason_);
}
inline ::structure::PDCPConfigFailureReason PDCPModCfgCfmEnt::reason() const {
  // @@protoc_insertion_point(field_get:structure.PDCPModCfgCfmEnt.reason)
  return _internal_reason();
}
inline void PDCPModCfgCfmEnt::_internal_set_reason(::structure::PDCPConfigFailureReason value) {
  
  reason_ = value;
}
inline void PDCPModCfgCfmEnt::set_reason(::structure::PDCPConfigFailureReason value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:structure.PDCPModCfgCfmEnt.reason)
}

// -------------------------------------------------------------------

// PDCPDelCfgCfmEnt

// uint32 rb_id = 10;
inline void PDCPDelCfgCfmEnt::clear_rb_id() {
  rb_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PDCPDelCfgCfmEnt::_internal_rb_id() const {
  return rb_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PDCPDelCfgCfmEnt::rb_id() const {
  // @@protoc_insertion_point(field_get:structure.PDCPDelCfgCfmEnt.rb_id)
  return _internal_rb_id();
}
inline void PDCPDelCfgCfmEnt::_internal_set_rb_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rb_id_ = value;
}
inline void PDCPDelCfgCfmEnt::set_rb_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rb_id(value);
  // @@protoc_insertion_point(field_set:structure.PDCPDelCfgCfmEnt.rb_id)
}

// bool status = 20;
inline void PDCPDelCfgCfmEnt::clear_status() {
  status_ = false;
}
inline bool PDCPDelCfgCfmEnt::_internal_status() const {
  return status_;
}
inline bool PDCPDelCfgCfmEnt::status() const {
  // @@protoc_insertion_point(field_get:structure.PDCPDelCfgCfmEnt.status)
  return _internal_status();
}
inline void PDCPDelCfgCfmEnt::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void PDCPDelCfgCfmEnt::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:structure.PDCPDelCfgCfmEnt.status)
}

// .structure.PDCPConfigFailureReason reason = 30;
inline void PDCPDelCfgCfmEnt::clear_reason() {
  reason_ = 0;
}
inline ::structure::PDCPConfigFailureReason PDCPDelCfgCfmEnt::_internal_reason() const {
  return static_cast< ::structure::PDCPConfigFailureReason >(reason_);
}
inline ::structure::PDCPConfigFailureReason PDCPDelCfgCfmEnt::reason() const {
  // @@protoc_insertion_point(field_get:structure.PDCPDelCfgCfmEnt.reason)
  return _internal_reason();
}
inline void PDCPDelCfgCfmEnt::_internal_set_reason(::structure::PDCPConfigFailureReason value) {
  
  reason_ = value;
}
inline void PDCPDelCfgCfmEnt::set_reason(::structure::PDCPConfigFailureReason value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:structure.PDCPDelCfgCfmEnt.reason)
}

// -------------------------------------------------------------------

// UlSduStaInfo

// uint32 numBits = 10;
inline void UlSduStaInfo::clear_numbits() {
  numbits_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UlSduStaInfo::_internal_numbits() const {
  return numbits_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UlSduStaInfo::numbits() const {
  // @@protoc_insertion_point(field_get:structure.UlSduStaInfo.numBits)
  return _internal_numbits();
}
inline void UlSduStaInfo::_internal_set_numbits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  numbits_ = value;
}
inline void UlSduStaInfo::set_numbits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_numbits(value);
  // @@protoc_insertion_point(field_set:structure.UlSduStaInfo.numBits)
}

// uint32 count = 20;
inline void UlSduStaInfo::clear_count() {
  count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UlSduStaInfo::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UlSduStaInfo::count() const {
  // @@protoc_insertion_point(field_get:structure.UlSduStaInfo.count)
  return _internal_count();
}
inline void UlSduStaInfo::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  count_ = value;
}
inline void UlSduStaInfo::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:structure.UlSduStaInfo.count)
}

// -------------------------------------------------------------------

// DlSduStaInfo

// uint32 count = 10;
inline void DlSduStaInfo::clear_count() {
  count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DlSduStaInfo::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DlSduStaInfo::count() const {
  // @@protoc_insertion_point(field_get:structure.DlSduStaInfo.count)
  return _internal_count();
}
inline void DlSduStaInfo::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  count_ = value;
}
inline void DlSduStaInfo::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:structure.DlSduStaInfo.count)
}

// -------------------------------------------------------------------

// SduStatusInfo

// uint32 rbId = 10;
inline void SduStatusInfo::clear_rbid() {
  rbid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SduStatusInfo::_internal_rbid() const {
  return rbid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SduStatusInfo::rbid() const {
  // @@protoc_insertion_point(field_get:structure.SduStatusInfo.rbId)
  return _internal_rbid();
}
inline void SduStatusInfo::_internal_set_rbid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rbid_ = value;
}
inline void SduStatusInfo::set_rbid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rbid(value);
  // @@protoc_insertion_point(field_set:structure.SduStatusInfo.rbId)
}

// uint32 dir = 20;
inline void SduStatusInfo::clear_dir() {
  dir_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SduStatusInfo::_internal_dir() const {
  return dir_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SduStatusInfo::dir() const {
  // @@protoc_insertion_point(field_get:structure.SduStatusInfo.dir)
  return _internal_dir();
}
inline void SduStatusInfo::_internal_set_dir(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  dir_ = value;
}
inline void SduStatusInfo::set_dir(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dir(value);
  // @@protoc_insertion_point(field_set:structure.SduStatusInfo.dir)
}

// uint32 snLen = 30;
inline void SduStatusInfo::clear_snlen() {
  snlen_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SduStatusInfo::_internal_snlen() const {
  return snlen_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SduStatusInfo::snlen() const {
  // @@protoc_insertion_point(field_get:structure.SduStatusInfo.snLen)
  return _internal_snlen();
}
inline void SduStatusInfo::_internal_set_snlen(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  snlen_ = value;
}
inline void SduStatusInfo::set_snlen(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_snlen(value);
  // @@protoc_insertion_point(field_set:structure.SduStatusInfo.snLen)
}

// .structure.UlSduStaInfo ulSduStaInfo = 40;
inline bool SduStatusInfo::_internal_has_ulsdustainfo() const {
  return this != internal_default_instance() && ulsdustainfo_ != nullptr;
}
inline bool SduStatusInfo::has_ulsdustainfo() const {
  return _internal_has_ulsdustainfo();
}
inline void SduStatusInfo::clear_ulsdustainfo() {
  if (GetArena() == nullptr && ulsdustainfo_ != nullptr) {
    delete ulsdustainfo_;
  }
  ulsdustainfo_ = nullptr;
}
inline const ::structure::UlSduStaInfo& SduStatusInfo::_internal_ulsdustainfo() const {
  const ::structure::UlSduStaInfo* p = ulsdustainfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::structure::UlSduStaInfo*>(
      &::structure::_UlSduStaInfo_default_instance_);
}
inline const ::structure::UlSduStaInfo& SduStatusInfo::ulsdustainfo() const {
  // @@protoc_insertion_point(field_get:structure.SduStatusInfo.ulSduStaInfo)
  return _internal_ulsdustainfo();
}
inline void SduStatusInfo::unsafe_arena_set_allocated_ulsdustainfo(
    ::structure::UlSduStaInfo* ulsdustainfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ulsdustainfo_);
  }
  ulsdustainfo_ = ulsdustainfo;
  if (ulsdustainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:structure.SduStatusInfo.ulSduStaInfo)
}
inline ::structure::UlSduStaInfo* SduStatusInfo::release_ulsdustainfo() {
  
  ::structure::UlSduStaInfo* temp = ulsdustainfo_;
  ulsdustainfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::structure::UlSduStaInfo* SduStatusInfo::unsafe_arena_release_ulsdustainfo() {
  // @@protoc_insertion_point(field_release:structure.SduStatusInfo.ulSduStaInfo)
  
  ::structure::UlSduStaInfo* temp = ulsdustainfo_;
  ulsdustainfo_ = nullptr;
  return temp;
}
inline ::structure::UlSduStaInfo* SduStatusInfo::_internal_mutable_ulsdustainfo() {
  
  if (ulsdustainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::structure::UlSduStaInfo>(GetArena());
    ulsdustainfo_ = p;
  }
  return ulsdustainfo_;
}
inline ::structure::UlSduStaInfo* SduStatusInfo::mutable_ulsdustainfo() {
  // @@protoc_insertion_point(field_mutable:structure.SduStatusInfo.ulSduStaInfo)
  return _internal_mutable_ulsdustainfo();
}
inline void SduStatusInfo::set_allocated_ulsdustainfo(::structure::UlSduStaInfo* ulsdustainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ulsdustainfo_;
  }
  if (ulsdustainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ulsdustainfo);
    if (message_arena != submessage_arena) {
      ulsdustainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ulsdustainfo, submessage_arena);
    }
    
  } else {
    
  }
  ulsdustainfo_ = ulsdustainfo;
  // @@protoc_insertion_point(field_set_allocated:structure.SduStatusInfo.ulSduStaInfo)
}

// .structure.DlSduStaInfo dlSduStaInfo = 50;
inline bool SduStatusInfo::_internal_has_dlsdustainfo() const {
  return this != internal_default_instance() && dlsdustainfo_ != nullptr;
}
inline bool SduStatusInfo::has_dlsdustainfo() const {
  return _internal_has_dlsdustainfo();
}
inline void SduStatusInfo::clear_dlsdustainfo() {
  if (GetArena() == nullptr && dlsdustainfo_ != nullptr) {
    delete dlsdustainfo_;
  }
  dlsdustainfo_ = nullptr;
}
inline const ::structure::DlSduStaInfo& SduStatusInfo::_internal_dlsdustainfo() const {
  const ::structure::DlSduStaInfo* p = dlsdustainfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::structure::DlSduStaInfo*>(
      &::structure::_DlSduStaInfo_default_instance_);
}
inline const ::structure::DlSduStaInfo& SduStatusInfo::dlsdustainfo() const {
  // @@protoc_insertion_point(field_get:structure.SduStatusInfo.dlSduStaInfo)
  return _internal_dlsdustainfo();
}
inline void SduStatusInfo::unsafe_arena_set_allocated_dlsdustainfo(
    ::structure::DlSduStaInfo* dlsdustainfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dlsdustainfo_);
  }
  dlsdustainfo_ = dlsdustainfo;
  if (dlsdustainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:structure.SduStatusInfo.dlSduStaInfo)
}
inline ::structure::DlSduStaInfo* SduStatusInfo::release_dlsdustainfo() {
  
  ::structure::DlSduStaInfo* temp = dlsdustainfo_;
  dlsdustainfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::structure::DlSduStaInfo* SduStatusInfo::unsafe_arena_release_dlsdustainfo() {
  // @@protoc_insertion_point(field_release:structure.SduStatusInfo.dlSduStaInfo)
  
  ::structure::DlSduStaInfo* temp = dlsdustainfo_;
  dlsdustainfo_ = nullptr;
  return temp;
}
inline ::structure::DlSduStaInfo* SduStatusInfo::_internal_mutable_dlsdustainfo() {
  
  if (dlsdustainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::structure::DlSduStaInfo>(GetArena());
    dlsdustainfo_ = p;
  }
  return dlsdustainfo_;
}
inline ::structure::DlSduStaInfo* SduStatusInfo::mutable_dlsdustainfo() {
  // @@protoc_insertion_point(field_mutable:structure.SduStatusInfo.dlSduStaInfo)
  return _internal_mutable_dlsdustainfo();
}
inline void SduStatusInfo::set_allocated_dlsdustainfo(::structure::DlSduStaInfo* dlsdustainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dlsdustainfo_;
  }
  if (dlsdustainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dlsdustainfo);
    if (message_arena != submessage_arena) {
      dlsdustainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dlsdustainfo, submessage_arena);
    }
    
  } else {
    
  }
  dlsdustainfo_ = dlsdustainfo;
  // @@protoc_insertion_point(field_set_allocated:structure.SduStatusInfo.dlSduStaInfo)
}

// -------------------------------------------------------------------

// TunnelStateInfo

// .structure.TunnelState state = 10;
inline void TunnelStateInfo::clear_state() {
  state_ = 0;
}
inline ::structure::TunnelState TunnelStateInfo::_internal_state() const {
  return static_cast< ::structure::TunnelState >(state_);
}
inline ::structure::TunnelState TunnelStateInfo::state() const {
  // @@protoc_insertion_point(field_get:structure.TunnelStateInfo.state)
  return _internal_state();
}
inline void TunnelStateInfo::_internal_set_state(::structure::TunnelState value) {
  
  state_ = value;
}
inline void TunnelStateInfo::set_state(::structure::TunnelState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:structure.TunnelStateInfo.state)
}

// uint32 cause = 20;
inline void TunnelStateInfo::clear_cause() {
  cause_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TunnelStateInfo::_internal_cause() const {
  return cause_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TunnelStateInfo::cause() const {
  // @@protoc_insertion_point(field_get:structure.TunnelStateInfo.cause)
  return _internal_cause();
}
inline void TunnelStateInfo::_internal_set_cause(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cause_ = value;
}
inline void TunnelStateInfo::set_cause(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cause(value);
  // @@protoc_insertion_point(field_set:structure.TunnelStateInfo.cause)
}

// uint32 local_gtp_teid = 30;
inline void TunnelStateInfo::clear_local_gtp_teid() {
  local_gtp_teid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TunnelStateInfo::_internal_local_gtp_teid() const {
  return local_gtp_teid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TunnelStateInfo::local_gtp_teid() const {
  // @@protoc_insertion_point(field_get:structure.TunnelStateInfo.local_gtp_teid)
  return _internal_local_gtp_teid();
}
inline void TunnelStateInfo::_internal_set_local_gtp_teid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  local_gtp_teid_ = value;
}
inline void TunnelStateInfo::set_local_gtp_teid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_local_gtp_teid(value);
  // @@protoc_insertion_point(field_set:structure.TunnelStateInfo.local_gtp_teid)
}

// -------------------------------------------------------------------

// UeInfo

// uint64 ue_id = 10;
inline void UeInfo::clear_ue_id() {
  ue_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UeInfo::_internal_ue_id() const {
  return ue_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UeInfo::ue_id() const {
  // @@protoc_insertion_point(field_get:structure.UeInfo.ue_id)
  return _internal_ue_id();
}
inline void UeInfo::_internal_set_ue_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  ue_id_ = value;
}
inline void UeInfo::set_ue_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_ue_id(value);
  // @@protoc_insertion_point(field_set:structure.UeInfo.ue_id)
}

// repeated uint32 rb_id = 20;
inline int UeInfo::_internal_rb_id_size() const {
  return rb_id_.size();
}
inline int UeInfo::rb_id_size() const {
  return _internal_rb_id_size();
}
inline void UeInfo::clear_rb_id() {
  rb_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UeInfo::_internal_rb_id(int index) const {
  return rb_id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UeInfo::rb_id(int index) const {
  // @@protoc_insertion_point(field_get:structure.UeInfo.rb_id)
  return _internal_rb_id(index);
}
inline void UeInfo::set_rb_id(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  rb_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:structure.UeInfo.rb_id)
}
inline void UeInfo::_internal_add_rb_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  rb_id_.Add(value);
}
inline void UeInfo::add_rb_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_rb_id(value);
  // @@protoc_insertion_point(field_add:structure.UeInfo.rb_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
UeInfo::_internal_rb_id() const {
  return rb_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
UeInfo::rb_id() const {
  // @@protoc_insertion_point(field_list:structure.UeInfo.rb_id)
  return _internal_rb_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
UeInfo::_internal_mutable_rb_id() {
  return &rb_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
UeInfo::mutable_rb_id() {
  // @@protoc_insertion_point(field_mutable_list:structure.UeInfo.rb_id)
  return _internal_mutable_rb_id();
}

// -------------------------------------------------------------------

// ReqReply

// .mhdr.MsgHdr hdr = 10;
inline bool ReqReply::_internal_has_hdr() const {
  return this != internal_default_instance() && hdr_ != nullptr;
}
inline bool ReqReply::has_hdr() const {
  return _internal_has_hdr();
}
inline const ::mhdr::MsgHdr& ReqReply::_internal_hdr() const {
  const ::mhdr::MsgHdr* p = hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mhdr::MsgHdr*>(
      &::mhdr::_MsgHdr_default_instance_);
}
inline const ::mhdr::MsgHdr& ReqReply::hdr() const {
  // @@protoc_insertion_point(field_get:structure.ReqReply.hdr)
  return _internal_hdr();
}
inline void ReqReply::unsafe_arena_set_allocated_hdr(
    ::mhdr::MsgHdr* hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  hdr_ = hdr;
  if (hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:structure.ReqReply.hdr)
}
inline ::mhdr::MsgHdr* ReqReply::release_hdr() {
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mhdr::MsgHdr* ReqReply::unsafe_arena_release_hdr() {
  // @@protoc_insertion_point(field_release:structure.ReqReply.hdr)
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  return temp;
}
inline ::mhdr::MsgHdr* ReqReply::_internal_mutable_hdr() {
  
  if (hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::mhdr::MsgHdr>(GetArena());
    hdr_ = p;
  }
  return hdr_;
}
inline ::mhdr::MsgHdr* ReqReply::mutable_hdr() {
  // @@protoc_insertion_point(field_mutable:structure.ReqReply.hdr)
  return _internal_mutable_hdr();
}
inline void ReqReply::set_allocated_hdr(::mhdr::MsgHdr* hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  if (hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr)->GetArena();
    if (message_arena != submessage_arena) {
      hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hdr, submessage_arena);
    }
    
  } else {
    
  }
  hdr_ = hdr;
  // @@protoc_insertion_point(field_set_allocated:structure.ReqReply.hdr)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace structure

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::structure::TunnelType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::structure::TunnelType>() {
  return ::structure::TunnelType_descriptor();
}
template <> struct is_proto_enum< ::structure::InterfaceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::structure::InterfaceType>() {
  return ::structure::InterfaceType_descriptor();
}
template <> struct is_proto_enum< ::structure::HandoverType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::structure::HandoverType>() {
  return ::structure::HandoverType_descriptor();
}
template <> struct is_proto_enum< ::structure::PDCPConfigFailureReason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::structure::PDCPConfigFailureReason>() {
  return ::structure::PDCPConfigFailureReason_descriptor();
}
template <> struct is_proto_enum< ::structure::PDCPConfigType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::structure::PDCPConfigType>() {
  return ::structure::PDCPConfigType_descriptor();
}
template <> struct is_proto_enum< ::structure::PDCPHoPres> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::structure::PDCPHoPres>() {
  return ::structure::PDCPHoPres_descriptor();
}
template <> struct is_proto_enum< ::structure::TunnelState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::structure::TunnelState>() {
  return ::structure::TunnelState_descriptor();
}
template <> struct is_proto_enum< ::structure::IpAddressAction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::structure::IpAddressAction>() {
  return ::structure::IpAddressAction_descriptor();
}
template <> struct is_proto_enum< ::structure::PathStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::structure::PathStatus>() {
  return ::structure::PathStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_structure_2eproto
