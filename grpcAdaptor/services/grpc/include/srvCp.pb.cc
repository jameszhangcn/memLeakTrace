// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: srvCp.proto

#include "srvCp.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_mhdr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MsgHdr_mhdr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_structure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_CpUpHdr_structure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_structure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CreateTnlCfmEnt_structure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_structure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DelTnlCfmEnt_structure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_structure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ModTnlCfmEnt_structure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_structure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PDCPAddCfgCfmEnt_structure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_structure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PDCPDelCfgCfmEnt_structure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_structure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PDCPModCfgCfmEnt_structure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_structure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SduStatusInfo_structure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_structure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SecurityCfgCfm_structure_2eproto;
namespace srvCp {
class SecurityConfigCfmDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SecurityConfigCfm> _instance;
} _SecurityConfigCfm_default_instance_;
class CreateTunnelCfmDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateTunnelCfm> _instance;
} _CreateTunnelCfm_default_instance_;
class ModifyTunnelCfmDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModifyTunnelCfm> _instance;
} _ModifyTunnelCfm_default_instance_;
class DeleteTunnelCfmDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteTunnelCfm> _instance;
} _DeleteTunnelCfm_default_instance_;
class AddRbConfigCfmDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddRbConfigCfm> _instance;
} _AddRbConfigCfm_default_instance_;
class ModifyRbConfigCfmDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModifyRbConfigCfm> _instance;
} _ModifyRbConfigCfm_default_instance_;
class DeleteRbConfigCfmDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteRbConfigCfm> _instance;
} _DeleteRbConfigCfm_default_instance_;
class PDCPSduStatusCfmDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PDCPSduStatusCfm> _instance;
} _PDCPSduStatusCfm_default_instance_;
class AddPDCPConfigCfmDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddPDCPConfigCfm> _instance;
} _AddPDCPConfigCfm_default_instance_;
class ModifyPDCPConfigCfmDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModifyPDCPConfigCfm> _instance;
} _ModifyPDCPConfigCfm_default_instance_;
class CfmReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CfmReply> _instance;
} _CfmReply_default_instance_;
}  // namespace srvCp
static void InitDefaultsscc_info_AddPDCPConfigCfm_srvCp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srvCp::_AddPDCPConfigCfm_default_instance_;
    new (ptr) ::srvCp::AddPDCPConfigCfm();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srvCp::AddPDCPConfigCfm::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_AddPDCPConfigCfm_srvCp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_AddPDCPConfigCfm_srvCp_2eproto}, {
      &scc_info_MsgHdr_mhdr_2eproto.base,
      &scc_info_CpUpHdr_structure_2eproto.base,
      &scc_info_SecurityCfgCfm_structure_2eproto.base,
      &scc_info_PDCPAddCfgCfmEnt_structure_2eproto.base,}};

static void InitDefaultsscc_info_AddRbConfigCfm_srvCp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srvCp::_AddRbConfigCfm_default_instance_;
    new (ptr) ::srvCp::AddRbConfigCfm();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srvCp::AddRbConfigCfm::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_AddRbConfigCfm_srvCp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_AddRbConfigCfm_srvCp_2eproto}, {
      &scc_info_MsgHdr_mhdr_2eproto.base,
      &scc_info_CpUpHdr_structure_2eproto.base,
      &scc_info_PDCPAddCfgCfmEnt_structure_2eproto.base,}};

static void InitDefaultsscc_info_CfmReply_srvCp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srvCp::_CfmReply_default_instance_;
    new (ptr) ::srvCp::CfmReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srvCp::CfmReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CfmReply_srvCp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CfmReply_srvCp_2eproto}, {
      &scc_info_MsgHdr_mhdr_2eproto.base,}};

static void InitDefaultsscc_info_CreateTunnelCfm_srvCp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srvCp::_CreateTunnelCfm_default_instance_;
    new (ptr) ::srvCp::CreateTunnelCfm();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srvCp::CreateTunnelCfm::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CreateTunnelCfm_srvCp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_CreateTunnelCfm_srvCp_2eproto}, {
      &scc_info_MsgHdr_mhdr_2eproto.base,
      &scc_info_CpUpHdr_structure_2eproto.base,
      &scc_info_CreateTnlCfmEnt_structure_2eproto.base,}};

static void InitDefaultsscc_info_DeleteRbConfigCfm_srvCp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srvCp::_DeleteRbConfigCfm_default_instance_;
    new (ptr) ::srvCp::DeleteRbConfigCfm();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srvCp::DeleteRbConfigCfm::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_DeleteRbConfigCfm_srvCp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_DeleteRbConfigCfm_srvCp_2eproto}, {
      &scc_info_MsgHdr_mhdr_2eproto.base,
      &scc_info_CpUpHdr_structure_2eproto.base,
      &scc_info_PDCPDelCfgCfmEnt_structure_2eproto.base,}};

static void InitDefaultsscc_info_DeleteTunnelCfm_srvCp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srvCp::_DeleteTunnelCfm_default_instance_;
    new (ptr) ::srvCp::DeleteTunnelCfm();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srvCp::DeleteTunnelCfm::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_DeleteTunnelCfm_srvCp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_DeleteTunnelCfm_srvCp_2eproto}, {
      &scc_info_MsgHdr_mhdr_2eproto.base,
      &scc_info_CpUpHdr_structure_2eproto.base,
      &scc_info_DelTnlCfmEnt_structure_2eproto.base,}};

static void InitDefaultsscc_info_ModifyPDCPConfigCfm_srvCp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srvCp::_ModifyPDCPConfigCfm_default_instance_;
    new (ptr) ::srvCp::ModifyPDCPConfigCfm();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srvCp::ModifyPDCPConfigCfm::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ModifyPDCPConfigCfm_srvCp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_ModifyPDCPConfigCfm_srvCp_2eproto}, {
      &scc_info_MsgHdr_mhdr_2eproto.base,
      &scc_info_CpUpHdr_structure_2eproto.base,
      &scc_info_SecurityCfgCfm_structure_2eproto.base,
      &scc_info_PDCPModCfgCfmEnt_structure_2eproto.base,}};

static void InitDefaultsscc_info_ModifyRbConfigCfm_srvCp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srvCp::_ModifyRbConfigCfm_default_instance_;
    new (ptr) ::srvCp::ModifyRbConfigCfm();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srvCp::ModifyRbConfigCfm::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ModifyRbConfigCfm_srvCp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ModifyRbConfigCfm_srvCp_2eproto}, {
      &scc_info_MsgHdr_mhdr_2eproto.base,
      &scc_info_CpUpHdr_structure_2eproto.base,
      &scc_info_PDCPModCfgCfmEnt_structure_2eproto.base,}};

static void InitDefaultsscc_info_ModifyTunnelCfm_srvCp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srvCp::_ModifyTunnelCfm_default_instance_;
    new (ptr) ::srvCp::ModifyTunnelCfm();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srvCp::ModifyTunnelCfm::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ModifyTunnelCfm_srvCp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ModifyTunnelCfm_srvCp_2eproto}, {
      &scc_info_MsgHdr_mhdr_2eproto.base,
      &scc_info_CpUpHdr_structure_2eproto.base,
      &scc_info_ModTnlCfmEnt_structure_2eproto.base,}};

static void InitDefaultsscc_info_PDCPSduStatusCfm_srvCp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srvCp::_PDCPSduStatusCfm_default_instance_;
    new (ptr) ::srvCp::PDCPSduStatusCfm();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srvCp::PDCPSduStatusCfm::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PDCPSduStatusCfm_srvCp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PDCPSduStatusCfm_srvCp_2eproto}, {
      &scc_info_MsgHdr_mhdr_2eproto.base,
      &scc_info_CpUpHdr_structure_2eproto.base,
      &scc_info_SduStatusInfo_structure_2eproto.base,}};

static void InitDefaultsscc_info_SecurityConfigCfm_srvCp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srvCp::_SecurityConfigCfm_default_instance_;
    new (ptr) ::srvCp::SecurityConfigCfm();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srvCp::SecurityConfigCfm::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SecurityConfigCfm_srvCp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SecurityConfigCfm_srvCp_2eproto}, {
      &scc_info_MsgHdr_mhdr_2eproto.base,
      &scc_info_CpUpHdr_structure_2eproto.base,
      &scc_info_SecurityCfgCfm_structure_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_srvCp_2eproto[11];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_srvCp_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_srvCp_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_srvCp_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srvCp::SecurityConfigCfm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srvCp::SecurityConfigCfm, hdr_),
  PROTOBUF_FIELD_OFFSET(::srvCp::SecurityConfigCfm, cp_up_hdr_),
  PROTOBUF_FIELD_OFFSET(::srvCp::SecurityConfigCfm, sec_cfm_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srvCp::CreateTunnelCfm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srvCp::CreateTunnelCfm, hdr_),
  PROTOBUF_FIELD_OFFSET(::srvCp::CreateTunnelCfm, cp_up_hdr_),
  PROTOBUF_FIELD_OFFSET(::srvCp::CreateTunnelCfm, num_ent_),
  PROTOBUF_FIELD_OFFSET(::srvCp::CreateTunnelCfm, tnl_cfm_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srvCp::ModifyTunnelCfm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srvCp::ModifyTunnelCfm, hdr_),
  PROTOBUF_FIELD_OFFSET(::srvCp::ModifyTunnelCfm, cp_up_hdr_),
  PROTOBUF_FIELD_OFFSET(::srvCp::ModifyTunnelCfm, num_ent_),
  PROTOBUF_FIELD_OFFSET(::srvCp::ModifyTunnelCfm, tnl_cfm_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srvCp::DeleteTunnelCfm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srvCp::DeleteTunnelCfm, hdr_),
  PROTOBUF_FIELD_OFFSET(::srvCp::DeleteTunnelCfm, cp_up_hdr_),
  PROTOBUF_FIELD_OFFSET(::srvCp::DeleteTunnelCfm, num_ent_),
  PROTOBUF_FIELD_OFFSET(::srvCp::DeleteTunnelCfm, tnl_cfm_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srvCp::AddRbConfigCfm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srvCp::AddRbConfigCfm, hdr_),
  PROTOBUF_FIELD_OFFSET(::srvCp::AddRbConfigCfm, cp_up_hdr_),
  PROTOBUF_FIELD_OFFSET(::srvCp::AddRbConfigCfm, num_ent_),
  PROTOBUF_FIELD_OFFSET(::srvCp::AddRbConfigCfm, config_cfm_ent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srvCp::ModifyRbConfigCfm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srvCp::ModifyRbConfigCfm, hdr_),
  PROTOBUF_FIELD_OFFSET(::srvCp::ModifyRbConfigCfm, cp_up_hdr_),
  PROTOBUF_FIELD_OFFSET(::srvCp::ModifyRbConfigCfm, num_ent_),
  PROTOBUF_FIELD_OFFSET(::srvCp::ModifyRbConfigCfm, config_cfm_ent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srvCp::DeleteRbConfigCfm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srvCp::DeleteRbConfigCfm, hdr_),
  PROTOBUF_FIELD_OFFSET(::srvCp::DeleteRbConfigCfm, cp_up_hdr_),
  PROTOBUF_FIELD_OFFSET(::srvCp::DeleteRbConfigCfm, num_ent_),
  PROTOBUF_FIELD_OFFSET(::srvCp::DeleteRbConfigCfm, config_cfm_ent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srvCp::PDCPSduStatusCfm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srvCp::PDCPSduStatusCfm, hdr_),
  PROTOBUF_FIELD_OFFSET(::srvCp::PDCPSduStatusCfm, cp_up_hdr_),
  PROTOBUF_FIELD_OFFSET(::srvCp::PDCPSduStatusCfm, num_rb_),
  PROTOBUF_FIELD_OFFSET(::srvCp::PDCPSduStatusCfm, sdu_status_info_),
  PROTOBUF_FIELD_OFFSET(::srvCp::PDCPSduStatusCfm, status_),
  PROTOBUF_FIELD_OFFSET(::srvCp::PDCPSduStatusCfm, reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srvCp::AddPDCPConfigCfm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srvCp::AddPDCPConfigCfm, hdr_),
  PROTOBUF_FIELD_OFFSET(::srvCp::AddPDCPConfigCfm, cp_up_hdr_),
  PROTOBUF_FIELD_OFFSET(::srvCp::AddPDCPConfigCfm, sec_cfm_),
  PROTOBUF_FIELD_OFFSET(::srvCp::AddPDCPConfigCfm, num_ent_),
  PROTOBUF_FIELD_OFFSET(::srvCp::AddPDCPConfigCfm, config_cfm_ent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srvCp::ModifyPDCPConfigCfm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srvCp::ModifyPDCPConfigCfm, hdr_),
  PROTOBUF_FIELD_OFFSET(::srvCp::ModifyPDCPConfigCfm, cp_up_hdr_),
  PROTOBUF_FIELD_OFFSET(::srvCp::ModifyPDCPConfigCfm, sec_cfm_),
  PROTOBUF_FIELD_OFFSET(::srvCp::ModifyPDCPConfigCfm, num_ent_),
  PROTOBUF_FIELD_OFFSET(::srvCp::ModifyPDCPConfigCfm, config_cfm_ent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srvCp::CfmReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srvCp::CfmReply, hdr_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::srvCp::SecurityConfigCfm)},
  { 8, -1, sizeof(::srvCp::CreateTunnelCfm)},
  { 17, -1, sizeof(::srvCp::ModifyTunnelCfm)},
  { 26, -1, sizeof(::srvCp::DeleteTunnelCfm)},
  { 35, -1, sizeof(::srvCp::AddRbConfigCfm)},
  { 44, -1, sizeof(::srvCp::ModifyRbConfigCfm)},
  { 53, -1, sizeof(::srvCp::DeleteRbConfigCfm)},
  { 62, -1, sizeof(::srvCp::PDCPSduStatusCfm)},
  { 73, -1, sizeof(::srvCp::AddPDCPConfigCfm)},
  { 83, -1, sizeof(::srvCp::ModifyPDCPConfigCfm)},
  { 93, -1, sizeof(::srvCp::CfmReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srvCp::_SecurityConfigCfm_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srvCp::_CreateTunnelCfm_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srvCp::_ModifyTunnelCfm_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srvCp::_DeleteTunnelCfm_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srvCp::_AddRbConfigCfm_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srvCp::_ModifyRbConfigCfm_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srvCp::_DeleteRbConfigCfm_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srvCp::_PDCPSduStatusCfm_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srvCp::_AddPDCPConfigCfm_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srvCp::_ModifyPDCPConfigCfm_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srvCp::_CfmReply_default_instance_),
};

const char descriptor_table_protodef_srvCp_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013srvCp.proto\022\005srvCp\032\nmhdr.proto\032\017struct"
  "ure.proto\032\014common.proto\"\201\001\n\021SecurityConf"
  "igCfm\022\031\n\003hdr\030\n \001(\0132\014.mhdr.MsgHdr\022%\n\tcp_u"
  "p_hdr\030\024 \001(\0132\022.structure.CpUpHdr\022*\n\007sec_c"
  "fm\030\036 \001(\0132\031.structure.SecurityCfgCfm\"\226\001\n\017"
  "CreateTunnelCfm\022\031\n\003hdr\030\n \001(\0132\014.mhdr.MsgH"
  "dr\022%\n\tcp_up_hdr\030\024 \001(\0132\022.structure.CpUpHd"
  "r\022\017\n\007num_ent\030\037 \001(\r\0220\n\014tnl_cfm_list\030( \003(\013"
  "2\032.structure.CreateTnlCfmEnt\"\223\001\n\017ModifyT"
  "unnelCfm\022\031\n\003hdr\030\n \001(\0132\014.mhdr.MsgHdr\022%\n\tc"
  "p_up_hdr\030\024 \001(\0132\022.structure.CpUpHdr\022\017\n\007nu"
  "m_ent\030\037 \001(\r\022-\n\014tnl_cfm_list\030( \003(\0132\027.stru"
  "cture.ModTnlCfmEnt\"\223\001\n\017DeleteTunnelCfm\022\031"
  "\n\003hdr\030\n \001(\0132\014.mhdr.MsgHdr\022%\n\tcp_up_hdr\030\024"
  " \001(\0132\022.structure.CpUpHdr\022\017\n\007num_ent\030\037 \001("
  "\r\022-\n\014tnl_cfm_list\030( \003(\0132\027.structure.DelT"
  "nlCfmEnt\"\230\001\n\016AddRbConfigCfm\022\031\n\003hdr\030\n \001(\013"
  "2\014.mhdr.MsgHdr\022%\n\tcp_up_hdr\030\024 \001(\0132\022.stru"
  "cture.CpUpHdr\022\017\n\007num_ent\030\036 \001(\r\0223\n\016config"
  "_cfm_ent\030( \003(\0132\033.structure.PDCPAddCfgCfm"
  "Ent\"\233\001\n\021ModifyRbConfigCfm\022\031\n\003hdr\030\n \001(\0132\014"
  ".mhdr.MsgHdr\022%\n\tcp_up_hdr\030\024 \001(\0132\022.struct"
  "ure.CpUpHdr\022\017\n\007num_ent\030\036 \001(\r\0223\n\016config_c"
  "fm_ent\030( \003(\0132\033.structure.PDCPModCfgCfmEn"
  "t\"\233\001\n\021DeleteRbConfigCfm\022\031\n\003hdr\030\n \001(\0132\014.m"
  "hdr.MsgHdr\022%\n\tcp_up_hdr\030\024 \001(\0132\022.structur"
  "e.CpUpHdr\022\017\n\007num_ent\030\036 \001(\r\0223\n\016config_cfm"
  "_ent\030( \003(\0132\033.structure.PDCPDelCfgCfmEnt\""
  "\333\001\n\020PDCPSduStatusCfm\022\031\n\003hdr\030\n \001(\0132\014.mhdr"
  ".MsgHdr\022%\n\tcp_up_hdr\030\024 \001(\0132\022.structure.C"
  "pUpHdr\022\016\n\006num_rb\030\036 \001(\r\0221\n\017sdu_status_inf"
  "o\030( \003(\0132\030.structure.SduStatusInfo\022\016\n\006sta"
  "tus\0302 \001(\010\0222\n\006reason\030< \001(\0162\".structure.PD"
  "CPConfigFailureReason\"\306\001\n\020AddPDCPConfigC"
  "fm\022\031\n\003hdr\030\n \001(\0132\014.mhdr.MsgHdr\022%\n\tcp_up_h"
  "dr\030\024 \001(\0132\022.structure.CpUpHdr\022*\n\007sec_cfm\030"
  "\036 \001(\0132\031.structure.SecurityCfgCfm\022\017\n\007num_"
  "ent\030( \001(\r\0223\n\016config_cfm_ent\0302 \003(\0132\033.stru"
  "cture.PDCPAddCfgCfmEnt\"\311\001\n\023ModifyPDCPCon"
  "figCfm\022\031\n\003hdr\030\n \001(\0132\014.mhdr.MsgHdr\022%\n\tcp_"
  "up_hdr\030\024 \001(\0132\022.structure.CpUpHdr\022*\n\007sec_"
  "cfm\030\036 \001(\0132\031.structure.SecurityCfgCfm\022\017\n\007"
  "num_ent\030( \001(\r\0223\n\016config_cfm_ent\0302 \003(\0132\033."
  "structure.PDCPModCfgCfmEnt\"%\n\010CfmReply\022\031"
  "\n\003hdr\030\n \001(\0132\014.mhdr.MsgHdr*\204\003\n\006method\022\021\n\r"
  "MethodUnknown\020\000\022!\n\035MethodSubmitSecurityC"
  "onfigCfm\020\001\022\037\n\033MethodSubmitCreateTunnelCf"
  "m\020\002\022\037\n\033MethodSubmitModifyTunnelCfm\020\003\022\037\n\033"
  "MethodSubmitDeleteTunnelCfm\020\004\022\036\n\032MethodS"
  "ubmitAddRbConfigCfm\020\005\022!\n\035MethodSubmitMod"
  "ifyRbConfigCfm\020\006\022!\n\035MethodSubmitDeleteRb"
  "ConfigCfm\020\007\022 \n\034MethodSubmitPDCPSduStatus"
  "Cfm\020\010\022 \n\034MethodSubmitAddPDCPConfigCfm\020\t\022"
  "#\n\037MethodSubmitModifyPDCPConfigCfm\020\n\022\022\n\016"
  "MethodCfmReply\020\013*\"\n\007version\022\016\n\nVerUnknow"
  "n\020\000\022\007\n\003Ver\020\0012\302\005\n\002Cp\022F\n\027SubmitSecurityCon"
  "figCfm\022\030.srvCp.SecurityConfigCfm\032\017.srvCp"
  ".CfmReply\"\000\022B\n\025SubmitCreateTunnelCfm\022\026.s"
  "rvCp.CreateTunnelCfm\032\017.srvCp.CfmReply\"\000\022"
  "B\n\025SubmitModifyTunnelCfm\022\026.srvCp.ModifyT"
  "unnelCfm\032\017.srvCp.CfmReply\"\000\022B\n\025SubmitDel"
  "eteTunnelCfm\022\026.srvCp.DeleteTunnelCfm\032\017.s"
  "rvCp.CfmReply\"\000\022@\n\024SubmitAddRbConfigCfm\022"
  "\025.srvCp.AddRbConfigCfm\032\017.srvCp.CfmReply\""
  "\000\022F\n\027SubmitModifyRbConfigCfm\022\030.srvCp.Mod"
  "ifyRbConfigCfm\032\017.srvCp.CfmReply\"\000\022F\n\027Sub"
  "mitDeleteRbConfigCfm\022\030.srvCp.DeleteRbCon"
  "figCfm\032\017.srvCp.CfmReply\"\000\022D\n\026SubmitPDCPS"
  "duStatusCfm\022\027.srvCp.PDCPSduStatusCfm\032\017.s"
  "rvCp.CfmReply\"\000\022D\n\026SubmitAddPDCPConfigCf"
  "m\022\027.srvCp.AddPDCPConfigCfm\032\017.srvCp.CfmRe"
  "ply\"\000\022J\n\031SubmitModifyPDCPConfigCfm\022\032.srv"
  "Cp.ModifyPDCPConfigCfm\032\017.srvCp.CfmReply\""
  "\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_srvCp_2eproto_deps[3] = {
  &::descriptor_table_common_2eproto,
  &::descriptor_table_mhdr_2eproto,
  &::descriptor_table_structure_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_srvCp_2eproto_sccs[11] = {
  &scc_info_AddPDCPConfigCfm_srvCp_2eproto.base,
  &scc_info_AddRbConfigCfm_srvCp_2eproto.base,
  &scc_info_CfmReply_srvCp_2eproto.base,
  &scc_info_CreateTunnelCfm_srvCp_2eproto.base,
  &scc_info_DeleteRbConfigCfm_srvCp_2eproto.base,
  &scc_info_DeleteTunnelCfm_srvCp_2eproto.base,
  &scc_info_ModifyPDCPConfigCfm_srvCp_2eproto.base,
  &scc_info_ModifyRbConfigCfm_srvCp_2eproto.base,
  &scc_info_ModifyTunnelCfm_srvCp_2eproto.base,
  &scc_info_PDCPSduStatusCfm_srvCp_2eproto.base,
  &scc_info_SecurityConfigCfm_srvCp_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_srvCp_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_srvCp_2eproto = {
  false, false, descriptor_table_protodef_srvCp_2eproto, "srvCp.proto", 2929,
  &descriptor_table_srvCp_2eproto_once, descriptor_table_srvCp_2eproto_sccs, descriptor_table_srvCp_2eproto_deps, 11, 3,
  schemas, file_default_instances, TableStruct_srvCp_2eproto::offsets,
  file_level_metadata_srvCp_2eproto, 11, file_level_enum_descriptors_srvCp_2eproto, file_level_service_descriptors_srvCp_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_srvCp_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_srvCp_2eproto)), true);
namespace srvCp {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* method_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_srvCp_2eproto);
  return file_level_enum_descriptors_srvCp_2eproto[0];
}
bool method_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* version_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_srvCp_2eproto);
  return file_level_enum_descriptors_srvCp_2eproto[1];
}
bool version_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void SecurityConfigCfm::InitAsDefaultInstance() {
  ::srvCp::_SecurityConfigCfm_default_instance_._instance.get_mutable()->hdr_ = const_cast< ::mhdr::MsgHdr*>(
      ::mhdr::MsgHdr::internal_default_instance());
  ::srvCp::_SecurityConfigCfm_default_instance_._instance.get_mutable()->cp_up_hdr_ = const_cast< ::structure::CpUpHdr*>(
      ::structure::CpUpHdr::internal_default_instance());
  ::srvCp::_SecurityConfigCfm_default_instance_._instance.get_mutable()->sec_cfm_ = const_cast< ::structure::SecurityCfgCfm*>(
      ::structure::SecurityCfgCfm::internal_default_instance());
}
class SecurityConfigCfm::_Internal {
 public:
  static const ::mhdr::MsgHdr& hdr(const SecurityConfigCfm* msg);
  static const ::structure::CpUpHdr& cp_up_hdr(const SecurityConfigCfm* msg);
  static const ::structure::SecurityCfgCfm& sec_cfm(const SecurityConfigCfm* msg);
};

const ::mhdr::MsgHdr&
SecurityConfigCfm::_Internal::hdr(const SecurityConfigCfm* msg) {
  return *msg->hdr_;
}
const ::structure::CpUpHdr&
SecurityConfigCfm::_Internal::cp_up_hdr(const SecurityConfigCfm* msg) {
  return *msg->cp_up_hdr_;
}
const ::structure::SecurityCfgCfm&
SecurityConfigCfm::_Internal::sec_cfm(const SecurityConfigCfm* msg) {
  return *msg->sec_cfm_;
}
void SecurityConfigCfm::clear_hdr() {
  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
}
void SecurityConfigCfm::clear_cp_up_hdr() {
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
}
void SecurityConfigCfm::clear_sec_cfm() {
  if (GetArena() == nullptr && sec_cfm_ != nullptr) {
    delete sec_cfm_;
  }
  sec_cfm_ = nullptr;
}
SecurityConfigCfm::SecurityConfigCfm(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srvCp.SecurityConfigCfm)
}
SecurityConfigCfm::SecurityConfigCfm(const SecurityConfigCfm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hdr()) {
    hdr_ = new ::mhdr::MsgHdr(*from.hdr_);
  } else {
    hdr_ = nullptr;
  }
  if (from._internal_has_cp_up_hdr()) {
    cp_up_hdr_ = new ::structure::CpUpHdr(*from.cp_up_hdr_);
  } else {
    cp_up_hdr_ = nullptr;
  }
  if (from._internal_has_sec_cfm()) {
    sec_cfm_ = new ::structure::SecurityCfgCfm(*from.sec_cfm_);
  } else {
    sec_cfm_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:srvCp.SecurityConfigCfm)
}

void SecurityConfigCfm::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SecurityConfigCfm_srvCp_2eproto.base);
  ::memset(&hdr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sec_cfm_) -
      reinterpret_cast<char*>(&hdr_)) + sizeof(sec_cfm_));
}

SecurityConfigCfm::~SecurityConfigCfm() {
  // @@protoc_insertion_point(destructor:srvCp.SecurityConfigCfm)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SecurityConfigCfm::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete hdr_;
  if (this != internal_default_instance()) delete cp_up_hdr_;
  if (this != internal_default_instance()) delete sec_cfm_;
}

void SecurityConfigCfm::ArenaDtor(void* object) {
  SecurityConfigCfm* _this = reinterpret_cast< SecurityConfigCfm* >(object);
  (void)_this;
}
void SecurityConfigCfm::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SecurityConfigCfm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SecurityConfigCfm& SecurityConfigCfm::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SecurityConfigCfm_srvCp_2eproto.base);
  return *internal_default_instance();
}


void SecurityConfigCfm::Clear() {
// @@protoc_insertion_point(message_clear_start:srvCp.SecurityConfigCfm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
  if (GetArena() == nullptr && sec_cfm_ != nullptr) {
    delete sec_cfm_;
  }
  sec_cfm_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SecurityConfigCfm::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mhdr.MsgHdr hdr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.CpUpHdr cp_up_hdr = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_cp_up_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.SecurityCfgCfm sec_cfm = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_sec_cfm(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SecurityConfigCfm::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srvCp.SecurityConfigCfm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::hdr(this), target, stream);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::cp_up_hdr(this), target, stream);
  }

  // .structure.SecurityCfgCfm sec_cfm = 30;
  if (this->has_sec_cfm()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::sec_cfm(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srvCp.SecurityConfigCfm)
  return target;
}

size_t SecurityConfigCfm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srvCp.SecurityConfigCfm)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hdr_);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cp_up_hdr_);
  }

  // .structure.SecurityCfgCfm sec_cfm = 30;
  if (this->has_sec_cfm()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sec_cfm_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecurityConfigCfm::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srvCp.SecurityConfigCfm)
  GOOGLE_DCHECK_NE(&from, this);
  const SecurityConfigCfm* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SecurityConfigCfm>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srvCp.SecurityConfigCfm)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srvCp.SecurityConfigCfm)
    MergeFrom(*source);
  }
}

void SecurityConfigCfm::MergeFrom(const SecurityConfigCfm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srvCp.SecurityConfigCfm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hdr()) {
    _internal_mutable_hdr()->::mhdr::MsgHdr::MergeFrom(from._internal_hdr());
  }
  if (from.has_cp_up_hdr()) {
    _internal_mutable_cp_up_hdr()->::structure::CpUpHdr::MergeFrom(from._internal_cp_up_hdr());
  }
  if (from.has_sec_cfm()) {
    _internal_mutable_sec_cfm()->::structure::SecurityCfgCfm::MergeFrom(from._internal_sec_cfm());
  }
}

void SecurityConfigCfm::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srvCp.SecurityConfigCfm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecurityConfigCfm::CopyFrom(const SecurityConfigCfm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srvCp.SecurityConfigCfm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecurityConfigCfm::IsInitialized() const {
  return true;
}

void SecurityConfigCfm::InternalSwap(SecurityConfigCfm* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SecurityConfigCfm, sec_cfm_)
      + sizeof(SecurityConfigCfm::sec_cfm_)
      - PROTOBUF_FIELD_OFFSET(SecurityConfigCfm, hdr_)>(
          reinterpret_cast<char*>(&hdr_),
          reinterpret_cast<char*>(&other->hdr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SecurityConfigCfm::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateTunnelCfm::InitAsDefaultInstance() {
  ::srvCp::_CreateTunnelCfm_default_instance_._instance.get_mutable()->hdr_ = const_cast< ::mhdr::MsgHdr*>(
      ::mhdr::MsgHdr::internal_default_instance());
  ::srvCp::_CreateTunnelCfm_default_instance_._instance.get_mutable()->cp_up_hdr_ = const_cast< ::structure::CpUpHdr*>(
      ::structure::CpUpHdr::internal_default_instance());
}
class CreateTunnelCfm::_Internal {
 public:
  static const ::mhdr::MsgHdr& hdr(const CreateTunnelCfm* msg);
  static const ::structure::CpUpHdr& cp_up_hdr(const CreateTunnelCfm* msg);
};

const ::mhdr::MsgHdr&
CreateTunnelCfm::_Internal::hdr(const CreateTunnelCfm* msg) {
  return *msg->hdr_;
}
const ::structure::CpUpHdr&
CreateTunnelCfm::_Internal::cp_up_hdr(const CreateTunnelCfm* msg) {
  return *msg->cp_up_hdr_;
}
void CreateTunnelCfm::clear_hdr() {
  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
}
void CreateTunnelCfm::clear_cp_up_hdr() {
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
}
void CreateTunnelCfm::clear_tnl_cfm_list() {
  tnl_cfm_list_.Clear();
}
CreateTunnelCfm::CreateTunnelCfm(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tnl_cfm_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srvCp.CreateTunnelCfm)
}
CreateTunnelCfm::CreateTunnelCfm(const CreateTunnelCfm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tnl_cfm_list_(from.tnl_cfm_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hdr()) {
    hdr_ = new ::mhdr::MsgHdr(*from.hdr_);
  } else {
    hdr_ = nullptr;
  }
  if (from._internal_has_cp_up_hdr()) {
    cp_up_hdr_ = new ::structure::CpUpHdr(*from.cp_up_hdr_);
  } else {
    cp_up_hdr_ = nullptr;
  }
  num_ent_ = from.num_ent_;
  // @@protoc_insertion_point(copy_constructor:srvCp.CreateTunnelCfm)
}

void CreateTunnelCfm::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateTunnelCfm_srvCp_2eproto.base);
  ::memset(&hdr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_ent_) -
      reinterpret_cast<char*>(&hdr_)) + sizeof(num_ent_));
}

CreateTunnelCfm::~CreateTunnelCfm() {
  // @@protoc_insertion_point(destructor:srvCp.CreateTunnelCfm)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateTunnelCfm::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete hdr_;
  if (this != internal_default_instance()) delete cp_up_hdr_;
}

void CreateTunnelCfm::ArenaDtor(void* object) {
  CreateTunnelCfm* _this = reinterpret_cast< CreateTunnelCfm* >(object);
  (void)_this;
}
void CreateTunnelCfm::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateTunnelCfm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateTunnelCfm& CreateTunnelCfm::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateTunnelCfm_srvCp_2eproto.base);
  return *internal_default_instance();
}


void CreateTunnelCfm::Clear() {
// @@protoc_insertion_point(message_clear_start:srvCp.CreateTunnelCfm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tnl_cfm_list_.Clear();
  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
  num_ent_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateTunnelCfm::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mhdr.MsgHdr hdr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.CpUpHdr cp_up_hdr = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_cp_up_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_ent = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          num_ent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .structure.CreateTnlCfmEnt tnl_cfm_list = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_tnl_cfm_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<322>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateTunnelCfm::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srvCp.CreateTunnelCfm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::hdr(this), target, stream);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::cp_up_hdr(this), target, stream);
  }

  // uint32 num_ent = 31;
  if (this->num_ent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(31, this->_internal_num_ent(), target);
  }

  // repeated .structure.CreateTnlCfmEnt tnl_cfm_list = 40;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tnl_cfm_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(40, this->_internal_tnl_cfm_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srvCp.CreateTunnelCfm)
  return target;
}

size_t CreateTunnelCfm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srvCp.CreateTunnelCfm)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .structure.CreateTnlCfmEnt tnl_cfm_list = 40;
  total_size += 2UL * this->_internal_tnl_cfm_list_size();
  for (const auto& msg : this->tnl_cfm_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hdr_);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cp_up_hdr_);
  }

  // uint32 num_ent = 31;
  if (this->num_ent() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_ent());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateTunnelCfm::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srvCp.CreateTunnelCfm)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateTunnelCfm* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateTunnelCfm>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srvCp.CreateTunnelCfm)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srvCp.CreateTunnelCfm)
    MergeFrom(*source);
  }
}

void CreateTunnelCfm::MergeFrom(const CreateTunnelCfm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srvCp.CreateTunnelCfm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tnl_cfm_list_.MergeFrom(from.tnl_cfm_list_);
  if (from.has_hdr()) {
    _internal_mutable_hdr()->::mhdr::MsgHdr::MergeFrom(from._internal_hdr());
  }
  if (from.has_cp_up_hdr()) {
    _internal_mutable_cp_up_hdr()->::structure::CpUpHdr::MergeFrom(from._internal_cp_up_hdr());
  }
  if (from.num_ent() != 0) {
    _internal_set_num_ent(from._internal_num_ent());
  }
}

void CreateTunnelCfm::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srvCp.CreateTunnelCfm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateTunnelCfm::CopyFrom(const CreateTunnelCfm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srvCp.CreateTunnelCfm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTunnelCfm::IsInitialized() const {
  return true;
}

void CreateTunnelCfm::InternalSwap(CreateTunnelCfm* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tnl_cfm_list_.InternalSwap(&other->tnl_cfm_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateTunnelCfm, num_ent_)
      + sizeof(CreateTunnelCfm::num_ent_)
      - PROTOBUF_FIELD_OFFSET(CreateTunnelCfm, hdr_)>(
          reinterpret_cast<char*>(&hdr_),
          reinterpret_cast<char*>(&other->hdr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateTunnelCfm::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModifyTunnelCfm::InitAsDefaultInstance() {
  ::srvCp::_ModifyTunnelCfm_default_instance_._instance.get_mutable()->hdr_ = const_cast< ::mhdr::MsgHdr*>(
      ::mhdr::MsgHdr::internal_default_instance());
  ::srvCp::_ModifyTunnelCfm_default_instance_._instance.get_mutable()->cp_up_hdr_ = const_cast< ::structure::CpUpHdr*>(
      ::structure::CpUpHdr::internal_default_instance());
}
class ModifyTunnelCfm::_Internal {
 public:
  static const ::mhdr::MsgHdr& hdr(const ModifyTunnelCfm* msg);
  static const ::structure::CpUpHdr& cp_up_hdr(const ModifyTunnelCfm* msg);
};

const ::mhdr::MsgHdr&
ModifyTunnelCfm::_Internal::hdr(const ModifyTunnelCfm* msg) {
  return *msg->hdr_;
}
const ::structure::CpUpHdr&
ModifyTunnelCfm::_Internal::cp_up_hdr(const ModifyTunnelCfm* msg) {
  return *msg->cp_up_hdr_;
}
void ModifyTunnelCfm::clear_hdr() {
  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
}
void ModifyTunnelCfm::clear_cp_up_hdr() {
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
}
void ModifyTunnelCfm::clear_tnl_cfm_list() {
  tnl_cfm_list_.Clear();
}
ModifyTunnelCfm::ModifyTunnelCfm(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tnl_cfm_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srvCp.ModifyTunnelCfm)
}
ModifyTunnelCfm::ModifyTunnelCfm(const ModifyTunnelCfm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tnl_cfm_list_(from.tnl_cfm_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hdr()) {
    hdr_ = new ::mhdr::MsgHdr(*from.hdr_);
  } else {
    hdr_ = nullptr;
  }
  if (from._internal_has_cp_up_hdr()) {
    cp_up_hdr_ = new ::structure::CpUpHdr(*from.cp_up_hdr_);
  } else {
    cp_up_hdr_ = nullptr;
  }
  num_ent_ = from.num_ent_;
  // @@protoc_insertion_point(copy_constructor:srvCp.ModifyTunnelCfm)
}

void ModifyTunnelCfm::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModifyTunnelCfm_srvCp_2eproto.base);
  ::memset(&hdr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_ent_) -
      reinterpret_cast<char*>(&hdr_)) + sizeof(num_ent_));
}

ModifyTunnelCfm::~ModifyTunnelCfm() {
  // @@protoc_insertion_point(destructor:srvCp.ModifyTunnelCfm)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModifyTunnelCfm::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete hdr_;
  if (this != internal_default_instance()) delete cp_up_hdr_;
}

void ModifyTunnelCfm::ArenaDtor(void* object) {
  ModifyTunnelCfm* _this = reinterpret_cast< ModifyTunnelCfm* >(object);
  (void)_this;
}
void ModifyTunnelCfm::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModifyTunnelCfm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModifyTunnelCfm& ModifyTunnelCfm::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModifyTunnelCfm_srvCp_2eproto.base);
  return *internal_default_instance();
}


void ModifyTunnelCfm::Clear() {
// @@protoc_insertion_point(message_clear_start:srvCp.ModifyTunnelCfm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tnl_cfm_list_.Clear();
  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
  num_ent_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModifyTunnelCfm::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mhdr.MsgHdr hdr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.CpUpHdr cp_up_hdr = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_cp_up_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_ent = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          num_ent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .structure.ModTnlCfmEnt tnl_cfm_list = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_tnl_cfm_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<322>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModifyTunnelCfm::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srvCp.ModifyTunnelCfm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::hdr(this), target, stream);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::cp_up_hdr(this), target, stream);
  }

  // uint32 num_ent = 31;
  if (this->num_ent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(31, this->_internal_num_ent(), target);
  }

  // repeated .structure.ModTnlCfmEnt tnl_cfm_list = 40;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tnl_cfm_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(40, this->_internal_tnl_cfm_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srvCp.ModifyTunnelCfm)
  return target;
}

size_t ModifyTunnelCfm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srvCp.ModifyTunnelCfm)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .structure.ModTnlCfmEnt tnl_cfm_list = 40;
  total_size += 2UL * this->_internal_tnl_cfm_list_size();
  for (const auto& msg : this->tnl_cfm_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hdr_);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cp_up_hdr_);
  }

  // uint32 num_ent = 31;
  if (this->num_ent() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_ent());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModifyTunnelCfm::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srvCp.ModifyTunnelCfm)
  GOOGLE_DCHECK_NE(&from, this);
  const ModifyTunnelCfm* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModifyTunnelCfm>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srvCp.ModifyTunnelCfm)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srvCp.ModifyTunnelCfm)
    MergeFrom(*source);
  }
}

void ModifyTunnelCfm::MergeFrom(const ModifyTunnelCfm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srvCp.ModifyTunnelCfm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tnl_cfm_list_.MergeFrom(from.tnl_cfm_list_);
  if (from.has_hdr()) {
    _internal_mutable_hdr()->::mhdr::MsgHdr::MergeFrom(from._internal_hdr());
  }
  if (from.has_cp_up_hdr()) {
    _internal_mutable_cp_up_hdr()->::structure::CpUpHdr::MergeFrom(from._internal_cp_up_hdr());
  }
  if (from.num_ent() != 0) {
    _internal_set_num_ent(from._internal_num_ent());
  }
}

void ModifyTunnelCfm::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srvCp.ModifyTunnelCfm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyTunnelCfm::CopyFrom(const ModifyTunnelCfm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srvCp.ModifyTunnelCfm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyTunnelCfm::IsInitialized() const {
  return true;
}

void ModifyTunnelCfm::InternalSwap(ModifyTunnelCfm* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tnl_cfm_list_.InternalSwap(&other->tnl_cfm_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModifyTunnelCfm, num_ent_)
      + sizeof(ModifyTunnelCfm::num_ent_)
      - PROTOBUF_FIELD_OFFSET(ModifyTunnelCfm, hdr_)>(
          reinterpret_cast<char*>(&hdr_),
          reinterpret_cast<char*>(&other->hdr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModifyTunnelCfm::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteTunnelCfm::InitAsDefaultInstance() {
  ::srvCp::_DeleteTunnelCfm_default_instance_._instance.get_mutable()->hdr_ = const_cast< ::mhdr::MsgHdr*>(
      ::mhdr::MsgHdr::internal_default_instance());
  ::srvCp::_DeleteTunnelCfm_default_instance_._instance.get_mutable()->cp_up_hdr_ = const_cast< ::structure::CpUpHdr*>(
      ::structure::CpUpHdr::internal_default_instance());
}
class DeleteTunnelCfm::_Internal {
 public:
  static const ::mhdr::MsgHdr& hdr(const DeleteTunnelCfm* msg);
  static const ::structure::CpUpHdr& cp_up_hdr(const DeleteTunnelCfm* msg);
};

const ::mhdr::MsgHdr&
DeleteTunnelCfm::_Internal::hdr(const DeleteTunnelCfm* msg) {
  return *msg->hdr_;
}
const ::structure::CpUpHdr&
DeleteTunnelCfm::_Internal::cp_up_hdr(const DeleteTunnelCfm* msg) {
  return *msg->cp_up_hdr_;
}
void DeleteTunnelCfm::clear_hdr() {
  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
}
void DeleteTunnelCfm::clear_cp_up_hdr() {
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
}
void DeleteTunnelCfm::clear_tnl_cfm_list() {
  tnl_cfm_list_.Clear();
}
DeleteTunnelCfm::DeleteTunnelCfm(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tnl_cfm_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srvCp.DeleteTunnelCfm)
}
DeleteTunnelCfm::DeleteTunnelCfm(const DeleteTunnelCfm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tnl_cfm_list_(from.tnl_cfm_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hdr()) {
    hdr_ = new ::mhdr::MsgHdr(*from.hdr_);
  } else {
    hdr_ = nullptr;
  }
  if (from._internal_has_cp_up_hdr()) {
    cp_up_hdr_ = new ::structure::CpUpHdr(*from.cp_up_hdr_);
  } else {
    cp_up_hdr_ = nullptr;
  }
  num_ent_ = from.num_ent_;
  // @@protoc_insertion_point(copy_constructor:srvCp.DeleteTunnelCfm)
}

void DeleteTunnelCfm::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteTunnelCfm_srvCp_2eproto.base);
  ::memset(&hdr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_ent_) -
      reinterpret_cast<char*>(&hdr_)) + sizeof(num_ent_));
}

DeleteTunnelCfm::~DeleteTunnelCfm() {
  // @@protoc_insertion_point(destructor:srvCp.DeleteTunnelCfm)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteTunnelCfm::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete hdr_;
  if (this != internal_default_instance()) delete cp_up_hdr_;
}

void DeleteTunnelCfm::ArenaDtor(void* object) {
  DeleteTunnelCfm* _this = reinterpret_cast< DeleteTunnelCfm* >(object);
  (void)_this;
}
void DeleteTunnelCfm::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteTunnelCfm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteTunnelCfm& DeleteTunnelCfm::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteTunnelCfm_srvCp_2eproto.base);
  return *internal_default_instance();
}


void DeleteTunnelCfm::Clear() {
// @@protoc_insertion_point(message_clear_start:srvCp.DeleteTunnelCfm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tnl_cfm_list_.Clear();
  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
  num_ent_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteTunnelCfm::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mhdr.MsgHdr hdr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.CpUpHdr cp_up_hdr = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_cp_up_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_ent = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          num_ent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .structure.DelTnlCfmEnt tnl_cfm_list = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_tnl_cfm_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<322>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteTunnelCfm::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srvCp.DeleteTunnelCfm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::hdr(this), target, stream);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::cp_up_hdr(this), target, stream);
  }

  // uint32 num_ent = 31;
  if (this->num_ent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(31, this->_internal_num_ent(), target);
  }

  // repeated .structure.DelTnlCfmEnt tnl_cfm_list = 40;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tnl_cfm_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(40, this->_internal_tnl_cfm_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srvCp.DeleteTunnelCfm)
  return target;
}

size_t DeleteTunnelCfm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srvCp.DeleteTunnelCfm)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .structure.DelTnlCfmEnt tnl_cfm_list = 40;
  total_size += 2UL * this->_internal_tnl_cfm_list_size();
  for (const auto& msg : this->tnl_cfm_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hdr_);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cp_up_hdr_);
  }

  // uint32 num_ent = 31;
  if (this->num_ent() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_ent());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteTunnelCfm::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srvCp.DeleteTunnelCfm)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteTunnelCfm* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteTunnelCfm>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srvCp.DeleteTunnelCfm)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srvCp.DeleteTunnelCfm)
    MergeFrom(*source);
  }
}

void DeleteTunnelCfm::MergeFrom(const DeleteTunnelCfm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srvCp.DeleteTunnelCfm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tnl_cfm_list_.MergeFrom(from.tnl_cfm_list_);
  if (from.has_hdr()) {
    _internal_mutable_hdr()->::mhdr::MsgHdr::MergeFrom(from._internal_hdr());
  }
  if (from.has_cp_up_hdr()) {
    _internal_mutable_cp_up_hdr()->::structure::CpUpHdr::MergeFrom(from._internal_cp_up_hdr());
  }
  if (from.num_ent() != 0) {
    _internal_set_num_ent(from._internal_num_ent());
  }
}

void DeleteTunnelCfm::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srvCp.DeleteTunnelCfm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteTunnelCfm::CopyFrom(const DeleteTunnelCfm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srvCp.DeleteTunnelCfm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteTunnelCfm::IsInitialized() const {
  return true;
}

void DeleteTunnelCfm::InternalSwap(DeleteTunnelCfm* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tnl_cfm_list_.InternalSwap(&other->tnl_cfm_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteTunnelCfm, num_ent_)
      + sizeof(DeleteTunnelCfm::num_ent_)
      - PROTOBUF_FIELD_OFFSET(DeleteTunnelCfm, hdr_)>(
          reinterpret_cast<char*>(&hdr_),
          reinterpret_cast<char*>(&other->hdr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteTunnelCfm::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddRbConfigCfm::InitAsDefaultInstance() {
  ::srvCp::_AddRbConfigCfm_default_instance_._instance.get_mutable()->hdr_ = const_cast< ::mhdr::MsgHdr*>(
      ::mhdr::MsgHdr::internal_default_instance());
  ::srvCp::_AddRbConfigCfm_default_instance_._instance.get_mutable()->cp_up_hdr_ = const_cast< ::structure::CpUpHdr*>(
      ::structure::CpUpHdr::internal_default_instance());
}
class AddRbConfigCfm::_Internal {
 public:
  static const ::mhdr::MsgHdr& hdr(const AddRbConfigCfm* msg);
  static const ::structure::CpUpHdr& cp_up_hdr(const AddRbConfigCfm* msg);
};

const ::mhdr::MsgHdr&
AddRbConfigCfm::_Internal::hdr(const AddRbConfigCfm* msg) {
  return *msg->hdr_;
}
const ::structure::CpUpHdr&
AddRbConfigCfm::_Internal::cp_up_hdr(const AddRbConfigCfm* msg) {
  return *msg->cp_up_hdr_;
}
void AddRbConfigCfm::clear_hdr() {
  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
}
void AddRbConfigCfm::clear_cp_up_hdr() {
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
}
void AddRbConfigCfm::clear_config_cfm_ent() {
  config_cfm_ent_.Clear();
}
AddRbConfigCfm::AddRbConfigCfm(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  config_cfm_ent_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srvCp.AddRbConfigCfm)
}
AddRbConfigCfm::AddRbConfigCfm(const AddRbConfigCfm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      config_cfm_ent_(from.config_cfm_ent_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hdr()) {
    hdr_ = new ::mhdr::MsgHdr(*from.hdr_);
  } else {
    hdr_ = nullptr;
  }
  if (from._internal_has_cp_up_hdr()) {
    cp_up_hdr_ = new ::structure::CpUpHdr(*from.cp_up_hdr_);
  } else {
    cp_up_hdr_ = nullptr;
  }
  num_ent_ = from.num_ent_;
  // @@protoc_insertion_point(copy_constructor:srvCp.AddRbConfigCfm)
}

void AddRbConfigCfm::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddRbConfigCfm_srvCp_2eproto.base);
  ::memset(&hdr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_ent_) -
      reinterpret_cast<char*>(&hdr_)) + sizeof(num_ent_));
}

AddRbConfigCfm::~AddRbConfigCfm() {
  // @@protoc_insertion_point(destructor:srvCp.AddRbConfigCfm)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddRbConfigCfm::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete hdr_;
  if (this != internal_default_instance()) delete cp_up_hdr_;
}

void AddRbConfigCfm::ArenaDtor(void* object) {
  AddRbConfigCfm* _this = reinterpret_cast< AddRbConfigCfm* >(object);
  (void)_this;
}
void AddRbConfigCfm::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddRbConfigCfm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddRbConfigCfm& AddRbConfigCfm::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddRbConfigCfm_srvCp_2eproto.base);
  return *internal_default_instance();
}


void AddRbConfigCfm::Clear() {
// @@protoc_insertion_point(message_clear_start:srvCp.AddRbConfigCfm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  config_cfm_ent_.Clear();
  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
  num_ent_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddRbConfigCfm::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mhdr.MsgHdr hdr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.CpUpHdr cp_up_hdr = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_cp_up_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_ent = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          num_ent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .structure.PDCPAddCfgCfmEnt config_cfm_ent = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_config_cfm_ent(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<322>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddRbConfigCfm::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srvCp.AddRbConfigCfm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::hdr(this), target, stream);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::cp_up_hdr(this), target, stream);
  }

  // uint32 num_ent = 30;
  if (this->num_ent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_num_ent(), target);
  }

  // repeated .structure.PDCPAddCfgCfmEnt config_cfm_ent = 40;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_config_cfm_ent_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(40, this->_internal_config_cfm_ent(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srvCp.AddRbConfigCfm)
  return target;
}

size_t AddRbConfigCfm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srvCp.AddRbConfigCfm)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .structure.PDCPAddCfgCfmEnt config_cfm_ent = 40;
  total_size += 2UL * this->_internal_config_cfm_ent_size();
  for (const auto& msg : this->config_cfm_ent_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hdr_);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cp_up_hdr_);
  }

  // uint32 num_ent = 30;
  if (this->num_ent() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_ent());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddRbConfigCfm::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srvCp.AddRbConfigCfm)
  GOOGLE_DCHECK_NE(&from, this);
  const AddRbConfigCfm* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddRbConfigCfm>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srvCp.AddRbConfigCfm)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srvCp.AddRbConfigCfm)
    MergeFrom(*source);
  }
}

void AddRbConfigCfm::MergeFrom(const AddRbConfigCfm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srvCp.AddRbConfigCfm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  config_cfm_ent_.MergeFrom(from.config_cfm_ent_);
  if (from.has_hdr()) {
    _internal_mutable_hdr()->::mhdr::MsgHdr::MergeFrom(from._internal_hdr());
  }
  if (from.has_cp_up_hdr()) {
    _internal_mutable_cp_up_hdr()->::structure::CpUpHdr::MergeFrom(from._internal_cp_up_hdr());
  }
  if (from.num_ent() != 0) {
    _internal_set_num_ent(from._internal_num_ent());
  }
}

void AddRbConfigCfm::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srvCp.AddRbConfigCfm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddRbConfigCfm::CopyFrom(const AddRbConfigCfm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srvCp.AddRbConfigCfm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddRbConfigCfm::IsInitialized() const {
  return true;
}

void AddRbConfigCfm::InternalSwap(AddRbConfigCfm* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  config_cfm_ent_.InternalSwap(&other->config_cfm_ent_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddRbConfigCfm, num_ent_)
      + sizeof(AddRbConfigCfm::num_ent_)
      - PROTOBUF_FIELD_OFFSET(AddRbConfigCfm, hdr_)>(
          reinterpret_cast<char*>(&hdr_),
          reinterpret_cast<char*>(&other->hdr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddRbConfigCfm::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModifyRbConfigCfm::InitAsDefaultInstance() {
  ::srvCp::_ModifyRbConfigCfm_default_instance_._instance.get_mutable()->hdr_ = const_cast< ::mhdr::MsgHdr*>(
      ::mhdr::MsgHdr::internal_default_instance());
  ::srvCp::_ModifyRbConfigCfm_default_instance_._instance.get_mutable()->cp_up_hdr_ = const_cast< ::structure::CpUpHdr*>(
      ::structure::CpUpHdr::internal_default_instance());
}
class ModifyRbConfigCfm::_Internal {
 public:
  static const ::mhdr::MsgHdr& hdr(const ModifyRbConfigCfm* msg);
  static const ::structure::CpUpHdr& cp_up_hdr(const ModifyRbConfigCfm* msg);
};

const ::mhdr::MsgHdr&
ModifyRbConfigCfm::_Internal::hdr(const ModifyRbConfigCfm* msg) {
  return *msg->hdr_;
}
const ::structure::CpUpHdr&
ModifyRbConfigCfm::_Internal::cp_up_hdr(const ModifyRbConfigCfm* msg) {
  return *msg->cp_up_hdr_;
}
void ModifyRbConfigCfm::clear_hdr() {
  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
}
void ModifyRbConfigCfm::clear_cp_up_hdr() {
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
}
void ModifyRbConfigCfm::clear_config_cfm_ent() {
  config_cfm_ent_.Clear();
}
ModifyRbConfigCfm::ModifyRbConfigCfm(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  config_cfm_ent_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srvCp.ModifyRbConfigCfm)
}
ModifyRbConfigCfm::ModifyRbConfigCfm(const ModifyRbConfigCfm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      config_cfm_ent_(from.config_cfm_ent_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hdr()) {
    hdr_ = new ::mhdr::MsgHdr(*from.hdr_);
  } else {
    hdr_ = nullptr;
  }
  if (from._internal_has_cp_up_hdr()) {
    cp_up_hdr_ = new ::structure::CpUpHdr(*from.cp_up_hdr_);
  } else {
    cp_up_hdr_ = nullptr;
  }
  num_ent_ = from.num_ent_;
  // @@protoc_insertion_point(copy_constructor:srvCp.ModifyRbConfigCfm)
}

void ModifyRbConfigCfm::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModifyRbConfigCfm_srvCp_2eproto.base);
  ::memset(&hdr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_ent_) -
      reinterpret_cast<char*>(&hdr_)) + sizeof(num_ent_));
}

ModifyRbConfigCfm::~ModifyRbConfigCfm() {
  // @@protoc_insertion_point(destructor:srvCp.ModifyRbConfigCfm)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModifyRbConfigCfm::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete hdr_;
  if (this != internal_default_instance()) delete cp_up_hdr_;
}

void ModifyRbConfigCfm::ArenaDtor(void* object) {
  ModifyRbConfigCfm* _this = reinterpret_cast< ModifyRbConfigCfm* >(object);
  (void)_this;
}
void ModifyRbConfigCfm::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModifyRbConfigCfm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModifyRbConfigCfm& ModifyRbConfigCfm::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModifyRbConfigCfm_srvCp_2eproto.base);
  return *internal_default_instance();
}


void ModifyRbConfigCfm::Clear() {
// @@protoc_insertion_point(message_clear_start:srvCp.ModifyRbConfigCfm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  config_cfm_ent_.Clear();
  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
  num_ent_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModifyRbConfigCfm::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mhdr.MsgHdr hdr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.CpUpHdr cp_up_hdr = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_cp_up_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_ent = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          num_ent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .structure.PDCPModCfgCfmEnt config_cfm_ent = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_config_cfm_ent(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<322>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModifyRbConfigCfm::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srvCp.ModifyRbConfigCfm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::hdr(this), target, stream);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::cp_up_hdr(this), target, stream);
  }

  // uint32 num_ent = 30;
  if (this->num_ent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_num_ent(), target);
  }

  // repeated .structure.PDCPModCfgCfmEnt config_cfm_ent = 40;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_config_cfm_ent_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(40, this->_internal_config_cfm_ent(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srvCp.ModifyRbConfigCfm)
  return target;
}

size_t ModifyRbConfigCfm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srvCp.ModifyRbConfigCfm)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .structure.PDCPModCfgCfmEnt config_cfm_ent = 40;
  total_size += 2UL * this->_internal_config_cfm_ent_size();
  for (const auto& msg : this->config_cfm_ent_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hdr_);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cp_up_hdr_);
  }

  // uint32 num_ent = 30;
  if (this->num_ent() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_ent());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModifyRbConfigCfm::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srvCp.ModifyRbConfigCfm)
  GOOGLE_DCHECK_NE(&from, this);
  const ModifyRbConfigCfm* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModifyRbConfigCfm>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srvCp.ModifyRbConfigCfm)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srvCp.ModifyRbConfigCfm)
    MergeFrom(*source);
  }
}

void ModifyRbConfigCfm::MergeFrom(const ModifyRbConfigCfm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srvCp.ModifyRbConfigCfm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  config_cfm_ent_.MergeFrom(from.config_cfm_ent_);
  if (from.has_hdr()) {
    _internal_mutable_hdr()->::mhdr::MsgHdr::MergeFrom(from._internal_hdr());
  }
  if (from.has_cp_up_hdr()) {
    _internal_mutable_cp_up_hdr()->::structure::CpUpHdr::MergeFrom(from._internal_cp_up_hdr());
  }
  if (from.num_ent() != 0) {
    _internal_set_num_ent(from._internal_num_ent());
  }
}

void ModifyRbConfigCfm::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srvCp.ModifyRbConfigCfm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyRbConfigCfm::CopyFrom(const ModifyRbConfigCfm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srvCp.ModifyRbConfigCfm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyRbConfigCfm::IsInitialized() const {
  return true;
}

void ModifyRbConfigCfm::InternalSwap(ModifyRbConfigCfm* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  config_cfm_ent_.InternalSwap(&other->config_cfm_ent_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModifyRbConfigCfm, num_ent_)
      + sizeof(ModifyRbConfigCfm::num_ent_)
      - PROTOBUF_FIELD_OFFSET(ModifyRbConfigCfm, hdr_)>(
          reinterpret_cast<char*>(&hdr_),
          reinterpret_cast<char*>(&other->hdr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModifyRbConfigCfm::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteRbConfigCfm::InitAsDefaultInstance() {
  ::srvCp::_DeleteRbConfigCfm_default_instance_._instance.get_mutable()->hdr_ = const_cast< ::mhdr::MsgHdr*>(
      ::mhdr::MsgHdr::internal_default_instance());
  ::srvCp::_DeleteRbConfigCfm_default_instance_._instance.get_mutable()->cp_up_hdr_ = const_cast< ::structure::CpUpHdr*>(
      ::structure::CpUpHdr::internal_default_instance());
}
class DeleteRbConfigCfm::_Internal {
 public:
  static const ::mhdr::MsgHdr& hdr(const DeleteRbConfigCfm* msg);
  static const ::structure::CpUpHdr& cp_up_hdr(const DeleteRbConfigCfm* msg);
};

const ::mhdr::MsgHdr&
DeleteRbConfigCfm::_Internal::hdr(const DeleteRbConfigCfm* msg) {
  return *msg->hdr_;
}
const ::structure::CpUpHdr&
DeleteRbConfigCfm::_Internal::cp_up_hdr(const DeleteRbConfigCfm* msg) {
  return *msg->cp_up_hdr_;
}
void DeleteRbConfigCfm::clear_hdr() {
  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
}
void DeleteRbConfigCfm::clear_cp_up_hdr() {
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
}
void DeleteRbConfigCfm::clear_config_cfm_ent() {
  config_cfm_ent_.Clear();
}
DeleteRbConfigCfm::DeleteRbConfigCfm(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  config_cfm_ent_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srvCp.DeleteRbConfigCfm)
}
DeleteRbConfigCfm::DeleteRbConfigCfm(const DeleteRbConfigCfm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      config_cfm_ent_(from.config_cfm_ent_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hdr()) {
    hdr_ = new ::mhdr::MsgHdr(*from.hdr_);
  } else {
    hdr_ = nullptr;
  }
  if (from._internal_has_cp_up_hdr()) {
    cp_up_hdr_ = new ::structure::CpUpHdr(*from.cp_up_hdr_);
  } else {
    cp_up_hdr_ = nullptr;
  }
  num_ent_ = from.num_ent_;
  // @@protoc_insertion_point(copy_constructor:srvCp.DeleteRbConfigCfm)
}

void DeleteRbConfigCfm::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteRbConfigCfm_srvCp_2eproto.base);
  ::memset(&hdr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_ent_) -
      reinterpret_cast<char*>(&hdr_)) + sizeof(num_ent_));
}

DeleteRbConfigCfm::~DeleteRbConfigCfm() {
  // @@protoc_insertion_point(destructor:srvCp.DeleteRbConfigCfm)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteRbConfigCfm::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete hdr_;
  if (this != internal_default_instance()) delete cp_up_hdr_;
}

void DeleteRbConfigCfm::ArenaDtor(void* object) {
  DeleteRbConfigCfm* _this = reinterpret_cast< DeleteRbConfigCfm* >(object);
  (void)_this;
}
void DeleteRbConfigCfm::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteRbConfigCfm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteRbConfigCfm& DeleteRbConfigCfm::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteRbConfigCfm_srvCp_2eproto.base);
  return *internal_default_instance();
}


void DeleteRbConfigCfm::Clear() {
// @@protoc_insertion_point(message_clear_start:srvCp.DeleteRbConfigCfm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  config_cfm_ent_.Clear();
  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
  num_ent_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteRbConfigCfm::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mhdr.MsgHdr hdr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.CpUpHdr cp_up_hdr = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_cp_up_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_ent = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          num_ent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .structure.PDCPDelCfgCfmEnt config_cfm_ent = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_config_cfm_ent(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<322>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteRbConfigCfm::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srvCp.DeleteRbConfigCfm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::hdr(this), target, stream);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::cp_up_hdr(this), target, stream);
  }

  // uint32 num_ent = 30;
  if (this->num_ent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_num_ent(), target);
  }

  // repeated .structure.PDCPDelCfgCfmEnt config_cfm_ent = 40;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_config_cfm_ent_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(40, this->_internal_config_cfm_ent(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srvCp.DeleteRbConfigCfm)
  return target;
}

size_t DeleteRbConfigCfm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srvCp.DeleteRbConfigCfm)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .structure.PDCPDelCfgCfmEnt config_cfm_ent = 40;
  total_size += 2UL * this->_internal_config_cfm_ent_size();
  for (const auto& msg : this->config_cfm_ent_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hdr_);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cp_up_hdr_);
  }

  // uint32 num_ent = 30;
  if (this->num_ent() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_ent());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteRbConfigCfm::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srvCp.DeleteRbConfigCfm)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteRbConfigCfm* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteRbConfigCfm>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srvCp.DeleteRbConfigCfm)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srvCp.DeleteRbConfigCfm)
    MergeFrom(*source);
  }
}

void DeleteRbConfigCfm::MergeFrom(const DeleteRbConfigCfm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srvCp.DeleteRbConfigCfm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  config_cfm_ent_.MergeFrom(from.config_cfm_ent_);
  if (from.has_hdr()) {
    _internal_mutable_hdr()->::mhdr::MsgHdr::MergeFrom(from._internal_hdr());
  }
  if (from.has_cp_up_hdr()) {
    _internal_mutable_cp_up_hdr()->::structure::CpUpHdr::MergeFrom(from._internal_cp_up_hdr());
  }
  if (from.num_ent() != 0) {
    _internal_set_num_ent(from._internal_num_ent());
  }
}

void DeleteRbConfigCfm::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srvCp.DeleteRbConfigCfm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteRbConfigCfm::CopyFrom(const DeleteRbConfigCfm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srvCp.DeleteRbConfigCfm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRbConfigCfm::IsInitialized() const {
  return true;
}

void DeleteRbConfigCfm::InternalSwap(DeleteRbConfigCfm* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  config_cfm_ent_.InternalSwap(&other->config_cfm_ent_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteRbConfigCfm, num_ent_)
      + sizeof(DeleteRbConfigCfm::num_ent_)
      - PROTOBUF_FIELD_OFFSET(DeleteRbConfigCfm, hdr_)>(
          reinterpret_cast<char*>(&hdr_),
          reinterpret_cast<char*>(&other->hdr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteRbConfigCfm::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PDCPSduStatusCfm::InitAsDefaultInstance() {
  ::srvCp::_PDCPSduStatusCfm_default_instance_._instance.get_mutable()->hdr_ = const_cast< ::mhdr::MsgHdr*>(
      ::mhdr::MsgHdr::internal_default_instance());
  ::srvCp::_PDCPSduStatusCfm_default_instance_._instance.get_mutable()->cp_up_hdr_ = const_cast< ::structure::CpUpHdr*>(
      ::structure::CpUpHdr::internal_default_instance());
}
class PDCPSduStatusCfm::_Internal {
 public:
  static const ::mhdr::MsgHdr& hdr(const PDCPSduStatusCfm* msg);
  static const ::structure::CpUpHdr& cp_up_hdr(const PDCPSduStatusCfm* msg);
};

const ::mhdr::MsgHdr&
PDCPSduStatusCfm::_Internal::hdr(const PDCPSduStatusCfm* msg) {
  return *msg->hdr_;
}
const ::structure::CpUpHdr&
PDCPSduStatusCfm::_Internal::cp_up_hdr(const PDCPSduStatusCfm* msg) {
  return *msg->cp_up_hdr_;
}
void PDCPSduStatusCfm::clear_hdr() {
  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
}
void PDCPSduStatusCfm::clear_cp_up_hdr() {
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
}
void PDCPSduStatusCfm::clear_sdu_status_info() {
  sdu_status_info_.Clear();
}
PDCPSduStatusCfm::PDCPSduStatusCfm(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sdu_status_info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srvCp.PDCPSduStatusCfm)
}
PDCPSduStatusCfm::PDCPSduStatusCfm(const PDCPSduStatusCfm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sdu_status_info_(from.sdu_status_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hdr()) {
    hdr_ = new ::mhdr::MsgHdr(*from.hdr_);
  } else {
    hdr_ = nullptr;
  }
  if (from._internal_has_cp_up_hdr()) {
    cp_up_hdr_ = new ::structure::CpUpHdr(*from.cp_up_hdr_);
  } else {
    cp_up_hdr_ = nullptr;
  }
  ::memcpy(&reason_, &from.reason_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&reason_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:srvCp.PDCPSduStatusCfm)
}

void PDCPSduStatusCfm::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PDCPSduStatusCfm_srvCp_2eproto.base);
  ::memset(&hdr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&hdr_)) + sizeof(status_));
}

PDCPSduStatusCfm::~PDCPSduStatusCfm() {
  // @@protoc_insertion_point(destructor:srvCp.PDCPSduStatusCfm)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PDCPSduStatusCfm::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete hdr_;
  if (this != internal_default_instance()) delete cp_up_hdr_;
}

void PDCPSduStatusCfm::ArenaDtor(void* object) {
  PDCPSduStatusCfm* _this = reinterpret_cast< PDCPSduStatusCfm* >(object);
  (void)_this;
}
void PDCPSduStatusCfm::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PDCPSduStatusCfm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PDCPSduStatusCfm& PDCPSduStatusCfm::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PDCPSduStatusCfm_srvCp_2eproto.base);
  return *internal_default_instance();
}


void PDCPSduStatusCfm::Clear() {
// @@protoc_insertion_point(message_clear_start:srvCp.PDCPSduStatusCfm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sdu_status_info_.Clear();
  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
  ::memset(&reason_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&reason_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PDCPSduStatusCfm::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mhdr.MsgHdr hdr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.CpUpHdr cp_up_hdr = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_cp_up_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_rb = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          num_rb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .structure.SduStatusInfo sdu_status_info = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_sdu_status_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<322>(ptr));
        } else goto handle_unusual;
        continue;
      // bool status = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.PDCPConfigFailureReason reason = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reason(static_cast<::structure::PDCPConfigFailureReason>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PDCPSduStatusCfm::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srvCp.PDCPSduStatusCfm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::hdr(this), target, stream);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::cp_up_hdr(this), target, stream);
  }

  // uint32 num_rb = 30;
  if (this->num_rb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_num_rb(), target);
  }

  // repeated .structure.SduStatusInfo sdu_status_info = 40;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sdu_status_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(40, this->_internal_sdu_status_info(i), target, stream);
  }

  // bool status = 50;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(50, this->_internal_status(), target);
  }

  // .structure.PDCPConfigFailureReason reason = 60;
  if (this->reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      60, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srvCp.PDCPSduStatusCfm)
  return target;
}

size_t PDCPSduStatusCfm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srvCp.PDCPSduStatusCfm)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .structure.SduStatusInfo sdu_status_info = 40;
  total_size += 2UL * this->_internal_sdu_status_info_size();
  for (const auto& msg : this->sdu_status_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hdr_);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cp_up_hdr_);
  }

  // .structure.PDCPConfigFailureReason reason = 60;
  if (this->reason() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reason());
  }

  // uint32 num_rb = 30;
  if (this->num_rb() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_rb());
  }

  // bool status = 50;
  if (this->status() != 0) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PDCPSduStatusCfm::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srvCp.PDCPSduStatusCfm)
  GOOGLE_DCHECK_NE(&from, this);
  const PDCPSduStatusCfm* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PDCPSduStatusCfm>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srvCp.PDCPSduStatusCfm)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srvCp.PDCPSduStatusCfm)
    MergeFrom(*source);
  }
}

void PDCPSduStatusCfm::MergeFrom(const PDCPSduStatusCfm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srvCp.PDCPSduStatusCfm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sdu_status_info_.MergeFrom(from.sdu_status_info_);
  if (from.has_hdr()) {
    _internal_mutable_hdr()->::mhdr::MsgHdr::MergeFrom(from._internal_hdr());
  }
  if (from.has_cp_up_hdr()) {
    _internal_mutable_cp_up_hdr()->::structure::CpUpHdr::MergeFrom(from._internal_cp_up_hdr());
  }
  if (from.reason() != 0) {
    _internal_set_reason(from._internal_reason());
  }
  if (from.num_rb() != 0) {
    _internal_set_num_rb(from._internal_num_rb());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void PDCPSduStatusCfm::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srvCp.PDCPSduStatusCfm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PDCPSduStatusCfm::CopyFrom(const PDCPSduStatusCfm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srvCp.PDCPSduStatusCfm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PDCPSduStatusCfm::IsInitialized() const {
  return true;
}

void PDCPSduStatusCfm::InternalSwap(PDCPSduStatusCfm* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sdu_status_info_.InternalSwap(&other->sdu_status_info_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PDCPSduStatusCfm, status_)
      + sizeof(PDCPSduStatusCfm::status_)
      - PROTOBUF_FIELD_OFFSET(PDCPSduStatusCfm, hdr_)>(
          reinterpret_cast<char*>(&hdr_),
          reinterpret_cast<char*>(&other->hdr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PDCPSduStatusCfm::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddPDCPConfigCfm::InitAsDefaultInstance() {
  ::srvCp::_AddPDCPConfigCfm_default_instance_._instance.get_mutable()->hdr_ = const_cast< ::mhdr::MsgHdr*>(
      ::mhdr::MsgHdr::internal_default_instance());
  ::srvCp::_AddPDCPConfigCfm_default_instance_._instance.get_mutable()->cp_up_hdr_ = const_cast< ::structure::CpUpHdr*>(
      ::structure::CpUpHdr::internal_default_instance());
  ::srvCp::_AddPDCPConfigCfm_default_instance_._instance.get_mutable()->sec_cfm_ = const_cast< ::structure::SecurityCfgCfm*>(
      ::structure::SecurityCfgCfm::internal_default_instance());
}
class AddPDCPConfigCfm::_Internal {
 public:
  static const ::mhdr::MsgHdr& hdr(const AddPDCPConfigCfm* msg);
  static const ::structure::CpUpHdr& cp_up_hdr(const AddPDCPConfigCfm* msg);
  static const ::structure::SecurityCfgCfm& sec_cfm(const AddPDCPConfigCfm* msg);
};

const ::mhdr::MsgHdr&
AddPDCPConfigCfm::_Internal::hdr(const AddPDCPConfigCfm* msg) {
  return *msg->hdr_;
}
const ::structure::CpUpHdr&
AddPDCPConfigCfm::_Internal::cp_up_hdr(const AddPDCPConfigCfm* msg) {
  return *msg->cp_up_hdr_;
}
const ::structure::SecurityCfgCfm&
AddPDCPConfigCfm::_Internal::sec_cfm(const AddPDCPConfigCfm* msg) {
  return *msg->sec_cfm_;
}
void AddPDCPConfigCfm::clear_hdr() {
  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
}
void AddPDCPConfigCfm::clear_cp_up_hdr() {
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
}
void AddPDCPConfigCfm::clear_sec_cfm() {
  if (GetArena() == nullptr && sec_cfm_ != nullptr) {
    delete sec_cfm_;
  }
  sec_cfm_ = nullptr;
}
void AddPDCPConfigCfm::clear_config_cfm_ent() {
  config_cfm_ent_.Clear();
}
AddPDCPConfigCfm::AddPDCPConfigCfm(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  config_cfm_ent_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srvCp.AddPDCPConfigCfm)
}
AddPDCPConfigCfm::AddPDCPConfigCfm(const AddPDCPConfigCfm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      config_cfm_ent_(from.config_cfm_ent_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hdr()) {
    hdr_ = new ::mhdr::MsgHdr(*from.hdr_);
  } else {
    hdr_ = nullptr;
  }
  if (from._internal_has_cp_up_hdr()) {
    cp_up_hdr_ = new ::structure::CpUpHdr(*from.cp_up_hdr_);
  } else {
    cp_up_hdr_ = nullptr;
  }
  if (from._internal_has_sec_cfm()) {
    sec_cfm_ = new ::structure::SecurityCfgCfm(*from.sec_cfm_);
  } else {
    sec_cfm_ = nullptr;
  }
  num_ent_ = from.num_ent_;
  // @@protoc_insertion_point(copy_constructor:srvCp.AddPDCPConfigCfm)
}

void AddPDCPConfigCfm::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddPDCPConfigCfm_srvCp_2eproto.base);
  ::memset(&hdr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_ent_) -
      reinterpret_cast<char*>(&hdr_)) + sizeof(num_ent_));
}

AddPDCPConfigCfm::~AddPDCPConfigCfm() {
  // @@protoc_insertion_point(destructor:srvCp.AddPDCPConfigCfm)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddPDCPConfigCfm::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete hdr_;
  if (this != internal_default_instance()) delete cp_up_hdr_;
  if (this != internal_default_instance()) delete sec_cfm_;
}

void AddPDCPConfigCfm::ArenaDtor(void* object) {
  AddPDCPConfigCfm* _this = reinterpret_cast< AddPDCPConfigCfm* >(object);
  (void)_this;
}
void AddPDCPConfigCfm::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddPDCPConfigCfm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddPDCPConfigCfm& AddPDCPConfigCfm::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddPDCPConfigCfm_srvCp_2eproto.base);
  return *internal_default_instance();
}


void AddPDCPConfigCfm::Clear() {
// @@protoc_insertion_point(message_clear_start:srvCp.AddPDCPConfigCfm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  config_cfm_ent_.Clear();
  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
  if (GetArena() == nullptr && sec_cfm_ != nullptr) {
    delete sec_cfm_;
  }
  sec_cfm_ = nullptr;
  num_ent_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddPDCPConfigCfm::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mhdr.MsgHdr hdr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.CpUpHdr cp_up_hdr = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_cp_up_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.SecurityCfgCfm sec_cfm = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_sec_cfm(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_ent = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          num_ent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .structure.PDCPAddCfgCfmEnt config_cfm_ent = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_config_cfm_ent(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<402>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddPDCPConfigCfm::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srvCp.AddPDCPConfigCfm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::hdr(this), target, stream);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::cp_up_hdr(this), target, stream);
  }

  // .structure.SecurityCfgCfm sec_cfm = 30;
  if (this->has_sec_cfm()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::sec_cfm(this), target, stream);
  }

  // uint32 num_ent = 40;
  if (this->num_ent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(40, this->_internal_num_ent(), target);
  }

  // repeated .structure.PDCPAddCfgCfmEnt config_cfm_ent = 50;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_config_cfm_ent_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(50, this->_internal_config_cfm_ent(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srvCp.AddPDCPConfigCfm)
  return target;
}

size_t AddPDCPConfigCfm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srvCp.AddPDCPConfigCfm)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .structure.PDCPAddCfgCfmEnt config_cfm_ent = 50;
  total_size += 2UL * this->_internal_config_cfm_ent_size();
  for (const auto& msg : this->config_cfm_ent_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hdr_);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cp_up_hdr_);
  }

  // .structure.SecurityCfgCfm sec_cfm = 30;
  if (this->has_sec_cfm()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sec_cfm_);
  }

  // uint32 num_ent = 40;
  if (this->num_ent() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_ent());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddPDCPConfigCfm::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srvCp.AddPDCPConfigCfm)
  GOOGLE_DCHECK_NE(&from, this);
  const AddPDCPConfigCfm* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddPDCPConfigCfm>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srvCp.AddPDCPConfigCfm)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srvCp.AddPDCPConfigCfm)
    MergeFrom(*source);
  }
}

void AddPDCPConfigCfm::MergeFrom(const AddPDCPConfigCfm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srvCp.AddPDCPConfigCfm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  config_cfm_ent_.MergeFrom(from.config_cfm_ent_);
  if (from.has_hdr()) {
    _internal_mutable_hdr()->::mhdr::MsgHdr::MergeFrom(from._internal_hdr());
  }
  if (from.has_cp_up_hdr()) {
    _internal_mutable_cp_up_hdr()->::structure::CpUpHdr::MergeFrom(from._internal_cp_up_hdr());
  }
  if (from.has_sec_cfm()) {
    _internal_mutable_sec_cfm()->::structure::SecurityCfgCfm::MergeFrom(from._internal_sec_cfm());
  }
  if (from.num_ent() != 0) {
    _internal_set_num_ent(from._internal_num_ent());
  }
}

void AddPDCPConfigCfm::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srvCp.AddPDCPConfigCfm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddPDCPConfigCfm::CopyFrom(const AddPDCPConfigCfm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srvCp.AddPDCPConfigCfm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPDCPConfigCfm::IsInitialized() const {
  return true;
}

void AddPDCPConfigCfm::InternalSwap(AddPDCPConfigCfm* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  config_cfm_ent_.InternalSwap(&other->config_cfm_ent_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddPDCPConfigCfm, num_ent_)
      + sizeof(AddPDCPConfigCfm::num_ent_)
      - PROTOBUF_FIELD_OFFSET(AddPDCPConfigCfm, hdr_)>(
          reinterpret_cast<char*>(&hdr_),
          reinterpret_cast<char*>(&other->hdr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddPDCPConfigCfm::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModifyPDCPConfigCfm::InitAsDefaultInstance() {
  ::srvCp::_ModifyPDCPConfigCfm_default_instance_._instance.get_mutable()->hdr_ = const_cast< ::mhdr::MsgHdr*>(
      ::mhdr::MsgHdr::internal_default_instance());
  ::srvCp::_ModifyPDCPConfigCfm_default_instance_._instance.get_mutable()->cp_up_hdr_ = const_cast< ::structure::CpUpHdr*>(
      ::structure::CpUpHdr::internal_default_instance());
  ::srvCp::_ModifyPDCPConfigCfm_default_instance_._instance.get_mutable()->sec_cfm_ = const_cast< ::structure::SecurityCfgCfm*>(
      ::structure::SecurityCfgCfm::internal_default_instance());
}
class ModifyPDCPConfigCfm::_Internal {
 public:
  static const ::mhdr::MsgHdr& hdr(const ModifyPDCPConfigCfm* msg);
  static const ::structure::CpUpHdr& cp_up_hdr(const ModifyPDCPConfigCfm* msg);
  static const ::structure::SecurityCfgCfm& sec_cfm(const ModifyPDCPConfigCfm* msg);
};

const ::mhdr::MsgHdr&
ModifyPDCPConfigCfm::_Internal::hdr(const ModifyPDCPConfigCfm* msg) {
  return *msg->hdr_;
}
const ::structure::CpUpHdr&
ModifyPDCPConfigCfm::_Internal::cp_up_hdr(const ModifyPDCPConfigCfm* msg) {
  return *msg->cp_up_hdr_;
}
const ::structure::SecurityCfgCfm&
ModifyPDCPConfigCfm::_Internal::sec_cfm(const ModifyPDCPConfigCfm* msg) {
  return *msg->sec_cfm_;
}
void ModifyPDCPConfigCfm::clear_hdr() {
  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
}
void ModifyPDCPConfigCfm::clear_cp_up_hdr() {
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
}
void ModifyPDCPConfigCfm::clear_sec_cfm() {
  if (GetArena() == nullptr && sec_cfm_ != nullptr) {
    delete sec_cfm_;
  }
  sec_cfm_ = nullptr;
}
void ModifyPDCPConfigCfm::clear_config_cfm_ent() {
  config_cfm_ent_.Clear();
}
ModifyPDCPConfigCfm::ModifyPDCPConfigCfm(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  config_cfm_ent_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srvCp.ModifyPDCPConfigCfm)
}
ModifyPDCPConfigCfm::ModifyPDCPConfigCfm(const ModifyPDCPConfigCfm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      config_cfm_ent_(from.config_cfm_ent_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hdr()) {
    hdr_ = new ::mhdr::MsgHdr(*from.hdr_);
  } else {
    hdr_ = nullptr;
  }
  if (from._internal_has_cp_up_hdr()) {
    cp_up_hdr_ = new ::structure::CpUpHdr(*from.cp_up_hdr_);
  } else {
    cp_up_hdr_ = nullptr;
  }
  if (from._internal_has_sec_cfm()) {
    sec_cfm_ = new ::structure::SecurityCfgCfm(*from.sec_cfm_);
  } else {
    sec_cfm_ = nullptr;
  }
  num_ent_ = from.num_ent_;
  // @@protoc_insertion_point(copy_constructor:srvCp.ModifyPDCPConfigCfm)
}

void ModifyPDCPConfigCfm::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModifyPDCPConfigCfm_srvCp_2eproto.base);
  ::memset(&hdr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_ent_) -
      reinterpret_cast<char*>(&hdr_)) + sizeof(num_ent_));
}

ModifyPDCPConfigCfm::~ModifyPDCPConfigCfm() {
  // @@protoc_insertion_point(destructor:srvCp.ModifyPDCPConfigCfm)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModifyPDCPConfigCfm::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete hdr_;
  if (this != internal_default_instance()) delete cp_up_hdr_;
  if (this != internal_default_instance()) delete sec_cfm_;
}

void ModifyPDCPConfigCfm::ArenaDtor(void* object) {
  ModifyPDCPConfigCfm* _this = reinterpret_cast< ModifyPDCPConfigCfm* >(object);
  (void)_this;
}
void ModifyPDCPConfigCfm::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModifyPDCPConfigCfm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModifyPDCPConfigCfm& ModifyPDCPConfigCfm::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModifyPDCPConfigCfm_srvCp_2eproto.base);
  return *internal_default_instance();
}


void ModifyPDCPConfigCfm::Clear() {
// @@protoc_insertion_point(message_clear_start:srvCp.ModifyPDCPConfigCfm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  config_cfm_ent_.Clear();
  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
  if (GetArena() == nullptr && sec_cfm_ != nullptr) {
    delete sec_cfm_;
  }
  sec_cfm_ = nullptr;
  num_ent_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModifyPDCPConfigCfm::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mhdr.MsgHdr hdr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.CpUpHdr cp_up_hdr = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_cp_up_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.SecurityCfgCfm sec_cfm = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_sec_cfm(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_ent = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          num_ent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .structure.PDCPModCfgCfmEnt config_cfm_ent = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_config_cfm_ent(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<402>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModifyPDCPConfigCfm::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srvCp.ModifyPDCPConfigCfm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::hdr(this), target, stream);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::cp_up_hdr(this), target, stream);
  }

  // .structure.SecurityCfgCfm sec_cfm = 30;
  if (this->has_sec_cfm()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::sec_cfm(this), target, stream);
  }

  // uint32 num_ent = 40;
  if (this->num_ent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(40, this->_internal_num_ent(), target);
  }

  // repeated .structure.PDCPModCfgCfmEnt config_cfm_ent = 50;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_config_cfm_ent_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(50, this->_internal_config_cfm_ent(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srvCp.ModifyPDCPConfigCfm)
  return target;
}

size_t ModifyPDCPConfigCfm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srvCp.ModifyPDCPConfigCfm)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .structure.PDCPModCfgCfmEnt config_cfm_ent = 50;
  total_size += 2UL * this->_internal_config_cfm_ent_size();
  for (const auto& msg : this->config_cfm_ent_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hdr_);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cp_up_hdr_);
  }

  // .structure.SecurityCfgCfm sec_cfm = 30;
  if (this->has_sec_cfm()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sec_cfm_);
  }

  // uint32 num_ent = 40;
  if (this->num_ent() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_ent());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModifyPDCPConfigCfm::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srvCp.ModifyPDCPConfigCfm)
  GOOGLE_DCHECK_NE(&from, this);
  const ModifyPDCPConfigCfm* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModifyPDCPConfigCfm>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srvCp.ModifyPDCPConfigCfm)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srvCp.ModifyPDCPConfigCfm)
    MergeFrom(*source);
  }
}

void ModifyPDCPConfigCfm::MergeFrom(const ModifyPDCPConfigCfm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srvCp.ModifyPDCPConfigCfm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  config_cfm_ent_.MergeFrom(from.config_cfm_ent_);
  if (from.has_hdr()) {
    _internal_mutable_hdr()->::mhdr::MsgHdr::MergeFrom(from._internal_hdr());
  }
  if (from.has_cp_up_hdr()) {
    _internal_mutable_cp_up_hdr()->::structure::CpUpHdr::MergeFrom(from._internal_cp_up_hdr());
  }
  if (from.has_sec_cfm()) {
    _internal_mutable_sec_cfm()->::structure::SecurityCfgCfm::MergeFrom(from._internal_sec_cfm());
  }
  if (from.num_ent() != 0) {
    _internal_set_num_ent(from._internal_num_ent());
  }
}

void ModifyPDCPConfigCfm::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srvCp.ModifyPDCPConfigCfm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyPDCPConfigCfm::CopyFrom(const ModifyPDCPConfigCfm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srvCp.ModifyPDCPConfigCfm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyPDCPConfigCfm::IsInitialized() const {
  return true;
}

void ModifyPDCPConfigCfm::InternalSwap(ModifyPDCPConfigCfm* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  config_cfm_ent_.InternalSwap(&other->config_cfm_ent_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModifyPDCPConfigCfm, num_ent_)
      + sizeof(ModifyPDCPConfigCfm::num_ent_)
      - PROTOBUF_FIELD_OFFSET(ModifyPDCPConfigCfm, hdr_)>(
          reinterpret_cast<char*>(&hdr_),
          reinterpret_cast<char*>(&other->hdr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModifyPDCPConfigCfm::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CfmReply::InitAsDefaultInstance() {
  ::srvCp::_CfmReply_default_instance_._instance.get_mutable()->hdr_ = const_cast< ::mhdr::MsgHdr*>(
      ::mhdr::MsgHdr::internal_default_instance());
}
class CfmReply::_Internal {
 public:
  static const ::mhdr::MsgHdr& hdr(const CfmReply* msg);
};

const ::mhdr::MsgHdr&
CfmReply::_Internal::hdr(const CfmReply* msg) {
  return *msg->hdr_;
}
void CfmReply::clear_hdr() {
  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
}
CfmReply::CfmReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srvCp.CfmReply)
}
CfmReply::CfmReply(const CfmReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hdr()) {
    hdr_ = new ::mhdr::MsgHdr(*from.hdr_);
  } else {
    hdr_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:srvCp.CfmReply)
}

void CfmReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CfmReply_srvCp_2eproto.base);
  hdr_ = nullptr;
}

CfmReply::~CfmReply() {
  // @@protoc_insertion_point(destructor:srvCp.CfmReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CfmReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete hdr_;
}

void CfmReply::ArenaDtor(void* object) {
  CfmReply* _this = reinterpret_cast< CfmReply* >(object);
  (void)_this;
}
void CfmReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CfmReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CfmReply& CfmReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CfmReply_srvCp_2eproto.base);
  return *internal_default_instance();
}


void CfmReply::Clear() {
// @@protoc_insertion_point(message_clear_start:srvCp.CfmReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CfmReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mhdr.MsgHdr hdr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CfmReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srvCp.CfmReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::hdr(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srvCp.CfmReply)
  return target;
}

size_t CfmReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srvCp.CfmReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hdr_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CfmReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srvCp.CfmReply)
  GOOGLE_DCHECK_NE(&from, this);
  const CfmReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CfmReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srvCp.CfmReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srvCp.CfmReply)
    MergeFrom(*source);
  }
}

void CfmReply::MergeFrom(const CfmReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srvCp.CfmReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hdr()) {
    _internal_mutable_hdr()->::mhdr::MsgHdr::MergeFrom(from._internal_hdr());
  }
}

void CfmReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srvCp.CfmReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CfmReply::CopyFrom(const CfmReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srvCp.CfmReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CfmReply::IsInitialized() const {
  return true;
}

void CfmReply::InternalSwap(CfmReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(hdr_, other->hdr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CfmReply::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace srvCp
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::srvCp::SecurityConfigCfm* Arena::CreateMaybeMessage< ::srvCp::SecurityConfigCfm >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srvCp::SecurityConfigCfm >(arena);
}
template<> PROTOBUF_NOINLINE ::srvCp::CreateTunnelCfm* Arena::CreateMaybeMessage< ::srvCp::CreateTunnelCfm >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srvCp::CreateTunnelCfm >(arena);
}
template<> PROTOBUF_NOINLINE ::srvCp::ModifyTunnelCfm* Arena::CreateMaybeMessage< ::srvCp::ModifyTunnelCfm >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srvCp::ModifyTunnelCfm >(arena);
}
template<> PROTOBUF_NOINLINE ::srvCp::DeleteTunnelCfm* Arena::CreateMaybeMessage< ::srvCp::DeleteTunnelCfm >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srvCp::DeleteTunnelCfm >(arena);
}
template<> PROTOBUF_NOINLINE ::srvCp::AddRbConfigCfm* Arena::CreateMaybeMessage< ::srvCp::AddRbConfigCfm >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srvCp::AddRbConfigCfm >(arena);
}
template<> PROTOBUF_NOINLINE ::srvCp::ModifyRbConfigCfm* Arena::CreateMaybeMessage< ::srvCp::ModifyRbConfigCfm >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srvCp::ModifyRbConfigCfm >(arena);
}
template<> PROTOBUF_NOINLINE ::srvCp::DeleteRbConfigCfm* Arena::CreateMaybeMessage< ::srvCp::DeleteRbConfigCfm >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srvCp::DeleteRbConfigCfm >(arena);
}
template<> PROTOBUF_NOINLINE ::srvCp::PDCPSduStatusCfm* Arena::CreateMaybeMessage< ::srvCp::PDCPSduStatusCfm >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srvCp::PDCPSduStatusCfm >(arena);
}
template<> PROTOBUF_NOINLINE ::srvCp::AddPDCPConfigCfm* Arena::CreateMaybeMessage< ::srvCp::AddPDCPConfigCfm >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srvCp::AddPDCPConfigCfm >(arena);
}
template<> PROTOBUF_NOINLINE ::srvCp::ModifyPDCPConfigCfm* Arena::CreateMaybeMessage< ::srvCp::ModifyPDCPConfigCfm >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srvCp::ModifyPDCPConfigCfm >(arena);
}
template<> PROTOBUF_NOINLINE ::srvCp::CfmReply* Arena::CreateMaybeMessage< ::srvCp::CfmReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srvCp::CfmReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
