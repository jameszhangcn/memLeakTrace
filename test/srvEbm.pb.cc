// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: srvEbm.proto

#include "srvEbm.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IpAddress_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mhdr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MsgHdr_mhdr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_structure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_CpUpHdr_structure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_structure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GtpTunnelInfo_structure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_structure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PDCPAddCfgEnt_structure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_structure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PDCPDelCfgEnt_structure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_structure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PDCPModCfgEnt_structure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_structure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SecurityConfig_structure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_structure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TunnelStateInfo_structure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_structure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UeInfo_structure_2eproto;
namespace srvEbm {
class SecurityConfigReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SecurityConfigReq> _instance;
} _SecurityConfigReq_default_instance_;
class CreateTunnelReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateTunnelReq> _instance;
} _CreateTunnelReq_default_instance_;
class ModifyTunnelReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModifyTunnelReq> _instance;
} _ModifyTunnelReq_default_instance_;
class DeleteTunnelReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteTunnelReq> _instance;
} _DeleteTunnelReq_default_instance_;
class AddRbConfigReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddRbConfigReq> _instance;
} _AddRbConfigReq_default_instance_;
class ModifyRbConfigReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModifyRbConfigReq> _instance;
} _ModifyRbConfigReq_default_instance_;
class DeleteRbConfigReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteRbConfigReq> _instance;
} _DeleteRbConfigReq_default_instance_;
class PauseResumeDataReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PauseResumeDataReq> _instance;
} _PauseResumeDataReq_default_instance_;
class PDCPSduStatusReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PDCPSduStatusReq> _instance;
} _PDCPSduStatusReq_default_instance_;
class DataForwardingReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataForwardingReq> _instance;
} _DataForwardingReq_default_instance_;
class UeInactivityTimerReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UeInactivityTimerReq> _instance;
} _UeInactivityTimerReq_default_instance_;
class AddPDCPConfigReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddPDCPConfigReq> _instance;
} _AddPDCPConfigReq_default_instance_;
class ModifyPDCPConfigReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModifyPDCPConfigReq> _instance;
} _ModifyPDCPConfigReq_default_instance_;
class TunnelStateChangeReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TunnelStateChangeReq> _instance;
} _TunnelStateChangeReq_default_instance_;
class IpAddressConfigMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IpAddressConfigMsg> _instance;
} _IpAddressConfigMsg_default_instance_;
class PathManagementConfigMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PathManagementConfigMsg> _instance;
} _PathManagementConfigMsg_default_instance_;
class NotifyPathStatusMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NotifyPathStatusMsg> _instance;
} _NotifyPathStatusMsg_default_instance_;
}  // namespace srvEbm
static void InitDefaultsscc_info_AddPDCPConfigReq_srvEbm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srvEbm::_AddPDCPConfigReq_default_instance_;
    new (ptr) ::srvEbm::AddPDCPConfigReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srvEbm::AddPDCPConfigReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_AddPDCPConfigReq_srvEbm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_AddPDCPConfigReq_srvEbm_2eproto}, {
      &scc_info_MsgHdr_mhdr_2eproto.base,
      &scc_info_CpUpHdr_structure_2eproto.base,
      &scc_info_SecurityConfig_structure_2eproto.base,
      &scc_info_PDCPAddCfgEnt_structure_2eproto.base,}};

static void InitDefaultsscc_info_AddRbConfigReq_srvEbm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srvEbm::_AddRbConfigReq_default_instance_;
    new (ptr) ::srvEbm::AddRbConfigReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srvEbm::AddRbConfigReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_AddRbConfigReq_srvEbm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_AddRbConfigReq_srvEbm_2eproto}, {
      &scc_info_MsgHdr_mhdr_2eproto.base,
      &scc_info_CpUpHdr_structure_2eproto.base,
      &scc_info_PDCPAddCfgEnt_structure_2eproto.base,}};

static void InitDefaultsscc_info_CreateTunnelReq_srvEbm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srvEbm::_CreateTunnelReq_default_instance_;
    new (ptr) ::srvEbm::CreateTunnelReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srvEbm::CreateTunnelReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CreateTunnelReq_srvEbm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_CreateTunnelReq_srvEbm_2eproto}, {
      &scc_info_MsgHdr_mhdr_2eproto.base,
      &scc_info_CpUpHdr_structure_2eproto.base,
      &scc_info_GtpTunnelInfo_structure_2eproto.base,}};

static void InitDefaultsscc_info_DataForwardingReq_srvEbm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srvEbm::_DataForwardingReq_default_instance_;
    new (ptr) ::srvEbm::DataForwardingReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srvEbm::DataForwardingReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DataForwardingReq_srvEbm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DataForwardingReq_srvEbm_2eproto}, {
      &scc_info_MsgHdr_mhdr_2eproto.base,
      &scc_info_CpUpHdr_structure_2eproto.base,}};

static void InitDefaultsscc_info_DeleteRbConfigReq_srvEbm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srvEbm::_DeleteRbConfigReq_default_instance_;
    new (ptr) ::srvEbm::DeleteRbConfigReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srvEbm::DeleteRbConfigReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_DeleteRbConfigReq_srvEbm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_DeleteRbConfigReq_srvEbm_2eproto}, {
      &scc_info_MsgHdr_mhdr_2eproto.base,
      &scc_info_CpUpHdr_structure_2eproto.base,
      &scc_info_PDCPDelCfgEnt_structure_2eproto.base,}};

static void InitDefaultsscc_info_DeleteTunnelReq_srvEbm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srvEbm::_DeleteTunnelReq_default_instance_;
    new (ptr) ::srvEbm::DeleteTunnelReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srvEbm::DeleteTunnelReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_DeleteTunnelReq_srvEbm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_DeleteTunnelReq_srvEbm_2eproto}, {
      &scc_info_MsgHdr_mhdr_2eproto.base,
      &scc_info_CpUpHdr_structure_2eproto.base,
      &scc_info_GtpTunnelInfo_structure_2eproto.base,}};

static void InitDefaultsscc_info_IpAddressConfigMsg_srvEbm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srvEbm::_IpAddressConfigMsg_default_instance_;
    new (ptr) ::srvEbm::IpAddressConfigMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srvEbm::IpAddressConfigMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_IpAddressConfigMsg_srvEbm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_IpAddressConfigMsg_srvEbm_2eproto}, {
      &scc_info_MsgHdr_mhdr_2eproto.base,
      &scc_info_IpAddress_common_2eproto.base,}};

static void InitDefaultsscc_info_ModifyPDCPConfigReq_srvEbm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srvEbm::_ModifyPDCPConfigReq_default_instance_;
    new (ptr) ::srvEbm::ModifyPDCPConfigReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srvEbm::ModifyPDCPConfigReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ModifyPDCPConfigReq_srvEbm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_ModifyPDCPConfigReq_srvEbm_2eproto}, {
      &scc_info_MsgHdr_mhdr_2eproto.base,
      &scc_info_CpUpHdr_structure_2eproto.base,
      &scc_info_SecurityConfig_structure_2eproto.base,
      &scc_info_PDCPModCfgEnt_structure_2eproto.base,}};

static void InitDefaultsscc_info_ModifyRbConfigReq_srvEbm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srvEbm::_ModifyRbConfigReq_default_instance_;
    new (ptr) ::srvEbm::ModifyRbConfigReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srvEbm::ModifyRbConfigReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ModifyRbConfigReq_srvEbm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ModifyRbConfigReq_srvEbm_2eproto}, {
      &scc_info_MsgHdr_mhdr_2eproto.base,
      &scc_info_CpUpHdr_structure_2eproto.base,
      &scc_info_PDCPModCfgEnt_structure_2eproto.base,}};

static void InitDefaultsscc_info_ModifyTunnelReq_srvEbm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srvEbm::_ModifyTunnelReq_default_instance_;
    new (ptr) ::srvEbm::ModifyTunnelReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srvEbm::ModifyTunnelReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ModifyTunnelReq_srvEbm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ModifyTunnelReq_srvEbm_2eproto}, {
      &scc_info_MsgHdr_mhdr_2eproto.base,
      &scc_info_CpUpHdr_structure_2eproto.base,
      &scc_info_GtpTunnelInfo_structure_2eproto.base,}};

static void InitDefaultsscc_info_NotifyPathStatusMsg_srvEbm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srvEbm::_NotifyPathStatusMsg_default_instance_;
    new (ptr) ::srvEbm::NotifyPathStatusMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srvEbm::NotifyPathStatusMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_NotifyPathStatusMsg_srvEbm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_NotifyPathStatusMsg_srvEbm_2eproto}, {
      &scc_info_MsgHdr_mhdr_2eproto.base,
      &scc_info_IpAddress_common_2eproto.base,
      &scc_info_UeInfo_structure_2eproto.base,}};

static void InitDefaultsscc_info_PDCPSduStatusReq_srvEbm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srvEbm::_PDCPSduStatusReq_default_instance_;
    new (ptr) ::srvEbm::PDCPSduStatusReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srvEbm::PDCPSduStatusReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PDCPSduStatusReq_srvEbm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PDCPSduStatusReq_srvEbm_2eproto}, {
      &scc_info_MsgHdr_mhdr_2eproto.base,
      &scc_info_CpUpHdr_structure_2eproto.base,}};

static void InitDefaultsscc_info_PathManagementConfigMsg_srvEbm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srvEbm::_PathManagementConfigMsg_default_instance_;
    new (ptr) ::srvEbm::PathManagementConfigMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srvEbm::PathManagementConfigMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PathManagementConfigMsg_srvEbm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PathManagementConfigMsg_srvEbm_2eproto}, {
      &scc_info_MsgHdr_mhdr_2eproto.base,}};

static void InitDefaultsscc_info_PauseResumeDataReq_srvEbm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srvEbm::_PauseResumeDataReq_default_instance_;
    new (ptr) ::srvEbm::PauseResumeDataReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srvEbm::PauseResumeDataReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PauseResumeDataReq_srvEbm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PauseResumeDataReq_srvEbm_2eproto}, {
      &scc_info_MsgHdr_mhdr_2eproto.base,
      &scc_info_CpUpHdr_structure_2eproto.base,}};

static void InitDefaultsscc_info_SecurityConfigReq_srvEbm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srvEbm::_SecurityConfigReq_default_instance_;
    new (ptr) ::srvEbm::SecurityConfigReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srvEbm::SecurityConfigReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SecurityConfigReq_srvEbm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SecurityConfigReq_srvEbm_2eproto}, {
      &scc_info_MsgHdr_mhdr_2eproto.base,
      &scc_info_CpUpHdr_structure_2eproto.base,
      &scc_info_SecurityConfig_structure_2eproto.base,}};

static void InitDefaultsscc_info_TunnelStateChangeReq_srvEbm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srvEbm::_TunnelStateChangeReq_default_instance_;
    new (ptr) ::srvEbm::TunnelStateChangeReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srvEbm::TunnelStateChangeReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TunnelStateChangeReq_srvEbm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_TunnelStateChangeReq_srvEbm_2eproto}, {
      &scc_info_MsgHdr_mhdr_2eproto.base,
      &scc_info_CpUpHdr_structure_2eproto.base,
      &scc_info_TunnelStateInfo_structure_2eproto.base,}};

static void InitDefaultsscc_info_UeInactivityTimerReq_srvEbm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srvEbm::_UeInactivityTimerReq_default_instance_;
    new (ptr) ::srvEbm::UeInactivityTimerReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srvEbm::UeInactivityTimerReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UeInactivityTimerReq_srvEbm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_UeInactivityTimerReq_srvEbm_2eproto}, {
      &scc_info_MsgHdr_mhdr_2eproto.base,
      &scc_info_CpUpHdr_structure_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_srvEbm_2eproto[17];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_srvEbm_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_srvEbm_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_srvEbm_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srvEbm::SecurityConfigReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srvEbm::SecurityConfigReq, hdr_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::SecurityConfigReq, cp_up_hdr_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::SecurityConfigReq, is_ho_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::SecurityConfigReq, security_config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srvEbm::CreateTunnelReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srvEbm::CreateTunnelReq, hdr_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::CreateTunnelReq, cp_up_hdr_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::CreateTunnelReq, num_ent_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::CreateTunnelReq, tnl_info_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srvEbm::ModifyTunnelReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srvEbm::ModifyTunnelReq, hdr_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::ModifyTunnelReq, cp_up_hdr_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::ModifyTunnelReq, num_ent_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::ModifyTunnelReq, tnl_info_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srvEbm::DeleteTunnelReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srvEbm::DeleteTunnelReq, hdr_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::DeleteTunnelReq, cp_up_hdr_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::DeleteTunnelReq, num_ent_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::DeleteTunnelReq, tnl_info_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srvEbm::AddRbConfigReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srvEbm::AddRbConfigReq, hdr_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::AddRbConfigReq, cp_up_hdr_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::AddRbConfigReq, num_ent_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::AddRbConfigReq, is_ho_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::AddRbConfigReq, rlc_ul_sap_id_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::AddRbConfigReq, rlc_dl_sap_id_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::AddRbConfigReq, config_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srvEbm::ModifyRbConfigReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srvEbm::ModifyRbConfigReq, hdr_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::ModifyRbConfigReq, cp_up_hdr_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::ModifyRbConfigReq, num_ent_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::ModifyRbConfigReq, config_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srvEbm::DeleteRbConfigReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srvEbm::DeleteRbConfigReq, hdr_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::DeleteRbConfigReq, cp_up_hdr_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::DeleteRbConfigReq, num_ent_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::DeleteRbConfigReq, config_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srvEbm::PauseResumeDataReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srvEbm::PauseResumeDataReq, hdr_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::PauseResumeDataReq, cp_up_hdr_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::PauseResumeDataReq, tgt_cell_id_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::PauseResumeDataReq, new_rnti_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::PauseResumeDataReq, is_pause_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::PauseResumeDataReq, ho_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srvEbm::PDCPSduStatusReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srvEbm::PDCPSduStatusReq, hdr_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::PDCPSduStatusReq, cp_up_hdr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srvEbm::DataForwardingReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srvEbm::DataForwardingReq, hdr_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::DataForwardingReq, cp_up_hdr_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::DataForwardingReq, is_ul_data_fwd_req_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::DataForwardingReq, handover_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srvEbm::UeInactivityTimerReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srvEbm::UeInactivityTimerReq, hdr_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::UeInactivityTimerReq, cp_up_hdr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srvEbm::AddPDCPConfigReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srvEbm::AddPDCPConfigReq, hdr_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::AddPDCPConfigReq, cp_up_hdr_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::AddPDCPConfigReq, is_ho_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::AddPDCPConfigReq, security_config_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::AddPDCPConfigReq, num_ent_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::AddPDCPConfigReq, rlc_ul_sap_id_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::AddPDCPConfigReq, rlc_dl_sap_id_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::AddPDCPConfigReq, config_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srvEbm::ModifyPDCPConfigReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srvEbm::ModifyPDCPConfigReq, hdr_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::ModifyPDCPConfigReq, cp_up_hdr_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::ModifyPDCPConfigReq, is_ho_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::ModifyPDCPConfigReq, security_config_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::ModifyPDCPConfigReq, num_ent_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::ModifyPDCPConfigReq, new_cp_ue_id_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::ModifyPDCPConfigReq, new_cell_id_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::ModifyPDCPConfigReq, config_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srvEbm::TunnelStateChangeReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srvEbm::TunnelStateChangeReq, hdr_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::TunnelStateChangeReq, cp_up_hdr_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::TunnelStateChangeReq, tunnel_state_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srvEbm::IpAddressConfigMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srvEbm::IpAddressConfigMsg, hdr_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::IpAddressConfigMsg, type_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::IpAddressConfigMsg, action_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::IpAddressConfigMsg, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srvEbm::PathManagementConfigMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srvEbm::PathManagementConfigMsg, hdr_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::PathManagementConfigMsg, echo_interval_in_sec_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::PathManagementConfigMsg, gtpu_t3_resp_timer_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::PathManagementConfigMsg, gtpu_n3_req_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::PathManagementConfigMsg, path_info_clear_timer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srvEbm::NotifyPathStatusMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srvEbm::NotifyPathStatusMsg, hdr_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::NotifyPathStatusMsg, local_ip_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::NotifyPathStatusMsg, remote_ip_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::NotifyPathStatusMsg, type_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::NotifyPathStatusMsg, status_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::NotifyPathStatusMsg, ue_info_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::srvEbm::SecurityConfigReq)},
  { 9, -1, sizeof(::srvEbm::CreateTunnelReq)},
  { 18, -1, sizeof(::srvEbm::ModifyTunnelReq)},
  { 27, -1, sizeof(::srvEbm::DeleteTunnelReq)},
  { 36, -1, sizeof(::srvEbm::AddRbConfigReq)},
  { 48, -1, sizeof(::srvEbm::ModifyRbConfigReq)},
  { 57, -1, sizeof(::srvEbm::DeleteRbConfigReq)},
  { 66, -1, sizeof(::srvEbm::PauseResumeDataReq)},
  { 77, -1, sizeof(::srvEbm::PDCPSduStatusReq)},
  { 84, -1, sizeof(::srvEbm::DataForwardingReq)},
  { 93, -1, sizeof(::srvEbm::UeInactivityTimerReq)},
  { 100, -1, sizeof(::srvEbm::AddPDCPConfigReq)},
  { 113, -1, sizeof(::srvEbm::ModifyPDCPConfigReq)},
  { 126, -1, sizeof(::srvEbm::TunnelStateChangeReq)},
  { 134, -1, sizeof(::srvEbm::IpAddressConfigMsg)},
  { 143, -1, sizeof(::srvEbm::PathManagementConfigMsg)},
  { 153, -1, sizeof(::srvEbm::NotifyPathStatusMsg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srvEbm::_SecurityConfigReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srvEbm::_CreateTunnelReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srvEbm::_ModifyTunnelReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srvEbm::_DeleteTunnelReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srvEbm::_AddRbConfigReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srvEbm::_ModifyRbConfigReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srvEbm::_DeleteRbConfigReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srvEbm::_PauseResumeDataReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srvEbm::_PDCPSduStatusReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srvEbm::_DataForwardingReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srvEbm::_UeInactivityTimerReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srvEbm::_AddPDCPConfigReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srvEbm::_ModifyPDCPConfigReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srvEbm::_TunnelStateChangeReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srvEbm::_IpAddressConfigMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srvEbm::_PathManagementConfigMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srvEbm::_NotifyPathStatusMsg_default_instance_),
};

const char descriptor_table_protodef_srvEbm_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014srvEbm.proto\022\006srvEbm\032\nmhdr.proto\032\017stru"
  "cture.proto\032\014common.proto\"\230\001\n\021SecurityCo"
  "nfigReq\022\031\n\003hdr\030\n \001(\0132\014.mhdr.MsgHdr\022%\n\tcp"
  "_up_hdr\030\024 \001(\0132\022.structure.CpUpHdr\022\r\n\005is_"
  "ho\030\025 \001(\010\0222\n\017security_config\030\036 \001(\0132\031.stru"
  "cture.SecurityConfig\"\225\001\n\017CreateTunnelReq"
  "\022\031\n\003hdr\030\n \001(\0132\014.mhdr.MsgHdr\022%\n\tcp_up_hdr"
  "\030\024 \001(\0132\022.structure.CpUpHdr\022\017\n\007num_ent\030\037 "
  "\001(\r\022/\n\rtnl_info_list\030( \003(\0132\030.structure.G"
  "tpTunnelInfo\"\225\001\n\017ModifyTunnelReq\022\031\n\003hdr\030"
  "\n \001(\0132\014.mhdr.MsgHdr\022%\n\tcp_up_hdr\030\024 \001(\0132\022"
  ".structure.CpUpHdr\022\017\n\007num_ent\030\037 \001(\r\022/\n\rt"
  "nl_info_list\030( \003(\0132\030.structure.GtpTunnel"
  "Info\"\225\001\n\017DeleteTunnelReq\022\031\n\003hdr\030\n \001(\0132\014."
  "mhdr.MsgHdr\022%\n\tcp_up_hdr\030\024 \001(\0132\022.structu"
  "re.CpUpHdr\022\017\n\007num_ent\030\037 \001(\r\022/\n\rtnl_info_"
  "list\030( \003(\0132\030.structure.GtpTunnelInfo\"\317\001\n"
  "\016AddRbConfigReq\022\031\n\003hdr\030\n \001(\0132\014.mhdr.MsgH"
  "dr\022%\n\tcp_up_hdr\030\024 \001(\0132\022.structure.CpUpHd"
  "r\022\017\n\007num_ent\030\025 \001(\r\022\r\n\005is_ho\030\026 \001(\r\022\025\n\rrlc"
  "_ul_sap_id\030\027 \001(\r\022\025\n\rrlc_dl_sap_id\030\030 \001(\r\022"
  "-\n\013config_list\030\036 \003(\0132\030.structure.PDCPAdd"
  "CfgEnt\"\225\001\n\021ModifyRbConfigReq\022\031\n\003hdr\030\n \001("
  "\0132\014.mhdr.MsgHdr\022%\n\tcp_up_hdr\030\024 \001(\0132\022.str"
  "ucture.CpUpHdr\022\017\n\007num_ent\030\025 \001(\r\022-\n\013confi"
  "g_list\030\036 \003(\0132\030.structure.PDCPModCfgEnt\"\225"
  "\001\n\021DeleteRbConfigReq\022\031\n\003hdr\030\n \001(\0132\014.mhdr"
  ".MsgHdr\022%\n\tcp_up_hdr\030\024 \001(\0132\022.structure.C"
  "pUpHdr\022\017\n\007num_ent\030\025 \001(\r\022-\n\013config_list\030\036"
  " \003(\0132\030.structure.PDCPDelCfgEnt\"\271\001\n\022Pause"
  "ResumeDataReq\022\031\n\003hdr\030\n \001(\0132\014.mhdr.MsgHdr"
  "\022%\n\tcp_up_hdr\030\024 \001(\0132\022.structure.CpUpHdr\022"
  "\023\n\013tgt_cell_id\030\036 \001(\r\022\020\n\010new_rnti\030# \001(\r\022\020"
  "\n\010is_pause\030( \001(\010\022(\n\007ho_type\0302 \001(\0162\027.stru"
  "cture.HandoverType\"T\n\020PDCPSduStatusReq\022\031"
  "\n\003hdr\030\n \001(\0132\014.mhdr.MsgHdr\022%\n\tcp_up_hdr\030\024"
  " \001(\0132\022.structure.CpUpHdr\"\241\001\n\021DataForward"
  "ingReq\022\031\n\003hdr\030\n \001(\0132\014.mhdr.MsgHdr\022%\n\tcp_"
  "up_hdr\030\024 \001(\0132\022.structure.CpUpHdr\022\032\n\022is_u"
  "l_data_fwd_Req\030\036 \001(\010\022.\n\rhandover_type\030( "
  "\001(\0162\027.structure.HandoverType\"X\n\024UeInacti"
  "vityTimerReq\022\031\n\003hdr\030\n \001(\0132\014.mhdr.MsgHdr\022"
  "%\n\tcp_up_hdr\030\024 \001(\0132\022.structure.CpUpHdr\"\205"
  "\002\n\020AddPDCPConfigReq\022\031\n\003hdr\030\n \001(\0132\014.mhdr."
  "MsgHdr\022%\n\tcp_up_hdr\030\024 \001(\0132\022.structure.Cp"
  "UpHdr\022\r\n\005is_ho\030\036 \001(\010\0222\n\017security_config\030"
  "\037 \001(\0132\031.structure.SecurityConfig\022\017\n\007num_"
  "ent\030( \001(\r\022\025\n\rrlc_ul_sap_id\030+ \001(\r\022\025\n\rrlc_"
  "dl_sap_id\030, \001(\r\022-\n\013config_list\0302 \003(\0132\030.s"
  "tructure.PDCPAddCfgEnt\"\205\002\n\023ModifyPDCPCon"
  "figReq\022\031\n\003hdr\030\n \001(\0132\014.mhdr.MsgHdr\022%\n\tcp_"
  "up_hdr\030\024 \001(\0132\022.structure.CpUpHdr\022\r\n\005is_h"
  "o\030\036 \001(\010\0222\n\017security_config\030\037 \001(\0132\031.struc"
  "ture.SecurityConfig\022\017\n\007num_ent\030( \001(\r\022\024\n\014"
  "new_cp_ue_id\030+ \001(\r\022\023\n\013new_cell_id\030, \001(\r\022"
  "-\n\013config_list\0302 \003(\0132\030.structure.PDCPMod"
  "CfgEnt\"\217\001\n\024TunnelStateChangeReq\022\031\n\003hdr\030\n"
  " \001(\0132\014.mhdr.MsgHdr\022%\n\tcp_up_hdr\030\024 \001(\0132\022."
  "structure.CpUpHdr\0225\n\021tunnel_state_info\030\036"
  " \001(\0132\032.structure.TunnelStateInfo\"\247\001\n\022IpA"
  "ddressConfigMsg\022\031\n\003hdr\030\n \001(\0132\014.mhdr.MsgH"
  "dr\022&\n\004type\030\024 \001(\0162\030.structure.InterfaceTy"
  "pe\022*\n\006action\030\036 \001(\0162\032.structure.IpAddress"
  "Action\022\"\n\007address\030( \001(\0132\021.common.IpAddre"
  "ss\"\242\001\n\027PathManagementConfigMsg\022\031\n\003hdr\030\n "
  "\001(\0132\014.mhdr.MsgHdr\022\034\n\024echo_interval_in_se"
  "c\030\024 \001(\r\022\032\n\022gtpu_t3_resp_timer\030\036 \001(\r\022\023\n\013g"
  "tpu_n3_req\030( \001(\r\022\035\n\025path_info_clear_time"
  "r\0302 \001(\r\"\356\001\n\023NotifyPathStatusMsg\022\031\n\003hdr\030\n"
  " \001(\0132\014.mhdr.MsgHdr\022#\n\010local_ip\030\024 \001(\0132\021.c"
  "ommon.IpAddress\022$\n\tremote_ip\030\036 \001(\0132\021.com"
  "mon.IpAddress\022&\n\004type\030( \001(\0162\030.structure."
  "InterfaceType\022%\n\006status\0302 \001(\0162\025.structur"
  "e.PathStatus\022\"\n\007ue_info\030< \003(\0132\021.structur"
  "e.UeInfo*\207\005\n\006method\022\021\n\rMethodUnknown\020\000\022!"
  "\n\035MethodSubmitSecurityConfigReq\020\001\022\037\n\033Met"
  "hodSubmitCreateTunnelReq\020\002\022\037\n\033MethodSubm"
  "itModifyTunnelReq\020\003\022\037\n\033MethodSubmitDelet"
  "eTunnelReq\020\004\022\036\n\032MethodSubmitAddRbConfigR"
  "eq\020\005\022!\n\035MethodSubmitModifyRbConfigReq\020\006\022"
  "!\n\035MethodSubmitDeleteRbConfigReq\020\007\022\"\n\036Me"
  "thodSubmitPauseResumeDataReq\020\010\022 \n\034Method"
  "SubmitPDCPSduStatusReq\020\t\022!\n\035MethodSubmit"
  "DataForwardingReq\020\n\022$\n MethodSubmitUeIna"
  "ctivityTimerReq\020\013\022 \n\034MethodSubmitIpAddre"
  "ssConfMsg\020\014\022\'\n#MethodSubmitPathManagemen"
  "tConfigMsg\020\r\022#\n\037MethodSubmitNotifyPathSt"
  "atusMsg\020\016\022 \n\034MethodSubmitAddPDCPConfigRe"
  "q\020\017\022#\n\037MethodSubmitModifyPDCPConfigReq\020\020"
  "\022$\n MethodSubmitTunnelStateChangeReq\020\021\022\022"
  "\n\016MethodReqReply\020\024*\"\n\007version\022\016\n\nVerUnkn"
  "own\020\000\022\007\n\003Ver\020\0012\333\t\n\003Ebm\022K\n\027SubmitSecurity"
  "ConfigReq\022\031.srvEbm.SecurityConfigReq\032\023.s"
  "tructure.ReqReply\"\000\022G\n\025SubmitCreateTunne"
  "lReq\022\027.srvEbm.CreateTunnelReq\032\023.structur"
  "e.ReqReply\"\000\022G\n\025SubmitModifyTunnelReq\022\027."
  "srvEbm.ModifyTunnelReq\032\023.structure.ReqRe"
  "ply\"\000\022G\n\025SubmitDeleteTunnelReq\022\027.srvEbm."
  "DeleteTunnelReq\032\023.structure.ReqReply\"\000\022E"
  "\n\024SubmitAddRbConfigReq\022\026.srvEbm.AddRbCon"
  "figReq\032\023.structure.ReqReply\"\000\022K\n\027SubmitM"
  "odifyRbConfigReq\022\031.srvEbm.ModifyRbConfig"
  "Req\032\023.structure.ReqReply\"\000\022K\n\027SubmitDele"
  "teRbConfigReq\022\031.srvEbm.DeleteRbConfigReq"
  "\032\023.structure.ReqReply\"\000\022M\n\030SubmitPauseRe"
  "sumeDataReq\022\032.srvEbm.PauseResumeDataReq\032"
  "\023.structure.ReqReply\"\000\022I\n\026SubmitPDCPSduS"
  "tatusReq\022\030.srvEbm.PDCPSduStatusReq\032\023.str"
  "ucture.ReqReply\"\000\022K\n\027SubmitDataForwardin"
  "gReq\022\031.srvEbm.DataForwardingReq\032\023.struct"
  "ure.ReqReply\"\000\022Q\n\032SubmitUeInactivityTime"
  "rReq\022\034.srvEbm.UeInactivityTimerReq\032\023.str"
  "ucture.ReqReply\"\000\022K\n\026SubmitIpAddressConf"
  "Msg\022\032.srvEbm.IpAddressConfigMsg\032\023.struct"
  "ure.ReqReply\"\000\022U\n\033SubmitPathManagementCo"
  "nfMsg\022\037.srvEbm.PathManagementConfigMsg\032\023"
  ".structure.ReqReply\"\000\022I\n\026SubmitAddPDCPCo"
  "nfigReq\022\030.srvEbm.AddPDCPConfigReq\032\023.stru"
  "cture.ReqReply\"\000\022O\n\031SubmitModifyPDCPConf"
  "igReq\022\033.srvEbm.ModifyPDCPConfigReq\032\023.str"
  "ucture.ReqReply\"\000\022Q\n\032SubmitTunnelStateCh"
  "angeReq\022\034.srvEbm.TunnelStateChangeReq\032\023."
  "structure.ReqReply\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_srvEbm_2eproto_deps[3] = {
  &::descriptor_table_common_2eproto,
  &::descriptor_table_mhdr_2eproto,
  &::descriptor_table_structure_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_srvEbm_2eproto_sccs[17] = {
  &scc_info_AddPDCPConfigReq_srvEbm_2eproto.base,
  &scc_info_AddRbConfigReq_srvEbm_2eproto.base,
  &scc_info_CreateTunnelReq_srvEbm_2eproto.base,
  &scc_info_DataForwardingReq_srvEbm_2eproto.base,
  &scc_info_DeleteRbConfigReq_srvEbm_2eproto.base,
  &scc_info_DeleteTunnelReq_srvEbm_2eproto.base,
  &scc_info_IpAddressConfigMsg_srvEbm_2eproto.base,
  &scc_info_ModifyPDCPConfigReq_srvEbm_2eproto.base,
  &scc_info_ModifyRbConfigReq_srvEbm_2eproto.base,
  &scc_info_ModifyTunnelReq_srvEbm_2eproto.base,
  &scc_info_NotifyPathStatusMsg_srvEbm_2eproto.base,
  &scc_info_PDCPSduStatusReq_srvEbm_2eproto.base,
  &scc_info_PathManagementConfigMsg_srvEbm_2eproto.base,
  &scc_info_PauseResumeDataReq_srvEbm_2eproto.base,
  &scc_info_SecurityConfigReq_srvEbm_2eproto.base,
  &scc_info_TunnelStateChangeReq_srvEbm_2eproto.base,
  &scc_info_UeInactivityTimerReq_srvEbm_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_srvEbm_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_srvEbm_2eproto = {
  false, false, descriptor_table_protodef_srvEbm_2eproto, "srvEbm.proto", 4908,
  &descriptor_table_srvEbm_2eproto_once, descriptor_table_srvEbm_2eproto_sccs, descriptor_table_srvEbm_2eproto_deps, 17, 3,
  schemas, file_default_instances, TableStruct_srvEbm_2eproto::offsets,
  file_level_metadata_srvEbm_2eproto, 17, file_level_enum_descriptors_srvEbm_2eproto, file_level_service_descriptors_srvEbm_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_srvEbm_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_srvEbm_2eproto)), true);
namespace srvEbm {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* method_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_srvEbm_2eproto);
  return file_level_enum_descriptors_srvEbm_2eproto[0];
}
bool method_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 20:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* version_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_srvEbm_2eproto);
  return file_level_enum_descriptors_srvEbm_2eproto[1];
}
bool version_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void SecurityConfigReq::InitAsDefaultInstance() {
  ::srvEbm::_SecurityConfigReq_default_instance_._instance.get_mutable()->hdr_ = const_cast< ::mhdr::MsgHdr*>(
      ::mhdr::MsgHdr::internal_default_instance());
  ::srvEbm::_SecurityConfigReq_default_instance_._instance.get_mutable()->cp_up_hdr_ = const_cast< ::structure::CpUpHdr*>(
      ::structure::CpUpHdr::internal_default_instance());
  ::srvEbm::_SecurityConfigReq_default_instance_._instance.get_mutable()->security_config_ = const_cast< ::structure::SecurityConfig*>(
      ::structure::SecurityConfig::internal_default_instance());
}
class SecurityConfigReq::_Internal {
 public:
  static const ::mhdr::MsgHdr& hdr(const SecurityConfigReq* msg);
  static const ::structure::CpUpHdr& cp_up_hdr(const SecurityConfigReq* msg);
  static const ::structure::SecurityConfig& security_config(const SecurityConfigReq* msg);
};

const ::mhdr::MsgHdr&
SecurityConfigReq::_Internal::hdr(const SecurityConfigReq* msg) {
  return *msg->hdr_;
}
const ::structure::CpUpHdr&
SecurityConfigReq::_Internal::cp_up_hdr(const SecurityConfigReq* msg) {
  return *msg->cp_up_hdr_;
}
const ::structure::SecurityConfig&
SecurityConfigReq::_Internal::security_config(const SecurityConfigReq* msg) {
  return *msg->security_config_;
}
void SecurityConfigReq::clear_hdr() {
  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
}
void SecurityConfigReq::clear_cp_up_hdr() {
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
}
void SecurityConfigReq::clear_security_config() {
  if (GetArena() == nullptr && security_config_ != nullptr) {
    delete security_config_;
  }
  security_config_ = nullptr;
}
SecurityConfigReq::SecurityConfigReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srvEbm.SecurityConfigReq)
}
SecurityConfigReq::SecurityConfigReq(const SecurityConfigReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hdr()) {
    hdr_ = new ::mhdr::MsgHdr(*from.hdr_);
  } else {
    hdr_ = nullptr;
  }
  if (from._internal_has_cp_up_hdr()) {
    cp_up_hdr_ = new ::structure::CpUpHdr(*from.cp_up_hdr_);
  } else {
    cp_up_hdr_ = nullptr;
  }
  if (from._internal_has_security_config()) {
    security_config_ = new ::structure::SecurityConfig(*from.security_config_);
  } else {
    security_config_ = nullptr;
  }
  is_ho_ = from.is_ho_;
  // @@protoc_insertion_point(copy_constructor:srvEbm.SecurityConfigReq)
}

void SecurityConfigReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SecurityConfigReq_srvEbm_2eproto.base);
  ::memset(&hdr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_ho_) -
      reinterpret_cast<char*>(&hdr_)) + sizeof(is_ho_));
}

SecurityConfigReq::~SecurityConfigReq() {
  // @@protoc_insertion_point(destructor:srvEbm.SecurityConfigReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SecurityConfigReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete hdr_;
  if (this != internal_default_instance()) delete cp_up_hdr_;
  if (this != internal_default_instance()) delete security_config_;
}

void SecurityConfigReq::ArenaDtor(void* object) {
  SecurityConfigReq* _this = reinterpret_cast< SecurityConfigReq* >(object);
  (void)_this;
}
void SecurityConfigReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SecurityConfigReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SecurityConfigReq& SecurityConfigReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SecurityConfigReq_srvEbm_2eproto.base);
  return *internal_default_instance();
}


void SecurityConfigReq::Clear() {
// @@protoc_insertion_point(message_clear_start:srvEbm.SecurityConfigReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
  if (GetArena() == nullptr && security_config_ != nullptr) {
    delete security_config_;
  }
  security_config_ = nullptr;
  is_ho_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SecurityConfigReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mhdr.MsgHdr hdr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.CpUpHdr cp_up_hdr = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_cp_up_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_ho = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          is_ho_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.SecurityConfig security_config = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_security_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SecurityConfigReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srvEbm.SecurityConfigReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::hdr(this), target, stream);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::cp_up_hdr(this), target, stream);
  }

  // bool is_ho = 21;
  if (this->is_ho() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_is_ho(), target);
  }

  // .structure.SecurityConfig security_config = 30;
  if (this->has_security_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::security_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srvEbm.SecurityConfigReq)
  return target;
}

size_t SecurityConfigReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srvEbm.SecurityConfigReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hdr_);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cp_up_hdr_);
  }

  // .structure.SecurityConfig security_config = 30;
  if (this->has_security_config()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *security_config_);
  }

  // bool is_ho = 21;
  if (this->is_ho() != 0) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecurityConfigReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srvEbm.SecurityConfigReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SecurityConfigReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SecurityConfigReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srvEbm.SecurityConfigReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srvEbm.SecurityConfigReq)
    MergeFrom(*source);
  }
}

void SecurityConfigReq::MergeFrom(const SecurityConfigReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srvEbm.SecurityConfigReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hdr()) {
    _internal_mutable_hdr()->::mhdr::MsgHdr::MergeFrom(from._internal_hdr());
  }
  if (from.has_cp_up_hdr()) {
    _internal_mutable_cp_up_hdr()->::structure::CpUpHdr::MergeFrom(from._internal_cp_up_hdr());
  }
  if (from.has_security_config()) {
    _internal_mutable_security_config()->::structure::SecurityConfig::MergeFrom(from._internal_security_config());
  }
  if (from.is_ho() != 0) {
    _internal_set_is_ho(from._internal_is_ho());
  }
}

void SecurityConfigReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srvEbm.SecurityConfigReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecurityConfigReq::CopyFrom(const SecurityConfigReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srvEbm.SecurityConfigReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecurityConfigReq::IsInitialized() const {
  return true;
}

void SecurityConfigReq::InternalSwap(SecurityConfigReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SecurityConfigReq, is_ho_)
      + sizeof(SecurityConfigReq::is_ho_)
      - PROTOBUF_FIELD_OFFSET(SecurityConfigReq, hdr_)>(
          reinterpret_cast<char*>(&hdr_),
          reinterpret_cast<char*>(&other->hdr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SecurityConfigReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateTunnelReq::InitAsDefaultInstance() {
  ::srvEbm::_CreateTunnelReq_default_instance_._instance.get_mutable()->hdr_ = const_cast< ::mhdr::MsgHdr*>(
      ::mhdr::MsgHdr::internal_default_instance());
  ::srvEbm::_CreateTunnelReq_default_instance_._instance.get_mutable()->cp_up_hdr_ = const_cast< ::structure::CpUpHdr*>(
      ::structure::CpUpHdr::internal_default_instance());
}
class CreateTunnelReq::_Internal {
 public:
  static const ::mhdr::MsgHdr& hdr(const CreateTunnelReq* msg);
  static const ::structure::CpUpHdr& cp_up_hdr(const CreateTunnelReq* msg);
};

const ::mhdr::MsgHdr&
CreateTunnelReq::_Internal::hdr(const CreateTunnelReq* msg) {
  return *msg->hdr_;
}
const ::structure::CpUpHdr&
CreateTunnelReq::_Internal::cp_up_hdr(const CreateTunnelReq* msg) {
  return *msg->cp_up_hdr_;
}
void CreateTunnelReq::clear_hdr() {
  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
}
void CreateTunnelReq::clear_cp_up_hdr() {
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
}
void CreateTunnelReq::clear_tnl_info_list() {
  tnl_info_list_.Clear();
}
CreateTunnelReq::CreateTunnelReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tnl_info_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srvEbm.CreateTunnelReq)
}
CreateTunnelReq::CreateTunnelReq(const CreateTunnelReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tnl_info_list_(from.tnl_info_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hdr()) {
    hdr_ = new ::mhdr::MsgHdr(*from.hdr_);
  } else {
    hdr_ = nullptr;
  }
  if (from._internal_has_cp_up_hdr()) {
    cp_up_hdr_ = new ::structure::CpUpHdr(*from.cp_up_hdr_);
  } else {
    cp_up_hdr_ = nullptr;
  }
  num_ent_ = from.num_ent_;
  // @@protoc_insertion_point(copy_constructor:srvEbm.CreateTunnelReq)
}

void CreateTunnelReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateTunnelReq_srvEbm_2eproto.base);
  ::memset(&hdr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_ent_) -
      reinterpret_cast<char*>(&hdr_)) + sizeof(num_ent_));
}

CreateTunnelReq::~CreateTunnelReq() {
  // @@protoc_insertion_point(destructor:srvEbm.CreateTunnelReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateTunnelReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete hdr_;
  if (this != internal_default_instance()) delete cp_up_hdr_;
}

void CreateTunnelReq::ArenaDtor(void* object) {
  CreateTunnelReq* _this = reinterpret_cast< CreateTunnelReq* >(object);
  (void)_this;
}
void CreateTunnelReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateTunnelReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateTunnelReq& CreateTunnelReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateTunnelReq_srvEbm_2eproto.base);
  return *internal_default_instance();
}


void CreateTunnelReq::Clear() {
// @@protoc_insertion_point(message_clear_start:srvEbm.CreateTunnelReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tnl_info_list_.Clear();
  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
  num_ent_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateTunnelReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mhdr.MsgHdr hdr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.CpUpHdr cp_up_hdr = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_cp_up_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_ent = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          num_ent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .structure.GtpTunnelInfo tnl_info_list = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_tnl_info_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<322>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateTunnelReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srvEbm.CreateTunnelReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::hdr(this), target, stream);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::cp_up_hdr(this), target, stream);
  }

  // uint32 num_ent = 31;
  if (this->num_ent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(31, this->_internal_num_ent(), target);
  }

  // repeated .structure.GtpTunnelInfo tnl_info_list = 40;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tnl_info_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(40, this->_internal_tnl_info_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srvEbm.CreateTunnelReq)
  return target;
}

size_t CreateTunnelReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srvEbm.CreateTunnelReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .structure.GtpTunnelInfo tnl_info_list = 40;
  total_size += 2UL * this->_internal_tnl_info_list_size();
  for (const auto& msg : this->tnl_info_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hdr_);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cp_up_hdr_);
  }

  // uint32 num_ent = 31;
  if (this->num_ent() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_ent());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateTunnelReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srvEbm.CreateTunnelReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateTunnelReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateTunnelReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srvEbm.CreateTunnelReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srvEbm.CreateTunnelReq)
    MergeFrom(*source);
  }
}

void CreateTunnelReq::MergeFrom(const CreateTunnelReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srvEbm.CreateTunnelReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tnl_info_list_.MergeFrom(from.tnl_info_list_);
  if (from.has_hdr()) {
    _internal_mutable_hdr()->::mhdr::MsgHdr::MergeFrom(from._internal_hdr());
  }
  if (from.has_cp_up_hdr()) {
    _internal_mutable_cp_up_hdr()->::structure::CpUpHdr::MergeFrom(from._internal_cp_up_hdr());
  }
  if (from.num_ent() != 0) {
    _internal_set_num_ent(from._internal_num_ent());
  }
}

void CreateTunnelReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srvEbm.CreateTunnelReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateTunnelReq::CopyFrom(const CreateTunnelReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srvEbm.CreateTunnelReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTunnelReq::IsInitialized() const {
  return true;
}

void CreateTunnelReq::InternalSwap(CreateTunnelReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tnl_info_list_.InternalSwap(&other->tnl_info_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateTunnelReq, num_ent_)
      + sizeof(CreateTunnelReq::num_ent_)
      - PROTOBUF_FIELD_OFFSET(CreateTunnelReq, hdr_)>(
          reinterpret_cast<char*>(&hdr_),
          reinterpret_cast<char*>(&other->hdr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateTunnelReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModifyTunnelReq::InitAsDefaultInstance() {
  ::srvEbm::_ModifyTunnelReq_default_instance_._instance.get_mutable()->hdr_ = const_cast< ::mhdr::MsgHdr*>(
      ::mhdr::MsgHdr::internal_default_instance());
  ::srvEbm::_ModifyTunnelReq_default_instance_._instance.get_mutable()->cp_up_hdr_ = const_cast< ::structure::CpUpHdr*>(
      ::structure::CpUpHdr::internal_default_instance());
}
class ModifyTunnelReq::_Internal {
 public:
  static const ::mhdr::MsgHdr& hdr(const ModifyTunnelReq* msg);
  static const ::structure::CpUpHdr& cp_up_hdr(const ModifyTunnelReq* msg);
};

const ::mhdr::MsgHdr&
ModifyTunnelReq::_Internal::hdr(const ModifyTunnelReq* msg) {
  return *msg->hdr_;
}
const ::structure::CpUpHdr&
ModifyTunnelReq::_Internal::cp_up_hdr(const ModifyTunnelReq* msg) {
  return *msg->cp_up_hdr_;
}
void ModifyTunnelReq::clear_hdr() {
  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
}
void ModifyTunnelReq::clear_cp_up_hdr() {
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
}
void ModifyTunnelReq::clear_tnl_info_list() {
  tnl_info_list_.Clear();
}
ModifyTunnelReq::ModifyTunnelReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tnl_info_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srvEbm.ModifyTunnelReq)
}
ModifyTunnelReq::ModifyTunnelReq(const ModifyTunnelReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tnl_info_list_(from.tnl_info_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hdr()) {
    hdr_ = new ::mhdr::MsgHdr(*from.hdr_);
  } else {
    hdr_ = nullptr;
  }
  if (from._internal_has_cp_up_hdr()) {
    cp_up_hdr_ = new ::structure::CpUpHdr(*from.cp_up_hdr_);
  } else {
    cp_up_hdr_ = nullptr;
  }
  num_ent_ = from.num_ent_;
  // @@protoc_insertion_point(copy_constructor:srvEbm.ModifyTunnelReq)
}

void ModifyTunnelReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModifyTunnelReq_srvEbm_2eproto.base);
  ::memset(&hdr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_ent_) -
      reinterpret_cast<char*>(&hdr_)) + sizeof(num_ent_));
}

ModifyTunnelReq::~ModifyTunnelReq() {
  // @@protoc_insertion_point(destructor:srvEbm.ModifyTunnelReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModifyTunnelReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete hdr_;
  if (this != internal_default_instance()) delete cp_up_hdr_;
}

void ModifyTunnelReq::ArenaDtor(void* object) {
  ModifyTunnelReq* _this = reinterpret_cast< ModifyTunnelReq* >(object);
  (void)_this;
}
void ModifyTunnelReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModifyTunnelReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModifyTunnelReq& ModifyTunnelReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModifyTunnelReq_srvEbm_2eproto.base);
  return *internal_default_instance();
}


void ModifyTunnelReq::Clear() {
// @@protoc_insertion_point(message_clear_start:srvEbm.ModifyTunnelReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tnl_info_list_.Clear();
  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
  num_ent_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModifyTunnelReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mhdr.MsgHdr hdr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.CpUpHdr cp_up_hdr = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_cp_up_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_ent = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          num_ent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .structure.GtpTunnelInfo tnl_info_list = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_tnl_info_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<322>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModifyTunnelReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srvEbm.ModifyTunnelReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::hdr(this), target, stream);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::cp_up_hdr(this), target, stream);
  }

  // uint32 num_ent = 31;
  if (this->num_ent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(31, this->_internal_num_ent(), target);
  }

  // repeated .structure.GtpTunnelInfo tnl_info_list = 40;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tnl_info_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(40, this->_internal_tnl_info_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srvEbm.ModifyTunnelReq)
  return target;
}

size_t ModifyTunnelReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srvEbm.ModifyTunnelReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .structure.GtpTunnelInfo tnl_info_list = 40;
  total_size += 2UL * this->_internal_tnl_info_list_size();
  for (const auto& msg : this->tnl_info_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hdr_);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cp_up_hdr_);
  }

  // uint32 num_ent = 31;
  if (this->num_ent() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_ent());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModifyTunnelReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srvEbm.ModifyTunnelReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ModifyTunnelReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModifyTunnelReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srvEbm.ModifyTunnelReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srvEbm.ModifyTunnelReq)
    MergeFrom(*source);
  }
}

void ModifyTunnelReq::MergeFrom(const ModifyTunnelReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srvEbm.ModifyTunnelReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tnl_info_list_.MergeFrom(from.tnl_info_list_);
  if (from.has_hdr()) {
    _internal_mutable_hdr()->::mhdr::MsgHdr::MergeFrom(from._internal_hdr());
  }
  if (from.has_cp_up_hdr()) {
    _internal_mutable_cp_up_hdr()->::structure::CpUpHdr::MergeFrom(from._internal_cp_up_hdr());
  }
  if (from.num_ent() != 0) {
    _internal_set_num_ent(from._internal_num_ent());
  }
}

void ModifyTunnelReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srvEbm.ModifyTunnelReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyTunnelReq::CopyFrom(const ModifyTunnelReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srvEbm.ModifyTunnelReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyTunnelReq::IsInitialized() const {
  return true;
}

void ModifyTunnelReq::InternalSwap(ModifyTunnelReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tnl_info_list_.InternalSwap(&other->tnl_info_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModifyTunnelReq, num_ent_)
      + sizeof(ModifyTunnelReq::num_ent_)
      - PROTOBUF_FIELD_OFFSET(ModifyTunnelReq, hdr_)>(
          reinterpret_cast<char*>(&hdr_),
          reinterpret_cast<char*>(&other->hdr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModifyTunnelReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteTunnelReq::InitAsDefaultInstance() {
  ::srvEbm::_DeleteTunnelReq_default_instance_._instance.get_mutable()->hdr_ = const_cast< ::mhdr::MsgHdr*>(
      ::mhdr::MsgHdr::internal_default_instance());
  ::srvEbm::_DeleteTunnelReq_default_instance_._instance.get_mutable()->cp_up_hdr_ = const_cast< ::structure::CpUpHdr*>(
      ::structure::CpUpHdr::internal_default_instance());
}
class DeleteTunnelReq::_Internal {
 public:
  static const ::mhdr::MsgHdr& hdr(const DeleteTunnelReq* msg);
  static const ::structure::CpUpHdr& cp_up_hdr(const DeleteTunnelReq* msg);
};

const ::mhdr::MsgHdr&
DeleteTunnelReq::_Internal::hdr(const DeleteTunnelReq* msg) {
  return *msg->hdr_;
}
const ::structure::CpUpHdr&
DeleteTunnelReq::_Internal::cp_up_hdr(const DeleteTunnelReq* msg) {
  return *msg->cp_up_hdr_;
}
void DeleteTunnelReq::clear_hdr() {
  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
}
void DeleteTunnelReq::clear_cp_up_hdr() {
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
}
void DeleteTunnelReq::clear_tnl_info_list() {
  tnl_info_list_.Clear();
}
DeleteTunnelReq::DeleteTunnelReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tnl_info_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srvEbm.DeleteTunnelReq)
}
DeleteTunnelReq::DeleteTunnelReq(const DeleteTunnelReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tnl_info_list_(from.tnl_info_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hdr()) {
    hdr_ = new ::mhdr::MsgHdr(*from.hdr_);
  } else {
    hdr_ = nullptr;
  }
  if (from._internal_has_cp_up_hdr()) {
    cp_up_hdr_ = new ::structure::CpUpHdr(*from.cp_up_hdr_);
  } else {
    cp_up_hdr_ = nullptr;
  }
  num_ent_ = from.num_ent_;
  // @@protoc_insertion_point(copy_constructor:srvEbm.DeleteTunnelReq)
}

void DeleteTunnelReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteTunnelReq_srvEbm_2eproto.base);
  ::memset(&hdr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_ent_) -
      reinterpret_cast<char*>(&hdr_)) + sizeof(num_ent_));
}

DeleteTunnelReq::~DeleteTunnelReq() {
  // @@protoc_insertion_point(destructor:srvEbm.DeleteTunnelReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteTunnelReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete hdr_;
  if (this != internal_default_instance()) delete cp_up_hdr_;
}

void DeleteTunnelReq::ArenaDtor(void* object) {
  DeleteTunnelReq* _this = reinterpret_cast< DeleteTunnelReq* >(object);
  (void)_this;
}
void DeleteTunnelReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteTunnelReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteTunnelReq& DeleteTunnelReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteTunnelReq_srvEbm_2eproto.base);
  return *internal_default_instance();
}


void DeleteTunnelReq::Clear() {
// @@protoc_insertion_point(message_clear_start:srvEbm.DeleteTunnelReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tnl_info_list_.Clear();
  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
  num_ent_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteTunnelReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mhdr.MsgHdr hdr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.CpUpHdr cp_up_hdr = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_cp_up_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_ent = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          num_ent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .structure.GtpTunnelInfo tnl_info_list = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_tnl_info_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<322>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteTunnelReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srvEbm.DeleteTunnelReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::hdr(this), target, stream);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::cp_up_hdr(this), target, stream);
  }

  // uint32 num_ent = 31;
  if (this->num_ent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(31, this->_internal_num_ent(), target);
  }

  // repeated .structure.GtpTunnelInfo tnl_info_list = 40;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tnl_info_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(40, this->_internal_tnl_info_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srvEbm.DeleteTunnelReq)
  return target;
}

size_t DeleteTunnelReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srvEbm.DeleteTunnelReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .structure.GtpTunnelInfo tnl_info_list = 40;
  total_size += 2UL * this->_internal_tnl_info_list_size();
  for (const auto& msg : this->tnl_info_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hdr_);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cp_up_hdr_);
  }

  // uint32 num_ent = 31;
  if (this->num_ent() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_ent());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteTunnelReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srvEbm.DeleteTunnelReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteTunnelReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteTunnelReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srvEbm.DeleteTunnelReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srvEbm.DeleteTunnelReq)
    MergeFrom(*source);
  }
}

void DeleteTunnelReq::MergeFrom(const DeleteTunnelReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srvEbm.DeleteTunnelReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tnl_info_list_.MergeFrom(from.tnl_info_list_);
  if (from.has_hdr()) {
    _internal_mutable_hdr()->::mhdr::MsgHdr::MergeFrom(from._internal_hdr());
  }
  if (from.has_cp_up_hdr()) {
    _internal_mutable_cp_up_hdr()->::structure::CpUpHdr::MergeFrom(from._internal_cp_up_hdr());
  }
  if (from.num_ent() != 0) {
    _internal_set_num_ent(from._internal_num_ent());
  }
}

void DeleteTunnelReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srvEbm.DeleteTunnelReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteTunnelReq::CopyFrom(const DeleteTunnelReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srvEbm.DeleteTunnelReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteTunnelReq::IsInitialized() const {
  return true;
}

void DeleteTunnelReq::InternalSwap(DeleteTunnelReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tnl_info_list_.InternalSwap(&other->tnl_info_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteTunnelReq, num_ent_)
      + sizeof(DeleteTunnelReq::num_ent_)
      - PROTOBUF_FIELD_OFFSET(DeleteTunnelReq, hdr_)>(
          reinterpret_cast<char*>(&hdr_),
          reinterpret_cast<char*>(&other->hdr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteTunnelReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddRbConfigReq::InitAsDefaultInstance() {
  ::srvEbm::_AddRbConfigReq_default_instance_._instance.get_mutable()->hdr_ = const_cast< ::mhdr::MsgHdr*>(
      ::mhdr::MsgHdr::internal_default_instance());
  ::srvEbm::_AddRbConfigReq_default_instance_._instance.get_mutable()->cp_up_hdr_ = const_cast< ::structure::CpUpHdr*>(
      ::structure::CpUpHdr::internal_default_instance());
}
class AddRbConfigReq::_Internal {
 public:
  static const ::mhdr::MsgHdr& hdr(const AddRbConfigReq* msg);
  static const ::structure::CpUpHdr& cp_up_hdr(const AddRbConfigReq* msg);
};

const ::mhdr::MsgHdr&
AddRbConfigReq::_Internal::hdr(const AddRbConfigReq* msg) {
  return *msg->hdr_;
}
const ::structure::CpUpHdr&
AddRbConfigReq::_Internal::cp_up_hdr(const AddRbConfigReq* msg) {
  return *msg->cp_up_hdr_;
}
void AddRbConfigReq::clear_hdr() {
  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
}
void AddRbConfigReq::clear_cp_up_hdr() {
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
}
void AddRbConfigReq::clear_config_list() {
  config_list_.Clear();
}
AddRbConfigReq::AddRbConfigReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  config_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srvEbm.AddRbConfigReq)
}
AddRbConfigReq::AddRbConfigReq(const AddRbConfigReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      config_list_(from.config_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hdr()) {
    hdr_ = new ::mhdr::MsgHdr(*from.hdr_);
  } else {
    hdr_ = nullptr;
  }
  if (from._internal_has_cp_up_hdr()) {
    cp_up_hdr_ = new ::structure::CpUpHdr(*from.cp_up_hdr_);
  } else {
    cp_up_hdr_ = nullptr;
  }
  ::memcpy(&num_ent_, &from.num_ent_,
    static_cast<size_t>(reinterpret_cast<char*>(&rlc_dl_sap_id_) -
    reinterpret_cast<char*>(&num_ent_)) + sizeof(rlc_dl_sap_id_));
  // @@protoc_insertion_point(copy_constructor:srvEbm.AddRbConfigReq)
}

void AddRbConfigReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddRbConfigReq_srvEbm_2eproto.base);
  ::memset(&hdr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rlc_dl_sap_id_) -
      reinterpret_cast<char*>(&hdr_)) + sizeof(rlc_dl_sap_id_));
}

AddRbConfigReq::~AddRbConfigReq() {
  // @@protoc_insertion_point(destructor:srvEbm.AddRbConfigReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddRbConfigReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete hdr_;
  if (this != internal_default_instance()) delete cp_up_hdr_;
}

void AddRbConfigReq::ArenaDtor(void* object) {
  AddRbConfigReq* _this = reinterpret_cast< AddRbConfigReq* >(object);
  (void)_this;
}
void AddRbConfigReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddRbConfigReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddRbConfigReq& AddRbConfigReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddRbConfigReq_srvEbm_2eproto.base);
  return *internal_default_instance();
}


void AddRbConfigReq::Clear() {
// @@protoc_insertion_point(message_clear_start:srvEbm.AddRbConfigReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  config_list_.Clear();
  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
  ::memset(&num_ent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rlc_dl_sap_id_) -
      reinterpret_cast<char*>(&num_ent_)) + sizeof(rlc_dl_sap_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddRbConfigReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mhdr.MsgHdr hdr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.CpUpHdr cp_up_hdr = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_cp_up_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_ent = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          num_ent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 is_ho = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          is_ho_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rlc_ul_sap_id = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          rlc_ul_sap_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rlc_dl_sap_id = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          rlc_dl_sap_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .structure.PDCPAddCfgEnt config_list = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_config_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<242>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddRbConfigReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srvEbm.AddRbConfigReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::hdr(this), target, stream);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::cp_up_hdr(this), target, stream);
  }

  // uint32 num_ent = 21;
  if (this->num_ent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_num_ent(), target);
  }

  // uint32 is_ho = 22;
  if (this->is_ho() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_is_ho(), target);
  }

  // uint32 rlc_ul_sap_id = 23;
  if (this->rlc_ul_sap_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_rlc_ul_sap_id(), target);
  }

  // uint32 rlc_dl_sap_id = 24;
  if (this->rlc_dl_sap_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_rlc_dl_sap_id(), target);
  }

  // repeated .structure.PDCPAddCfgEnt config_list = 30;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_config_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, this->_internal_config_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srvEbm.AddRbConfigReq)
  return target;
}

size_t AddRbConfigReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srvEbm.AddRbConfigReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .structure.PDCPAddCfgEnt config_list = 30;
  total_size += 2UL * this->_internal_config_list_size();
  for (const auto& msg : this->config_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hdr_);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cp_up_hdr_);
  }

  // uint32 num_ent = 21;
  if (this->num_ent() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_ent());
  }

  // uint32 is_ho = 22;
  if (this->is_ho() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_is_ho());
  }

  // uint32 rlc_ul_sap_id = 23;
  if (this->rlc_ul_sap_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rlc_ul_sap_id());
  }

  // uint32 rlc_dl_sap_id = 24;
  if (this->rlc_dl_sap_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rlc_dl_sap_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddRbConfigReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srvEbm.AddRbConfigReq)
  GOOGLE_DCHECK_NE(&from, this);
  const AddRbConfigReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddRbConfigReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srvEbm.AddRbConfigReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srvEbm.AddRbConfigReq)
    MergeFrom(*source);
  }
}

void AddRbConfigReq::MergeFrom(const AddRbConfigReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srvEbm.AddRbConfigReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  config_list_.MergeFrom(from.config_list_);
  if (from.has_hdr()) {
    _internal_mutable_hdr()->::mhdr::MsgHdr::MergeFrom(from._internal_hdr());
  }
  if (from.has_cp_up_hdr()) {
    _internal_mutable_cp_up_hdr()->::structure::CpUpHdr::MergeFrom(from._internal_cp_up_hdr());
  }
  if (from.num_ent() != 0) {
    _internal_set_num_ent(from._internal_num_ent());
  }
  if (from.is_ho() != 0) {
    _internal_set_is_ho(from._internal_is_ho());
  }
  if (from.rlc_ul_sap_id() != 0) {
    _internal_set_rlc_ul_sap_id(from._internal_rlc_ul_sap_id());
  }
  if (from.rlc_dl_sap_id() != 0) {
    _internal_set_rlc_dl_sap_id(from._internal_rlc_dl_sap_id());
  }
}

void AddRbConfigReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srvEbm.AddRbConfigReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddRbConfigReq::CopyFrom(const AddRbConfigReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srvEbm.AddRbConfigReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddRbConfigReq::IsInitialized() const {
  return true;
}

void AddRbConfigReq::InternalSwap(AddRbConfigReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  config_list_.InternalSwap(&other->config_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddRbConfigReq, rlc_dl_sap_id_)
      + sizeof(AddRbConfigReq::rlc_dl_sap_id_)
      - PROTOBUF_FIELD_OFFSET(AddRbConfigReq, hdr_)>(
          reinterpret_cast<char*>(&hdr_),
          reinterpret_cast<char*>(&other->hdr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddRbConfigReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModifyRbConfigReq::InitAsDefaultInstance() {
  ::srvEbm::_ModifyRbConfigReq_default_instance_._instance.get_mutable()->hdr_ = const_cast< ::mhdr::MsgHdr*>(
      ::mhdr::MsgHdr::internal_default_instance());
  ::srvEbm::_ModifyRbConfigReq_default_instance_._instance.get_mutable()->cp_up_hdr_ = const_cast< ::structure::CpUpHdr*>(
      ::structure::CpUpHdr::internal_default_instance());
}
class ModifyRbConfigReq::_Internal {
 public:
  static const ::mhdr::MsgHdr& hdr(const ModifyRbConfigReq* msg);
  static const ::structure::CpUpHdr& cp_up_hdr(const ModifyRbConfigReq* msg);
};

const ::mhdr::MsgHdr&
ModifyRbConfigReq::_Internal::hdr(const ModifyRbConfigReq* msg) {
  return *msg->hdr_;
}
const ::structure::CpUpHdr&
ModifyRbConfigReq::_Internal::cp_up_hdr(const ModifyRbConfigReq* msg) {
  return *msg->cp_up_hdr_;
}
void ModifyRbConfigReq::clear_hdr() {
  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
}
void ModifyRbConfigReq::clear_cp_up_hdr() {
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
}
void ModifyRbConfigReq::clear_config_list() {
  config_list_.Clear();
}
ModifyRbConfigReq::ModifyRbConfigReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  config_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srvEbm.ModifyRbConfigReq)
}
ModifyRbConfigReq::ModifyRbConfigReq(const ModifyRbConfigReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      config_list_(from.config_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hdr()) {
    hdr_ = new ::mhdr::MsgHdr(*from.hdr_);
  } else {
    hdr_ = nullptr;
  }
  if (from._internal_has_cp_up_hdr()) {
    cp_up_hdr_ = new ::structure::CpUpHdr(*from.cp_up_hdr_);
  } else {
    cp_up_hdr_ = nullptr;
  }
  num_ent_ = from.num_ent_;
  // @@protoc_insertion_point(copy_constructor:srvEbm.ModifyRbConfigReq)
}

void ModifyRbConfigReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModifyRbConfigReq_srvEbm_2eproto.base);
  ::memset(&hdr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_ent_) -
      reinterpret_cast<char*>(&hdr_)) + sizeof(num_ent_));
}

ModifyRbConfigReq::~ModifyRbConfigReq() {
  // @@protoc_insertion_point(destructor:srvEbm.ModifyRbConfigReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModifyRbConfigReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete hdr_;
  if (this != internal_default_instance()) delete cp_up_hdr_;
}

void ModifyRbConfigReq::ArenaDtor(void* object) {
  ModifyRbConfigReq* _this = reinterpret_cast< ModifyRbConfigReq* >(object);
  (void)_this;
}
void ModifyRbConfigReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModifyRbConfigReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModifyRbConfigReq& ModifyRbConfigReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModifyRbConfigReq_srvEbm_2eproto.base);
  return *internal_default_instance();
}


void ModifyRbConfigReq::Clear() {
// @@protoc_insertion_point(message_clear_start:srvEbm.ModifyRbConfigReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  config_list_.Clear();
  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
  num_ent_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModifyRbConfigReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mhdr.MsgHdr hdr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.CpUpHdr cp_up_hdr = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_cp_up_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_ent = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          num_ent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .structure.PDCPModCfgEnt config_list = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_config_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<242>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModifyRbConfigReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srvEbm.ModifyRbConfigReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::hdr(this), target, stream);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::cp_up_hdr(this), target, stream);
  }

  // uint32 num_ent = 21;
  if (this->num_ent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_num_ent(), target);
  }

  // repeated .structure.PDCPModCfgEnt config_list = 30;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_config_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, this->_internal_config_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srvEbm.ModifyRbConfigReq)
  return target;
}

size_t ModifyRbConfigReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srvEbm.ModifyRbConfigReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .structure.PDCPModCfgEnt config_list = 30;
  total_size += 2UL * this->_internal_config_list_size();
  for (const auto& msg : this->config_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hdr_);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cp_up_hdr_);
  }

  // uint32 num_ent = 21;
  if (this->num_ent() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_ent());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModifyRbConfigReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srvEbm.ModifyRbConfigReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ModifyRbConfigReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModifyRbConfigReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srvEbm.ModifyRbConfigReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srvEbm.ModifyRbConfigReq)
    MergeFrom(*source);
  }
}

void ModifyRbConfigReq::MergeFrom(const ModifyRbConfigReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srvEbm.ModifyRbConfigReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  config_list_.MergeFrom(from.config_list_);
  if (from.has_hdr()) {
    _internal_mutable_hdr()->::mhdr::MsgHdr::MergeFrom(from._internal_hdr());
  }
  if (from.has_cp_up_hdr()) {
    _internal_mutable_cp_up_hdr()->::structure::CpUpHdr::MergeFrom(from._internal_cp_up_hdr());
  }
  if (from.num_ent() != 0) {
    _internal_set_num_ent(from._internal_num_ent());
  }
}

void ModifyRbConfigReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srvEbm.ModifyRbConfigReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyRbConfigReq::CopyFrom(const ModifyRbConfigReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srvEbm.ModifyRbConfigReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyRbConfigReq::IsInitialized() const {
  return true;
}

void ModifyRbConfigReq::InternalSwap(ModifyRbConfigReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  config_list_.InternalSwap(&other->config_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModifyRbConfigReq, num_ent_)
      + sizeof(ModifyRbConfigReq::num_ent_)
      - PROTOBUF_FIELD_OFFSET(ModifyRbConfigReq, hdr_)>(
          reinterpret_cast<char*>(&hdr_),
          reinterpret_cast<char*>(&other->hdr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModifyRbConfigReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteRbConfigReq::InitAsDefaultInstance() {
  ::srvEbm::_DeleteRbConfigReq_default_instance_._instance.get_mutable()->hdr_ = const_cast< ::mhdr::MsgHdr*>(
      ::mhdr::MsgHdr::internal_default_instance());
  ::srvEbm::_DeleteRbConfigReq_default_instance_._instance.get_mutable()->cp_up_hdr_ = const_cast< ::structure::CpUpHdr*>(
      ::structure::CpUpHdr::internal_default_instance());
}
class DeleteRbConfigReq::_Internal {
 public:
  static const ::mhdr::MsgHdr& hdr(const DeleteRbConfigReq* msg);
  static const ::structure::CpUpHdr& cp_up_hdr(const DeleteRbConfigReq* msg);
};

const ::mhdr::MsgHdr&
DeleteRbConfigReq::_Internal::hdr(const DeleteRbConfigReq* msg) {
  return *msg->hdr_;
}
const ::structure::CpUpHdr&
DeleteRbConfigReq::_Internal::cp_up_hdr(const DeleteRbConfigReq* msg) {
  return *msg->cp_up_hdr_;
}
void DeleteRbConfigReq::clear_hdr() {
  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
}
void DeleteRbConfigReq::clear_cp_up_hdr() {
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
}
void DeleteRbConfigReq::clear_config_list() {
  config_list_.Clear();
}
DeleteRbConfigReq::DeleteRbConfigReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  config_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srvEbm.DeleteRbConfigReq)
}
DeleteRbConfigReq::DeleteRbConfigReq(const DeleteRbConfigReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      config_list_(from.config_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hdr()) {
    hdr_ = new ::mhdr::MsgHdr(*from.hdr_);
  } else {
    hdr_ = nullptr;
  }
  if (from._internal_has_cp_up_hdr()) {
    cp_up_hdr_ = new ::structure::CpUpHdr(*from.cp_up_hdr_);
  } else {
    cp_up_hdr_ = nullptr;
  }
  num_ent_ = from.num_ent_;
  // @@protoc_insertion_point(copy_constructor:srvEbm.DeleteRbConfigReq)
}

void DeleteRbConfigReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteRbConfigReq_srvEbm_2eproto.base);
  ::memset(&hdr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_ent_) -
      reinterpret_cast<char*>(&hdr_)) + sizeof(num_ent_));
}

DeleteRbConfigReq::~DeleteRbConfigReq() {
  // @@protoc_insertion_point(destructor:srvEbm.DeleteRbConfigReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteRbConfigReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete hdr_;
  if (this != internal_default_instance()) delete cp_up_hdr_;
}

void DeleteRbConfigReq::ArenaDtor(void* object) {
  DeleteRbConfigReq* _this = reinterpret_cast< DeleteRbConfigReq* >(object);
  (void)_this;
}
void DeleteRbConfigReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteRbConfigReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteRbConfigReq& DeleteRbConfigReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteRbConfigReq_srvEbm_2eproto.base);
  return *internal_default_instance();
}


void DeleteRbConfigReq::Clear() {
// @@protoc_insertion_point(message_clear_start:srvEbm.DeleteRbConfigReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  config_list_.Clear();
  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
  num_ent_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteRbConfigReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mhdr.MsgHdr hdr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.CpUpHdr cp_up_hdr = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_cp_up_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_ent = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          num_ent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .structure.PDCPDelCfgEnt config_list = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_config_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<242>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteRbConfigReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srvEbm.DeleteRbConfigReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::hdr(this), target, stream);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::cp_up_hdr(this), target, stream);
  }

  // uint32 num_ent = 21;
  if (this->num_ent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_num_ent(), target);
  }

  // repeated .structure.PDCPDelCfgEnt config_list = 30;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_config_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, this->_internal_config_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srvEbm.DeleteRbConfigReq)
  return target;
}

size_t DeleteRbConfigReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srvEbm.DeleteRbConfigReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .structure.PDCPDelCfgEnt config_list = 30;
  total_size += 2UL * this->_internal_config_list_size();
  for (const auto& msg : this->config_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hdr_);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cp_up_hdr_);
  }

  // uint32 num_ent = 21;
  if (this->num_ent() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_ent());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteRbConfigReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srvEbm.DeleteRbConfigReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteRbConfigReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteRbConfigReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srvEbm.DeleteRbConfigReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srvEbm.DeleteRbConfigReq)
    MergeFrom(*source);
  }
}

void DeleteRbConfigReq::MergeFrom(const DeleteRbConfigReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srvEbm.DeleteRbConfigReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  config_list_.MergeFrom(from.config_list_);
  if (from.has_hdr()) {
    _internal_mutable_hdr()->::mhdr::MsgHdr::MergeFrom(from._internal_hdr());
  }
  if (from.has_cp_up_hdr()) {
    _internal_mutable_cp_up_hdr()->::structure::CpUpHdr::MergeFrom(from._internal_cp_up_hdr());
  }
  if (from.num_ent() != 0) {
    _internal_set_num_ent(from._internal_num_ent());
  }
}

void DeleteRbConfigReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srvEbm.DeleteRbConfigReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteRbConfigReq::CopyFrom(const DeleteRbConfigReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srvEbm.DeleteRbConfigReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRbConfigReq::IsInitialized() const {
  return true;
}

void DeleteRbConfigReq::InternalSwap(DeleteRbConfigReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  config_list_.InternalSwap(&other->config_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteRbConfigReq, num_ent_)
      + sizeof(DeleteRbConfigReq::num_ent_)
      - PROTOBUF_FIELD_OFFSET(DeleteRbConfigReq, hdr_)>(
          reinterpret_cast<char*>(&hdr_),
          reinterpret_cast<char*>(&other->hdr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteRbConfigReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PauseResumeDataReq::InitAsDefaultInstance() {
  ::srvEbm::_PauseResumeDataReq_default_instance_._instance.get_mutable()->hdr_ = const_cast< ::mhdr::MsgHdr*>(
      ::mhdr::MsgHdr::internal_default_instance());
  ::srvEbm::_PauseResumeDataReq_default_instance_._instance.get_mutable()->cp_up_hdr_ = const_cast< ::structure::CpUpHdr*>(
      ::structure::CpUpHdr::internal_default_instance());
}
class PauseResumeDataReq::_Internal {
 public:
  static const ::mhdr::MsgHdr& hdr(const PauseResumeDataReq* msg);
  static const ::structure::CpUpHdr& cp_up_hdr(const PauseResumeDataReq* msg);
};

const ::mhdr::MsgHdr&
PauseResumeDataReq::_Internal::hdr(const PauseResumeDataReq* msg) {
  return *msg->hdr_;
}
const ::structure::CpUpHdr&
PauseResumeDataReq::_Internal::cp_up_hdr(const PauseResumeDataReq* msg) {
  return *msg->cp_up_hdr_;
}
void PauseResumeDataReq::clear_hdr() {
  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
}
void PauseResumeDataReq::clear_cp_up_hdr() {
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
}
PauseResumeDataReq::PauseResumeDataReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srvEbm.PauseResumeDataReq)
}
PauseResumeDataReq::PauseResumeDataReq(const PauseResumeDataReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hdr()) {
    hdr_ = new ::mhdr::MsgHdr(*from.hdr_);
  } else {
    hdr_ = nullptr;
  }
  if (from._internal_has_cp_up_hdr()) {
    cp_up_hdr_ = new ::structure::CpUpHdr(*from.cp_up_hdr_);
  } else {
    cp_up_hdr_ = nullptr;
  }
  ::memcpy(&tgt_cell_id_, &from.tgt_cell_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ho_type_) -
    reinterpret_cast<char*>(&tgt_cell_id_)) + sizeof(ho_type_));
  // @@protoc_insertion_point(copy_constructor:srvEbm.PauseResumeDataReq)
}

void PauseResumeDataReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PauseResumeDataReq_srvEbm_2eproto.base);
  ::memset(&hdr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ho_type_) -
      reinterpret_cast<char*>(&hdr_)) + sizeof(ho_type_));
}

PauseResumeDataReq::~PauseResumeDataReq() {
  // @@protoc_insertion_point(destructor:srvEbm.PauseResumeDataReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PauseResumeDataReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete hdr_;
  if (this != internal_default_instance()) delete cp_up_hdr_;
}

void PauseResumeDataReq::ArenaDtor(void* object) {
  PauseResumeDataReq* _this = reinterpret_cast< PauseResumeDataReq* >(object);
  (void)_this;
}
void PauseResumeDataReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PauseResumeDataReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PauseResumeDataReq& PauseResumeDataReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PauseResumeDataReq_srvEbm_2eproto.base);
  return *internal_default_instance();
}


void PauseResumeDataReq::Clear() {
// @@protoc_insertion_point(message_clear_start:srvEbm.PauseResumeDataReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
  ::memset(&tgt_cell_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ho_type_) -
      reinterpret_cast<char*>(&tgt_cell_id_)) + sizeof(ho_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PauseResumeDataReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mhdr.MsgHdr hdr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.CpUpHdr cp_up_hdr = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_cp_up_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tgt_cell_id = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          tgt_cell_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 new_rnti = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          new_rnti_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_pause = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          is_pause_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.HandoverType ho_type = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ho_type(static_cast<::structure::HandoverType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PauseResumeDataReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srvEbm.PauseResumeDataReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::hdr(this), target, stream);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::cp_up_hdr(this), target, stream);
  }

  // uint32 tgt_cell_id = 30;
  if (this->tgt_cell_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_tgt_cell_id(), target);
  }

  // uint32 new_rnti = 35;
  if (this->new_rnti() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(35, this->_internal_new_rnti(), target);
  }

  // bool is_pause = 40;
  if (this->is_pause() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(40, this->_internal_is_pause(), target);
  }

  // .structure.HandoverType ho_type = 50;
  if (this->ho_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      50, this->_internal_ho_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srvEbm.PauseResumeDataReq)
  return target;
}

size_t PauseResumeDataReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srvEbm.PauseResumeDataReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hdr_);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cp_up_hdr_);
  }

  // uint32 tgt_cell_id = 30;
  if (this->tgt_cell_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tgt_cell_id());
  }

  // uint32 new_rnti = 35;
  if (this->new_rnti() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_new_rnti());
  }

  // bool is_pause = 40;
  if (this->is_pause() != 0) {
    total_size += 2 + 1;
  }

  // .structure.HandoverType ho_type = 50;
  if (this->ho_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ho_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PauseResumeDataReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srvEbm.PauseResumeDataReq)
  GOOGLE_DCHECK_NE(&from, this);
  const PauseResumeDataReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PauseResumeDataReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srvEbm.PauseResumeDataReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srvEbm.PauseResumeDataReq)
    MergeFrom(*source);
  }
}

void PauseResumeDataReq::MergeFrom(const PauseResumeDataReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srvEbm.PauseResumeDataReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hdr()) {
    _internal_mutable_hdr()->::mhdr::MsgHdr::MergeFrom(from._internal_hdr());
  }
  if (from.has_cp_up_hdr()) {
    _internal_mutable_cp_up_hdr()->::structure::CpUpHdr::MergeFrom(from._internal_cp_up_hdr());
  }
  if (from.tgt_cell_id() != 0) {
    _internal_set_tgt_cell_id(from._internal_tgt_cell_id());
  }
  if (from.new_rnti() != 0) {
    _internal_set_new_rnti(from._internal_new_rnti());
  }
  if (from.is_pause() != 0) {
    _internal_set_is_pause(from._internal_is_pause());
  }
  if (from.ho_type() != 0) {
    _internal_set_ho_type(from._internal_ho_type());
  }
}

void PauseResumeDataReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srvEbm.PauseResumeDataReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PauseResumeDataReq::CopyFrom(const PauseResumeDataReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srvEbm.PauseResumeDataReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PauseResumeDataReq::IsInitialized() const {
  return true;
}

void PauseResumeDataReq::InternalSwap(PauseResumeDataReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PauseResumeDataReq, ho_type_)
      + sizeof(PauseResumeDataReq::ho_type_)
      - PROTOBUF_FIELD_OFFSET(PauseResumeDataReq, hdr_)>(
          reinterpret_cast<char*>(&hdr_),
          reinterpret_cast<char*>(&other->hdr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PauseResumeDataReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PDCPSduStatusReq::InitAsDefaultInstance() {
  ::srvEbm::_PDCPSduStatusReq_default_instance_._instance.get_mutable()->hdr_ = const_cast< ::mhdr::MsgHdr*>(
      ::mhdr::MsgHdr::internal_default_instance());
  ::srvEbm::_PDCPSduStatusReq_default_instance_._instance.get_mutable()->cp_up_hdr_ = const_cast< ::structure::CpUpHdr*>(
      ::structure::CpUpHdr::internal_default_instance());
}
class PDCPSduStatusReq::_Internal {
 public:
  static const ::mhdr::MsgHdr& hdr(const PDCPSduStatusReq* msg);
  static const ::structure::CpUpHdr& cp_up_hdr(const PDCPSduStatusReq* msg);
};

const ::mhdr::MsgHdr&
PDCPSduStatusReq::_Internal::hdr(const PDCPSduStatusReq* msg) {
  return *msg->hdr_;
}
const ::structure::CpUpHdr&
PDCPSduStatusReq::_Internal::cp_up_hdr(const PDCPSduStatusReq* msg) {
  return *msg->cp_up_hdr_;
}
void PDCPSduStatusReq::clear_hdr() {
  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
}
void PDCPSduStatusReq::clear_cp_up_hdr() {
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
}
PDCPSduStatusReq::PDCPSduStatusReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srvEbm.PDCPSduStatusReq)
}
PDCPSduStatusReq::PDCPSduStatusReq(const PDCPSduStatusReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hdr()) {
    hdr_ = new ::mhdr::MsgHdr(*from.hdr_);
  } else {
    hdr_ = nullptr;
  }
  if (from._internal_has_cp_up_hdr()) {
    cp_up_hdr_ = new ::structure::CpUpHdr(*from.cp_up_hdr_);
  } else {
    cp_up_hdr_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:srvEbm.PDCPSduStatusReq)
}

void PDCPSduStatusReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PDCPSduStatusReq_srvEbm_2eproto.base);
  ::memset(&hdr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cp_up_hdr_) -
      reinterpret_cast<char*>(&hdr_)) + sizeof(cp_up_hdr_));
}

PDCPSduStatusReq::~PDCPSduStatusReq() {
  // @@protoc_insertion_point(destructor:srvEbm.PDCPSduStatusReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PDCPSduStatusReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete hdr_;
  if (this != internal_default_instance()) delete cp_up_hdr_;
}

void PDCPSduStatusReq::ArenaDtor(void* object) {
  PDCPSduStatusReq* _this = reinterpret_cast< PDCPSduStatusReq* >(object);
  (void)_this;
}
void PDCPSduStatusReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PDCPSduStatusReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PDCPSduStatusReq& PDCPSduStatusReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PDCPSduStatusReq_srvEbm_2eproto.base);
  return *internal_default_instance();
}


void PDCPSduStatusReq::Clear() {
// @@protoc_insertion_point(message_clear_start:srvEbm.PDCPSduStatusReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PDCPSduStatusReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mhdr.MsgHdr hdr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.CpUpHdr cp_up_hdr = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_cp_up_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PDCPSduStatusReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srvEbm.PDCPSduStatusReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::hdr(this), target, stream);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::cp_up_hdr(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srvEbm.PDCPSduStatusReq)
  return target;
}

size_t PDCPSduStatusReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srvEbm.PDCPSduStatusReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hdr_);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cp_up_hdr_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PDCPSduStatusReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srvEbm.PDCPSduStatusReq)
  GOOGLE_DCHECK_NE(&from, this);
  const PDCPSduStatusReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PDCPSduStatusReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srvEbm.PDCPSduStatusReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srvEbm.PDCPSduStatusReq)
    MergeFrom(*source);
  }
}

void PDCPSduStatusReq::MergeFrom(const PDCPSduStatusReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srvEbm.PDCPSduStatusReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hdr()) {
    _internal_mutable_hdr()->::mhdr::MsgHdr::MergeFrom(from._internal_hdr());
  }
  if (from.has_cp_up_hdr()) {
    _internal_mutable_cp_up_hdr()->::structure::CpUpHdr::MergeFrom(from._internal_cp_up_hdr());
  }
}

void PDCPSduStatusReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srvEbm.PDCPSduStatusReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PDCPSduStatusReq::CopyFrom(const PDCPSduStatusReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srvEbm.PDCPSduStatusReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PDCPSduStatusReq::IsInitialized() const {
  return true;
}

void PDCPSduStatusReq::InternalSwap(PDCPSduStatusReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PDCPSduStatusReq, cp_up_hdr_)
      + sizeof(PDCPSduStatusReq::cp_up_hdr_)
      - PROTOBUF_FIELD_OFFSET(PDCPSduStatusReq, hdr_)>(
          reinterpret_cast<char*>(&hdr_),
          reinterpret_cast<char*>(&other->hdr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PDCPSduStatusReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DataForwardingReq::InitAsDefaultInstance() {
  ::srvEbm::_DataForwardingReq_default_instance_._instance.get_mutable()->hdr_ = const_cast< ::mhdr::MsgHdr*>(
      ::mhdr::MsgHdr::internal_default_instance());
  ::srvEbm::_DataForwardingReq_default_instance_._instance.get_mutable()->cp_up_hdr_ = const_cast< ::structure::CpUpHdr*>(
      ::structure::CpUpHdr::internal_default_instance());
}
class DataForwardingReq::_Internal {
 public:
  static const ::mhdr::MsgHdr& hdr(const DataForwardingReq* msg);
  static const ::structure::CpUpHdr& cp_up_hdr(const DataForwardingReq* msg);
};

const ::mhdr::MsgHdr&
DataForwardingReq::_Internal::hdr(const DataForwardingReq* msg) {
  return *msg->hdr_;
}
const ::structure::CpUpHdr&
DataForwardingReq::_Internal::cp_up_hdr(const DataForwardingReq* msg) {
  return *msg->cp_up_hdr_;
}
void DataForwardingReq::clear_hdr() {
  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
}
void DataForwardingReq::clear_cp_up_hdr() {
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
}
DataForwardingReq::DataForwardingReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srvEbm.DataForwardingReq)
}
DataForwardingReq::DataForwardingReq(const DataForwardingReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hdr()) {
    hdr_ = new ::mhdr::MsgHdr(*from.hdr_);
  } else {
    hdr_ = nullptr;
  }
  if (from._internal_has_cp_up_hdr()) {
    cp_up_hdr_ = new ::structure::CpUpHdr(*from.cp_up_hdr_);
  } else {
    cp_up_hdr_ = nullptr;
  }
  ::memcpy(&is_ul_data_fwd_req_, &from.is_ul_data_fwd_req_,
    static_cast<size_t>(reinterpret_cast<char*>(&handover_type_) -
    reinterpret_cast<char*>(&is_ul_data_fwd_req_)) + sizeof(handover_type_));
  // @@protoc_insertion_point(copy_constructor:srvEbm.DataForwardingReq)
}

void DataForwardingReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DataForwardingReq_srvEbm_2eproto.base);
  ::memset(&hdr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&handover_type_) -
      reinterpret_cast<char*>(&hdr_)) + sizeof(handover_type_));
}

DataForwardingReq::~DataForwardingReq() {
  // @@protoc_insertion_point(destructor:srvEbm.DataForwardingReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DataForwardingReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete hdr_;
  if (this != internal_default_instance()) delete cp_up_hdr_;
}

void DataForwardingReq::ArenaDtor(void* object) {
  DataForwardingReq* _this = reinterpret_cast< DataForwardingReq* >(object);
  (void)_this;
}
void DataForwardingReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataForwardingReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataForwardingReq& DataForwardingReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataForwardingReq_srvEbm_2eproto.base);
  return *internal_default_instance();
}


void DataForwardingReq::Clear() {
// @@protoc_insertion_point(message_clear_start:srvEbm.DataForwardingReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
  ::memset(&is_ul_data_fwd_req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&handover_type_) -
      reinterpret_cast<char*>(&is_ul_data_fwd_req_)) + sizeof(handover_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataForwardingReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mhdr.MsgHdr hdr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.CpUpHdr cp_up_hdr = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_cp_up_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_ul_data_fwd_Req = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          is_ul_data_fwd_req_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.HandoverType handover_type = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_handover_type(static_cast<::structure::HandoverType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataForwardingReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srvEbm.DataForwardingReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::hdr(this), target, stream);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::cp_up_hdr(this), target, stream);
  }

  // bool is_ul_data_fwd_Req = 30;
  if (this->is_ul_data_fwd_req() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(30, this->_internal_is_ul_data_fwd_req(), target);
  }

  // .structure.HandoverType handover_type = 40;
  if (this->handover_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      40, this->_internal_handover_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srvEbm.DataForwardingReq)
  return target;
}

size_t DataForwardingReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srvEbm.DataForwardingReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hdr_);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cp_up_hdr_);
  }

  // bool is_ul_data_fwd_Req = 30;
  if (this->is_ul_data_fwd_req() != 0) {
    total_size += 2 + 1;
  }

  // .structure.HandoverType handover_type = 40;
  if (this->handover_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_handover_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataForwardingReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srvEbm.DataForwardingReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DataForwardingReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataForwardingReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srvEbm.DataForwardingReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srvEbm.DataForwardingReq)
    MergeFrom(*source);
  }
}

void DataForwardingReq::MergeFrom(const DataForwardingReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srvEbm.DataForwardingReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hdr()) {
    _internal_mutable_hdr()->::mhdr::MsgHdr::MergeFrom(from._internal_hdr());
  }
  if (from.has_cp_up_hdr()) {
    _internal_mutable_cp_up_hdr()->::structure::CpUpHdr::MergeFrom(from._internal_cp_up_hdr());
  }
  if (from.is_ul_data_fwd_req() != 0) {
    _internal_set_is_ul_data_fwd_req(from._internal_is_ul_data_fwd_req());
  }
  if (from.handover_type() != 0) {
    _internal_set_handover_type(from._internal_handover_type());
  }
}

void DataForwardingReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srvEbm.DataForwardingReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataForwardingReq::CopyFrom(const DataForwardingReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srvEbm.DataForwardingReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataForwardingReq::IsInitialized() const {
  return true;
}

void DataForwardingReq::InternalSwap(DataForwardingReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataForwardingReq, handover_type_)
      + sizeof(DataForwardingReq::handover_type_)
      - PROTOBUF_FIELD_OFFSET(DataForwardingReq, hdr_)>(
          reinterpret_cast<char*>(&hdr_),
          reinterpret_cast<char*>(&other->hdr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DataForwardingReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UeInactivityTimerReq::InitAsDefaultInstance() {
  ::srvEbm::_UeInactivityTimerReq_default_instance_._instance.get_mutable()->hdr_ = const_cast< ::mhdr::MsgHdr*>(
      ::mhdr::MsgHdr::internal_default_instance());
  ::srvEbm::_UeInactivityTimerReq_default_instance_._instance.get_mutable()->cp_up_hdr_ = const_cast< ::structure::CpUpHdr*>(
      ::structure::CpUpHdr::internal_default_instance());
}
class UeInactivityTimerReq::_Internal {
 public:
  static const ::mhdr::MsgHdr& hdr(const UeInactivityTimerReq* msg);
  static const ::structure::CpUpHdr& cp_up_hdr(const UeInactivityTimerReq* msg);
};

const ::mhdr::MsgHdr&
UeInactivityTimerReq::_Internal::hdr(const UeInactivityTimerReq* msg) {
  return *msg->hdr_;
}
const ::structure::CpUpHdr&
UeInactivityTimerReq::_Internal::cp_up_hdr(const UeInactivityTimerReq* msg) {
  return *msg->cp_up_hdr_;
}
void UeInactivityTimerReq::clear_hdr() {
  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
}
void UeInactivityTimerReq::clear_cp_up_hdr() {
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
}
UeInactivityTimerReq::UeInactivityTimerReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srvEbm.UeInactivityTimerReq)
}
UeInactivityTimerReq::UeInactivityTimerReq(const UeInactivityTimerReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hdr()) {
    hdr_ = new ::mhdr::MsgHdr(*from.hdr_);
  } else {
    hdr_ = nullptr;
  }
  if (from._internal_has_cp_up_hdr()) {
    cp_up_hdr_ = new ::structure::CpUpHdr(*from.cp_up_hdr_);
  } else {
    cp_up_hdr_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:srvEbm.UeInactivityTimerReq)
}

void UeInactivityTimerReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UeInactivityTimerReq_srvEbm_2eproto.base);
  ::memset(&hdr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cp_up_hdr_) -
      reinterpret_cast<char*>(&hdr_)) + sizeof(cp_up_hdr_));
}

UeInactivityTimerReq::~UeInactivityTimerReq() {
  // @@protoc_insertion_point(destructor:srvEbm.UeInactivityTimerReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UeInactivityTimerReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete hdr_;
  if (this != internal_default_instance()) delete cp_up_hdr_;
}

void UeInactivityTimerReq::ArenaDtor(void* object) {
  UeInactivityTimerReq* _this = reinterpret_cast< UeInactivityTimerReq* >(object);
  (void)_this;
}
void UeInactivityTimerReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UeInactivityTimerReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UeInactivityTimerReq& UeInactivityTimerReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UeInactivityTimerReq_srvEbm_2eproto.base);
  return *internal_default_instance();
}


void UeInactivityTimerReq::Clear() {
// @@protoc_insertion_point(message_clear_start:srvEbm.UeInactivityTimerReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UeInactivityTimerReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mhdr.MsgHdr hdr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.CpUpHdr cp_up_hdr = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_cp_up_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UeInactivityTimerReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srvEbm.UeInactivityTimerReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::hdr(this), target, stream);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::cp_up_hdr(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srvEbm.UeInactivityTimerReq)
  return target;
}

size_t UeInactivityTimerReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srvEbm.UeInactivityTimerReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hdr_);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cp_up_hdr_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UeInactivityTimerReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srvEbm.UeInactivityTimerReq)
  GOOGLE_DCHECK_NE(&from, this);
  const UeInactivityTimerReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UeInactivityTimerReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srvEbm.UeInactivityTimerReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srvEbm.UeInactivityTimerReq)
    MergeFrom(*source);
  }
}

void UeInactivityTimerReq::MergeFrom(const UeInactivityTimerReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srvEbm.UeInactivityTimerReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hdr()) {
    _internal_mutable_hdr()->::mhdr::MsgHdr::MergeFrom(from._internal_hdr());
  }
  if (from.has_cp_up_hdr()) {
    _internal_mutable_cp_up_hdr()->::structure::CpUpHdr::MergeFrom(from._internal_cp_up_hdr());
  }
}

void UeInactivityTimerReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srvEbm.UeInactivityTimerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UeInactivityTimerReq::CopyFrom(const UeInactivityTimerReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srvEbm.UeInactivityTimerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UeInactivityTimerReq::IsInitialized() const {
  return true;
}

void UeInactivityTimerReq::InternalSwap(UeInactivityTimerReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UeInactivityTimerReq, cp_up_hdr_)
      + sizeof(UeInactivityTimerReq::cp_up_hdr_)
      - PROTOBUF_FIELD_OFFSET(UeInactivityTimerReq, hdr_)>(
          reinterpret_cast<char*>(&hdr_),
          reinterpret_cast<char*>(&other->hdr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UeInactivityTimerReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddPDCPConfigReq::InitAsDefaultInstance() {
  ::srvEbm::_AddPDCPConfigReq_default_instance_._instance.get_mutable()->hdr_ = const_cast< ::mhdr::MsgHdr*>(
      ::mhdr::MsgHdr::internal_default_instance());
  ::srvEbm::_AddPDCPConfigReq_default_instance_._instance.get_mutable()->cp_up_hdr_ = const_cast< ::structure::CpUpHdr*>(
      ::structure::CpUpHdr::internal_default_instance());
  ::srvEbm::_AddPDCPConfigReq_default_instance_._instance.get_mutable()->security_config_ = const_cast< ::structure::SecurityConfig*>(
      ::structure::SecurityConfig::internal_default_instance());
}
class AddPDCPConfigReq::_Internal {
 public:
  static const ::mhdr::MsgHdr& hdr(const AddPDCPConfigReq* msg);
  static const ::structure::CpUpHdr& cp_up_hdr(const AddPDCPConfigReq* msg);
  static const ::structure::SecurityConfig& security_config(const AddPDCPConfigReq* msg);
};

const ::mhdr::MsgHdr&
AddPDCPConfigReq::_Internal::hdr(const AddPDCPConfigReq* msg) {
  return *msg->hdr_;
}
const ::structure::CpUpHdr&
AddPDCPConfigReq::_Internal::cp_up_hdr(const AddPDCPConfigReq* msg) {
  return *msg->cp_up_hdr_;
}
const ::structure::SecurityConfig&
AddPDCPConfigReq::_Internal::security_config(const AddPDCPConfigReq* msg) {
  return *msg->security_config_;
}
void AddPDCPConfigReq::clear_hdr() {
  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
}
void AddPDCPConfigReq::clear_cp_up_hdr() {
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
}
void AddPDCPConfigReq::clear_security_config() {
  if (GetArena() == nullptr && security_config_ != nullptr) {
    delete security_config_;
  }
  security_config_ = nullptr;
}
void AddPDCPConfigReq::clear_config_list() {
  config_list_.Clear();
}
AddPDCPConfigReq::AddPDCPConfigReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  config_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srvEbm.AddPDCPConfigReq)
}
AddPDCPConfigReq::AddPDCPConfigReq(const AddPDCPConfigReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      config_list_(from.config_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hdr()) {
    hdr_ = new ::mhdr::MsgHdr(*from.hdr_);
  } else {
    hdr_ = nullptr;
  }
  if (from._internal_has_cp_up_hdr()) {
    cp_up_hdr_ = new ::structure::CpUpHdr(*from.cp_up_hdr_);
  } else {
    cp_up_hdr_ = nullptr;
  }
  if (from._internal_has_security_config()) {
    security_config_ = new ::structure::SecurityConfig(*from.security_config_);
  } else {
    security_config_ = nullptr;
  }
  ::memcpy(&is_ho_, &from.is_ho_,
    static_cast<size_t>(reinterpret_cast<char*>(&rlc_dl_sap_id_) -
    reinterpret_cast<char*>(&is_ho_)) + sizeof(rlc_dl_sap_id_));
  // @@protoc_insertion_point(copy_constructor:srvEbm.AddPDCPConfigReq)
}

void AddPDCPConfigReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddPDCPConfigReq_srvEbm_2eproto.base);
  ::memset(&hdr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rlc_dl_sap_id_) -
      reinterpret_cast<char*>(&hdr_)) + sizeof(rlc_dl_sap_id_));
}

AddPDCPConfigReq::~AddPDCPConfigReq() {
  // @@protoc_insertion_point(destructor:srvEbm.AddPDCPConfigReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddPDCPConfigReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete hdr_;
  if (this != internal_default_instance()) delete cp_up_hdr_;
  if (this != internal_default_instance()) delete security_config_;
}

void AddPDCPConfigReq::ArenaDtor(void* object) {
  AddPDCPConfigReq* _this = reinterpret_cast< AddPDCPConfigReq* >(object);
  (void)_this;
}
void AddPDCPConfigReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddPDCPConfigReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddPDCPConfigReq& AddPDCPConfigReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddPDCPConfigReq_srvEbm_2eproto.base);
  return *internal_default_instance();
}


void AddPDCPConfigReq::Clear() {
// @@protoc_insertion_point(message_clear_start:srvEbm.AddPDCPConfigReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  config_list_.Clear();
  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
  if (GetArena() == nullptr && security_config_ != nullptr) {
    delete security_config_;
  }
  security_config_ = nullptr;
  ::memset(&is_ho_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rlc_dl_sap_id_) -
      reinterpret_cast<char*>(&is_ho_)) + sizeof(rlc_dl_sap_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddPDCPConfigReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mhdr.MsgHdr hdr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.CpUpHdr cp_up_hdr = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_cp_up_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_ho = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          is_ho_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.SecurityConfig security_config = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_security_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_ent = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          num_ent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rlc_ul_sap_id = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          rlc_ul_sap_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rlc_dl_sap_id = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          rlc_dl_sap_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .structure.PDCPAddCfgEnt config_list = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_config_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<402>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddPDCPConfigReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srvEbm.AddPDCPConfigReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::hdr(this), target, stream);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::cp_up_hdr(this), target, stream);
  }

  // bool is_ho = 30;
  if (this->is_ho() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(30, this->_internal_is_ho(), target);
  }

  // .structure.SecurityConfig security_config = 31;
  if (this->has_security_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::security_config(this), target, stream);
  }

  // uint32 num_ent = 40;
  if (this->num_ent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(40, this->_internal_num_ent(), target);
  }

  // uint32 rlc_ul_sap_id = 43;
  if (this->rlc_ul_sap_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(43, this->_internal_rlc_ul_sap_id(), target);
  }

  // uint32 rlc_dl_sap_id = 44;
  if (this->rlc_dl_sap_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(44, this->_internal_rlc_dl_sap_id(), target);
  }

  // repeated .structure.PDCPAddCfgEnt config_list = 50;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_config_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(50, this->_internal_config_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srvEbm.AddPDCPConfigReq)
  return target;
}

size_t AddPDCPConfigReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srvEbm.AddPDCPConfigReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .structure.PDCPAddCfgEnt config_list = 50;
  total_size += 2UL * this->_internal_config_list_size();
  for (const auto& msg : this->config_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hdr_);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cp_up_hdr_);
  }

  // .structure.SecurityConfig security_config = 31;
  if (this->has_security_config()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *security_config_);
  }

  // bool is_ho = 30;
  if (this->is_ho() != 0) {
    total_size += 2 + 1;
  }

  // uint32 num_ent = 40;
  if (this->num_ent() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_ent());
  }

  // uint32 rlc_ul_sap_id = 43;
  if (this->rlc_ul_sap_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rlc_ul_sap_id());
  }

  // uint32 rlc_dl_sap_id = 44;
  if (this->rlc_dl_sap_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rlc_dl_sap_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddPDCPConfigReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srvEbm.AddPDCPConfigReq)
  GOOGLE_DCHECK_NE(&from, this);
  const AddPDCPConfigReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddPDCPConfigReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srvEbm.AddPDCPConfigReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srvEbm.AddPDCPConfigReq)
    MergeFrom(*source);
  }
}

void AddPDCPConfigReq::MergeFrom(const AddPDCPConfigReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srvEbm.AddPDCPConfigReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  config_list_.MergeFrom(from.config_list_);
  if (from.has_hdr()) {
    _internal_mutable_hdr()->::mhdr::MsgHdr::MergeFrom(from._internal_hdr());
  }
  if (from.has_cp_up_hdr()) {
    _internal_mutable_cp_up_hdr()->::structure::CpUpHdr::MergeFrom(from._internal_cp_up_hdr());
  }
  if (from.has_security_config()) {
    _internal_mutable_security_config()->::structure::SecurityConfig::MergeFrom(from._internal_security_config());
  }
  if (from.is_ho() != 0) {
    _internal_set_is_ho(from._internal_is_ho());
  }
  if (from.num_ent() != 0) {
    _internal_set_num_ent(from._internal_num_ent());
  }
  if (from.rlc_ul_sap_id() != 0) {
    _internal_set_rlc_ul_sap_id(from._internal_rlc_ul_sap_id());
  }
  if (from.rlc_dl_sap_id() != 0) {
    _internal_set_rlc_dl_sap_id(from._internal_rlc_dl_sap_id());
  }
}

void AddPDCPConfigReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srvEbm.AddPDCPConfigReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddPDCPConfigReq::CopyFrom(const AddPDCPConfigReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srvEbm.AddPDCPConfigReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPDCPConfigReq::IsInitialized() const {
  return true;
}

void AddPDCPConfigReq::InternalSwap(AddPDCPConfigReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  config_list_.InternalSwap(&other->config_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddPDCPConfigReq, rlc_dl_sap_id_)
      + sizeof(AddPDCPConfigReq::rlc_dl_sap_id_)
      - PROTOBUF_FIELD_OFFSET(AddPDCPConfigReq, hdr_)>(
          reinterpret_cast<char*>(&hdr_),
          reinterpret_cast<char*>(&other->hdr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddPDCPConfigReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModifyPDCPConfigReq::InitAsDefaultInstance() {
  ::srvEbm::_ModifyPDCPConfigReq_default_instance_._instance.get_mutable()->hdr_ = const_cast< ::mhdr::MsgHdr*>(
      ::mhdr::MsgHdr::internal_default_instance());
  ::srvEbm::_ModifyPDCPConfigReq_default_instance_._instance.get_mutable()->cp_up_hdr_ = const_cast< ::structure::CpUpHdr*>(
      ::structure::CpUpHdr::internal_default_instance());
  ::srvEbm::_ModifyPDCPConfigReq_default_instance_._instance.get_mutable()->security_config_ = const_cast< ::structure::SecurityConfig*>(
      ::structure::SecurityConfig::internal_default_instance());
}
class ModifyPDCPConfigReq::_Internal {
 public:
  static const ::mhdr::MsgHdr& hdr(const ModifyPDCPConfigReq* msg);
  static const ::structure::CpUpHdr& cp_up_hdr(const ModifyPDCPConfigReq* msg);
  static const ::structure::SecurityConfig& security_config(const ModifyPDCPConfigReq* msg);
};

const ::mhdr::MsgHdr&
ModifyPDCPConfigReq::_Internal::hdr(const ModifyPDCPConfigReq* msg) {
  return *msg->hdr_;
}
const ::structure::CpUpHdr&
ModifyPDCPConfigReq::_Internal::cp_up_hdr(const ModifyPDCPConfigReq* msg) {
  return *msg->cp_up_hdr_;
}
const ::structure::SecurityConfig&
ModifyPDCPConfigReq::_Internal::security_config(const ModifyPDCPConfigReq* msg) {
  return *msg->security_config_;
}
void ModifyPDCPConfigReq::clear_hdr() {
  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
}
void ModifyPDCPConfigReq::clear_cp_up_hdr() {
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
}
void ModifyPDCPConfigReq::clear_security_config() {
  if (GetArena() == nullptr && security_config_ != nullptr) {
    delete security_config_;
  }
  security_config_ = nullptr;
}
void ModifyPDCPConfigReq::clear_config_list() {
  config_list_.Clear();
}
ModifyPDCPConfigReq::ModifyPDCPConfigReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  config_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srvEbm.ModifyPDCPConfigReq)
}
ModifyPDCPConfigReq::ModifyPDCPConfigReq(const ModifyPDCPConfigReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      config_list_(from.config_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hdr()) {
    hdr_ = new ::mhdr::MsgHdr(*from.hdr_);
  } else {
    hdr_ = nullptr;
  }
  if (from._internal_has_cp_up_hdr()) {
    cp_up_hdr_ = new ::structure::CpUpHdr(*from.cp_up_hdr_);
  } else {
    cp_up_hdr_ = nullptr;
  }
  if (from._internal_has_security_config()) {
    security_config_ = new ::structure::SecurityConfig(*from.security_config_);
  } else {
    security_config_ = nullptr;
  }
  ::memcpy(&is_ho_, &from.is_ho_,
    static_cast<size_t>(reinterpret_cast<char*>(&new_cell_id_) -
    reinterpret_cast<char*>(&is_ho_)) + sizeof(new_cell_id_));
  // @@protoc_insertion_point(copy_constructor:srvEbm.ModifyPDCPConfigReq)
}

void ModifyPDCPConfigReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModifyPDCPConfigReq_srvEbm_2eproto.base);
  ::memset(&hdr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&new_cell_id_) -
      reinterpret_cast<char*>(&hdr_)) + sizeof(new_cell_id_));
}

ModifyPDCPConfigReq::~ModifyPDCPConfigReq() {
  // @@protoc_insertion_point(destructor:srvEbm.ModifyPDCPConfigReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModifyPDCPConfigReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete hdr_;
  if (this != internal_default_instance()) delete cp_up_hdr_;
  if (this != internal_default_instance()) delete security_config_;
}

void ModifyPDCPConfigReq::ArenaDtor(void* object) {
  ModifyPDCPConfigReq* _this = reinterpret_cast< ModifyPDCPConfigReq* >(object);
  (void)_this;
}
void ModifyPDCPConfigReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModifyPDCPConfigReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModifyPDCPConfigReq& ModifyPDCPConfigReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModifyPDCPConfigReq_srvEbm_2eproto.base);
  return *internal_default_instance();
}


void ModifyPDCPConfigReq::Clear() {
// @@protoc_insertion_point(message_clear_start:srvEbm.ModifyPDCPConfigReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  config_list_.Clear();
  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
  if (GetArena() == nullptr && security_config_ != nullptr) {
    delete security_config_;
  }
  security_config_ = nullptr;
  ::memset(&is_ho_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&new_cell_id_) -
      reinterpret_cast<char*>(&is_ho_)) + sizeof(new_cell_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModifyPDCPConfigReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mhdr.MsgHdr hdr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.CpUpHdr cp_up_hdr = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_cp_up_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_ho = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          is_ho_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.SecurityConfig security_config = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_security_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_ent = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          num_ent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 new_cp_ue_id = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          new_cp_ue_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 new_cell_id = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          new_cell_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .structure.PDCPModCfgEnt config_list = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_config_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<402>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModifyPDCPConfigReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srvEbm.ModifyPDCPConfigReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::hdr(this), target, stream);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::cp_up_hdr(this), target, stream);
  }

  // bool is_ho = 30;
  if (this->is_ho() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(30, this->_internal_is_ho(), target);
  }

  // .structure.SecurityConfig security_config = 31;
  if (this->has_security_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::security_config(this), target, stream);
  }

  // uint32 num_ent = 40;
  if (this->num_ent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(40, this->_internal_num_ent(), target);
  }

  // uint32 new_cp_ue_id = 43;
  if (this->new_cp_ue_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(43, this->_internal_new_cp_ue_id(), target);
  }

  // uint32 new_cell_id = 44;
  if (this->new_cell_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(44, this->_internal_new_cell_id(), target);
  }

  // repeated .structure.PDCPModCfgEnt config_list = 50;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_config_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(50, this->_internal_config_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srvEbm.ModifyPDCPConfigReq)
  return target;
}

size_t ModifyPDCPConfigReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srvEbm.ModifyPDCPConfigReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .structure.PDCPModCfgEnt config_list = 50;
  total_size += 2UL * this->_internal_config_list_size();
  for (const auto& msg : this->config_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hdr_);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cp_up_hdr_);
  }

  // .structure.SecurityConfig security_config = 31;
  if (this->has_security_config()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *security_config_);
  }

  // bool is_ho = 30;
  if (this->is_ho() != 0) {
    total_size += 2 + 1;
  }

  // uint32 num_ent = 40;
  if (this->num_ent() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_ent());
  }

  // uint32 new_cp_ue_id = 43;
  if (this->new_cp_ue_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_new_cp_ue_id());
  }

  // uint32 new_cell_id = 44;
  if (this->new_cell_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_new_cell_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModifyPDCPConfigReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srvEbm.ModifyPDCPConfigReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ModifyPDCPConfigReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModifyPDCPConfigReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srvEbm.ModifyPDCPConfigReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srvEbm.ModifyPDCPConfigReq)
    MergeFrom(*source);
  }
}

void ModifyPDCPConfigReq::MergeFrom(const ModifyPDCPConfigReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srvEbm.ModifyPDCPConfigReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  config_list_.MergeFrom(from.config_list_);
  if (from.has_hdr()) {
    _internal_mutable_hdr()->::mhdr::MsgHdr::MergeFrom(from._internal_hdr());
  }
  if (from.has_cp_up_hdr()) {
    _internal_mutable_cp_up_hdr()->::structure::CpUpHdr::MergeFrom(from._internal_cp_up_hdr());
  }
  if (from.has_security_config()) {
    _internal_mutable_security_config()->::structure::SecurityConfig::MergeFrom(from._internal_security_config());
  }
  if (from.is_ho() != 0) {
    _internal_set_is_ho(from._internal_is_ho());
  }
  if (from.num_ent() != 0) {
    _internal_set_num_ent(from._internal_num_ent());
  }
  if (from.new_cp_ue_id() != 0) {
    _internal_set_new_cp_ue_id(from._internal_new_cp_ue_id());
  }
  if (from.new_cell_id() != 0) {
    _internal_set_new_cell_id(from._internal_new_cell_id());
  }
}

void ModifyPDCPConfigReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srvEbm.ModifyPDCPConfigReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyPDCPConfigReq::CopyFrom(const ModifyPDCPConfigReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srvEbm.ModifyPDCPConfigReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyPDCPConfigReq::IsInitialized() const {
  return true;
}

void ModifyPDCPConfigReq::InternalSwap(ModifyPDCPConfigReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  config_list_.InternalSwap(&other->config_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModifyPDCPConfigReq, new_cell_id_)
      + sizeof(ModifyPDCPConfigReq::new_cell_id_)
      - PROTOBUF_FIELD_OFFSET(ModifyPDCPConfigReq, hdr_)>(
          reinterpret_cast<char*>(&hdr_),
          reinterpret_cast<char*>(&other->hdr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModifyPDCPConfigReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TunnelStateChangeReq::InitAsDefaultInstance() {
  ::srvEbm::_TunnelStateChangeReq_default_instance_._instance.get_mutable()->hdr_ = const_cast< ::mhdr::MsgHdr*>(
      ::mhdr::MsgHdr::internal_default_instance());
  ::srvEbm::_TunnelStateChangeReq_default_instance_._instance.get_mutable()->cp_up_hdr_ = const_cast< ::structure::CpUpHdr*>(
      ::structure::CpUpHdr::internal_default_instance());
  ::srvEbm::_TunnelStateChangeReq_default_instance_._instance.get_mutable()->tunnel_state_info_ = const_cast< ::structure::TunnelStateInfo*>(
      ::structure::TunnelStateInfo::internal_default_instance());
}
class TunnelStateChangeReq::_Internal {
 public:
  static const ::mhdr::MsgHdr& hdr(const TunnelStateChangeReq* msg);
  static const ::structure::CpUpHdr& cp_up_hdr(const TunnelStateChangeReq* msg);
  static const ::structure::TunnelStateInfo& tunnel_state_info(const TunnelStateChangeReq* msg);
};

const ::mhdr::MsgHdr&
TunnelStateChangeReq::_Internal::hdr(const TunnelStateChangeReq* msg) {
  return *msg->hdr_;
}
const ::structure::CpUpHdr&
TunnelStateChangeReq::_Internal::cp_up_hdr(const TunnelStateChangeReq* msg) {
  return *msg->cp_up_hdr_;
}
const ::structure::TunnelStateInfo&
TunnelStateChangeReq::_Internal::tunnel_state_info(const TunnelStateChangeReq* msg) {
  return *msg->tunnel_state_info_;
}
void TunnelStateChangeReq::clear_hdr() {
  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
}
void TunnelStateChangeReq::clear_cp_up_hdr() {
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
}
void TunnelStateChangeReq::clear_tunnel_state_info() {
  if (GetArena() == nullptr && tunnel_state_info_ != nullptr) {
    delete tunnel_state_info_;
  }
  tunnel_state_info_ = nullptr;
}
TunnelStateChangeReq::TunnelStateChangeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srvEbm.TunnelStateChangeReq)
}
TunnelStateChangeReq::TunnelStateChangeReq(const TunnelStateChangeReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hdr()) {
    hdr_ = new ::mhdr::MsgHdr(*from.hdr_);
  } else {
    hdr_ = nullptr;
  }
  if (from._internal_has_cp_up_hdr()) {
    cp_up_hdr_ = new ::structure::CpUpHdr(*from.cp_up_hdr_);
  } else {
    cp_up_hdr_ = nullptr;
  }
  if (from._internal_has_tunnel_state_info()) {
    tunnel_state_info_ = new ::structure::TunnelStateInfo(*from.tunnel_state_info_);
  } else {
    tunnel_state_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:srvEbm.TunnelStateChangeReq)
}

void TunnelStateChangeReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TunnelStateChangeReq_srvEbm_2eproto.base);
  ::memset(&hdr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tunnel_state_info_) -
      reinterpret_cast<char*>(&hdr_)) + sizeof(tunnel_state_info_));
}

TunnelStateChangeReq::~TunnelStateChangeReq() {
  // @@protoc_insertion_point(destructor:srvEbm.TunnelStateChangeReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TunnelStateChangeReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete hdr_;
  if (this != internal_default_instance()) delete cp_up_hdr_;
  if (this != internal_default_instance()) delete tunnel_state_info_;
}

void TunnelStateChangeReq::ArenaDtor(void* object) {
  TunnelStateChangeReq* _this = reinterpret_cast< TunnelStateChangeReq* >(object);
  (void)_this;
}
void TunnelStateChangeReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TunnelStateChangeReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TunnelStateChangeReq& TunnelStateChangeReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TunnelStateChangeReq_srvEbm_2eproto.base);
  return *internal_default_instance();
}


void TunnelStateChangeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:srvEbm.TunnelStateChangeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
  if (GetArena() == nullptr && tunnel_state_info_ != nullptr) {
    delete tunnel_state_info_;
  }
  tunnel_state_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TunnelStateChangeReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mhdr.MsgHdr hdr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.CpUpHdr cp_up_hdr = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_cp_up_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.TunnelStateInfo tunnel_state_info = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_tunnel_state_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TunnelStateChangeReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srvEbm.TunnelStateChangeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::hdr(this), target, stream);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::cp_up_hdr(this), target, stream);
  }

  // .structure.TunnelStateInfo tunnel_state_info = 30;
  if (this->has_tunnel_state_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::tunnel_state_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srvEbm.TunnelStateChangeReq)
  return target;
}

size_t TunnelStateChangeReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srvEbm.TunnelStateChangeReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hdr_);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cp_up_hdr_);
  }

  // .structure.TunnelStateInfo tunnel_state_info = 30;
  if (this->has_tunnel_state_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tunnel_state_info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TunnelStateChangeReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srvEbm.TunnelStateChangeReq)
  GOOGLE_DCHECK_NE(&from, this);
  const TunnelStateChangeReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TunnelStateChangeReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srvEbm.TunnelStateChangeReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srvEbm.TunnelStateChangeReq)
    MergeFrom(*source);
  }
}

void TunnelStateChangeReq::MergeFrom(const TunnelStateChangeReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srvEbm.TunnelStateChangeReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hdr()) {
    _internal_mutable_hdr()->::mhdr::MsgHdr::MergeFrom(from._internal_hdr());
  }
  if (from.has_cp_up_hdr()) {
    _internal_mutable_cp_up_hdr()->::structure::CpUpHdr::MergeFrom(from._internal_cp_up_hdr());
  }
  if (from.has_tunnel_state_info()) {
    _internal_mutable_tunnel_state_info()->::structure::TunnelStateInfo::MergeFrom(from._internal_tunnel_state_info());
  }
}

void TunnelStateChangeReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srvEbm.TunnelStateChangeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TunnelStateChangeReq::CopyFrom(const TunnelStateChangeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srvEbm.TunnelStateChangeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TunnelStateChangeReq::IsInitialized() const {
  return true;
}

void TunnelStateChangeReq::InternalSwap(TunnelStateChangeReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TunnelStateChangeReq, tunnel_state_info_)
      + sizeof(TunnelStateChangeReq::tunnel_state_info_)
      - PROTOBUF_FIELD_OFFSET(TunnelStateChangeReq, hdr_)>(
          reinterpret_cast<char*>(&hdr_),
          reinterpret_cast<char*>(&other->hdr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TunnelStateChangeReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IpAddressConfigMsg::InitAsDefaultInstance() {
  ::srvEbm::_IpAddressConfigMsg_default_instance_._instance.get_mutable()->hdr_ = const_cast< ::mhdr::MsgHdr*>(
      ::mhdr::MsgHdr::internal_default_instance());
  ::srvEbm::_IpAddressConfigMsg_default_instance_._instance.get_mutable()->address_ = const_cast< ::common::IpAddress*>(
      ::common::IpAddress::internal_default_instance());
}
class IpAddressConfigMsg::_Internal {
 public:
  static const ::mhdr::MsgHdr& hdr(const IpAddressConfigMsg* msg);
  static const ::common::IpAddress& address(const IpAddressConfigMsg* msg);
};

const ::mhdr::MsgHdr&
IpAddressConfigMsg::_Internal::hdr(const IpAddressConfigMsg* msg) {
  return *msg->hdr_;
}
const ::common::IpAddress&
IpAddressConfigMsg::_Internal::address(const IpAddressConfigMsg* msg) {
  return *msg->address_;
}
void IpAddressConfigMsg::clear_hdr() {
  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
}
void IpAddressConfigMsg::clear_address() {
  if (GetArena() == nullptr && address_ != nullptr) {
    delete address_;
  }
  address_ = nullptr;
}
IpAddressConfigMsg::IpAddressConfigMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srvEbm.IpAddressConfigMsg)
}
IpAddressConfigMsg::IpAddressConfigMsg(const IpAddressConfigMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hdr()) {
    hdr_ = new ::mhdr::MsgHdr(*from.hdr_);
  } else {
    hdr_ = nullptr;
  }
  if (from._internal_has_address()) {
    address_ = new ::common::IpAddress(*from.address_);
  } else {
    address_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&type_)) + sizeof(action_));
  // @@protoc_insertion_point(copy_constructor:srvEbm.IpAddressConfigMsg)
}

void IpAddressConfigMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IpAddressConfigMsg_srvEbm_2eproto.base);
  ::memset(&hdr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_) -
      reinterpret_cast<char*>(&hdr_)) + sizeof(action_));
}

IpAddressConfigMsg::~IpAddressConfigMsg() {
  // @@protoc_insertion_point(destructor:srvEbm.IpAddressConfigMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IpAddressConfigMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete hdr_;
  if (this != internal_default_instance()) delete address_;
}

void IpAddressConfigMsg::ArenaDtor(void* object) {
  IpAddressConfigMsg* _this = reinterpret_cast< IpAddressConfigMsg* >(object);
  (void)_this;
}
void IpAddressConfigMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IpAddressConfigMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IpAddressConfigMsg& IpAddressConfigMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IpAddressConfigMsg_srvEbm_2eproto.base);
  return *internal_default_instance();
}


void IpAddressConfigMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:srvEbm.IpAddressConfigMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
  if (GetArena() == nullptr && address_ != nullptr) {
    delete address_;
  }
  address_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_) -
      reinterpret_cast<char*>(&type_)) + sizeof(action_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IpAddressConfigMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mhdr.MsgHdr hdr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.InterfaceType type = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::structure::InterfaceType>(val));
        } else goto handle_unusual;
        continue;
      // .structure.IpAddressAction action = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_action(static_cast<::structure::IpAddressAction>(val));
        } else goto handle_unusual;
        continue;
      // .common.IpAddress address = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_address(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IpAddressConfigMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srvEbm.IpAddressConfigMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::hdr(this), target, stream);
  }

  // .structure.InterfaceType type = 20;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      20, this->_internal_type(), target);
  }

  // .structure.IpAddressAction action = 30;
  if (this->action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      30, this->_internal_action(), target);
  }

  // .common.IpAddress address = 40;
  if (this->has_address()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        40, _Internal::address(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srvEbm.IpAddressConfigMsg)
  return target;
}

size_t IpAddressConfigMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srvEbm.IpAddressConfigMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hdr_);
  }

  // .common.IpAddress address = 40;
  if (this->has_address()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *address_);
  }

  // .structure.InterfaceType type = 20;
  if (this->type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .structure.IpAddressAction action = 30;
  if (this->action() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_action());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IpAddressConfigMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srvEbm.IpAddressConfigMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const IpAddressConfigMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IpAddressConfigMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srvEbm.IpAddressConfigMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srvEbm.IpAddressConfigMsg)
    MergeFrom(*source);
  }
}

void IpAddressConfigMsg::MergeFrom(const IpAddressConfigMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srvEbm.IpAddressConfigMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hdr()) {
    _internal_mutable_hdr()->::mhdr::MsgHdr::MergeFrom(from._internal_hdr());
  }
  if (from.has_address()) {
    _internal_mutable_address()->::common::IpAddress::MergeFrom(from._internal_address());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.action() != 0) {
    _internal_set_action(from._internal_action());
  }
}

void IpAddressConfigMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srvEbm.IpAddressConfigMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IpAddressConfigMsg::CopyFrom(const IpAddressConfigMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srvEbm.IpAddressConfigMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IpAddressConfigMsg::IsInitialized() const {
  return true;
}

void IpAddressConfigMsg::InternalSwap(IpAddressConfigMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IpAddressConfigMsg, action_)
      + sizeof(IpAddressConfigMsg::action_)
      - PROTOBUF_FIELD_OFFSET(IpAddressConfigMsg, hdr_)>(
          reinterpret_cast<char*>(&hdr_),
          reinterpret_cast<char*>(&other->hdr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IpAddressConfigMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PathManagementConfigMsg::InitAsDefaultInstance() {
  ::srvEbm::_PathManagementConfigMsg_default_instance_._instance.get_mutable()->hdr_ = const_cast< ::mhdr::MsgHdr*>(
      ::mhdr::MsgHdr::internal_default_instance());
}
class PathManagementConfigMsg::_Internal {
 public:
  static const ::mhdr::MsgHdr& hdr(const PathManagementConfigMsg* msg);
};

const ::mhdr::MsgHdr&
PathManagementConfigMsg::_Internal::hdr(const PathManagementConfigMsg* msg) {
  return *msg->hdr_;
}
void PathManagementConfigMsg::clear_hdr() {
  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
}
PathManagementConfigMsg::PathManagementConfigMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srvEbm.PathManagementConfigMsg)
}
PathManagementConfigMsg::PathManagementConfigMsg(const PathManagementConfigMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hdr()) {
    hdr_ = new ::mhdr::MsgHdr(*from.hdr_);
  } else {
    hdr_ = nullptr;
  }
  ::memcpy(&echo_interval_in_sec_, &from.echo_interval_in_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&path_info_clear_timer_) -
    reinterpret_cast<char*>(&echo_interval_in_sec_)) + sizeof(path_info_clear_timer_));
  // @@protoc_insertion_point(copy_constructor:srvEbm.PathManagementConfigMsg)
}

void PathManagementConfigMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PathManagementConfigMsg_srvEbm_2eproto.base);
  ::memset(&hdr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&path_info_clear_timer_) -
      reinterpret_cast<char*>(&hdr_)) + sizeof(path_info_clear_timer_));
}

PathManagementConfigMsg::~PathManagementConfigMsg() {
  // @@protoc_insertion_point(destructor:srvEbm.PathManagementConfigMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PathManagementConfigMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete hdr_;
}

void PathManagementConfigMsg::ArenaDtor(void* object) {
  PathManagementConfigMsg* _this = reinterpret_cast< PathManagementConfigMsg* >(object);
  (void)_this;
}
void PathManagementConfigMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PathManagementConfigMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PathManagementConfigMsg& PathManagementConfigMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PathManagementConfigMsg_srvEbm_2eproto.base);
  return *internal_default_instance();
}


void PathManagementConfigMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:srvEbm.PathManagementConfigMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
  ::memset(&echo_interval_in_sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&path_info_clear_timer_) -
      reinterpret_cast<char*>(&echo_interval_in_sec_)) + sizeof(path_info_clear_timer_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PathManagementConfigMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mhdr.MsgHdr hdr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 echo_interval_in_sec = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          echo_interval_in_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 gtpu_t3_resp_timer = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          gtpu_t3_resp_timer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 gtpu_n3_req = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          gtpu_n3_req_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 path_info_clear_timer = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          path_info_clear_timer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PathManagementConfigMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srvEbm.PathManagementConfigMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::hdr(this), target, stream);
  }

  // uint32 echo_interval_in_sec = 20;
  if (this->echo_interval_in_sec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_echo_interval_in_sec(), target);
  }

  // uint32 gtpu_t3_resp_timer = 30;
  if (this->gtpu_t3_resp_timer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_gtpu_t3_resp_timer(), target);
  }

  // uint32 gtpu_n3_req = 40;
  if (this->gtpu_n3_req() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(40, this->_internal_gtpu_n3_req(), target);
  }

  // uint32 path_info_clear_timer = 50;
  if (this->path_info_clear_timer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(50, this->_internal_path_info_clear_timer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srvEbm.PathManagementConfigMsg)
  return target;
}

size_t PathManagementConfigMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srvEbm.PathManagementConfigMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hdr_);
  }

  // uint32 echo_interval_in_sec = 20;
  if (this->echo_interval_in_sec() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_echo_interval_in_sec());
  }

  // uint32 gtpu_t3_resp_timer = 30;
  if (this->gtpu_t3_resp_timer() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gtpu_t3_resp_timer());
  }

  // uint32 gtpu_n3_req = 40;
  if (this->gtpu_n3_req() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gtpu_n3_req());
  }

  // uint32 path_info_clear_timer = 50;
  if (this->path_info_clear_timer() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_path_info_clear_timer());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PathManagementConfigMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srvEbm.PathManagementConfigMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const PathManagementConfigMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PathManagementConfigMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srvEbm.PathManagementConfigMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srvEbm.PathManagementConfigMsg)
    MergeFrom(*source);
  }
}

void PathManagementConfigMsg::MergeFrom(const PathManagementConfigMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srvEbm.PathManagementConfigMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hdr()) {
    _internal_mutable_hdr()->::mhdr::MsgHdr::MergeFrom(from._internal_hdr());
  }
  if (from.echo_interval_in_sec() != 0) {
    _internal_set_echo_interval_in_sec(from._internal_echo_interval_in_sec());
  }
  if (from.gtpu_t3_resp_timer() != 0) {
    _internal_set_gtpu_t3_resp_timer(from._internal_gtpu_t3_resp_timer());
  }
  if (from.gtpu_n3_req() != 0) {
    _internal_set_gtpu_n3_req(from._internal_gtpu_n3_req());
  }
  if (from.path_info_clear_timer() != 0) {
    _internal_set_path_info_clear_timer(from._internal_path_info_clear_timer());
  }
}

void PathManagementConfigMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srvEbm.PathManagementConfigMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathManagementConfigMsg::CopyFrom(const PathManagementConfigMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srvEbm.PathManagementConfigMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathManagementConfigMsg::IsInitialized() const {
  return true;
}

void PathManagementConfigMsg::InternalSwap(PathManagementConfigMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PathManagementConfigMsg, path_info_clear_timer_)
      + sizeof(PathManagementConfigMsg::path_info_clear_timer_)
      - PROTOBUF_FIELD_OFFSET(PathManagementConfigMsg, hdr_)>(
          reinterpret_cast<char*>(&hdr_),
          reinterpret_cast<char*>(&other->hdr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PathManagementConfigMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NotifyPathStatusMsg::InitAsDefaultInstance() {
  ::srvEbm::_NotifyPathStatusMsg_default_instance_._instance.get_mutable()->hdr_ = const_cast< ::mhdr::MsgHdr*>(
      ::mhdr::MsgHdr::internal_default_instance());
  ::srvEbm::_NotifyPathStatusMsg_default_instance_._instance.get_mutable()->local_ip_ = const_cast< ::common::IpAddress*>(
      ::common::IpAddress::internal_default_instance());
  ::srvEbm::_NotifyPathStatusMsg_default_instance_._instance.get_mutable()->remote_ip_ = const_cast< ::common::IpAddress*>(
      ::common::IpAddress::internal_default_instance());
}
class NotifyPathStatusMsg::_Internal {
 public:
  static const ::mhdr::MsgHdr& hdr(const NotifyPathStatusMsg* msg);
  static const ::common::IpAddress& local_ip(const NotifyPathStatusMsg* msg);
  static const ::common::IpAddress& remote_ip(const NotifyPathStatusMsg* msg);
};

const ::mhdr::MsgHdr&
NotifyPathStatusMsg::_Internal::hdr(const NotifyPathStatusMsg* msg) {
  return *msg->hdr_;
}
const ::common::IpAddress&
NotifyPathStatusMsg::_Internal::local_ip(const NotifyPathStatusMsg* msg) {
  return *msg->local_ip_;
}
const ::common::IpAddress&
NotifyPathStatusMsg::_Internal::remote_ip(const NotifyPathStatusMsg* msg) {
  return *msg->remote_ip_;
}
void NotifyPathStatusMsg::clear_hdr() {
  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
}
void NotifyPathStatusMsg::clear_local_ip() {
  if (GetArena() == nullptr && local_ip_ != nullptr) {
    delete local_ip_;
  }
  local_ip_ = nullptr;
}
void NotifyPathStatusMsg::clear_remote_ip() {
  if (GetArena() == nullptr && remote_ip_ != nullptr) {
    delete remote_ip_;
  }
  remote_ip_ = nullptr;
}
void NotifyPathStatusMsg::clear_ue_info() {
  ue_info_.Clear();
}
NotifyPathStatusMsg::NotifyPathStatusMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ue_info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srvEbm.NotifyPathStatusMsg)
}
NotifyPathStatusMsg::NotifyPathStatusMsg(const NotifyPathStatusMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ue_info_(from.ue_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hdr()) {
    hdr_ = new ::mhdr::MsgHdr(*from.hdr_);
  } else {
    hdr_ = nullptr;
  }
  if (from._internal_has_local_ip()) {
    local_ip_ = new ::common::IpAddress(*from.local_ip_);
  } else {
    local_ip_ = nullptr;
  }
  if (from._internal_has_remote_ip()) {
    remote_ip_ = new ::common::IpAddress(*from.remote_ip_);
  } else {
    remote_ip_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&type_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:srvEbm.NotifyPathStatusMsg)
}

void NotifyPathStatusMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NotifyPathStatusMsg_srvEbm_2eproto.base);
  ::memset(&hdr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&hdr_)) + sizeof(status_));
}

NotifyPathStatusMsg::~NotifyPathStatusMsg() {
  // @@protoc_insertion_point(destructor:srvEbm.NotifyPathStatusMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NotifyPathStatusMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete hdr_;
  if (this != internal_default_instance()) delete local_ip_;
  if (this != internal_default_instance()) delete remote_ip_;
}

void NotifyPathStatusMsg::ArenaDtor(void* object) {
  NotifyPathStatusMsg* _this = reinterpret_cast< NotifyPathStatusMsg* >(object);
  (void)_this;
}
void NotifyPathStatusMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NotifyPathStatusMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NotifyPathStatusMsg& NotifyPathStatusMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NotifyPathStatusMsg_srvEbm_2eproto.base);
  return *internal_default_instance();
}


void NotifyPathStatusMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:srvEbm.NotifyPathStatusMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ue_info_.Clear();
  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
  if (GetArena() == nullptr && local_ip_ != nullptr) {
    delete local_ip_;
  }
  local_ip_ = nullptr;
  if (GetArena() == nullptr && remote_ip_ != nullptr) {
    delete remote_ip_;
  }
  remote_ip_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&type_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NotifyPathStatusMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mhdr.MsgHdr hdr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.IpAddress local_ip = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_ip(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.IpAddress remote_ip = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_remote_ip(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.InterfaceType type = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::structure::InterfaceType>(val));
        } else goto handle_unusual;
        continue;
      // .structure.PathStatus status = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::structure::PathStatus>(val));
        } else goto handle_unusual;
        continue;
      // repeated .structure.UeInfo ue_info = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_ue_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<482>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NotifyPathStatusMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srvEbm.NotifyPathStatusMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::hdr(this), target, stream);
  }

  // .common.IpAddress local_ip = 20;
  if (this->has_local_ip()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::local_ip(this), target, stream);
  }

  // .common.IpAddress remote_ip = 30;
  if (this->has_remote_ip()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::remote_ip(this), target, stream);
  }

  // .structure.InterfaceType type = 40;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      40, this->_internal_type(), target);
  }

  // .structure.PathStatus status = 50;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      50, this->_internal_status(), target);
  }

  // repeated .structure.UeInfo ue_info = 60;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ue_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(60, this->_internal_ue_info(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srvEbm.NotifyPathStatusMsg)
  return target;
}

size_t NotifyPathStatusMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srvEbm.NotifyPathStatusMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .structure.UeInfo ue_info = 60;
  total_size += 2UL * this->_internal_ue_info_size();
  for (const auto& msg : this->ue_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hdr_);
  }

  // .common.IpAddress local_ip = 20;
  if (this->has_local_ip()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *local_ip_);
  }

  // .common.IpAddress remote_ip = 30;
  if (this->has_remote_ip()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *remote_ip_);
  }

  // .structure.InterfaceType type = 40;
  if (this->type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .structure.PathStatus status = 50;
  if (this->status() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NotifyPathStatusMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srvEbm.NotifyPathStatusMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const NotifyPathStatusMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NotifyPathStatusMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srvEbm.NotifyPathStatusMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srvEbm.NotifyPathStatusMsg)
    MergeFrom(*source);
  }
}

void NotifyPathStatusMsg::MergeFrom(const NotifyPathStatusMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srvEbm.NotifyPathStatusMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ue_info_.MergeFrom(from.ue_info_);
  if (from.has_hdr()) {
    _internal_mutable_hdr()->::mhdr::MsgHdr::MergeFrom(from._internal_hdr());
  }
  if (from.has_local_ip()) {
    _internal_mutable_local_ip()->::common::IpAddress::MergeFrom(from._internal_local_ip());
  }
  if (from.has_remote_ip()) {
    _internal_mutable_remote_ip()->::common::IpAddress::MergeFrom(from._internal_remote_ip());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void NotifyPathStatusMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srvEbm.NotifyPathStatusMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyPathStatusMsg::CopyFrom(const NotifyPathStatusMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srvEbm.NotifyPathStatusMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyPathStatusMsg::IsInitialized() const {
  return true;
}

void NotifyPathStatusMsg::InternalSwap(NotifyPathStatusMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ue_info_.InternalSwap(&other->ue_info_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NotifyPathStatusMsg, status_)
      + sizeof(NotifyPathStatusMsg::status_)
      - PROTOBUF_FIELD_OFFSET(NotifyPathStatusMsg, hdr_)>(
          reinterpret_cast<char*>(&hdr_),
          reinterpret_cast<char*>(&other->hdr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NotifyPathStatusMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace srvEbm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::srvEbm::SecurityConfigReq* Arena::CreateMaybeMessage< ::srvEbm::SecurityConfigReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srvEbm::SecurityConfigReq >(arena);
}
template<> PROTOBUF_NOINLINE ::srvEbm::CreateTunnelReq* Arena::CreateMaybeMessage< ::srvEbm::CreateTunnelReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srvEbm::CreateTunnelReq >(arena);
}
template<> PROTOBUF_NOINLINE ::srvEbm::ModifyTunnelReq* Arena::CreateMaybeMessage< ::srvEbm::ModifyTunnelReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srvEbm::ModifyTunnelReq >(arena);
}
template<> PROTOBUF_NOINLINE ::srvEbm::DeleteTunnelReq* Arena::CreateMaybeMessage< ::srvEbm::DeleteTunnelReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srvEbm::DeleteTunnelReq >(arena);
}
template<> PROTOBUF_NOINLINE ::srvEbm::AddRbConfigReq* Arena::CreateMaybeMessage< ::srvEbm::AddRbConfigReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srvEbm::AddRbConfigReq >(arena);
}
template<> PROTOBUF_NOINLINE ::srvEbm::ModifyRbConfigReq* Arena::CreateMaybeMessage< ::srvEbm::ModifyRbConfigReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srvEbm::ModifyRbConfigReq >(arena);
}
template<> PROTOBUF_NOINLINE ::srvEbm::DeleteRbConfigReq* Arena::CreateMaybeMessage< ::srvEbm::DeleteRbConfigReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srvEbm::DeleteRbConfigReq >(arena);
}
template<> PROTOBUF_NOINLINE ::srvEbm::PauseResumeDataReq* Arena::CreateMaybeMessage< ::srvEbm::PauseResumeDataReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srvEbm::PauseResumeDataReq >(arena);
}
template<> PROTOBUF_NOINLINE ::srvEbm::PDCPSduStatusReq* Arena::CreateMaybeMessage< ::srvEbm::PDCPSduStatusReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srvEbm::PDCPSduStatusReq >(arena);
}
template<> PROTOBUF_NOINLINE ::srvEbm::DataForwardingReq* Arena::CreateMaybeMessage< ::srvEbm::DataForwardingReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srvEbm::DataForwardingReq >(arena);
}
template<> PROTOBUF_NOINLINE ::srvEbm::UeInactivityTimerReq* Arena::CreateMaybeMessage< ::srvEbm::UeInactivityTimerReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srvEbm::UeInactivityTimerReq >(arena);
}
template<> PROTOBUF_NOINLINE ::srvEbm::AddPDCPConfigReq* Arena::CreateMaybeMessage< ::srvEbm::AddPDCPConfigReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srvEbm::AddPDCPConfigReq >(arena);
}
template<> PROTOBUF_NOINLINE ::srvEbm::ModifyPDCPConfigReq* Arena::CreateMaybeMessage< ::srvEbm::ModifyPDCPConfigReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srvEbm::ModifyPDCPConfigReq >(arena);
}
template<> PROTOBUF_NOINLINE ::srvEbm::TunnelStateChangeReq* Arena::CreateMaybeMessage< ::srvEbm::TunnelStateChangeReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srvEbm::TunnelStateChangeReq >(arena);
}
template<> PROTOBUF_NOINLINE ::srvEbm::IpAddressConfigMsg* Arena::CreateMaybeMessage< ::srvEbm::IpAddressConfigMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srvEbm::IpAddressConfigMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::srvEbm::PathManagementConfigMsg* Arena::CreateMaybeMessage< ::srvEbm::PathManagementConfigMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srvEbm::PathManagementConfigMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::srvEbm::NotifyPathStatusMsg* Arena::CreateMaybeMessage< ::srvEbm::NotifyPathStatusMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srvEbm::NotifyPathStatusMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
