// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: srvCp.proto

#include "srvCp.pb.h"
#include "srvCp.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace srvCp {

static const char* Cp_method_names[] = {
  "/srvCp.Cp/SubmitSecurityConfigCfm",
  "/srvCp.Cp/SubmitCreateTunnelCfm",
  "/srvCp.Cp/SubmitModifyTunnelCfm",
  "/srvCp.Cp/SubmitDeleteTunnelCfm",
  "/srvCp.Cp/SubmitAddRbConfigCfm",
  "/srvCp.Cp/SubmitModifyRbConfigCfm",
  "/srvCp.Cp/SubmitDeleteRbConfigCfm",
  "/srvCp.Cp/SubmitPDCPSduStatusCfm",
  "/srvCp.Cp/SubmitAddPDCPConfigCfm",
  "/srvCp.Cp/SubmitModifyPDCPConfigCfm",
};

std::unique_ptr< Cp::Stub> Cp::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Cp::Stub> stub(new Cp::Stub(channel));
  return stub;
}

Cp::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SubmitSecurityConfigCfm_(Cp_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubmitCreateTunnelCfm_(Cp_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubmitModifyTunnelCfm_(Cp_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubmitDeleteTunnelCfm_(Cp_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubmitAddRbConfigCfm_(Cp_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubmitModifyRbConfigCfm_(Cp_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubmitDeleteRbConfigCfm_(Cp_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubmitPDCPSduStatusCfm_(Cp_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubmitAddPDCPConfigCfm_(Cp_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubmitModifyPDCPConfigCfm_(Cp_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Cp::Stub::SubmitSecurityConfigCfm(::grpc::ClientContext* context, const ::srvCp::SecurityConfigCfm& request, ::srvCp::CfmReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::srvCp::SecurityConfigCfm, ::srvCp::CfmReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubmitSecurityConfigCfm_, context, request, response);
}

void Cp::Stub::experimental_async::SubmitSecurityConfigCfm(::grpc::ClientContext* context, const ::srvCp::SecurityConfigCfm* request, ::srvCp::CfmReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::srvCp::SecurityConfigCfm, ::srvCp::CfmReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitSecurityConfigCfm_, context, request, response, std::move(f));
}

void Cp::Stub::experimental_async::SubmitSecurityConfigCfm(::grpc::ClientContext* context, const ::srvCp::SecurityConfigCfm* request, ::srvCp::CfmReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitSecurityConfigCfm_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>* Cp::Stub::PrepareAsyncSubmitSecurityConfigCfmRaw(::grpc::ClientContext* context, const ::srvCp::SecurityConfigCfm& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::srvCp::CfmReply>::Create(channel_.get(), cq, rpcmethod_SubmitSecurityConfigCfm_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>* Cp::Stub::AsyncSubmitSecurityConfigCfmRaw(::grpc::ClientContext* context, const ::srvCp::SecurityConfigCfm& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubmitSecurityConfigCfmRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Cp::Stub::SubmitCreateTunnelCfm(::grpc::ClientContext* context, const ::srvCp::CreateTunnelCfm& request, ::srvCp::CfmReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::srvCp::CreateTunnelCfm, ::srvCp::CfmReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubmitCreateTunnelCfm_, context, request, response);
}

void Cp::Stub::experimental_async::SubmitCreateTunnelCfm(::grpc::ClientContext* context, const ::srvCp::CreateTunnelCfm* request, ::srvCp::CfmReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::srvCp::CreateTunnelCfm, ::srvCp::CfmReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitCreateTunnelCfm_, context, request, response, std::move(f));
}

void Cp::Stub::experimental_async::SubmitCreateTunnelCfm(::grpc::ClientContext* context, const ::srvCp::CreateTunnelCfm* request, ::srvCp::CfmReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitCreateTunnelCfm_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>* Cp::Stub::PrepareAsyncSubmitCreateTunnelCfmRaw(::grpc::ClientContext* context, const ::srvCp::CreateTunnelCfm& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::srvCp::CfmReply>::Create(channel_.get(), cq, rpcmethod_SubmitCreateTunnelCfm_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>* Cp::Stub::AsyncSubmitCreateTunnelCfmRaw(::grpc::ClientContext* context, const ::srvCp::CreateTunnelCfm& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubmitCreateTunnelCfmRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Cp::Stub::SubmitModifyTunnelCfm(::grpc::ClientContext* context, const ::srvCp::ModifyTunnelCfm& request, ::srvCp::CfmReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::srvCp::ModifyTunnelCfm, ::srvCp::CfmReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubmitModifyTunnelCfm_, context, request, response);
}

void Cp::Stub::experimental_async::SubmitModifyTunnelCfm(::grpc::ClientContext* context, const ::srvCp::ModifyTunnelCfm* request, ::srvCp::CfmReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::srvCp::ModifyTunnelCfm, ::srvCp::CfmReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitModifyTunnelCfm_, context, request, response, std::move(f));
}

void Cp::Stub::experimental_async::SubmitModifyTunnelCfm(::grpc::ClientContext* context, const ::srvCp::ModifyTunnelCfm* request, ::srvCp::CfmReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitModifyTunnelCfm_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>* Cp::Stub::PrepareAsyncSubmitModifyTunnelCfmRaw(::grpc::ClientContext* context, const ::srvCp::ModifyTunnelCfm& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::srvCp::CfmReply>::Create(channel_.get(), cq, rpcmethod_SubmitModifyTunnelCfm_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>* Cp::Stub::AsyncSubmitModifyTunnelCfmRaw(::grpc::ClientContext* context, const ::srvCp::ModifyTunnelCfm& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubmitModifyTunnelCfmRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Cp::Stub::SubmitDeleteTunnelCfm(::grpc::ClientContext* context, const ::srvCp::DeleteTunnelCfm& request, ::srvCp::CfmReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::srvCp::DeleteTunnelCfm, ::srvCp::CfmReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubmitDeleteTunnelCfm_, context, request, response);
}

void Cp::Stub::experimental_async::SubmitDeleteTunnelCfm(::grpc::ClientContext* context, const ::srvCp::DeleteTunnelCfm* request, ::srvCp::CfmReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::srvCp::DeleteTunnelCfm, ::srvCp::CfmReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitDeleteTunnelCfm_, context, request, response, std::move(f));
}

void Cp::Stub::experimental_async::SubmitDeleteTunnelCfm(::grpc::ClientContext* context, const ::srvCp::DeleteTunnelCfm* request, ::srvCp::CfmReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitDeleteTunnelCfm_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>* Cp::Stub::PrepareAsyncSubmitDeleteTunnelCfmRaw(::grpc::ClientContext* context, const ::srvCp::DeleteTunnelCfm& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::srvCp::CfmReply>::Create(channel_.get(), cq, rpcmethod_SubmitDeleteTunnelCfm_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>* Cp::Stub::AsyncSubmitDeleteTunnelCfmRaw(::grpc::ClientContext* context, const ::srvCp::DeleteTunnelCfm& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubmitDeleteTunnelCfmRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Cp::Stub::SubmitAddRbConfigCfm(::grpc::ClientContext* context, const ::srvCp::AddRbConfigCfm& request, ::srvCp::CfmReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::srvCp::AddRbConfigCfm, ::srvCp::CfmReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubmitAddRbConfigCfm_, context, request, response);
}

void Cp::Stub::experimental_async::SubmitAddRbConfigCfm(::grpc::ClientContext* context, const ::srvCp::AddRbConfigCfm* request, ::srvCp::CfmReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::srvCp::AddRbConfigCfm, ::srvCp::CfmReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitAddRbConfigCfm_, context, request, response, std::move(f));
}

void Cp::Stub::experimental_async::SubmitAddRbConfigCfm(::grpc::ClientContext* context, const ::srvCp::AddRbConfigCfm* request, ::srvCp::CfmReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitAddRbConfigCfm_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>* Cp::Stub::PrepareAsyncSubmitAddRbConfigCfmRaw(::grpc::ClientContext* context, const ::srvCp::AddRbConfigCfm& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::srvCp::CfmReply>::Create(channel_.get(), cq, rpcmethod_SubmitAddRbConfigCfm_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>* Cp::Stub::AsyncSubmitAddRbConfigCfmRaw(::grpc::ClientContext* context, const ::srvCp::AddRbConfigCfm& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubmitAddRbConfigCfmRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Cp::Stub::SubmitModifyRbConfigCfm(::grpc::ClientContext* context, const ::srvCp::ModifyRbConfigCfm& request, ::srvCp::CfmReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::srvCp::ModifyRbConfigCfm, ::srvCp::CfmReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubmitModifyRbConfigCfm_, context, request, response);
}

void Cp::Stub::experimental_async::SubmitModifyRbConfigCfm(::grpc::ClientContext* context, const ::srvCp::ModifyRbConfigCfm* request, ::srvCp::CfmReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::srvCp::ModifyRbConfigCfm, ::srvCp::CfmReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitModifyRbConfigCfm_, context, request, response, std::move(f));
}

void Cp::Stub::experimental_async::SubmitModifyRbConfigCfm(::grpc::ClientContext* context, const ::srvCp::ModifyRbConfigCfm* request, ::srvCp::CfmReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitModifyRbConfigCfm_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>* Cp::Stub::PrepareAsyncSubmitModifyRbConfigCfmRaw(::grpc::ClientContext* context, const ::srvCp::ModifyRbConfigCfm& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::srvCp::CfmReply>::Create(channel_.get(), cq, rpcmethod_SubmitModifyRbConfigCfm_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>* Cp::Stub::AsyncSubmitModifyRbConfigCfmRaw(::grpc::ClientContext* context, const ::srvCp::ModifyRbConfigCfm& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubmitModifyRbConfigCfmRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Cp::Stub::SubmitDeleteRbConfigCfm(::grpc::ClientContext* context, const ::srvCp::DeleteRbConfigCfm& request, ::srvCp::CfmReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::srvCp::DeleteRbConfigCfm, ::srvCp::CfmReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubmitDeleteRbConfigCfm_, context, request, response);
}

void Cp::Stub::experimental_async::SubmitDeleteRbConfigCfm(::grpc::ClientContext* context, const ::srvCp::DeleteRbConfigCfm* request, ::srvCp::CfmReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::srvCp::DeleteRbConfigCfm, ::srvCp::CfmReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitDeleteRbConfigCfm_, context, request, response, std::move(f));
}

void Cp::Stub::experimental_async::SubmitDeleteRbConfigCfm(::grpc::ClientContext* context, const ::srvCp::DeleteRbConfigCfm* request, ::srvCp::CfmReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitDeleteRbConfigCfm_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>* Cp::Stub::PrepareAsyncSubmitDeleteRbConfigCfmRaw(::grpc::ClientContext* context, const ::srvCp::DeleteRbConfigCfm& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::srvCp::CfmReply>::Create(channel_.get(), cq, rpcmethod_SubmitDeleteRbConfigCfm_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>* Cp::Stub::AsyncSubmitDeleteRbConfigCfmRaw(::grpc::ClientContext* context, const ::srvCp::DeleteRbConfigCfm& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubmitDeleteRbConfigCfmRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Cp::Stub::SubmitPDCPSduStatusCfm(::grpc::ClientContext* context, const ::srvCp::PDCPSduStatusCfm& request, ::srvCp::CfmReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::srvCp::PDCPSduStatusCfm, ::srvCp::CfmReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubmitPDCPSduStatusCfm_, context, request, response);
}

void Cp::Stub::experimental_async::SubmitPDCPSduStatusCfm(::grpc::ClientContext* context, const ::srvCp::PDCPSduStatusCfm* request, ::srvCp::CfmReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::srvCp::PDCPSduStatusCfm, ::srvCp::CfmReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitPDCPSduStatusCfm_, context, request, response, std::move(f));
}

void Cp::Stub::experimental_async::SubmitPDCPSduStatusCfm(::grpc::ClientContext* context, const ::srvCp::PDCPSduStatusCfm* request, ::srvCp::CfmReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitPDCPSduStatusCfm_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>* Cp::Stub::PrepareAsyncSubmitPDCPSduStatusCfmRaw(::grpc::ClientContext* context, const ::srvCp::PDCPSduStatusCfm& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::srvCp::CfmReply>::Create(channel_.get(), cq, rpcmethod_SubmitPDCPSduStatusCfm_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>* Cp::Stub::AsyncSubmitPDCPSduStatusCfmRaw(::grpc::ClientContext* context, const ::srvCp::PDCPSduStatusCfm& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubmitPDCPSduStatusCfmRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Cp::Stub::SubmitAddPDCPConfigCfm(::grpc::ClientContext* context, const ::srvCp::AddPDCPConfigCfm& request, ::srvCp::CfmReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::srvCp::AddPDCPConfigCfm, ::srvCp::CfmReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubmitAddPDCPConfigCfm_, context, request, response);
}

void Cp::Stub::experimental_async::SubmitAddPDCPConfigCfm(::grpc::ClientContext* context, const ::srvCp::AddPDCPConfigCfm* request, ::srvCp::CfmReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::srvCp::AddPDCPConfigCfm, ::srvCp::CfmReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitAddPDCPConfigCfm_, context, request, response, std::move(f));
}

void Cp::Stub::experimental_async::SubmitAddPDCPConfigCfm(::grpc::ClientContext* context, const ::srvCp::AddPDCPConfigCfm* request, ::srvCp::CfmReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitAddPDCPConfigCfm_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>* Cp::Stub::PrepareAsyncSubmitAddPDCPConfigCfmRaw(::grpc::ClientContext* context, const ::srvCp::AddPDCPConfigCfm& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::srvCp::CfmReply>::Create(channel_.get(), cq, rpcmethod_SubmitAddPDCPConfigCfm_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>* Cp::Stub::AsyncSubmitAddPDCPConfigCfmRaw(::grpc::ClientContext* context, const ::srvCp::AddPDCPConfigCfm& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubmitAddPDCPConfigCfmRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Cp::Stub::SubmitModifyPDCPConfigCfm(::grpc::ClientContext* context, const ::srvCp::ModifyPDCPConfigCfm& request, ::srvCp::CfmReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::srvCp::ModifyPDCPConfigCfm, ::srvCp::CfmReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubmitModifyPDCPConfigCfm_, context, request, response);
}

void Cp::Stub::experimental_async::SubmitModifyPDCPConfigCfm(::grpc::ClientContext* context, const ::srvCp::ModifyPDCPConfigCfm* request, ::srvCp::CfmReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::srvCp::ModifyPDCPConfigCfm, ::srvCp::CfmReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitModifyPDCPConfigCfm_, context, request, response, std::move(f));
}

void Cp::Stub::experimental_async::SubmitModifyPDCPConfigCfm(::grpc::ClientContext* context, const ::srvCp::ModifyPDCPConfigCfm* request, ::srvCp::CfmReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitModifyPDCPConfigCfm_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>* Cp::Stub::PrepareAsyncSubmitModifyPDCPConfigCfmRaw(::grpc::ClientContext* context, const ::srvCp::ModifyPDCPConfigCfm& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::srvCp::CfmReply>::Create(channel_.get(), cq, rpcmethod_SubmitModifyPDCPConfigCfm_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>* Cp::Stub::AsyncSubmitModifyPDCPConfigCfmRaw(::grpc::ClientContext* context, const ::srvCp::ModifyPDCPConfigCfm& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubmitModifyPDCPConfigCfmRaw(context, request, cq);
  result->StartCall();
  return result;
}

Cp::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Cp_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Cp::Service, ::srvCp::SecurityConfigCfm, ::srvCp::CfmReply>(
          [](Cp::Service* service,
             ::grpc::ServerContext* ctx,
             const ::srvCp::SecurityConfigCfm* req,
             ::srvCp::CfmReply* resp) {
               return service->SubmitSecurityConfigCfm(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Cp_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Cp::Service, ::srvCp::CreateTunnelCfm, ::srvCp::CfmReply>(
          [](Cp::Service* service,
             ::grpc::ServerContext* ctx,
             const ::srvCp::CreateTunnelCfm* req,
             ::srvCp::CfmReply* resp) {
               return service->SubmitCreateTunnelCfm(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Cp_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Cp::Service, ::srvCp::ModifyTunnelCfm, ::srvCp::CfmReply>(
          [](Cp::Service* service,
             ::grpc::ServerContext* ctx,
             const ::srvCp::ModifyTunnelCfm* req,
             ::srvCp::CfmReply* resp) {
               return service->SubmitModifyTunnelCfm(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Cp_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Cp::Service, ::srvCp::DeleteTunnelCfm, ::srvCp::CfmReply>(
          [](Cp::Service* service,
             ::grpc::ServerContext* ctx,
             const ::srvCp::DeleteTunnelCfm* req,
             ::srvCp::CfmReply* resp) {
               return service->SubmitDeleteTunnelCfm(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Cp_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Cp::Service, ::srvCp::AddRbConfigCfm, ::srvCp::CfmReply>(
          [](Cp::Service* service,
             ::grpc::ServerContext* ctx,
             const ::srvCp::AddRbConfigCfm* req,
             ::srvCp::CfmReply* resp) {
               return service->SubmitAddRbConfigCfm(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Cp_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Cp::Service, ::srvCp::ModifyRbConfigCfm, ::srvCp::CfmReply>(
          [](Cp::Service* service,
             ::grpc::ServerContext* ctx,
             const ::srvCp::ModifyRbConfigCfm* req,
             ::srvCp::CfmReply* resp) {
               return service->SubmitModifyRbConfigCfm(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Cp_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Cp::Service, ::srvCp::DeleteRbConfigCfm, ::srvCp::CfmReply>(
          [](Cp::Service* service,
             ::grpc::ServerContext* ctx,
             const ::srvCp::DeleteRbConfigCfm* req,
             ::srvCp::CfmReply* resp) {
               return service->SubmitDeleteRbConfigCfm(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Cp_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Cp::Service, ::srvCp::PDCPSduStatusCfm, ::srvCp::CfmReply>(
          [](Cp::Service* service,
             ::grpc::ServerContext* ctx,
             const ::srvCp::PDCPSduStatusCfm* req,
             ::srvCp::CfmReply* resp) {
               return service->SubmitPDCPSduStatusCfm(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Cp_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Cp::Service, ::srvCp::AddPDCPConfigCfm, ::srvCp::CfmReply>(
          [](Cp::Service* service,
             ::grpc::ServerContext* ctx,
             const ::srvCp::AddPDCPConfigCfm* req,
             ::srvCp::CfmReply* resp) {
               return service->SubmitAddPDCPConfigCfm(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Cp_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Cp::Service, ::srvCp::ModifyPDCPConfigCfm, ::srvCp::CfmReply>(
          [](Cp::Service* service,
             ::grpc::ServerContext* ctx,
             const ::srvCp::ModifyPDCPConfigCfm* req,
             ::srvCp::CfmReply* resp) {
               return service->SubmitModifyPDCPConfigCfm(ctx, req, resp);
             }, this)));
}

Cp::Service::~Service() {
}

::grpc::Status Cp::Service::SubmitSecurityConfigCfm(::grpc::ServerContext* context, const ::srvCp::SecurityConfigCfm* request, ::srvCp::CfmReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Cp::Service::SubmitCreateTunnelCfm(::grpc::ServerContext* context, const ::srvCp::CreateTunnelCfm* request, ::srvCp::CfmReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Cp::Service::SubmitModifyTunnelCfm(::grpc::ServerContext* context, const ::srvCp::ModifyTunnelCfm* request, ::srvCp::CfmReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Cp::Service::SubmitDeleteTunnelCfm(::grpc::ServerContext* context, const ::srvCp::DeleteTunnelCfm* request, ::srvCp::CfmReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Cp::Service::SubmitAddRbConfigCfm(::grpc::ServerContext* context, const ::srvCp::AddRbConfigCfm* request, ::srvCp::CfmReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Cp::Service::SubmitModifyRbConfigCfm(::grpc::ServerContext* context, const ::srvCp::ModifyRbConfigCfm* request, ::srvCp::CfmReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Cp::Service::SubmitDeleteRbConfigCfm(::grpc::ServerContext* context, const ::srvCp::DeleteRbConfigCfm* request, ::srvCp::CfmReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Cp::Service::SubmitPDCPSduStatusCfm(::grpc::ServerContext* context, const ::srvCp::PDCPSduStatusCfm* request, ::srvCp::CfmReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Cp::Service::SubmitAddPDCPConfigCfm(::grpc::ServerContext* context, const ::srvCp::AddPDCPConfigCfm* request, ::srvCp::CfmReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Cp::Service::SubmitModifyPDCPConfigCfm(::grpc::ServerContext* context, const ::srvCp::ModifyPDCPConfigCfm* request, ::srvCp::CfmReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace srvCp

