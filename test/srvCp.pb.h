// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: srvCp.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_srvCp_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_srvCp_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "mhdr.pb.h"
#include "structure.pb.h"
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_srvCp_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_srvCp_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_srvCp_2eproto;
namespace srvCp {
class AddPDCPConfigCfm;
class AddPDCPConfigCfmDefaultTypeInternal;
extern AddPDCPConfigCfmDefaultTypeInternal _AddPDCPConfigCfm_default_instance_;
class AddRbConfigCfm;
class AddRbConfigCfmDefaultTypeInternal;
extern AddRbConfigCfmDefaultTypeInternal _AddRbConfigCfm_default_instance_;
class CfmReply;
class CfmReplyDefaultTypeInternal;
extern CfmReplyDefaultTypeInternal _CfmReply_default_instance_;
class CreateTunnelCfm;
class CreateTunnelCfmDefaultTypeInternal;
extern CreateTunnelCfmDefaultTypeInternal _CreateTunnelCfm_default_instance_;
class DeleteRbConfigCfm;
class DeleteRbConfigCfmDefaultTypeInternal;
extern DeleteRbConfigCfmDefaultTypeInternal _DeleteRbConfigCfm_default_instance_;
class DeleteTunnelCfm;
class DeleteTunnelCfmDefaultTypeInternal;
extern DeleteTunnelCfmDefaultTypeInternal _DeleteTunnelCfm_default_instance_;
class ModifyPDCPConfigCfm;
class ModifyPDCPConfigCfmDefaultTypeInternal;
extern ModifyPDCPConfigCfmDefaultTypeInternal _ModifyPDCPConfigCfm_default_instance_;
class ModifyRbConfigCfm;
class ModifyRbConfigCfmDefaultTypeInternal;
extern ModifyRbConfigCfmDefaultTypeInternal _ModifyRbConfigCfm_default_instance_;
class ModifyTunnelCfm;
class ModifyTunnelCfmDefaultTypeInternal;
extern ModifyTunnelCfmDefaultTypeInternal _ModifyTunnelCfm_default_instance_;
class PDCPSduStatusCfm;
class PDCPSduStatusCfmDefaultTypeInternal;
extern PDCPSduStatusCfmDefaultTypeInternal _PDCPSduStatusCfm_default_instance_;
class SecurityConfigCfm;
class SecurityConfigCfmDefaultTypeInternal;
extern SecurityConfigCfmDefaultTypeInternal _SecurityConfigCfm_default_instance_;
}  // namespace srvCp
PROTOBUF_NAMESPACE_OPEN
template<> ::srvCp::AddPDCPConfigCfm* Arena::CreateMaybeMessage<::srvCp::AddPDCPConfigCfm>(Arena*);
template<> ::srvCp::AddRbConfigCfm* Arena::CreateMaybeMessage<::srvCp::AddRbConfigCfm>(Arena*);
template<> ::srvCp::CfmReply* Arena::CreateMaybeMessage<::srvCp::CfmReply>(Arena*);
template<> ::srvCp::CreateTunnelCfm* Arena::CreateMaybeMessage<::srvCp::CreateTunnelCfm>(Arena*);
template<> ::srvCp::DeleteRbConfigCfm* Arena::CreateMaybeMessage<::srvCp::DeleteRbConfigCfm>(Arena*);
template<> ::srvCp::DeleteTunnelCfm* Arena::CreateMaybeMessage<::srvCp::DeleteTunnelCfm>(Arena*);
template<> ::srvCp::ModifyPDCPConfigCfm* Arena::CreateMaybeMessage<::srvCp::ModifyPDCPConfigCfm>(Arena*);
template<> ::srvCp::ModifyRbConfigCfm* Arena::CreateMaybeMessage<::srvCp::ModifyRbConfigCfm>(Arena*);
template<> ::srvCp::ModifyTunnelCfm* Arena::CreateMaybeMessage<::srvCp::ModifyTunnelCfm>(Arena*);
template<> ::srvCp::PDCPSduStatusCfm* Arena::CreateMaybeMessage<::srvCp::PDCPSduStatusCfm>(Arena*);
template<> ::srvCp::SecurityConfigCfm* Arena::CreateMaybeMessage<::srvCp::SecurityConfigCfm>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace srvCp {

enum method : int {
  MethodUnknown = 0,
  MethodSubmitSecurityConfigCfm = 1,
  MethodSubmitCreateTunnelCfm = 2,
  MethodSubmitModifyTunnelCfm = 3,
  MethodSubmitDeleteTunnelCfm = 4,
  MethodSubmitAddRbConfigCfm = 5,
  MethodSubmitModifyRbConfigCfm = 6,
  MethodSubmitDeleteRbConfigCfm = 7,
  MethodSubmitPDCPSduStatusCfm = 8,
  MethodSubmitAddPDCPConfigCfm = 9,
  MethodSubmitModifyPDCPConfigCfm = 10,
  MethodCfmReply = 11,
  method_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  method_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool method_IsValid(int value);
constexpr method method_MIN = MethodUnknown;
constexpr method method_MAX = MethodCfmReply;
constexpr int method_ARRAYSIZE = method_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* method_descriptor();
template<typename T>
inline const std::string& method_Name(T enum_t_value) {
  static_assert(::std::is_same<T, method>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function method_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    method_descriptor(), enum_t_value);
}
inline bool method_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, method* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<method>(
    method_descriptor(), name, value);
}
enum version : int {
  VerUnknown = 0,
  Ver = 1,
  version_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  version_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool version_IsValid(int value);
constexpr version version_MIN = VerUnknown;
constexpr version version_MAX = Ver;
constexpr int version_ARRAYSIZE = version_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* version_descriptor();
template<typename T>
inline const std::string& version_Name(T enum_t_value) {
  static_assert(::std::is_same<T, version>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function version_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    version_descriptor(), enum_t_value);
}
inline bool version_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, version* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<version>(
    version_descriptor(), name, value);
}
// ===================================================================

class SecurityConfigCfm PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srvCp.SecurityConfigCfm) */ {
 public:
  inline SecurityConfigCfm() : SecurityConfigCfm(nullptr) {}
  virtual ~SecurityConfigCfm();

  SecurityConfigCfm(const SecurityConfigCfm& from);
  SecurityConfigCfm(SecurityConfigCfm&& from) noexcept
    : SecurityConfigCfm() {
    *this = ::std::move(from);
  }

  inline SecurityConfigCfm& operator=(const SecurityConfigCfm& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecurityConfigCfm& operator=(SecurityConfigCfm&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecurityConfigCfm& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecurityConfigCfm* internal_default_instance() {
    return reinterpret_cast<const SecurityConfigCfm*>(
               &_SecurityConfigCfm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SecurityConfigCfm& a, SecurityConfigCfm& b) {
    a.Swap(&b);
  }
  inline void Swap(SecurityConfigCfm* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecurityConfigCfm* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecurityConfigCfm* New() const final {
    return CreateMaybeMessage<SecurityConfigCfm>(nullptr);
  }

  SecurityConfigCfm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecurityConfigCfm>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecurityConfigCfm& from);
  void MergeFrom(const SecurityConfigCfm& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecurityConfigCfm* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srvCp.SecurityConfigCfm";
  }
  protected:
  explicit SecurityConfigCfm(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_srvCp_2eproto);
    return ::descriptor_table_srvCp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHdrFieldNumber = 10,
    kCpUpHdrFieldNumber = 20,
    kSecCfmFieldNumber = 30,
  };
  // .mhdr.MsgHdr hdr = 10;
  bool has_hdr() const;
  private:
  bool _internal_has_hdr() const;
  public:
  void clear_hdr();
  const ::mhdr::MsgHdr& hdr() const;
  ::mhdr::MsgHdr* release_hdr();
  ::mhdr::MsgHdr* mutable_hdr();
  void set_allocated_hdr(::mhdr::MsgHdr* hdr);
  private:
  const ::mhdr::MsgHdr& _internal_hdr() const;
  ::mhdr::MsgHdr* _internal_mutable_hdr();
  public:
  void unsafe_arena_set_allocated_hdr(
      ::mhdr::MsgHdr* hdr);
  ::mhdr::MsgHdr* unsafe_arena_release_hdr();

  // .structure.CpUpHdr cp_up_hdr = 20;
  bool has_cp_up_hdr() const;
  private:
  bool _internal_has_cp_up_hdr() const;
  public:
  void clear_cp_up_hdr();
  const ::structure::CpUpHdr& cp_up_hdr() const;
  ::structure::CpUpHdr* release_cp_up_hdr();
  ::structure::CpUpHdr* mutable_cp_up_hdr();
  void set_allocated_cp_up_hdr(::structure::CpUpHdr* cp_up_hdr);
  private:
  const ::structure::CpUpHdr& _internal_cp_up_hdr() const;
  ::structure::CpUpHdr* _internal_mutable_cp_up_hdr();
  public:
  void unsafe_arena_set_allocated_cp_up_hdr(
      ::structure::CpUpHdr* cp_up_hdr);
  ::structure::CpUpHdr* unsafe_arena_release_cp_up_hdr();

  // .structure.SecurityCfgCfm sec_cfm = 30;
  bool has_sec_cfm() const;
  private:
  bool _internal_has_sec_cfm() const;
  public:
  void clear_sec_cfm();
  const ::structure::SecurityCfgCfm& sec_cfm() const;
  ::structure::SecurityCfgCfm* release_sec_cfm();
  ::structure::SecurityCfgCfm* mutable_sec_cfm();
  void set_allocated_sec_cfm(::structure::SecurityCfgCfm* sec_cfm);
  private:
  const ::structure::SecurityCfgCfm& _internal_sec_cfm() const;
  ::structure::SecurityCfgCfm* _internal_mutable_sec_cfm();
  public:
  void unsafe_arena_set_allocated_sec_cfm(
      ::structure::SecurityCfgCfm* sec_cfm);
  ::structure::SecurityCfgCfm* unsafe_arena_release_sec_cfm();

  // @@protoc_insertion_point(class_scope:srvCp.SecurityConfigCfm)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mhdr::MsgHdr* hdr_;
  ::structure::CpUpHdr* cp_up_hdr_;
  ::structure::SecurityCfgCfm* sec_cfm_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_srvCp_2eproto;
};
// -------------------------------------------------------------------

class CreateTunnelCfm PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srvCp.CreateTunnelCfm) */ {
 public:
  inline CreateTunnelCfm() : CreateTunnelCfm(nullptr) {}
  virtual ~CreateTunnelCfm();

  CreateTunnelCfm(const CreateTunnelCfm& from);
  CreateTunnelCfm(CreateTunnelCfm&& from) noexcept
    : CreateTunnelCfm() {
    *this = ::std::move(from);
  }

  inline CreateTunnelCfm& operator=(const CreateTunnelCfm& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateTunnelCfm& operator=(CreateTunnelCfm&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateTunnelCfm& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateTunnelCfm* internal_default_instance() {
    return reinterpret_cast<const CreateTunnelCfm*>(
               &_CreateTunnelCfm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateTunnelCfm& a, CreateTunnelCfm& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateTunnelCfm* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateTunnelCfm* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateTunnelCfm* New() const final {
    return CreateMaybeMessage<CreateTunnelCfm>(nullptr);
  }

  CreateTunnelCfm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateTunnelCfm>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateTunnelCfm& from);
  void MergeFrom(const CreateTunnelCfm& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTunnelCfm* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srvCp.CreateTunnelCfm";
  }
  protected:
  explicit CreateTunnelCfm(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_srvCp_2eproto);
    return ::descriptor_table_srvCp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTnlCfmListFieldNumber = 40,
    kHdrFieldNumber = 10,
    kCpUpHdrFieldNumber = 20,
    kNumEntFieldNumber = 31,
  };
  // repeated .structure.CreateTnlCfmEnt tnl_cfm_list = 40;
  int tnl_cfm_list_size() const;
  private:
  int _internal_tnl_cfm_list_size() const;
  public:
  void clear_tnl_cfm_list();
  ::structure::CreateTnlCfmEnt* mutable_tnl_cfm_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::CreateTnlCfmEnt >*
      mutable_tnl_cfm_list();
  private:
  const ::structure::CreateTnlCfmEnt& _internal_tnl_cfm_list(int index) const;
  ::structure::CreateTnlCfmEnt* _internal_add_tnl_cfm_list();
  public:
  const ::structure::CreateTnlCfmEnt& tnl_cfm_list(int index) const;
  ::structure::CreateTnlCfmEnt* add_tnl_cfm_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::CreateTnlCfmEnt >&
      tnl_cfm_list() const;

  // .mhdr.MsgHdr hdr = 10;
  bool has_hdr() const;
  private:
  bool _internal_has_hdr() const;
  public:
  void clear_hdr();
  const ::mhdr::MsgHdr& hdr() const;
  ::mhdr::MsgHdr* release_hdr();
  ::mhdr::MsgHdr* mutable_hdr();
  void set_allocated_hdr(::mhdr::MsgHdr* hdr);
  private:
  const ::mhdr::MsgHdr& _internal_hdr() const;
  ::mhdr::MsgHdr* _internal_mutable_hdr();
  public:
  void unsafe_arena_set_allocated_hdr(
      ::mhdr::MsgHdr* hdr);
  ::mhdr::MsgHdr* unsafe_arena_release_hdr();

  // .structure.CpUpHdr cp_up_hdr = 20;
  bool has_cp_up_hdr() const;
  private:
  bool _internal_has_cp_up_hdr() const;
  public:
  void clear_cp_up_hdr();
  const ::structure::CpUpHdr& cp_up_hdr() const;
  ::structure::CpUpHdr* release_cp_up_hdr();
  ::structure::CpUpHdr* mutable_cp_up_hdr();
  void set_allocated_cp_up_hdr(::structure::CpUpHdr* cp_up_hdr);
  private:
  const ::structure::CpUpHdr& _internal_cp_up_hdr() const;
  ::structure::CpUpHdr* _internal_mutable_cp_up_hdr();
  public:
  void unsafe_arena_set_allocated_cp_up_hdr(
      ::structure::CpUpHdr* cp_up_hdr);
  ::structure::CpUpHdr* unsafe_arena_release_cp_up_hdr();

  // uint32 num_ent = 31;
  void clear_num_ent();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_ent() const;
  void set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_ent() const;
  void _internal_set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:srvCp.CreateTunnelCfm)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::CreateTnlCfmEnt > tnl_cfm_list_;
  ::mhdr::MsgHdr* hdr_;
  ::structure::CpUpHdr* cp_up_hdr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_ent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_srvCp_2eproto;
};
// -------------------------------------------------------------------

class ModifyTunnelCfm PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srvCp.ModifyTunnelCfm) */ {
 public:
  inline ModifyTunnelCfm() : ModifyTunnelCfm(nullptr) {}
  virtual ~ModifyTunnelCfm();

  ModifyTunnelCfm(const ModifyTunnelCfm& from);
  ModifyTunnelCfm(ModifyTunnelCfm&& from) noexcept
    : ModifyTunnelCfm() {
    *this = ::std::move(from);
  }

  inline ModifyTunnelCfm& operator=(const ModifyTunnelCfm& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModifyTunnelCfm& operator=(ModifyTunnelCfm&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModifyTunnelCfm& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModifyTunnelCfm* internal_default_instance() {
    return reinterpret_cast<const ModifyTunnelCfm*>(
               &_ModifyTunnelCfm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ModifyTunnelCfm& a, ModifyTunnelCfm& b) {
    a.Swap(&b);
  }
  inline void Swap(ModifyTunnelCfm* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModifyTunnelCfm* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModifyTunnelCfm* New() const final {
    return CreateMaybeMessage<ModifyTunnelCfm>(nullptr);
  }

  ModifyTunnelCfm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModifyTunnelCfm>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModifyTunnelCfm& from);
  void MergeFrom(const ModifyTunnelCfm& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModifyTunnelCfm* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srvCp.ModifyTunnelCfm";
  }
  protected:
  explicit ModifyTunnelCfm(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_srvCp_2eproto);
    return ::descriptor_table_srvCp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTnlCfmListFieldNumber = 40,
    kHdrFieldNumber = 10,
    kCpUpHdrFieldNumber = 20,
    kNumEntFieldNumber = 31,
  };
  // repeated .structure.ModTnlCfmEnt tnl_cfm_list = 40;
  int tnl_cfm_list_size() const;
  private:
  int _internal_tnl_cfm_list_size() const;
  public:
  void clear_tnl_cfm_list();
  ::structure::ModTnlCfmEnt* mutable_tnl_cfm_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::ModTnlCfmEnt >*
      mutable_tnl_cfm_list();
  private:
  const ::structure::ModTnlCfmEnt& _internal_tnl_cfm_list(int index) const;
  ::structure::ModTnlCfmEnt* _internal_add_tnl_cfm_list();
  public:
  const ::structure::ModTnlCfmEnt& tnl_cfm_list(int index) const;
  ::structure::ModTnlCfmEnt* add_tnl_cfm_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::ModTnlCfmEnt >&
      tnl_cfm_list() const;

  // .mhdr.MsgHdr hdr = 10;
  bool has_hdr() const;
  private:
  bool _internal_has_hdr() const;
  public:
  void clear_hdr();
  const ::mhdr::MsgHdr& hdr() const;
  ::mhdr::MsgHdr* release_hdr();
  ::mhdr::MsgHdr* mutable_hdr();
  void set_allocated_hdr(::mhdr::MsgHdr* hdr);
  private:
  const ::mhdr::MsgHdr& _internal_hdr() const;
  ::mhdr::MsgHdr* _internal_mutable_hdr();
  public:
  void unsafe_arena_set_allocated_hdr(
      ::mhdr::MsgHdr* hdr);
  ::mhdr::MsgHdr* unsafe_arena_release_hdr();

  // .structure.CpUpHdr cp_up_hdr = 20;
  bool has_cp_up_hdr() const;
  private:
  bool _internal_has_cp_up_hdr() const;
  public:
  void clear_cp_up_hdr();
  const ::structure::CpUpHdr& cp_up_hdr() const;
  ::structure::CpUpHdr* release_cp_up_hdr();
  ::structure::CpUpHdr* mutable_cp_up_hdr();
  void set_allocated_cp_up_hdr(::structure::CpUpHdr* cp_up_hdr);
  private:
  const ::structure::CpUpHdr& _internal_cp_up_hdr() const;
  ::structure::CpUpHdr* _internal_mutable_cp_up_hdr();
  public:
  void unsafe_arena_set_allocated_cp_up_hdr(
      ::structure::CpUpHdr* cp_up_hdr);
  ::structure::CpUpHdr* unsafe_arena_release_cp_up_hdr();

  // uint32 num_ent = 31;
  void clear_num_ent();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_ent() const;
  void set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_ent() const;
  void _internal_set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:srvCp.ModifyTunnelCfm)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::ModTnlCfmEnt > tnl_cfm_list_;
  ::mhdr::MsgHdr* hdr_;
  ::structure::CpUpHdr* cp_up_hdr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_ent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_srvCp_2eproto;
};
// -------------------------------------------------------------------

class DeleteTunnelCfm PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srvCp.DeleteTunnelCfm) */ {
 public:
  inline DeleteTunnelCfm() : DeleteTunnelCfm(nullptr) {}
  virtual ~DeleteTunnelCfm();

  DeleteTunnelCfm(const DeleteTunnelCfm& from);
  DeleteTunnelCfm(DeleteTunnelCfm&& from) noexcept
    : DeleteTunnelCfm() {
    *this = ::std::move(from);
  }

  inline DeleteTunnelCfm& operator=(const DeleteTunnelCfm& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteTunnelCfm& operator=(DeleteTunnelCfm&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteTunnelCfm& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteTunnelCfm* internal_default_instance() {
    return reinterpret_cast<const DeleteTunnelCfm*>(
               &_DeleteTunnelCfm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DeleteTunnelCfm& a, DeleteTunnelCfm& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteTunnelCfm* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteTunnelCfm* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteTunnelCfm* New() const final {
    return CreateMaybeMessage<DeleteTunnelCfm>(nullptr);
  }

  DeleteTunnelCfm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteTunnelCfm>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteTunnelCfm& from);
  void MergeFrom(const DeleteTunnelCfm& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteTunnelCfm* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srvCp.DeleteTunnelCfm";
  }
  protected:
  explicit DeleteTunnelCfm(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_srvCp_2eproto);
    return ::descriptor_table_srvCp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTnlCfmListFieldNumber = 40,
    kHdrFieldNumber = 10,
    kCpUpHdrFieldNumber = 20,
    kNumEntFieldNumber = 31,
  };
  // repeated .structure.DelTnlCfmEnt tnl_cfm_list = 40;
  int tnl_cfm_list_size() const;
  private:
  int _internal_tnl_cfm_list_size() const;
  public:
  void clear_tnl_cfm_list();
  ::structure::DelTnlCfmEnt* mutable_tnl_cfm_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::DelTnlCfmEnt >*
      mutable_tnl_cfm_list();
  private:
  const ::structure::DelTnlCfmEnt& _internal_tnl_cfm_list(int index) const;
  ::structure::DelTnlCfmEnt* _internal_add_tnl_cfm_list();
  public:
  const ::structure::DelTnlCfmEnt& tnl_cfm_list(int index) const;
  ::structure::DelTnlCfmEnt* add_tnl_cfm_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::DelTnlCfmEnt >&
      tnl_cfm_list() const;

  // .mhdr.MsgHdr hdr = 10;
  bool has_hdr() const;
  private:
  bool _internal_has_hdr() const;
  public:
  void clear_hdr();
  const ::mhdr::MsgHdr& hdr() const;
  ::mhdr::MsgHdr* release_hdr();
  ::mhdr::MsgHdr* mutable_hdr();
  void set_allocated_hdr(::mhdr::MsgHdr* hdr);
  private:
  const ::mhdr::MsgHdr& _internal_hdr() const;
  ::mhdr::MsgHdr* _internal_mutable_hdr();
  public:
  void unsafe_arena_set_allocated_hdr(
      ::mhdr::MsgHdr* hdr);
  ::mhdr::MsgHdr* unsafe_arena_release_hdr();

  // .structure.CpUpHdr cp_up_hdr = 20;
  bool has_cp_up_hdr() const;
  private:
  bool _internal_has_cp_up_hdr() const;
  public:
  void clear_cp_up_hdr();
  const ::structure::CpUpHdr& cp_up_hdr() const;
  ::structure::CpUpHdr* release_cp_up_hdr();
  ::structure::CpUpHdr* mutable_cp_up_hdr();
  void set_allocated_cp_up_hdr(::structure::CpUpHdr* cp_up_hdr);
  private:
  const ::structure::CpUpHdr& _internal_cp_up_hdr() const;
  ::structure::CpUpHdr* _internal_mutable_cp_up_hdr();
  public:
  void unsafe_arena_set_allocated_cp_up_hdr(
      ::structure::CpUpHdr* cp_up_hdr);
  ::structure::CpUpHdr* unsafe_arena_release_cp_up_hdr();

  // uint32 num_ent = 31;
  void clear_num_ent();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_ent() const;
  void set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_ent() const;
  void _internal_set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:srvCp.DeleteTunnelCfm)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::DelTnlCfmEnt > tnl_cfm_list_;
  ::mhdr::MsgHdr* hdr_;
  ::structure::CpUpHdr* cp_up_hdr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_ent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_srvCp_2eproto;
};
// -------------------------------------------------------------------

class AddRbConfigCfm PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srvCp.AddRbConfigCfm) */ {
 public:
  inline AddRbConfigCfm() : AddRbConfigCfm(nullptr) {}
  virtual ~AddRbConfigCfm();

  AddRbConfigCfm(const AddRbConfigCfm& from);
  AddRbConfigCfm(AddRbConfigCfm&& from) noexcept
    : AddRbConfigCfm() {
    *this = ::std::move(from);
  }

  inline AddRbConfigCfm& operator=(const AddRbConfigCfm& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddRbConfigCfm& operator=(AddRbConfigCfm&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddRbConfigCfm& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddRbConfigCfm* internal_default_instance() {
    return reinterpret_cast<const AddRbConfigCfm*>(
               &_AddRbConfigCfm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AddRbConfigCfm& a, AddRbConfigCfm& b) {
    a.Swap(&b);
  }
  inline void Swap(AddRbConfigCfm* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddRbConfigCfm* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddRbConfigCfm* New() const final {
    return CreateMaybeMessage<AddRbConfigCfm>(nullptr);
  }

  AddRbConfigCfm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddRbConfigCfm>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddRbConfigCfm& from);
  void MergeFrom(const AddRbConfigCfm& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddRbConfigCfm* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srvCp.AddRbConfigCfm";
  }
  protected:
  explicit AddRbConfigCfm(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_srvCp_2eproto);
    return ::descriptor_table_srvCp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigCfmEntFieldNumber = 40,
    kHdrFieldNumber = 10,
    kCpUpHdrFieldNumber = 20,
    kNumEntFieldNumber = 30,
  };
  // repeated .structure.PDCPAddCfgCfmEnt config_cfm_ent = 40;
  int config_cfm_ent_size() const;
  private:
  int _internal_config_cfm_ent_size() const;
  public:
  void clear_config_cfm_ent();
  ::structure::PDCPAddCfgCfmEnt* mutable_config_cfm_ent(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::PDCPAddCfgCfmEnt >*
      mutable_config_cfm_ent();
  private:
  const ::structure::PDCPAddCfgCfmEnt& _internal_config_cfm_ent(int index) const;
  ::structure::PDCPAddCfgCfmEnt* _internal_add_config_cfm_ent();
  public:
  const ::structure::PDCPAddCfgCfmEnt& config_cfm_ent(int index) const;
  ::structure::PDCPAddCfgCfmEnt* add_config_cfm_ent();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::PDCPAddCfgCfmEnt >&
      config_cfm_ent() const;

  // .mhdr.MsgHdr hdr = 10;
  bool has_hdr() const;
  private:
  bool _internal_has_hdr() const;
  public:
  void clear_hdr();
  const ::mhdr::MsgHdr& hdr() const;
  ::mhdr::MsgHdr* release_hdr();
  ::mhdr::MsgHdr* mutable_hdr();
  void set_allocated_hdr(::mhdr::MsgHdr* hdr);
  private:
  const ::mhdr::MsgHdr& _internal_hdr() const;
  ::mhdr::MsgHdr* _internal_mutable_hdr();
  public:
  void unsafe_arena_set_allocated_hdr(
      ::mhdr::MsgHdr* hdr);
  ::mhdr::MsgHdr* unsafe_arena_release_hdr();

  // .structure.CpUpHdr cp_up_hdr = 20;
  bool has_cp_up_hdr() const;
  private:
  bool _internal_has_cp_up_hdr() const;
  public:
  void clear_cp_up_hdr();
  const ::structure::CpUpHdr& cp_up_hdr() const;
  ::structure::CpUpHdr* release_cp_up_hdr();
  ::structure::CpUpHdr* mutable_cp_up_hdr();
  void set_allocated_cp_up_hdr(::structure::CpUpHdr* cp_up_hdr);
  private:
  const ::structure::CpUpHdr& _internal_cp_up_hdr() const;
  ::structure::CpUpHdr* _internal_mutable_cp_up_hdr();
  public:
  void unsafe_arena_set_allocated_cp_up_hdr(
      ::structure::CpUpHdr* cp_up_hdr);
  ::structure::CpUpHdr* unsafe_arena_release_cp_up_hdr();

  // uint32 num_ent = 30;
  void clear_num_ent();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_ent() const;
  void set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_ent() const;
  void _internal_set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:srvCp.AddRbConfigCfm)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::PDCPAddCfgCfmEnt > config_cfm_ent_;
  ::mhdr::MsgHdr* hdr_;
  ::structure::CpUpHdr* cp_up_hdr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_ent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_srvCp_2eproto;
};
// -------------------------------------------------------------------

class ModifyRbConfigCfm PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srvCp.ModifyRbConfigCfm) */ {
 public:
  inline ModifyRbConfigCfm() : ModifyRbConfigCfm(nullptr) {}
  virtual ~ModifyRbConfigCfm();

  ModifyRbConfigCfm(const ModifyRbConfigCfm& from);
  ModifyRbConfigCfm(ModifyRbConfigCfm&& from) noexcept
    : ModifyRbConfigCfm() {
    *this = ::std::move(from);
  }

  inline ModifyRbConfigCfm& operator=(const ModifyRbConfigCfm& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModifyRbConfigCfm& operator=(ModifyRbConfigCfm&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModifyRbConfigCfm& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModifyRbConfigCfm* internal_default_instance() {
    return reinterpret_cast<const ModifyRbConfigCfm*>(
               &_ModifyRbConfigCfm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ModifyRbConfigCfm& a, ModifyRbConfigCfm& b) {
    a.Swap(&b);
  }
  inline void Swap(ModifyRbConfigCfm* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModifyRbConfigCfm* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModifyRbConfigCfm* New() const final {
    return CreateMaybeMessage<ModifyRbConfigCfm>(nullptr);
  }

  ModifyRbConfigCfm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModifyRbConfigCfm>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModifyRbConfigCfm& from);
  void MergeFrom(const ModifyRbConfigCfm& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModifyRbConfigCfm* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srvCp.ModifyRbConfigCfm";
  }
  protected:
  explicit ModifyRbConfigCfm(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_srvCp_2eproto);
    return ::descriptor_table_srvCp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigCfmEntFieldNumber = 40,
    kHdrFieldNumber = 10,
    kCpUpHdrFieldNumber = 20,
    kNumEntFieldNumber = 30,
  };
  // repeated .structure.PDCPModCfgCfmEnt config_cfm_ent = 40;
  int config_cfm_ent_size() const;
  private:
  int _internal_config_cfm_ent_size() const;
  public:
  void clear_config_cfm_ent();
  ::structure::PDCPModCfgCfmEnt* mutable_config_cfm_ent(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::PDCPModCfgCfmEnt >*
      mutable_config_cfm_ent();
  private:
  const ::structure::PDCPModCfgCfmEnt& _internal_config_cfm_ent(int index) const;
  ::structure::PDCPModCfgCfmEnt* _internal_add_config_cfm_ent();
  public:
  const ::structure::PDCPModCfgCfmEnt& config_cfm_ent(int index) const;
  ::structure::PDCPModCfgCfmEnt* add_config_cfm_ent();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::PDCPModCfgCfmEnt >&
      config_cfm_ent() const;

  // .mhdr.MsgHdr hdr = 10;
  bool has_hdr() const;
  private:
  bool _internal_has_hdr() const;
  public:
  void clear_hdr();
  const ::mhdr::MsgHdr& hdr() const;
  ::mhdr::MsgHdr* release_hdr();
  ::mhdr::MsgHdr* mutable_hdr();
  void set_allocated_hdr(::mhdr::MsgHdr* hdr);
  private:
  const ::mhdr::MsgHdr& _internal_hdr() const;
  ::mhdr::MsgHdr* _internal_mutable_hdr();
  public:
  void unsafe_arena_set_allocated_hdr(
      ::mhdr::MsgHdr* hdr);
  ::mhdr::MsgHdr* unsafe_arena_release_hdr();

  // .structure.CpUpHdr cp_up_hdr = 20;
  bool has_cp_up_hdr() const;
  private:
  bool _internal_has_cp_up_hdr() const;
  public:
  void clear_cp_up_hdr();
  const ::structure::CpUpHdr& cp_up_hdr() const;
  ::structure::CpUpHdr* release_cp_up_hdr();
  ::structure::CpUpHdr* mutable_cp_up_hdr();
  void set_allocated_cp_up_hdr(::structure::CpUpHdr* cp_up_hdr);
  private:
  const ::structure::CpUpHdr& _internal_cp_up_hdr() const;
  ::structure::CpUpHdr* _internal_mutable_cp_up_hdr();
  public:
  void unsafe_arena_set_allocated_cp_up_hdr(
      ::structure::CpUpHdr* cp_up_hdr);
  ::structure::CpUpHdr* unsafe_arena_release_cp_up_hdr();

  // uint32 num_ent = 30;
  void clear_num_ent();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_ent() const;
  void set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_ent() const;
  void _internal_set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:srvCp.ModifyRbConfigCfm)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::PDCPModCfgCfmEnt > config_cfm_ent_;
  ::mhdr::MsgHdr* hdr_;
  ::structure::CpUpHdr* cp_up_hdr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_ent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_srvCp_2eproto;
};
// -------------------------------------------------------------------

class DeleteRbConfigCfm PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srvCp.DeleteRbConfigCfm) */ {
 public:
  inline DeleteRbConfigCfm() : DeleteRbConfigCfm(nullptr) {}
  virtual ~DeleteRbConfigCfm();

  DeleteRbConfigCfm(const DeleteRbConfigCfm& from);
  DeleteRbConfigCfm(DeleteRbConfigCfm&& from) noexcept
    : DeleteRbConfigCfm() {
    *this = ::std::move(from);
  }

  inline DeleteRbConfigCfm& operator=(const DeleteRbConfigCfm& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRbConfigCfm& operator=(DeleteRbConfigCfm&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteRbConfigCfm& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteRbConfigCfm* internal_default_instance() {
    return reinterpret_cast<const DeleteRbConfigCfm*>(
               &_DeleteRbConfigCfm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DeleteRbConfigCfm& a, DeleteRbConfigCfm& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteRbConfigCfm* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteRbConfigCfm* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteRbConfigCfm* New() const final {
    return CreateMaybeMessage<DeleteRbConfigCfm>(nullptr);
  }

  DeleteRbConfigCfm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteRbConfigCfm>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteRbConfigCfm& from);
  void MergeFrom(const DeleteRbConfigCfm& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRbConfigCfm* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srvCp.DeleteRbConfigCfm";
  }
  protected:
  explicit DeleteRbConfigCfm(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_srvCp_2eproto);
    return ::descriptor_table_srvCp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigCfmEntFieldNumber = 40,
    kHdrFieldNumber = 10,
    kCpUpHdrFieldNumber = 20,
    kNumEntFieldNumber = 30,
  };
  // repeated .structure.PDCPDelCfgCfmEnt config_cfm_ent = 40;
  int config_cfm_ent_size() const;
  private:
  int _internal_config_cfm_ent_size() const;
  public:
  void clear_config_cfm_ent();
  ::structure::PDCPDelCfgCfmEnt* mutable_config_cfm_ent(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::PDCPDelCfgCfmEnt >*
      mutable_config_cfm_ent();
  private:
  const ::structure::PDCPDelCfgCfmEnt& _internal_config_cfm_ent(int index) const;
  ::structure::PDCPDelCfgCfmEnt* _internal_add_config_cfm_ent();
  public:
  const ::structure::PDCPDelCfgCfmEnt& config_cfm_ent(int index) const;
  ::structure::PDCPDelCfgCfmEnt* add_config_cfm_ent();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::PDCPDelCfgCfmEnt >&
      config_cfm_ent() const;

  // .mhdr.MsgHdr hdr = 10;
  bool has_hdr() const;
  private:
  bool _internal_has_hdr() const;
  public:
  void clear_hdr();
  const ::mhdr::MsgHdr& hdr() const;
  ::mhdr::MsgHdr* release_hdr();
  ::mhdr::MsgHdr* mutable_hdr();
  void set_allocated_hdr(::mhdr::MsgHdr* hdr);
  private:
  const ::mhdr::MsgHdr& _internal_hdr() const;
  ::mhdr::MsgHdr* _internal_mutable_hdr();
  public:
  void unsafe_arena_set_allocated_hdr(
      ::mhdr::MsgHdr* hdr);
  ::mhdr::MsgHdr* unsafe_arena_release_hdr();

  // .structure.CpUpHdr cp_up_hdr = 20;
  bool has_cp_up_hdr() const;
  private:
  bool _internal_has_cp_up_hdr() const;
  public:
  void clear_cp_up_hdr();
  const ::structure::CpUpHdr& cp_up_hdr() const;
  ::structure::CpUpHdr* release_cp_up_hdr();
  ::structure::CpUpHdr* mutable_cp_up_hdr();
  void set_allocated_cp_up_hdr(::structure::CpUpHdr* cp_up_hdr);
  private:
  const ::structure::CpUpHdr& _internal_cp_up_hdr() const;
  ::structure::CpUpHdr* _internal_mutable_cp_up_hdr();
  public:
  void unsafe_arena_set_allocated_cp_up_hdr(
      ::structure::CpUpHdr* cp_up_hdr);
  ::structure::CpUpHdr* unsafe_arena_release_cp_up_hdr();

  // uint32 num_ent = 30;
  void clear_num_ent();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_ent() const;
  void set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_ent() const;
  void _internal_set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:srvCp.DeleteRbConfigCfm)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::PDCPDelCfgCfmEnt > config_cfm_ent_;
  ::mhdr::MsgHdr* hdr_;
  ::structure::CpUpHdr* cp_up_hdr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_ent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_srvCp_2eproto;
};
// -------------------------------------------------------------------

class PDCPSduStatusCfm PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srvCp.PDCPSduStatusCfm) */ {
 public:
  inline PDCPSduStatusCfm() : PDCPSduStatusCfm(nullptr) {}
  virtual ~PDCPSduStatusCfm();

  PDCPSduStatusCfm(const PDCPSduStatusCfm& from);
  PDCPSduStatusCfm(PDCPSduStatusCfm&& from) noexcept
    : PDCPSduStatusCfm() {
    *this = ::std::move(from);
  }

  inline PDCPSduStatusCfm& operator=(const PDCPSduStatusCfm& from) {
    CopyFrom(from);
    return *this;
  }
  inline PDCPSduStatusCfm& operator=(PDCPSduStatusCfm&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PDCPSduStatusCfm& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PDCPSduStatusCfm* internal_default_instance() {
    return reinterpret_cast<const PDCPSduStatusCfm*>(
               &_PDCPSduStatusCfm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PDCPSduStatusCfm& a, PDCPSduStatusCfm& b) {
    a.Swap(&b);
  }
  inline void Swap(PDCPSduStatusCfm* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PDCPSduStatusCfm* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PDCPSduStatusCfm* New() const final {
    return CreateMaybeMessage<PDCPSduStatusCfm>(nullptr);
  }

  PDCPSduStatusCfm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PDCPSduStatusCfm>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PDCPSduStatusCfm& from);
  void MergeFrom(const PDCPSduStatusCfm& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PDCPSduStatusCfm* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srvCp.PDCPSduStatusCfm";
  }
  protected:
  explicit PDCPSduStatusCfm(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_srvCp_2eproto);
    return ::descriptor_table_srvCp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSduStatusInfoFieldNumber = 40,
    kHdrFieldNumber = 10,
    kCpUpHdrFieldNumber = 20,
    kReasonFieldNumber = 60,
    kNumRbFieldNumber = 30,
    kStatusFieldNumber = 50,
  };
  // repeated .structure.SduStatusInfo sdu_status_info = 40;
  int sdu_status_info_size() const;
  private:
  int _internal_sdu_status_info_size() const;
  public:
  void clear_sdu_status_info();
  ::structure::SduStatusInfo* mutable_sdu_status_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::SduStatusInfo >*
      mutable_sdu_status_info();
  private:
  const ::structure::SduStatusInfo& _internal_sdu_status_info(int index) const;
  ::structure::SduStatusInfo* _internal_add_sdu_status_info();
  public:
  const ::structure::SduStatusInfo& sdu_status_info(int index) const;
  ::structure::SduStatusInfo* add_sdu_status_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::SduStatusInfo >&
      sdu_status_info() const;

  // .mhdr.MsgHdr hdr = 10;
  bool has_hdr() const;
  private:
  bool _internal_has_hdr() const;
  public:
  void clear_hdr();
  const ::mhdr::MsgHdr& hdr() const;
  ::mhdr::MsgHdr* release_hdr();
  ::mhdr::MsgHdr* mutable_hdr();
  void set_allocated_hdr(::mhdr::MsgHdr* hdr);
  private:
  const ::mhdr::MsgHdr& _internal_hdr() const;
  ::mhdr::MsgHdr* _internal_mutable_hdr();
  public:
  void unsafe_arena_set_allocated_hdr(
      ::mhdr::MsgHdr* hdr);
  ::mhdr::MsgHdr* unsafe_arena_release_hdr();

  // .structure.CpUpHdr cp_up_hdr = 20;
  bool has_cp_up_hdr() const;
  private:
  bool _internal_has_cp_up_hdr() const;
  public:
  void clear_cp_up_hdr();
  const ::structure::CpUpHdr& cp_up_hdr() const;
  ::structure::CpUpHdr* release_cp_up_hdr();
  ::structure::CpUpHdr* mutable_cp_up_hdr();
  void set_allocated_cp_up_hdr(::structure::CpUpHdr* cp_up_hdr);
  private:
  const ::structure::CpUpHdr& _internal_cp_up_hdr() const;
  ::structure::CpUpHdr* _internal_mutable_cp_up_hdr();
  public:
  void unsafe_arena_set_allocated_cp_up_hdr(
      ::structure::CpUpHdr* cp_up_hdr);
  ::structure::CpUpHdr* unsafe_arena_release_cp_up_hdr();

  // .structure.PDCPConfigFailureReason reason = 60;
  void clear_reason();
  ::structure::PDCPConfigFailureReason reason() const;
  void set_reason(::structure::PDCPConfigFailureReason value);
  private:
  ::structure::PDCPConfigFailureReason _internal_reason() const;
  void _internal_set_reason(::structure::PDCPConfigFailureReason value);
  public:

  // uint32 num_rb = 30;
  void clear_num_rb();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_rb() const;
  void set_num_rb(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_rb() const;
  void _internal_set_num_rb(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool status = 50;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:srvCp.PDCPSduStatusCfm)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::SduStatusInfo > sdu_status_info_;
  ::mhdr::MsgHdr* hdr_;
  ::structure::CpUpHdr* cp_up_hdr_;
  int reason_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_rb_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_srvCp_2eproto;
};
// -------------------------------------------------------------------

class AddPDCPConfigCfm PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srvCp.AddPDCPConfigCfm) */ {
 public:
  inline AddPDCPConfigCfm() : AddPDCPConfigCfm(nullptr) {}
  virtual ~AddPDCPConfigCfm();

  AddPDCPConfigCfm(const AddPDCPConfigCfm& from);
  AddPDCPConfigCfm(AddPDCPConfigCfm&& from) noexcept
    : AddPDCPConfigCfm() {
    *this = ::std::move(from);
  }

  inline AddPDCPConfigCfm& operator=(const AddPDCPConfigCfm& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddPDCPConfigCfm& operator=(AddPDCPConfigCfm&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddPDCPConfigCfm& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddPDCPConfigCfm* internal_default_instance() {
    return reinterpret_cast<const AddPDCPConfigCfm*>(
               &_AddPDCPConfigCfm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(AddPDCPConfigCfm& a, AddPDCPConfigCfm& b) {
    a.Swap(&b);
  }
  inline void Swap(AddPDCPConfigCfm* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddPDCPConfigCfm* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddPDCPConfigCfm* New() const final {
    return CreateMaybeMessage<AddPDCPConfigCfm>(nullptr);
  }

  AddPDCPConfigCfm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddPDCPConfigCfm>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddPDCPConfigCfm& from);
  void MergeFrom(const AddPDCPConfigCfm& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddPDCPConfigCfm* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srvCp.AddPDCPConfigCfm";
  }
  protected:
  explicit AddPDCPConfigCfm(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_srvCp_2eproto);
    return ::descriptor_table_srvCp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigCfmEntFieldNumber = 50,
    kHdrFieldNumber = 10,
    kCpUpHdrFieldNumber = 20,
    kSecCfmFieldNumber = 30,
    kNumEntFieldNumber = 40,
  };
  // repeated .structure.PDCPAddCfgCfmEnt config_cfm_ent = 50;
  int config_cfm_ent_size() const;
  private:
  int _internal_config_cfm_ent_size() const;
  public:
  void clear_config_cfm_ent();
  ::structure::PDCPAddCfgCfmEnt* mutable_config_cfm_ent(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::PDCPAddCfgCfmEnt >*
      mutable_config_cfm_ent();
  private:
  const ::structure::PDCPAddCfgCfmEnt& _internal_config_cfm_ent(int index) const;
  ::structure::PDCPAddCfgCfmEnt* _internal_add_config_cfm_ent();
  public:
  const ::structure::PDCPAddCfgCfmEnt& config_cfm_ent(int index) const;
  ::structure::PDCPAddCfgCfmEnt* add_config_cfm_ent();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::PDCPAddCfgCfmEnt >&
      config_cfm_ent() const;

  // .mhdr.MsgHdr hdr = 10;
  bool has_hdr() const;
  private:
  bool _internal_has_hdr() const;
  public:
  void clear_hdr();
  const ::mhdr::MsgHdr& hdr() const;
  ::mhdr::MsgHdr* release_hdr();
  ::mhdr::MsgHdr* mutable_hdr();
  void set_allocated_hdr(::mhdr::MsgHdr* hdr);
  private:
  const ::mhdr::MsgHdr& _internal_hdr() const;
  ::mhdr::MsgHdr* _internal_mutable_hdr();
  public:
  void unsafe_arena_set_allocated_hdr(
      ::mhdr::MsgHdr* hdr);
  ::mhdr::MsgHdr* unsafe_arena_release_hdr();

  // .structure.CpUpHdr cp_up_hdr = 20;
  bool has_cp_up_hdr() const;
  private:
  bool _internal_has_cp_up_hdr() const;
  public:
  void clear_cp_up_hdr();
  const ::structure::CpUpHdr& cp_up_hdr() const;
  ::structure::CpUpHdr* release_cp_up_hdr();
  ::structure::CpUpHdr* mutable_cp_up_hdr();
  void set_allocated_cp_up_hdr(::structure::CpUpHdr* cp_up_hdr);
  private:
  const ::structure::CpUpHdr& _internal_cp_up_hdr() const;
  ::structure::CpUpHdr* _internal_mutable_cp_up_hdr();
  public:
  void unsafe_arena_set_allocated_cp_up_hdr(
      ::structure::CpUpHdr* cp_up_hdr);
  ::structure::CpUpHdr* unsafe_arena_release_cp_up_hdr();

  // .structure.SecurityCfgCfm sec_cfm = 30;
  bool has_sec_cfm() const;
  private:
  bool _internal_has_sec_cfm() const;
  public:
  void clear_sec_cfm();
  const ::structure::SecurityCfgCfm& sec_cfm() const;
  ::structure::SecurityCfgCfm* release_sec_cfm();
  ::structure::SecurityCfgCfm* mutable_sec_cfm();
  void set_allocated_sec_cfm(::structure::SecurityCfgCfm* sec_cfm);
  private:
  const ::structure::SecurityCfgCfm& _internal_sec_cfm() const;
  ::structure::SecurityCfgCfm* _internal_mutable_sec_cfm();
  public:
  void unsafe_arena_set_allocated_sec_cfm(
      ::structure::SecurityCfgCfm* sec_cfm);
  ::structure::SecurityCfgCfm* unsafe_arena_release_sec_cfm();

  // uint32 num_ent = 40;
  void clear_num_ent();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_ent() const;
  void set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_ent() const;
  void _internal_set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:srvCp.AddPDCPConfigCfm)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::PDCPAddCfgCfmEnt > config_cfm_ent_;
  ::mhdr::MsgHdr* hdr_;
  ::structure::CpUpHdr* cp_up_hdr_;
  ::structure::SecurityCfgCfm* sec_cfm_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_ent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_srvCp_2eproto;
};
// -------------------------------------------------------------------

class ModifyPDCPConfigCfm PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srvCp.ModifyPDCPConfigCfm) */ {
 public:
  inline ModifyPDCPConfigCfm() : ModifyPDCPConfigCfm(nullptr) {}
  virtual ~ModifyPDCPConfigCfm();

  ModifyPDCPConfigCfm(const ModifyPDCPConfigCfm& from);
  ModifyPDCPConfigCfm(ModifyPDCPConfigCfm&& from) noexcept
    : ModifyPDCPConfigCfm() {
    *this = ::std::move(from);
  }

  inline ModifyPDCPConfigCfm& operator=(const ModifyPDCPConfigCfm& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModifyPDCPConfigCfm& operator=(ModifyPDCPConfigCfm&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModifyPDCPConfigCfm& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModifyPDCPConfigCfm* internal_default_instance() {
    return reinterpret_cast<const ModifyPDCPConfigCfm*>(
               &_ModifyPDCPConfigCfm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ModifyPDCPConfigCfm& a, ModifyPDCPConfigCfm& b) {
    a.Swap(&b);
  }
  inline void Swap(ModifyPDCPConfigCfm* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModifyPDCPConfigCfm* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModifyPDCPConfigCfm* New() const final {
    return CreateMaybeMessage<ModifyPDCPConfigCfm>(nullptr);
  }

  ModifyPDCPConfigCfm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModifyPDCPConfigCfm>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModifyPDCPConfigCfm& from);
  void MergeFrom(const ModifyPDCPConfigCfm& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModifyPDCPConfigCfm* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srvCp.ModifyPDCPConfigCfm";
  }
  protected:
  explicit ModifyPDCPConfigCfm(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_srvCp_2eproto);
    return ::descriptor_table_srvCp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigCfmEntFieldNumber = 50,
    kHdrFieldNumber = 10,
    kCpUpHdrFieldNumber = 20,
    kSecCfmFieldNumber = 30,
    kNumEntFieldNumber = 40,
  };
  // repeated .structure.PDCPModCfgCfmEnt config_cfm_ent = 50;
  int config_cfm_ent_size() const;
  private:
  int _internal_config_cfm_ent_size() const;
  public:
  void clear_config_cfm_ent();
  ::structure::PDCPModCfgCfmEnt* mutable_config_cfm_ent(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::PDCPModCfgCfmEnt >*
      mutable_config_cfm_ent();
  private:
  const ::structure::PDCPModCfgCfmEnt& _internal_config_cfm_ent(int index) const;
  ::structure::PDCPModCfgCfmEnt* _internal_add_config_cfm_ent();
  public:
  const ::structure::PDCPModCfgCfmEnt& config_cfm_ent(int index) const;
  ::structure::PDCPModCfgCfmEnt* add_config_cfm_ent();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::PDCPModCfgCfmEnt >&
      config_cfm_ent() const;

  // .mhdr.MsgHdr hdr = 10;
  bool has_hdr() const;
  private:
  bool _internal_has_hdr() const;
  public:
  void clear_hdr();
  const ::mhdr::MsgHdr& hdr() const;
  ::mhdr::MsgHdr* release_hdr();
  ::mhdr::MsgHdr* mutable_hdr();
  void set_allocated_hdr(::mhdr::MsgHdr* hdr);
  private:
  const ::mhdr::MsgHdr& _internal_hdr() const;
  ::mhdr::MsgHdr* _internal_mutable_hdr();
  public:
  void unsafe_arena_set_allocated_hdr(
      ::mhdr::MsgHdr* hdr);
  ::mhdr::MsgHdr* unsafe_arena_release_hdr();

  // .structure.CpUpHdr cp_up_hdr = 20;
  bool has_cp_up_hdr() const;
  private:
  bool _internal_has_cp_up_hdr() const;
  public:
  void clear_cp_up_hdr();
  const ::structure::CpUpHdr& cp_up_hdr() const;
  ::structure::CpUpHdr* release_cp_up_hdr();
  ::structure::CpUpHdr* mutable_cp_up_hdr();
  void set_allocated_cp_up_hdr(::structure::CpUpHdr* cp_up_hdr);
  private:
  const ::structure::CpUpHdr& _internal_cp_up_hdr() const;
  ::structure::CpUpHdr* _internal_mutable_cp_up_hdr();
  public:
  void unsafe_arena_set_allocated_cp_up_hdr(
      ::structure::CpUpHdr* cp_up_hdr);
  ::structure::CpUpHdr* unsafe_arena_release_cp_up_hdr();

  // .structure.SecurityCfgCfm sec_cfm = 30;
  bool has_sec_cfm() const;
  private:
  bool _internal_has_sec_cfm() const;
  public:
  void clear_sec_cfm();
  const ::structure::SecurityCfgCfm& sec_cfm() const;
  ::structure::SecurityCfgCfm* release_sec_cfm();
  ::structure::SecurityCfgCfm* mutable_sec_cfm();
  void set_allocated_sec_cfm(::structure::SecurityCfgCfm* sec_cfm);
  private:
  const ::structure::SecurityCfgCfm& _internal_sec_cfm() const;
  ::structure::SecurityCfgCfm* _internal_mutable_sec_cfm();
  public:
  void unsafe_arena_set_allocated_sec_cfm(
      ::structure::SecurityCfgCfm* sec_cfm);
  ::structure::SecurityCfgCfm* unsafe_arena_release_sec_cfm();

  // uint32 num_ent = 40;
  void clear_num_ent();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_ent() const;
  void set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_ent() const;
  void _internal_set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:srvCp.ModifyPDCPConfigCfm)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::PDCPModCfgCfmEnt > config_cfm_ent_;
  ::mhdr::MsgHdr* hdr_;
  ::structure::CpUpHdr* cp_up_hdr_;
  ::structure::SecurityCfgCfm* sec_cfm_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_ent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_srvCp_2eproto;
};
// -------------------------------------------------------------------

class CfmReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srvCp.CfmReply) */ {
 public:
  inline CfmReply() : CfmReply(nullptr) {}
  virtual ~CfmReply();

  CfmReply(const CfmReply& from);
  CfmReply(CfmReply&& from) noexcept
    : CfmReply() {
    *this = ::std::move(from);
  }

  inline CfmReply& operator=(const CfmReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline CfmReply& operator=(CfmReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CfmReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CfmReply* internal_default_instance() {
    return reinterpret_cast<const CfmReply*>(
               &_CfmReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CfmReply& a, CfmReply& b) {
    a.Swap(&b);
  }
  inline void Swap(CfmReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CfmReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CfmReply* New() const final {
    return CreateMaybeMessage<CfmReply>(nullptr);
  }

  CfmReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CfmReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CfmReply& from);
  void MergeFrom(const CfmReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CfmReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srvCp.CfmReply";
  }
  protected:
  explicit CfmReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_srvCp_2eproto);
    return ::descriptor_table_srvCp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHdrFieldNumber = 10,
  };
  // .mhdr.MsgHdr hdr = 10;
  bool has_hdr() const;
  private:
  bool _internal_has_hdr() const;
  public:
  void clear_hdr();
  const ::mhdr::MsgHdr& hdr() const;
  ::mhdr::MsgHdr* release_hdr();
  ::mhdr::MsgHdr* mutable_hdr();
  void set_allocated_hdr(::mhdr::MsgHdr* hdr);
  private:
  const ::mhdr::MsgHdr& _internal_hdr() const;
  ::mhdr::MsgHdr* _internal_mutable_hdr();
  public:
  void unsafe_arena_set_allocated_hdr(
      ::mhdr::MsgHdr* hdr);
  ::mhdr::MsgHdr* unsafe_arena_release_hdr();

  // @@protoc_insertion_point(class_scope:srvCp.CfmReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mhdr::MsgHdr* hdr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_srvCp_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SecurityConfigCfm

// .mhdr.MsgHdr hdr = 10;
inline bool SecurityConfigCfm::_internal_has_hdr() const {
  return this != internal_default_instance() && hdr_ != nullptr;
}
inline bool SecurityConfigCfm::has_hdr() const {
  return _internal_has_hdr();
}
inline const ::mhdr::MsgHdr& SecurityConfigCfm::_internal_hdr() const {
  const ::mhdr::MsgHdr* p = hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mhdr::MsgHdr*>(
      &::mhdr::_MsgHdr_default_instance_);
}
inline const ::mhdr::MsgHdr& SecurityConfigCfm::hdr() const {
  // @@protoc_insertion_point(field_get:srvCp.SecurityConfigCfm.hdr)
  return _internal_hdr();
}
inline void SecurityConfigCfm::unsafe_arena_set_allocated_hdr(
    ::mhdr::MsgHdr* hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  hdr_ = hdr;
  if (hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvCp.SecurityConfigCfm.hdr)
}
inline ::mhdr::MsgHdr* SecurityConfigCfm::release_hdr() {
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mhdr::MsgHdr* SecurityConfigCfm::unsafe_arena_release_hdr() {
  // @@protoc_insertion_point(field_release:srvCp.SecurityConfigCfm.hdr)
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  return temp;
}
inline ::mhdr::MsgHdr* SecurityConfigCfm::_internal_mutable_hdr() {
  
  if (hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::mhdr::MsgHdr>(GetArena());
    hdr_ = p;
  }
  return hdr_;
}
inline ::mhdr::MsgHdr* SecurityConfigCfm::mutable_hdr() {
  // @@protoc_insertion_point(field_mutable:srvCp.SecurityConfigCfm.hdr)
  return _internal_mutable_hdr();
}
inline void SecurityConfigCfm::set_allocated_hdr(::mhdr::MsgHdr* hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  if (hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr)->GetArena();
    if (message_arena != submessage_arena) {
      hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hdr, submessage_arena);
    }
    
  } else {
    
  }
  hdr_ = hdr;
  // @@protoc_insertion_point(field_set_allocated:srvCp.SecurityConfigCfm.hdr)
}

// .structure.CpUpHdr cp_up_hdr = 20;
inline bool SecurityConfigCfm::_internal_has_cp_up_hdr() const {
  return this != internal_default_instance() && cp_up_hdr_ != nullptr;
}
inline bool SecurityConfigCfm::has_cp_up_hdr() const {
  return _internal_has_cp_up_hdr();
}
inline const ::structure::CpUpHdr& SecurityConfigCfm::_internal_cp_up_hdr() const {
  const ::structure::CpUpHdr* p = cp_up_hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::structure::CpUpHdr*>(
      &::structure::_CpUpHdr_default_instance_);
}
inline const ::structure::CpUpHdr& SecurityConfigCfm::cp_up_hdr() const {
  // @@protoc_insertion_point(field_get:srvCp.SecurityConfigCfm.cp_up_hdr)
  return _internal_cp_up_hdr();
}
inline void SecurityConfigCfm::unsafe_arena_set_allocated_cp_up_hdr(
    ::structure::CpUpHdr* cp_up_hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr_);
  }
  cp_up_hdr_ = cp_up_hdr;
  if (cp_up_hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvCp.SecurityConfigCfm.cp_up_hdr)
}
inline ::structure::CpUpHdr* SecurityConfigCfm::release_cp_up_hdr() {
  
  ::structure::CpUpHdr* temp = cp_up_hdr_;
  cp_up_hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::structure::CpUpHdr* SecurityConfigCfm::unsafe_arena_release_cp_up_hdr() {
  // @@protoc_insertion_point(field_release:srvCp.SecurityConfigCfm.cp_up_hdr)
  
  ::structure::CpUpHdr* temp = cp_up_hdr_;
  cp_up_hdr_ = nullptr;
  return temp;
}
inline ::structure::CpUpHdr* SecurityConfigCfm::_internal_mutable_cp_up_hdr() {
  
  if (cp_up_hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::structure::CpUpHdr>(GetArena());
    cp_up_hdr_ = p;
  }
  return cp_up_hdr_;
}
inline ::structure::CpUpHdr* SecurityConfigCfm::mutable_cp_up_hdr() {
  // @@protoc_insertion_point(field_mutable:srvCp.SecurityConfigCfm.cp_up_hdr)
  return _internal_mutable_cp_up_hdr();
}
inline void SecurityConfigCfm::set_allocated_cp_up_hdr(::structure::CpUpHdr* cp_up_hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr_);
  }
  if (cp_up_hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr)->GetArena();
    if (message_arena != submessage_arena) {
      cp_up_hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cp_up_hdr, submessage_arena);
    }
    
  } else {
    
  }
  cp_up_hdr_ = cp_up_hdr;
  // @@protoc_insertion_point(field_set_allocated:srvCp.SecurityConfigCfm.cp_up_hdr)
}

// .structure.SecurityCfgCfm sec_cfm = 30;
inline bool SecurityConfigCfm::_internal_has_sec_cfm() const {
  return this != internal_default_instance() && sec_cfm_ != nullptr;
}
inline bool SecurityConfigCfm::has_sec_cfm() const {
  return _internal_has_sec_cfm();
}
inline const ::structure::SecurityCfgCfm& SecurityConfigCfm::_internal_sec_cfm() const {
  const ::structure::SecurityCfgCfm* p = sec_cfm_;
  return p != nullptr ? *p : *reinterpret_cast<const ::structure::SecurityCfgCfm*>(
      &::structure::_SecurityCfgCfm_default_instance_);
}
inline const ::structure::SecurityCfgCfm& SecurityConfigCfm::sec_cfm() const {
  // @@protoc_insertion_point(field_get:srvCp.SecurityConfigCfm.sec_cfm)
  return _internal_sec_cfm();
}
inline void SecurityConfigCfm::unsafe_arena_set_allocated_sec_cfm(
    ::structure::SecurityCfgCfm* sec_cfm) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sec_cfm_);
  }
  sec_cfm_ = sec_cfm;
  if (sec_cfm) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvCp.SecurityConfigCfm.sec_cfm)
}
inline ::structure::SecurityCfgCfm* SecurityConfigCfm::release_sec_cfm() {
  
  ::structure::SecurityCfgCfm* temp = sec_cfm_;
  sec_cfm_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::structure::SecurityCfgCfm* SecurityConfigCfm::unsafe_arena_release_sec_cfm() {
  // @@protoc_insertion_point(field_release:srvCp.SecurityConfigCfm.sec_cfm)
  
  ::structure::SecurityCfgCfm* temp = sec_cfm_;
  sec_cfm_ = nullptr;
  return temp;
}
inline ::structure::SecurityCfgCfm* SecurityConfigCfm::_internal_mutable_sec_cfm() {
  
  if (sec_cfm_ == nullptr) {
    auto* p = CreateMaybeMessage<::structure::SecurityCfgCfm>(GetArena());
    sec_cfm_ = p;
  }
  return sec_cfm_;
}
inline ::structure::SecurityCfgCfm* SecurityConfigCfm::mutable_sec_cfm() {
  // @@protoc_insertion_point(field_mutable:srvCp.SecurityConfigCfm.sec_cfm)
  return _internal_mutable_sec_cfm();
}
inline void SecurityConfigCfm::set_allocated_sec_cfm(::structure::SecurityCfgCfm* sec_cfm) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sec_cfm_);
  }
  if (sec_cfm) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sec_cfm)->GetArena();
    if (message_arena != submessage_arena) {
      sec_cfm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sec_cfm, submessage_arena);
    }
    
  } else {
    
  }
  sec_cfm_ = sec_cfm;
  // @@protoc_insertion_point(field_set_allocated:srvCp.SecurityConfigCfm.sec_cfm)
}

// -------------------------------------------------------------------

// CreateTunnelCfm

// .mhdr.MsgHdr hdr = 10;
inline bool CreateTunnelCfm::_internal_has_hdr() const {
  return this != internal_default_instance() && hdr_ != nullptr;
}
inline bool CreateTunnelCfm::has_hdr() const {
  return _internal_has_hdr();
}
inline const ::mhdr::MsgHdr& CreateTunnelCfm::_internal_hdr() const {
  const ::mhdr::MsgHdr* p = hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mhdr::MsgHdr*>(
      &::mhdr::_MsgHdr_default_instance_);
}
inline const ::mhdr::MsgHdr& CreateTunnelCfm::hdr() const {
  // @@protoc_insertion_point(field_get:srvCp.CreateTunnelCfm.hdr)
  return _internal_hdr();
}
inline void CreateTunnelCfm::unsafe_arena_set_allocated_hdr(
    ::mhdr::MsgHdr* hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  hdr_ = hdr;
  if (hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvCp.CreateTunnelCfm.hdr)
}
inline ::mhdr::MsgHdr* CreateTunnelCfm::release_hdr() {
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mhdr::MsgHdr* CreateTunnelCfm::unsafe_arena_release_hdr() {
  // @@protoc_insertion_point(field_release:srvCp.CreateTunnelCfm.hdr)
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  return temp;
}
inline ::mhdr::MsgHdr* CreateTunnelCfm::_internal_mutable_hdr() {
  
  if (hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::mhdr::MsgHdr>(GetArena());
    hdr_ = p;
  }
  return hdr_;
}
inline ::mhdr::MsgHdr* CreateTunnelCfm::mutable_hdr() {
  // @@protoc_insertion_point(field_mutable:srvCp.CreateTunnelCfm.hdr)
  return _internal_mutable_hdr();
}
inline void CreateTunnelCfm::set_allocated_hdr(::mhdr::MsgHdr* hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  if (hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr)->GetArena();
    if (message_arena != submessage_arena) {
      hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hdr, submessage_arena);
    }
    
  } else {
    
  }
  hdr_ = hdr;
  // @@protoc_insertion_point(field_set_allocated:srvCp.CreateTunnelCfm.hdr)
}

// .structure.CpUpHdr cp_up_hdr = 20;
inline bool CreateTunnelCfm::_internal_has_cp_up_hdr() const {
  return this != internal_default_instance() && cp_up_hdr_ != nullptr;
}
inline bool CreateTunnelCfm::has_cp_up_hdr() const {
  return _internal_has_cp_up_hdr();
}
inline const ::structure::CpUpHdr& CreateTunnelCfm::_internal_cp_up_hdr() const {
  const ::structure::CpUpHdr* p = cp_up_hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::structure::CpUpHdr*>(
      &::structure::_CpUpHdr_default_instance_);
}
inline const ::structure::CpUpHdr& CreateTunnelCfm::cp_up_hdr() const {
  // @@protoc_insertion_point(field_get:srvCp.CreateTunnelCfm.cp_up_hdr)
  return _internal_cp_up_hdr();
}
inline void CreateTunnelCfm::unsafe_arena_set_allocated_cp_up_hdr(
    ::structure::CpUpHdr* cp_up_hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr_);
  }
  cp_up_hdr_ = cp_up_hdr;
  if (cp_up_hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvCp.CreateTunnelCfm.cp_up_hdr)
}
inline ::structure::CpUpHdr* CreateTunnelCfm::release_cp_up_hdr() {
  
  ::structure::CpUpHdr* temp = cp_up_hdr_;
  cp_up_hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::structure::CpUpHdr* CreateTunnelCfm::unsafe_arena_release_cp_up_hdr() {
  // @@protoc_insertion_point(field_release:srvCp.CreateTunnelCfm.cp_up_hdr)
  
  ::structure::CpUpHdr* temp = cp_up_hdr_;
  cp_up_hdr_ = nullptr;
  return temp;
}
inline ::structure::CpUpHdr* CreateTunnelCfm::_internal_mutable_cp_up_hdr() {
  
  if (cp_up_hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::structure::CpUpHdr>(GetArena());
    cp_up_hdr_ = p;
  }
  return cp_up_hdr_;
}
inline ::structure::CpUpHdr* CreateTunnelCfm::mutable_cp_up_hdr() {
  // @@protoc_insertion_point(field_mutable:srvCp.CreateTunnelCfm.cp_up_hdr)
  return _internal_mutable_cp_up_hdr();
}
inline void CreateTunnelCfm::set_allocated_cp_up_hdr(::structure::CpUpHdr* cp_up_hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr_);
  }
  if (cp_up_hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr)->GetArena();
    if (message_arena != submessage_arena) {
      cp_up_hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cp_up_hdr, submessage_arena);
    }
    
  } else {
    
  }
  cp_up_hdr_ = cp_up_hdr;
  // @@protoc_insertion_point(field_set_allocated:srvCp.CreateTunnelCfm.cp_up_hdr)
}

// uint32 num_ent = 31;
inline void CreateTunnelCfm::clear_num_ent() {
  num_ent_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateTunnelCfm::_internal_num_ent() const {
  return num_ent_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateTunnelCfm::num_ent() const {
  // @@protoc_insertion_point(field_get:srvCp.CreateTunnelCfm.num_ent)
  return _internal_num_ent();
}
inline void CreateTunnelCfm::_internal_set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_ent_ = value;
}
inline void CreateTunnelCfm::set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_ent(value);
  // @@protoc_insertion_point(field_set:srvCp.CreateTunnelCfm.num_ent)
}

// repeated .structure.CreateTnlCfmEnt tnl_cfm_list = 40;
inline int CreateTunnelCfm::_internal_tnl_cfm_list_size() const {
  return tnl_cfm_list_.size();
}
inline int CreateTunnelCfm::tnl_cfm_list_size() const {
  return _internal_tnl_cfm_list_size();
}
inline ::structure::CreateTnlCfmEnt* CreateTunnelCfm::mutable_tnl_cfm_list(int index) {
  // @@protoc_insertion_point(field_mutable:srvCp.CreateTunnelCfm.tnl_cfm_list)
  return tnl_cfm_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::CreateTnlCfmEnt >*
CreateTunnelCfm::mutable_tnl_cfm_list() {
  // @@protoc_insertion_point(field_mutable_list:srvCp.CreateTunnelCfm.tnl_cfm_list)
  return &tnl_cfm_list_;
}
inline const ::structure::CreateTnlCfmEnt& CreateTunnelCfm::_internal_tnl_cfm_list(int index) const {
  return tnl_cfm_list_.Get(index);
}
inline const ::structure::CreateTnlCfmEnt& CreateTunnelCfm::tnl_cfm_list(int index) const {
  // @@protoc_insertion_point(field_get:srvCp.CreateTunnelCfm.tnl_cfm_list)
  return _internal_tnl_cfm_list(index);
}
inline ::structure::CreateTnlCfmEnt* CreateTunnelCfm::_internal_add_tnl_cfm_list() {
  return tnl_cfm_list_.Add();
}
inline ::structure::CreateTnlCfmEnt* CreateTunnelCfm::add_tnl_cfm_list() {
  // @@protoc_insertion_point(field_add:srvCp.CreateTunnelCfm.tnl_cfm_list)
  return _internal_add_tnl_cfm_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::CreateTnlCfmEnt >&
CreateTunnelCfm::tnl_cfm_list() const {
  // @@protoc_insertion_point(field_list:srvCp.CreateTunnelCfm.tnl_cfm_list)
  return tnl_cfm_list_;
}

// -------------------------------------------------------------------

// ModifyTunnelCfm

// .mhdr.MsgHdr hdr = 10;
inline bool ModifyTunnelCfm::_internal_has_hdr() const {
  return this != internal_default_instance() && hdr_ != nullptr;
}
inline bool ModifyTunnelCfm::has_hdr() const {
  return _internal_has_hdr();
}
inline const ::mhdr::MsgHdr& ModifyTunnelCfm::_internal_hdr() const {
  const ::mhdr::MsgHdr* p = hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mhdr::MsgHdr*>(
      &::mhdr::_MsgHdr_default_instance_);
}
inline const ::mhdr::MsgHdr& ModifyTunnelCfm::hdr() const {
  // @@protoc_insertion_point(field_get:srvCp.ModifyTunnelCfm.hdr)
  return _internal_hdr();
}
inline void ModifyTunnelCfm::unsafe_arena_set_allocated_hdr(
    ::mhdr::MsgHdr* hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  hdr_ = hdr;
  if (hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvCp.ModifyTunnelCfm.hdr)
}
inline ::mhdr::MsgHdr* ModifyTunnelCfm::release_hdr() {
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mhdr::MsgHdr* ModifyTunnelCfm::unsafe_arena_release_hdr() {
  // @@protoc_insertion_point(field_release:srvCp.ModifyTunnelCfm.hdr)
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  return temp;
}
inline ::mhdr::MsgHdr* ModifyTunnelCfm::_internal_mutable_hdr() {
  
  if (hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::mhdr::MsgHdr>(GetArena());
    hdr_ = p;
  }
  return hdr_;
}
inline ::mhdr::MsgHdr* ModifyTunnelCfm::mutable_hdr() {
  // @@protoc_insertion_point(field_mutable:srvCp.ModifyTunnelCfm.hdr)
  return _internal_mutable_hdr();
}
inline void ModifyTunnelCfm::set_allocated_hdr(::mhdr::MsgHdr* hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  if (hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr)->GetArena();
    if (message_arena != submessage_arena) {
      hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hdr, submessage_arena);
    }
    
  } else {
    
  }
  hdr_ = hdr;
  // @@protoc_insertion_point(field_set_allocated:srvCp.ModifyTunnelCfm.hdr)
}

// .structure.CpUpHdr cp_up_hdr = 20;
inline bool ModifyTunnelCfm::_internal_has_cp_up_hdr() const {
  return this != internal_default_instance() && cp_up_hdr_ != nullptr;
}
inline bool ModifyTunnelCfm::has_cp_up_hdr() const {
  return _internal_has_cp_up_hdr();
}
inline const ::structure::CpUpHdr& ModifyTunnelCfm::_internal_cp_up_hdr() const {
  const ::structure::CpUpHdr* p = cp_up_hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::structure::CpUpHdr*>(
      &::structure::_CpUpHdr_default_instance_);
}
inline const ::structure::CpUpHdr& ModifyTunnelCfm::cp_up_hdr() const {
  // @@protoc_insertion_point(field_get:srvCp.ModifyTunnelCfm.cp_up_hdr)
  return _internal_cp_up_hdr();
}
inline void ModifyTunnelCfm::unsafe_arena_set_allocated_cp_up_hdr(
    ::structure::CpUpHdr* cp_up_hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr_);
  }
  cp_up_hdr_ = cp_up_hdr;
  if (cp_up_hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvCp.ModifyTunnelCfm.cp_up_hdr)
}
inline ::structure::CpUpHdr* ModifyTunnelCfm::release_cp_up_hdr() {
  
  ::structure::CpUpHdr* temp = cp_up_hdr_;
  cp_up_hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::structure::CpUpHdr* ModifyTunnelCfm::unsafe_arena_release_cp_up_hdr() {
  // @@protoc_insertion_point(field_release:srvCp.ModifyTunnelCfm.cp_up_hdr)
  
  ::structure::CpUpHdr* temp = cp_up_hdr_;
  cp_up_hdr_ = nullptr;
  return temp;
}
inline ::structure::CpUpHdr* ModifyTunnelCfm::_internal_mutable_cp_up_hdr() {
  
  if (cp_up_hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::structure::CpUpHdr>(GetArena());
    cp_up_hdr_ = p;
  }
  return cp_up_hdr_;
}
inline ::structure::CpUpHdr* ModifyTunnelCfm::mutable_cp_up_hdr() {
  // @@protoc_insertion_point(field_mutable:srvCp.ModifyTunnelCfm.cp_up_hdr)
  return _internal_mutable_cp_up_hdr();
}
inline void ModifyTunnelCfm::set_allocated_cp_up_hdr(::structure::CpUpHdr* cp_up_hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr_);
  }
  if (cp_up_hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr)->GetArena();
    if (message_arena != submessage_arena) {
      cp_up_hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cp_up_hdr, submessage_arena);
    }
    
  } else {
    
  }
  cp_up_hdr_ = cp_up_hdr;
  // @@protoc_insertion_point(field_set_allocated:srvCp.ModifyTunnelCfm.cp_up_hdr)
}

// uint32 num_ent = 31;
inline void ModifyTunnelCfm::clear_num_ent() {
  num_ent_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModifyTunnelCfm::_internal_num_ent() const {
  return num_ent_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModifyTunnelCfm::num_ent() const {
  // @@protoc_insertion_point(field_get:srvCp.ModifyTunnelCfm.num_ent)
  return _internal_num_ent();
}
inline void ModifyTunnelCfm::_internal_set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_ent_ = value;
}
inline void ModifyTunnelCfm::set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_ent(value);
  // @@protoc_insertion_point(field_set:srvCp.ModifyTunnelCfm.num_ent)
}

// repeated .structure.ModTnlCfmEnt tnl_cfm_list = 40;
inline int ModifyTunnelCfm::_internal_tnl_cfm_list_size() const {
  return tnl_cfm_list_.size();
}
inline int ModifyTunnelCfm::tnl_cfm_list_size() const {
  return _internal_tnl_cfm_list_size();
}
inline ::structure::ModTnlCfmEnt* ModifyTunnelCfm::mutable_tnl_cfm_list(int index) {
  // @@protoc_insertion_point(field_mutable:srvCp.ModifyTunnelCfm.tnl_cfm_list)
  return tnl_cfm_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::ModTnlCfmEnt >*
ModifyTunnelCfm::mutable_tnl_cfm_list() {
  // @@protoc_insertion_point(field_mutable_list:srvCp.ModifyTunnelCfm.tnl_cfm_list)
  return &tnl_cfm_list_;
}
inline const ::structure::ModTnlCfmEnt& ModifyTunnelCfm::_internal_tnl_cfm_list(int index) const {
  return tnl_cfm_list_.Get(index);
}
inline const ::structure::ModTnlCfmEnt& ModifyTunnelCfm::tnl_cfm_list(int index) const {
  // @@protoc_insertion_point(field_get:srvCp.ModifyTunnelCfm.tnl_cfm_list)
  return _internal_tnl_cfm_list(index);
}
inline ::structure::ModTnlCfmEnt* ModifyTunnelCfm::_internal_add_tnl_cfm_list() {
  return tnl_cfm_list_.Add();
}
inline ::structure::ModTnlCfmEnt* ModifyTunnelCfm::add_tnl_cfm_list() {
  // @@protoc_insertion_point(field_add:srvCp.ModifyTunnelCfm.tnl_cfm_list)
  return _internal_add_tnl_cfm_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::ModTnlCfmEnt >&
ModifyTunnelCfm::tnl_cfm_list() const {
  // @@protoc_insertion_point(field_list:srvCp.ModifyTunnelCfm.tnl_cfm_list)
  return tnl_cfm_list_;
}

// -------------------------------------------------------------------

// DeleteTunnelCfm

// .mhdr.MsgHdr hdr = 10;
inline bool DeleteTunnelCfm::_internal_has_hdr() const {
  return this != internal_default_instance() && hdr_ != nullptr;
}
inline bool DeleteTunnelCfm::has_hdr() const {
  return _internal_has_hdr();
}
inline const ::mhdr::MsgHdr& DeleteTunnelCfm::_internal_hdr() const {
  const ::mhdr::MsgHdr* p = hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mhdr::MsgHdr*>(
      &::mhdr::_MsgHdr_default_instance_);
}
inline const ::mhdr::MsgHdr& DeleteTunnelCfm::hdr() const {
  // @@protoc_insertion_point(field_get:srvCp.DeleteTunnelCfm.hdr)
  return _internal_hdr();
}
inline void DeleteTunnelCfm::unsafe_arena_set_allocated_hdr(
    ::mhdr::MsgHdr* hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  hdr_ = hdr;
  if (hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvCp.DeleteTunnelCfm.hdr)
}
inline ::mhdr::MsgHdr* DeleteTunnelCfm::release_hdr() {
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mhdr::MsgHdr* DeleteTunnelCfm::unsafe_arena_release_hdr() {
  // @@protoc_insertion_point(field_release:srvCp.DeleteTunnelCfm.hdr)
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  return temp;
}
inline ::mhdr::MsgHdr* DeleteTunnelCfm::_internal_mutable_hdr() {
  
  if (hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::mhdr::MsgHdr>(GetArena());
    hdr_ = p;
  }
  return hdr_;
}
inline ::mhdr::MsgHdr* DeleteTunnelCfm::mutable_hdr() {
  // @@protoc_insertion_point(field_mutable:srvCp.DeleteTunnelCfm.hdr)
  return _internal_mutable_hdr();
}
inline void DeleteTunnelCfm::set_allocated_hdr(::mhdr::MsgHdr* hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  if (hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr)->GetArena();
    if (message_arena != submessage_arena) {
      hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hdr, submessage_arena);
    }
    
  } else {
    
  }
  hdr_ = hdr;
  // @@protoc_insertion_point(field_set_allocated:srvCp.DeleteTunnelCfm.hdr)
}

// .structure.CpUpHdr cp_up_hdr = 20;
inline bool DeleteTunnelCfm::_internal_has_cp_up_hdr() const {
  return this != internal_default_instance() && cp_up_hdr_ != nullptr;
}
inline bool DeleteTunnelCfm::has_cp_up_hdr() const {
  return _internal_has_cp_up_hdr();
}
inline const ::structure::CpUpHdr& DeleteTunnelCfm::_internal_cp_up_hdr() const {
  const ::structure::CpUpHdr* p = cp_up_hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::structure::CpUpHdr*>(
      &::structure::_CpUpHdr_default_instance_);
}
inline const ::structure::CpUpHdr& DeleteTunnelCfm::cp_up_hdr() const {
  // @@protoc_insertion_point(field_get:srvCp.DeleteTunnelCfm.cp_up_hdr)
  return _internal_cp_up_hdr();
}
inline void DeleteTunnelCfm::unsafe_arena_set_allocated_cp_up_hdr(
    ::structure::CpUpHdr* cp_up_hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr_);
  }
  cp_up_hdr_ = cp_up_hdr;
  if (cp_up_hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvCp.DeleteTunnelCfm.cp_up_hdr)
}
inline ::structure::CpUpHdr* DeleteTunnelCfm::release_cp_up_hdr() {
  
  ::structure::CpUpHdr* temp = cp_up_hdr_;
  cp_up_hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::structure::CpUpHdr* DeleteTunnelCfm::unsafe_arena_release_cp_up_hdr() {
  // @@protoc_insertion_point(field_release:srvCp.DeleteTunnelCfm.cp_up_hdr)
  
  ::structure::CpUpHdr* temp = cp_up_hdr_;
  cp_up_hdr_ = nullptr;
  return temp;
}
inline ::structure::CpUpHdr* DeleteTunnelCfm::_internal_mutable_cp_up_hdr() {
  
  if (cp_up_hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::structure::CpUpHdr>(GetArena());
    cp_up_hdr_ = p;
  }
  return cp_up_hdr_;
}
inline ::structure::CpUpHdr* DeleteTunnelCfm::mutable_cp_up_hdr() {
  // @@protoc_insertion_point(field_mutable:srvCp.DeleteTunnelCfm.cp_up_hdr)
  return _internal_mutable_cp_up_hdr();
}
inline void DeleteTunnelCfm::set_allocated_cp_up_hdr(::structure::CpUpHdr* cp_up_hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr_);
  }
  if (cp_up_hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr)->GetArena();
    if (message_arena != submessage_arena) {
      cp_up_hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cp_up_hdr, submessage_arena);
    }
    
  } else {
    
  }
  cp_up_hdr_ = cp_up_hdr;
  // @@protoc_insertion_point(field_set_allocated:srvCp.DeleteTunnelCfm.cp_up_hdr)
}

// uint32 num_ent = 31;
inline void DeleteTunnelCfm::clear_num_ent() {
  num_ent_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteTunnelCfm::_internal_num_ent() const {
  return num_ent_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteTunnelCfm::num_ent() const {
  // @@protoc_insertion_point(field_get:srvCp.DeleteTunnelCfm.num_ent)
  return _internal_num_ent();
}
inline void DeleteTunnelCfm::_internal_set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_ent_ = value;
}
inline void DeleteTunnelCfm::set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_ent(value);
  // @@protoc_insertion_point(field_set:srvCp.DeleteTunnelCfm.num_ent)
}

// repeated .structure.DelTnlCfmEnt tnl_cfm_list = 40;
inline int DeleteTunnelCfm::_internal_tnl_cfm_list_size() const {
  return tnl_cfm_list_.size();
}
inline int DeleteTunnelCfm::tnl_cfm_list_size() const {
  return _internal_tnl_cfm_list_size();
}
inline ::structure::DelTnlCfmEnt* DeleteTunnelCfm::mutable_tnl_cfm_list(int index) {
  // @@protoc_insertion_point(field_mutable:srvCp.DeleteTunnelCfm.tnl_cfm_list)
  return tnl_cfm_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::DelTnlCfmEnt >*
DeleteTunnelCfm::mutable_tnl_cfm_list() {
  // @@protoc_insertion_point(field_mutable_list:srvCp.DeleteTunnelCfm.tnl_cfm_list)
  return &tnl_cfm_list_;
}
inline const ::structure::DelTnlCfmEnt& DeleteTunnelCfm::_internal_tnl_cfm_list(int index) const {
  return tnl_cfm_list_.Get(index);
}
inline const ::structure::DelTnlCfmEnt& DeleteTunnelCfm::tnl_cfm_list(int index) const {
  // @@protoc_insertion_point(field_get:srvCp.DeleteTunnelCfm.tnl_cfm_list)
  return _internal_tnl_cfm_list(index);
}
inline ::structure::DelTnlCfmEnt* DeleteTunnelCfm::_internal_add_tnl_cfm_list() {
  return tnl_cfm_list_.Add();
}
inline ::structure::DelTnlCfmEnt* DeleteTunnelCfm::add_tnl_cfm_list() {
  // @@protoc_insertion_point(field_add:srvCp.DeleteTunnelCfm.tnl_cfm_list)
  return _internal_add_tnl_cfm_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::DelTnlCfmEnt >&
DeleteTunnelCfm::tnl_cfm_list() const {
  // @@protoc_insertion_point(field_list:srvCp.DeleteTunnelCfm.tnl_cfm_list)
  return tnl_cfm_list_;
}

// -------------------------------------------------------------------

// AddRbConfigCfm

// .mhdr.MsgHdr hdr = 10;
inline bool AddRbConfigCfm::_internal_has_hdr() const {
  return this != internal_default_instance() && hdr_ != nullptr;
}
inline bool AddRbConfigCfm::has_hdr() const {
  return _internal_has_hdr();
}
inline const ::mhdr::MsgHdr& AddRbConfigCfm::_internal_hdr() const {
  const ::mhdr::MsgHdr* p = hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mhdr::MsgHdr*>(
      &::mhdr::_MsgHdr_default_instance_);
}
inline const ::mhdr::MsgHdr& AddRbConfigCfm::hdr() const {
  // @@protoc_insertion_point(field_get:srvCp.AddRbConfigCfm.hdr)
  return _internal_hdr();
}
inline void AddRbConfigCfm::unsafe_arena_set_allocated_hdr(
    ::mhdr::MsgHdr* hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  hdr_ = hdr;
  if (hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvCp.AddRbConfigCfm.hdr)
}
inline ::mhdr::MsgHdr* AddRbConfigCfm::release_hdr() {
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mhdr::MsgHdr* AddRbConfigCfm::unsafe_arena_release_hdr() {
  // @@protoc_insertion_point(field_release:srvCp.AddRbConfigCfm.hdr)
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  return temp;
}
inline ::mhdr::MsgHdr* AddRbConfigCfm::_internal_mutable_hdr() {
  
  if (hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::mhdr::MsgHdr>(GetArena());
    hdr_ = p;
  }
  return hdr_;
}
inline ::mhdr::MsgHdr* AddRbConfigCfm::mutable_hdr() {
  // @@protoc_insertion_point(field_mutable:srvCp.AddRbConfigCfm.hdr)
  return _internal_mutable_hdr();
}
inline void AddRbConfigCfm::set_allocated_hdr(::mhdr::MsgHdr* hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  if (hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr)->GetArena();
    if (message_arena != submessage_arena) {
      hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hdr, submessage_arena);
    }
    
  } else {
    
  }
  hdr_ = hdr;
  // @@protoc_insertion_point(field_set_allocated:srvCp.AddRbConfigCfm.hdr)
}

// .structure.CpUpHdr cp_up_hdr = 20;
inline bool AddRbConfigCfm::_internal_has_cp_up_hdr() const {
  return this != internal_default_instance() && cp_up_hdr_ != nullptr;
}
inline bool AddRbConfigCfm::has_cp_up_hdr() const {
  return _internal_has_cp_up_hdr();
}
inline const ::structure::CpUpHdr& AddRbConfigCfm::_internal_cp_up_hdr() const {
  const ::structure::CpUpHdr* p = cp_up_hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::structure::CpUpHdr*>(
      &::structure::_CpUpHdr_default_instance_);
}
inline const ::structure::CpUpHdr& AddRbConfigCfm::cp_up_hdr() const {
  // @@protoc_insertion_point(field_get:srvCp.AddRbConfigCfm.cp_up_hdr)
  return _internal_cp_up_hdr();
}
inline void AddRbConfigCfm::unsafe_arena_set_allocated_cp_up_hdr(
    ::structure::CpUpHdr* cp_up_hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr_);
  }
  cp_up_hdr_ = cp_up_hdr;
  if (cp_up_hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvCp.AddRbConfigCfm.cp_up_hdr)
}
inline ::structure::CpUpHdr* AddRbConfigCfm::release_cp_up_hdr() {
  
  ::structure::CpUpHdr* temp = cp_up_hdr_;
  cp_up_hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::structure::CpUpHdr* AddRbConfigCfm::unsafe_arena_release_cp_up_hdr() {
  // @@protoc_insertion_point(field_release:srvCp.AddRbConfigCfm.cp_up_hdr)
  
  ::structure::CpUpHdr* temp = cp_up_hdr_;
  cp_up_hdr_ = nullptr;
  return temp;
}
inline ::structure::CpUpHdr* AddRbConfigCfm::_internal_mutable_cp_up_hdr() {
  
  if (cp_up_hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::structure::CpUpHdr>(GetArena());
    cp_up_hdr_ = p;
  }
  return cp_up_hdr_;
}
inline ::structure::CpUpHdr* AddRbConfigCfm::mutable_cp_up_hdr() {
  // @@protoc_insertion_point(field_mutable:srvCp.AddRbConfigCfm.cp_up_hdr)
  return _internal_mutable_cp_up_hdr();
}
inline void AddRbConfigCfm::set_allocated_cp_up_hdr(::structure::CpUpHdr* cp_up_hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr_);
  }
  if (cp_up_hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr)->GetArena();
    if (message_arena != submessage_arena) {
      cp_up_hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cp_up_hdr, submessage_arena);
    }
    
  } else {
    
  }
  cp_up_hdr_ = cp_up_hdr;
  // @@protoc_insertion_point(field_set_allocated:srvCp.AddRbConfigCfm.cp_up_hdr)
}

// uint32 num_ent = 30;
inline void AddRbConfigCfm::clear_num_ent() {
  num_ent_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddRbConfigCfm::_internal_num_ent() const {
  return num_ent_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddRbConfigCfm::num_ent() const {
  // @@protoc_insertion_point(field_get:srvCp.AddRbConfigCfm.num_ent)
  return _internal_num_ent();
}
inline void AddRbConfigCfm::_internal_set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_ent_ = value;
}
inline void AddRbConfigCfm::set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_ent(value);
  // @@protoc_insertion_point(field_set:srvCp.AddRbConfigCfm.num_ent)
}

// repeated .structure.PDCPAddCfgCfmEnt config_cfm_ent = 40;
inline int AddRbConfigCfm::_internal_config_cfm_ent_size() const {
  return config_cfm_ent_.size();
}
inline int AddRbConfigCfm::config_cfm_ent_size() const {
  return _internal_config_cfm_ent_size();
}
inline ::structure::PDCPAddCfgCfmEnt* AddRbConfigCfm::mutable_config_cfm_ent(int index) {
  // @@protoc_insertion_point(field_mutable:srvCp.AddRbConfigCfm.config_cfm_ent)
  return config_cfm_ent_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::PDCPAddCfgCfmEnt >*
AddRbConfigCfm::mutable_config_cfm_ent() {
  // @@protoc_insertion_point(field_mutable_list:srvCp.AddRbConfigCfm.config_cfm_ent)
  return &config_cfm_ent_;
}
inline const ::structure::PDCPAddCfgCfmEnt& AddRbConfigCfm::_internal_config_cfm_ent(int index) const {
  return config_cfm_ent_.Get(index);
}
inline const ::structure::PDCPAddCfgCfmEnt& AddRbConfigCfm::config_cfm_ent(int index) const {
  // @@protoc_insertion_point(field_get:srvCp.AddRbConfigCfm.config_cfm_ent)
  return _internal_config_cfm_ent(index);
}
inline ::structure::PDCPAddCfgCfmEnt* AddRbConfigCfm::_internal_add_config_cfm_ent() {
  return config_cfm_ent_.Add();
}
inline ::structure::PDCPAddCfgCfmEnt* AddRbConfigCfm::add_config_cfm_ent() {
  // @@protoc_insertion_point(field_add:srvCp.AddRbConfigCfm.config_cfm_ent)
  return _internal_add_config_cfm_ent();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::PDCPAddCfgCfmEnt >&
AddRbConfigCfm::config_cfm_ent() const {
  // @@protoc_insertion_point(field_list:srvCp.AddRbConfigCfm.config_cfm_ent)
  return config_cfm_ent_;
}

// -------------------------------------------------------------------

// ModifyRbConfigCfm

// .mhdr.MsgHdr hdr = 10;
inline bool ModifyRbConfigCfm::_internal_has_hdr() const {
  return this != internal_default_instance() && hdr_ != nullptr;
}
inline bool ModifyRbConfigCfm::has_hdr() const {
  return _internal_has_hdr();
}
inline const ::mhdr::MsgHdr& ModifyRbConfigCfm::_internal_hdr() const {
  const ::mhdr::MsgHdr* p = hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mhdr::MsgHdr*>(
      &::mhdr::_MsgHdr_default_instance_);
}
inline const ::mhdr::MsgHdr& ModifyRbConfigCfm::hdr() const {
  // @@protoc_insertion_point(field_get:srvCp.ModifyRbConfigCfm.hdr)
  return _internal_hdr();
}
inline void ModifyRbConfigCfm::unsafe_arena_set_allocated_hdr(
    ::mhdr::MsgHdr* hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  hdr_ = hdr;
  if (hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvCp.ModifyRbConfigCfm.hdr)
}
inline ::mhdr::MsgHdr* ModifyRbConfigCfm::release_hdr() {
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mhdr::MsgHdr* ModifyRbConfigCfm::unsafe_arena_release_hdr() {
  // @@protoc_insertion_point(field_release:srvCp.ModifyRbConfigCfm.hdr)
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  return temp;
}
inline ::mhdr::MsgHdr* ModifyRbConfigCfm::_internal_mutable_hdr() {
  
  if (hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::mhdr::MsgHdr>(GetArena());
    hdr_ = p;
  }
  return hdr_;
}
inline ::mhdr::MsgHdr* ModifyRbConfigCfm::mutable_hdr() {
  // @@protoc_insertion_point(field_mutable:srvCp.ModifyRbConfigCfm.hdr)
  return _internal_mutable_hdr();
}
inline void ModifyRbConfigCfm::set_allocated_hdr(::mhdr::MsgHdr* hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  if (hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr)->GetArena();
    if (message_arena != submessage_arena) {
      hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hdr, submessage_arena);
    }
    
  } else {
    
  }
  hdr_ = hdr;
  // @@protoc_insertion_point(field_set_allocated:srvCp.ModifyRbConfigCfm.hdr)
}

// .structure.CpUpHdr cp_up_hdr = 20;
inline bool ModifyRbConfigCfm::_internal_has_cp_up_hdr() const {
  return this != internal_default_instance() && cp_up_hdr_ != nullptr;
}
inline bool ModifyRbConfigCfm::has_cp_up_hdr() const {
  return _internal_has_cp_up_hdr();
}
inline const ::structure::CpUpHdr& ModifyRbConfigCfm::_internal_cp_up_hdr() const {
  const ::structure::CpUpHdr* p = cp_up_hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::structure::CpUpHdr*>(
      &::structure::_CpUpHdr_default_instance_);
}
inline const ::structure::CpUpHdr& ModifyRbConfigCfm::cp_up_hdr() const {
  // @@protoc_insertion_point(field_get:srvCp.ModifyRbConfigCfm.cp_up_hdr)
  return _internal_cp_up_hdr();
}
inline void ModifyRbConfigCfm::unsafe_arena_set_allocated_cp_up_hdr(
    ::structure::CpUpHdr* cp_up_hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr_);
  }
  cp_up_hdr_ = cp_up_hdr;
  if (cp_up_hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvCp.ModifyRbConfigCfm.cp_up_hdr)
}
inline ::structure::CpUpHdr* ModifyRbConfigCfm::release_cp_up_hdr() {
  
  ::structure::CpUpHdr* temp = cp_up_hdr_;
  cp_up_hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::structure::CpUpHdr* ModifyRbConfigCfm::unsafe_arena_release_cp_up_hdr() {
  // @@protoc_insertion_point(field_release:srvCp.ModifyRbConfigCfm.cp_up_hdr)
  
  ::structure::CpUpHdr* temp = cp_up_hdr_;
  cp_up_hdr_ = nullptr;
  return temp;
}
inline ::structure::CpUpHdr* ModifyRbConfigCfm::_internal_mutable_cp_up_hdr() {
  
  if (cp_up_hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::structure::CpUpHdr>(GetArena());
    cp_up_hdr_ = p;
  }
  return cp_up_hdr_;
}
inline ::structure::CpUpHdr* ModifyRbConfigCfm::mutable_cp_up_hdr() {
  // @@protoc_insertion_point(field_mutable:srvCp.ModifyRbConfigCfm.cp_up_hdr)
  return _internal_mutable_cp_up_hdr();
}
inline void ModifyRbConfigCfm::set_allocated_cp_up_hdr(::structure::CpUpHdr* cp_up_hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr_);
  }
  if (cp_up_hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr)->GetArena();
    if (message_arena != submessage_arena) {
      cp_up_hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cp_up_hdr, submessage_arena);
    }
    
  } else {
    
  }
  cp_up_hdr_ = cp_up_hdr;
  // @@protoc_insertion_point(field_set_allocated:srvCp.ModifyRbConfigCfm.cp_up_hdr)
}

// uint32 num_ent = 30;
inline void ModifyRbConfigCfm::clear_num_ent() {
  num_ent_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModifyRbConfigCfm::_internal_num_ent() const {
  return num_ent_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModifyRbConfigCfm::num_ent() const {
  // @@protoc_insertion_point(field_get:srvCp.ModifyRbConfigCfm.num_ent)
  return _internal_num_ent();
}
inline void ModifyRbConfigCfm::_internal_set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_ent_ = value;
}
inline void ModifyRbConfigCfm::set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_ent(value);
  // @@protoc_insertion_point(field_set:srvCp.ModifyRbConfigCfm.num_ent)
}

// repeated .structure.PDCPModCfgCfmEnt config_cfm_ent = 40;
inline int ModifyRbConfigCfm::_internal_config_cfm_ent_size() const {
  return config_cfm_ent_.size();
}
inline int ModifyRbConfigCfm::config_cfm_ent_size() const {
  return _internal_config_cfm_ent_size();
}
inline ::structure::PDCPModCfgCfmEnt* ModifyRbConfigCfm::mutable_config_cfm_ent(int index) {
  // @@protoc_insertion_point(field_mutable:srvCp.ModifyRbConfigCfm.config_cfm_ent)
  return config_cfm_ent_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::PDCPModCfgCfmEnt >*
ModifyRbConfigCfm::mutable_config_cfm_ent() {
  // @@protoc_insertion_point(field_mutable_list:srvCp.ModifyRbConfigCfm.config_cfm_ent)
  return &config_cfm_ent_;
}
inline const ::structure::PDCPModCfgCfmEnt& ModifyRbConfigCfm::_internal_config_cfm_ent(int index) const {
  return config_cfm_ent_.Get(index);
}
inline const ::structure::PDCPModCfgCfmEnt& ModifyRbConfigCfm::config_cfm_ent(int index) const {
  // @@protoc_insertion_point(field_get:srvCp.ModifyRbConfigCfm.config_cfm_ent)
  return _internal_config_cfm_ent(index);
}
inline ::structure::PDCPModCfgCfmEnt* ModifyRbConfigCfm::_internal_add_config_cfm_ent() {
  return config_cfm_ent_.Add();
}
inline ::structure::PDCPModCfgCfmEnt* ModifyRbConfigCfm::add_config_cfm_ent() {
  // @@protoc_insertion_point(field_add:srvCp.ModifyRbConfigCfm.config_cfm_ent)
  return _internal_add_config_cfm_ent();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::PDCPModCfgCfmEnt >&
ModifyRbConfigCfm::config_cfm_ent() const {
  // @@protoc_insertion_point(field_list:srvCp.ModifyRbConfigCfm.config_cfm_ent)
  return config_cfm_ent_;
}

// -------------------------------------------------------------------

// DeleteRbConfigCfm

// .mhdr.MsgHdr hdr = 10;
inline bool DeleteRbConfigCfm::_internal_has_hdr() const {
  return this != internal_default_instance() && hdr_ != nullptr;
}
inline bool DeleteRbConfigCfm::has_hdr() const {
  return _internal_has_hdr();
}
inline const ::mhdr::MsgHdr& DeleteRbConfigCfm::_internal_hdr() const {
  const ::mhdr::MsgHdr* p = hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mhdr::MsgHdr*>(
      &::mhdr::_MsgHdr_default_instance_);
}
inline const ::mhdr::MsgHdr& DeleteRbConfigCfm::hdr() const {
  // @@protoc_insertion_point(field_get:srvCp.DeleteRbConfigCfm.hdr)
  return _internal_hdr();
}
inline void DeleteRbConfigCfm::unsafe_arena_set_allocated_hdr(
    ::mhdr::MsgHdr* hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  hdr_ = hdr;
  if (hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvCp.DeleteRbConfigCfm.hdr)
}
inline ::mhdr::MsgHdr* DeleteRbConfigCfm::release_hdr() {
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mhdr::MsgHdr* DeleteRbConfigCfm::unsafe_arena_release_hdr() {
  // @@protoc_insertion_point(field_release:srvCp.DeleteRbConfigCfm.hdr)
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  return temp;
}
inline ::mhdr::MsgHdr* DeleteRbConfigCfm::_internal_mutable_hdr() {
  
  if (hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::mhdr::MsgHdr>(GetArena());
    hdr_ = p;
  }
  return hdr_;
}
inline ::mhdr::MsgHdr* DeleteRbConfigCfm::mutable_hdr() {
  // @@protoc_insertion_point(field_mutable:srvCp.DeleteRbConfigCfm.hdr)
  return _internal_mutable_hdr();
}
inline void DeleteRbConfigCfm::set_allocated_hdr(::mhdr::MsgHdr* hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  if (hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr)->GetArena();
    if (message_arena != submessage_arena) {
      hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hdr, submessage_arena);
    }
    
  } else {
    
  }
  hdr_ = hdr;
  // @@protoc_insertion_point(field_set_allocated:srvCp.DeleteRbConfigCfm.hdr)
}

// .structure.CpUpHdr cp_up_hdr = 20;
inline bool DeleteRbConfigCfm::_internal_has_cp_up_hdr() const {
  return this != internal_default_instance() && cp_up_hdr_ != nullptr;
}
inline bool DeleteRbConfigCfm::has_cp_up_hdr() const {
  return _internal_has_cp_up_hdr();
}
inline const ::structure::CpUpHdr& DeleteRbConfigCfm::_internal_cp_up_hdr() const {
  const ::structure::CpUpHdr* p = cp_up_hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::structure::CpUpHdr*>(
      &::structure::_CpUpHdr_default_instance_);
}
inline const ::structure::CpUpHdr& DeleteRbConfigCfm::cp_up_hdr() const {
  // @@protoc_insertion_point(field_get:srvCp.DeleteRbConfigCfm.cp_up_hdr)
  return _internal_cp_up_hdr();
}
inline void DeleteRbConfigCfm::unsafe_arena_set_allocated_cp_up_hdr(
    ::structure::CpUpHdr* cp_up_hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr_);
  }
  cp_up_hdr_ = cp_up_hdr;
  if (cp_up_hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvCp.DeleteRbConfigCfm.cp_up_hdr)
}
inline ::structure::CpUpHdr* DeleteRbConfigCfm::release_cp_up_hdr() {
  
  ::structure::CpUpHdr* temp = cp_up_hdr_;
  cp_up_hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::structure::CpUpHdr* DeleteRbConfigCfm::unsafe_arena_release_cp_up_hdr() {
  // @@protoc_insertion_point(field_release:srvCp.DeleteRbConfigCfm.cp_up_hdr)
  
  ::structure::CpUpHdr* temp = cp_up_hdr_;
  cp_up_hdr_ = nullptr;
  return temp;
}
inline ::structure::CpUpHdr* DeleteRbConfigCfm::_internal_mutable_cp_up_hdr() {
  
  if (cp_up_hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::structure::CpUpHdr>(GetArena());
    cp_up_hdr_ = p;
  }
  return cp_up_hdr_;
}
inline ::structure::CpUpHdr* DeleteRbConfigCfm::mutable_cp_up_hdr() {
  // @@protoc_insertion_point(field_mutable:srvCp.DeleteRbConfigCfm.cp_up_hdr)
  return _internal_mutable_cp_up_hdr();
}
inline void DeleteRbConfigCfm::set_allocated_cp_up_hdr(::structure::CpUpHdr* cp_up_hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr_);
  }
  if (cp_up_hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr)->GetArena();
    if (message_arena != submessage_arena) {
      cp_up_hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cp_up_hdr, submessage_arena);
    }
    
  } else {
    
  }
  cp_up_hdr_ = cp_up_hdr;
  // @@protoc_insertion_point(field_set_allocated:srvCp.DeleteRbConfigCfm.cp_up_hdr)
}

// uint32 num_ent = 30;
inline void DeleteRbConfigCfm::clear_num_ent() {
  num_ent_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteRbConfigCfm::_internal_num_ent() const {
  return num_ent_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteRbConfigCfm::num_ent() const {
  // @@protoc_insertion_point(field_get:srvCp.DeleteRbConfigCfm.num_ent)
  return _internal_num_ent();
}
inline void DeleteRbConfigCfm::_internal_set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_ent_ = value;
}
inline void DeleteRbConfigCfm::set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_ent(value);
  // @@protoc_insertion_point(field_set:srvCp.DeleteRbConfigCfm.num_ent)
}

// repeated .structure.PDCPDelCfgCfmEnt config_cfm_ent = 40;
inline int DeleteRbConfigCfm::_internal_config_cfm_ent_size() const {
  return config_cfm_ent_.size();
}
inline int DeleteRbConfigCfm::config_cfm_ent_size() const {
  return _internal_config_cfm_ent_size();
}
inline ::structure::PDCPDelCfgCfmEnt* DeleteRbConfigCfm::mutable_config_cfm_ent(int index) {
  // @@protoc_insertion_point(field_mutable:srvCp.DeleteRbConfigCfm.config_cfm_ent)
  return config_cfm_ent_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::PDCPDelCfgCfmEnt >*
DeleteRbConfigCfm::mutable_config_cfm_ent() {
  // @@protoc_insertion_point(field_mutable_list:srvCp.DeleteRbConfigCfm.config_cfm_ent)
  return &config_cfm_ent_;
}
inline const ::structure::PDCPDelCfgCfmEnt& DeleteRbConfigCfm::_internal_config_cfm_ent(int index) const {
  return config_cfm_ent_.Get(index);
}
inline const ::structure::PDCPDelCfgCfmEnt& DeleteRbConfigCfm::config_cfm_ent(int index) const {
  // @@protoc_insertion_point(field_get:srvCp.DeleteRbConfigCfm.config_cfm_ent)
  return _internal_config_cfm_ent(index);
}
inline ::structure::PDCPDelCfgCfmEnt* DeleteRbConfigCfm::_internal_add_config_cfm_ent() {
  return config_cfm_ent_.Add();
}
inline ::structure::PDCPDelCfgCfmEnt* DeleteRbConfigCfm::add_config_cfm_ent() {
  // @@protoc_insertion_point(field_add:srvCp.DeleteRbConfigCfm.config_cfm_ent)
  return _internal_add_config_cfm_ent();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::PDCPDelCfgCfmEnt >&
DeleteRbConfigCfm::config_cfm_ent() const {
  // @@protoc_insertion_point(field_list:srvCp.DeleteRbConfigCfm.config_cfm_ent)
  return config_cfm_ent_;
}

// -------------------------------------------------------------------

// PDCPSduStatusCfm

// .mhdr.MsgHdr hdr = 10;
inline bool PDCPSduStatusCfm::_internal_has_hdr() const {
  return this != internal_default_instance() && hdr_ != nullptr;
}
inline bool PDCPSduStatusCfm::has_hdr() const {
  return _internal_has_hdr();
}
inline const ::mhdr::MsgHdr& PDCPSduStatusCfm::_internal_hdr() const {
  const ::mhdr::MsgHdr* p = hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mhdr::MsgHdr*>(
      &::mhdr::_MsgHdr_default_instance_);
}
inline const ::mhdr::MsgHdr& PDCPSduStatusCfm::hdr() const {
  // @@protoc_insertion_point(field_get:srvCp.PDCPSduStatusCfm.hdr)
  return _internal_hdr();
}
inline void PDCPSduStatusCfm::unsafe_arena_set_allocated_hdr(
    ::mhdr::MsgHdr* hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  hdr_ = hdr;
  if (hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvCp.PDCPSduStatusCfm.hdr)
}
inline ::mhdr::MsgHdr* PDCPSduStatusCfm::release_hdr() {
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mhdr::MsgHdr* PDCPSduStatusCfm::unsafe_arena_release_hdr() {
  // @@protoc_insertion_point(field_release:srvCp.PDCPSduStatusCfm.hdr)
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  return temp;
}
inline ::mhdr::MsgHdr* PDCPSduStatusCfm::_internal_mutable_hdr() {
  
  if (hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::mhdr::MsgHdr>(GetArena());
    hdr_ = p;
  }
  return hdr_;
}
inline ::mhdr::MsgHdr* PDCPSduStatusCfm::mutable_hdr() {
  // @@protoc_insertion_point(field_mutable:srvCp.PDCPSduStatusCfm.hdr)
  return _internal_mutable_hdr();
}
inline void PDCPSduStatusCfm::set_allocated_hdr(::mhdr::MsgHdr* hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  if (hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr)->GetArena();
    if (message_arena != submessage_arena) {
      hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hdr, submessage_arena);
    }
    
  } else {
    
  }
  hdr_ = hdr;
  // @@protoc_insertion_point(field_set_allocated:srvCp.PDCPSduStatusCfm.hdr)
}

// .structure.CpUpHdr cp_up_hdr = 20;
inline bool PDCPSduStatusCfm::_internal_has_cp_up_hdr() const {
  return this != internal_default_instance() && cp_up_hdr_ != nullptr;
}
inline bool PDCPSduStatusCfm::has_cp_up_hdr() const {
  return _internal_has_cp_up_hdr();
}
inline const ::structure::CpUpHdr& PDCPSduStatusCfm::_internal_cp_up_hdr() const {
  const ::structure::CpUpHdr* p = cp_up_hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::structure::CpUpHdr*>(
      &::structure::_CpUpHdr_default_instance_);
}
inline const ::structure::CpUpHdr& PDCPSduStatusCfm::cp_up_hdr() const {
  // @@protoc_insertion_point(field_get:srvCp.PDCPSduStatusCfm.cp_up_hdr)
  return _internal_cp_up_hdr();
}
inline void PDCPSduStatusCfm::unsafe_arena_set_allocated_cp_up_hdr(
    ::structure::CpUpHdr* cp_up_hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr_);
  }
  cp_up_hdr_ = cp_up_hdr;
  if (cp_up_hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvCp.PDCPSduStatusCfm.cp_up_hdr)
}
inline ::structure::CpUpHdr* PDCPSduStatusCfm::release_cp_up_hdr() {
  
  ::structure::CpUpHdr* temp = cp_up_hdr_;
  cp_up_hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::structure::CpUpHdr* PDCPSduStatusCfm::unsafe_arena_release_cp_up_hdr() {
  // @@protoc_insertion_point(field_release:srvCp.PDCPSduStatusCfm.cp_up_hdr)
  
  ::structure::CpUpHdr* temp = cp_up_hdr_;
  cp_up_hdr_ = nullptr;
  return temp;
}
inline ::structure::CpUpHdr* PDCPSduStatusCfm::_internal_mutable_cp_up_hdr() {
  
  if (cp_up_hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::structure::CpUpHdr>(GetArena());
    cp_up_hdr_ = p;
  }
  return cp_up_hdr_;
}
inline ::structure::CpUpHdr* PDCPSduStatusCfm::mutable_cp_up_hdr() {
  // @@protoc_insertion_point(field_mutable:srvCp.PDCPSduStatusCfm.cp_up_hdr)
  return _internal_mutable_cp_up_hdr();
}
inline void PDCPSduStatusCfm::set_allocated_cp_up_hdr(::structure::CpUpHdr* cp_up_hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr_);
  }
  if (cp_up_hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr)->GetArena();
    if (message_arena != submessage_arena) {
      cp_up_hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cp_up_hdr, submessage_arena);
    }
    
  } else {
    
  }
  cp_up_hdr_ = cp_up_hdr;
  // @@protoc_insertion_point(field_set_allocated:srvCp.PDCPSduStatusCfm.cp_up_hdr)
}

// uint32 num_rb = 30;
inline void PDCPSduStatusCfm::clear_num_rb() {
  num_rb_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PDCPSduStatusCfm::_internal_num_rb() const {
  return num_rb_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PDCPSduStatusCfm::num_rb() const {
  // @@protoc_insertion_point(field_get:srvCp.PDCPSduStatusCfm.num_rb)
  return _internal_num_rb();
}
inline void PDCPSduStatusCfm::_internal_set_num_rb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_rb_ = value;
}
inline void PDCPSduStatusCfm::set_num_rb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_rb(value);
  // @@protoc_insertion_point(field_set:srvCp.PDCPSduStatusCfm.num_rb)
}

// repeated .structure.SduStatusInfo sdu_status_info = 40;
inline int PDCPSduStatusCfm::_internal_sdu_status_info_size() const {
  return sdu_status_info_.size();
}
inline int PDCPSduStatusCfm::sdu_status_info_size() const {
  return _internal_sdu_status_info_size();
}
inline ::structure::SduStatusInfo* PDCPSduStatusCfm::mutable_sdu_status_info(int index) {
  // @@protoc_insertion_point(field_mutable:srvCp.PDCPSduStatusCfm.sdu_status_info)
  return sdu_status_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::SduStatusInfo >*
PDCPSduStatusCfm::mutable_sdu_status_info() {
  // @@protoc_insertion_point(field_mutable_list:srvCp.PDCPSduStatusCfm.sdu_status_info)
  return &sdu_status_info_;
}
inline const ::structure::SduStatusInfo& PDCPSduStatusCfm::_internal_sdu_status_info(int index) const {
  return sdu_status_info_.Get(index);
}
inline const ::structure::SduStatusInfo& PDCPSduStatusCfm::sdu_status_info(int index) const {
  // @@protoc_insertion_point(field_get:srvCp.PDCPSduStatusCfm.sdu_status_info)
  return _internal_sdu_status_info(index);
}
inline ::structure::SduStatusInfo* PDCPSduStatusCfm::_internal_add_sdu_status_info() {
  return sdu_status_info_.Add();
}
inline ::structure::SduStatusInfo* PDCPSduStatusCfm::add_sdu_status_info() {
  // @@protoc_insertion_point(field_add:srvCp.PDCPSduStatusCfm.sdu_status_info)
  return _internal_add_sdu_status_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::SduStatusInfo >&
PDCPSduStatusCfm::sdu_status_info() const {
  // @@protoc_insertion_point(field_list:srvCp.PDCPSduStatusCfm.sdu_status_info)
  return sdu_status_info_;
}

// bool status = 50;
inline void PDCPSduStatusCfm::clear_status() {
  status_ = false;
}
inline bool PDCPSduStatusCfm::_internal_status() const {
  return status_;
}
inline bool PDCPSduStatusCfm::status() const {
  // @@protoc_insertion_point(field_get:srvCp.PDCPSduStatusCfm.status)
  return _internal_status();
}
inline void PDCPSduStatusCfm::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void PDCPSduStatusCfm::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:srvCp.PDCPSduStatusCfm.status)
}

// .structure.PDCPConfigFailureReason reason = 60;
inline void PDCPSduStatusCfm::clear_reason() {
  reason_ = 0;
}
inline ::structure::PDCPConfigFailureReason PDCPSduStatusCfm::_internal_reason() const {
  return static_cast< ::structure::PDCPConfigFailureReason >(reason_);
}
inline ::structure::PDCPConfigFailureReason PDCPSduStatusCfm::reason() const {
  // @@protoc_insertion_point(field_get:srvCp.PDCPSduStatusCfm.reason)
  return _internal_reason();
}
inline void PDCPSduStatusCfm::_internal_set_reason(::structure::PDCPConfigFailureReason value) {
  
  reason_ = value;
}
inline void PDCPSduStatusCfm::set_reason(::structure::PDCPConfigFailureReason value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:srvCp.PDCPSduStatusCfm.reason)
}

// -------------------------------------------------------------------

// AddPDCPConfigCfm

// .mhdr.MsgHdr hdr = 10;
inline bool AddPDCPConfigCfm::_internal_has_hdr() const {
  return this != internal_default_instance() && hdr_ != nullptr;
}
inline bool AddPDCPConfigCfm::has_hdr() const {
  return _internal_has_hdr();
}
inline const ::mhdr::MsgHdr& AddPDCPConfigCfm::_internal_hdr() const {
  const ::mhdr::MsgHdr* p = hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mhdr::MsgHdr*>(
      &::mhdr::_MsgHdr_default_instance_);
}
inline const ::mhdr::MsgHdr& AddPDCPConfigCfm::hdr() const {
  // @@protoc_insertion_point(field_get:srvCp.AddPDCPConfigCfm.hdr)
  return _internal_hdr();
}
inline void AddPDCPConfigCfm::unsafe_arena_set_allocated_hdr(
    ::mhdr::MsgHdr* hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  hdr_ = hdr;
  if (hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvCp.AddPDCPConfigCfm.hdr)
}
inline ::mhdr::MsgHdr* AddPDCPConfigCfm::release_hdr() {
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mhdr::MsgHdr* AddPDCPConfigCfm::unsafe_arena_release_hdr() {
  // @@protoc_insertion_point(field_release:srvCp.AddPDCPConfigCfm.hdr)
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  return temp;
}
inline ::mhdr::MsgHdr* AddPDCPConfigCfm::_internal_mutable_hdr() {
  
  if (hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::mhdr::MsgHdr>(GetArena());
    hdr_ = p;
  }
  return hdr_;
}
inline ::mhdr::MsgHdr* AddPDCPConfigCfm::mutable_hdr() {
  // @@protoc_insertion_point(field_mutable:srvCp.AddPDCPConfigCfm.hdr)
  return _internal_mutable_hdr();
}
inline void AddPDCPConfigCfm::set_allocated_hdr(::mhdr::MsgHdr* hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  if (hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr)->GetArena();
    if (message_arena != submessage_arena) {
      hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hdr, submessage_arena);
    }
    
  } else {
    
  }
  hdr_ = hdr;
  // @@protoc_insertion_point(field_set_allocated:srvCp.AddPDCPConfigCfm.hdr)
}

// .structure.CpUpHdr cp_up_hdr = 20;
inline bool AddPDCPConfigCfm::_internal_has_cp_up_hdr() const {
  return this != internal_default_instance() && cp_up_hdr_ != nullptr;
}
inline bool AddPDCPConfigCfm::has_cp_up_hdr() const {
  return _internal_has_cp_up_hdr();
}
inline const ::structure::CpUpHdr& AddPDCPConfigCfm::_internal_cp_up_hdr() const {
  const ::structure::CpUpHdr* p = cp_up_hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::structure::CpUpHdr*>(
      &::structure::_CpUpHdr_default_instance_);
}
inline const ::structure::CpUpHdr& AddPDCPConfigCfm::cp_up_hdr() const {
  // @@protoc_insertion_point(field_get:srvCp.AddPDCPConfigCfm.cp_up_hdr)
  return _internal_cp_up_hdr();
}
inline void AddPDCPConfigCfm::unsafe_arena_set_allocated_cp_up_hdr(
    ::structure::CpUpHdr* cp_up_hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr_);
  }
  cp_up_hdr_ = cp_up_hdr;
  if (cp_up_hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvCp.AddPDCPConfigCfm.cp_up_hdr)
}
inline ::structure::CpUpHdr* AddPDCPConfigCfm::release_cp_up_hdr() {
  
  ::structure::CpUpHdr* temp = cp_up_hdr_;
  cp_up_hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::structure::CpUpHdr* AddPDCPConfigCfm::unsafe_arena_release_cp_up_hdr() {
  // @@protoc_insertion_point(field_release:srvCp.AddPDCPConfigCfm.cp_up_hdr)
  
  ::structure::CpUpHdr* temp = cp_up_hdr_;
  cp_up_hdr_ = nullptr;
  return temp;
}
inline ::structure::CpUpHdr* AddPDCPConfigCfm::_internal_mutable_cp_up_hdr() {
  
  if (cp_up_hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::structure::CpUpHdr>(GetArena());
    cp_up_hdr_ = p;
  }
  return cp_up_hdr_;
}
inline ::structure::CpUpHdr* AddPDCPConfigCfm::mutable_cp_up_hdr() {
  // @@protoc_insertion_point(field_mutable:srvCp.AddPDCPConfigCfm.cp_up_hdr)
  return _internal_mutable_cp_up_hdr();
}
inline void AddPDCPConfigCfm::set_allocated_cp_up_hdr(::structure::CpUpHdr* cp_up_hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr_);
  }
  if (cp_up_hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr)->GetArena();
    if (message_arena != submessage_arena) {
      cp_up_hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cp_up_hdr, submessage_arena);
    }
    
  } else {
    
  }
  cp_up_hdr_ = cp_up_hdr;
  // @@protoc_insertion_point(field_set_allocated:srvCp.AddPDCPConfigCfm.cp_up_hdr)
}

// .structure.SecurityCfgCfm sec_cfm = 30;
inline bool AddPDCPConfigCfm::_internal_has_sec_cfm() const {
  return this != internal_default_instance() && sec_cfm_ != nullptr;
}
inline bool AddPDCPConfigCfm::has_sec_cfm() const {
  return _internal_has_sec_cfm();
}
inline const ::structure::SecurityCfgCfm& AddPDCPConfigCfm::_internal_sec_cfm() const {
  const ::structure::SecurityCfgCfm* p = sec_cfm_;
  return p != nullptr ? *p : *reinterpret_cast<const ::structure::SecurityCfgCfm*>(
      &::structure::_SecurityCfgCfm_default_instance_);
}
inline const ::structure::SecurityCfgCfm& AddPDCPConfigCfm::sec_cfm() const {
  // @@protoc_insertion_point(field_get:srvCp.AddPDCPConfigCfm.sec_cfm)
  return _internal_sec_cfm();
}
inline void AddPDCPConfigCfm::unsafe_arena_set_allocated_sec_cfm(
    ::structure::SecurityCfgCfm* sec_cfm) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sec_cfm_);
  }
  sec_cfm_ = sec_cfm;
  if (sec_cfm) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvCp.AddPDCPConfigCfm.sec_cfm)
}
inline ::structure::SecurityCfgCfm* AddPDCPConfigCfm::release_sec_cfm() {
  
  ::structure::SecurityCfgCfm* temp = sec_cfm_;
  sec_cfm_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::structure::SecurityCfgCfm* AddPDCPConfigCfm::unsafe_arena_release_sec_cfm() {
  // @@protoc_insertion_point(field_release:srvCp.AddPDCPConfigCfm.sec_cfm)
  
  ::structure::SecurityCfgCfm* temp = sec_cfm_;
  sec_cfm_ = nullptr;
  return temp;
}
inline ::structure::SecurityCfgCfm* AddPDCPConfigCfm::_internal_mutable_sec_cfm() {
  
  if (sec_cfm_ == nullptr) {
    auto* p = CreateMaybeMessage<::structure::SecurityCfgCfm>(GetArena());
    sec_cfm_ = p;
  }
  return sec_cfm_;
}
inline ::structure::SecurityCfgCfm* AddPDCPConfigCfm::mutable_sec_cfm() {
  // @@protoc_insertion_point(field_mutable:srvCp.AddPDCPConfigCfm.sec_cfm)
  return _internal_mutable_sec_cfm();
}
inline void AddPDCPConfigCfm::set_allocated_sec_cfm(::structure::SecurityCfgCfm* sec_cfm) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sec_cfm_);
  }
  if (sec_cfm) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sec_cfm)->GetArena();
    if (message_arena != submessage_arena) {
      sec_cfm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sec_cfm, submessage_arena);
    }
    
  } else {
    
  }
  sec_cfm_ = sec_cfm;
  // @@protoc_insertion_point(field_set_allocated:srvCp.AddPDCPConfigCfm.sec_cfm)
}

// uint32 num_ent = 40;
inline void AddPDCPConfigCfm::clear_num_ent() {
  num_ent_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddPDCPConfigCfm::_internal_num_ent() const {
  return num_ent_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddPDCPConfigCfm::num_ent() const {
  // @@protoc_insertion_point(field_get:srvCp.AddPDCPConfigCfm.num_ent)
  return _internal_num_ent();
}
inline void AddPDCPConfigCfm::_internal_set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_ent_ = value;
}
inline void AddPDCPConfigCfm::set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_ent(value);
  // @@protoc_insertion_point(field_set:srvCp.AddPDCPConfigCfm.num_ent)
}

// repeated .structure.PDCPAddCfgCfmEnt config_cfm_ent = 50;
inline int AddPDCPConfigCfm::_internal_config_cfm_ent_size() const {
  return config_cfm_ent_.size();
}
inline int AddPDCPConfigCfm::config_cfm_ent_size() const {
  return _internal_config_cfm_ent_size();
}
inline ::structure::PDCPAddCfgCfmEnt* AddPDCPConfigCfm::mutable_config_cfm_ent(int index) {
  // @@protoc_insertion_point(field_mutable:srvCp.AddPDCPConfigCfm.config_cfm_ent)
  return config_cfm_ent_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::PDCPAddCfgCfmEnt >*
AddPDCPConfigCfm::mutable_config_cfm_ent() {
  // @@protoc_insertion_point(field_mutable_list:srvCp.AddPDCPConfigCfm.config_cfm_ent)
  return &config_cfm_ent_;
}
inline const ::structure::PDCPAddCfgCfmEnt& AddPDCPConfigCfm::_internal_config_cfm_ent(int index) const {
  return config_cfm_ent_.Get(index);
}
inline const ::structure::PDCPAddCfgCfmEnt& AddPDCPConfigCfm::config_cfm_ent(int index) const {
  // @@protoc_insertion_point(field_get:srvCp.AddPDCPConfigCfm.config_cfm_ent)
  return _internal_config_cfm_ent(index);
}
inline ::structure::PDCPAddCfgCfmEnt* AddPDCPConfigCfm::_internal_add_config_cfm_ent() {
  return config_cfm_ent_.Add();
}
inline ::structure::PDCPAddCfgCfmEnt* AddPDCPConfigCfm::add_config_cfm_ent() {
  // @@protoc_insertion_point(field_add:srvCp.AddPDCPConfigCfm.config_cfm_ent)
  return _internal_add_config_cfm_ent();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::PDCPAddCfgCfmEnt >&
AddPDCPConfigCfm::config_cfm_ent() const {
  // @@protoc_insertion_point(field_list:srvCp.AddPDCPConfigCfm.config_cfm_ent)
  return config_cfm_ent_;
}

// -------------------------------------------------------------------

// ModifyPDCPConfigCfm

// .mhdr.MsgHdr hdr = 10;
inline bool ModifyPDCPConfigCfm::_internal_has_hdr() const {
  return this != internal_default_instance() && hdr_ != nullptr;
}
inline bool ModifyPDCPConfigCfm::has_hdr() const {
  return _internal_has_hdr();
}
inline const ::mhdr::MsgHdr& ModifyPDCPConfigCfm::_internal_hdr() const {
  const ::mhdr::MsgHdr* p = hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mhdr::MsgHdr*>(
      &::mhdr::_MsgHdr_default_instance_);
}
inline const ::mhdr::MsgHdr& ModifyPDCPConfigCfm::hdr() const {
  // @@protoc_insertion_point(field_get:srvCp.ModifyPDCPConfigCfm.hdr)
  return _internal_hdr();
}
inline void ModifyPDCPConfigCfm::unsafe_arena_set_allocated_hdr(
    ::mhdr::MsgHdr* hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  hdr_ = hdr;
  if (hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvCp.ModifyPDCPConfigCfm.hdr)
}
inline ::mhdr::MsgHdr* ModifyPDCPConfigCfm::release_hdr() {
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mhdr::MsgHdr* ModifyPDCPConfigCfm::unsafe_arena_release_hdr() {
  // @@protoc_insertion_point(field_release:srvCp.ModifyPDCPConfigCfm.hdr)
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  return temp;
}
inline ::mhdr::MsgHdr* ModifyPDCPConfigCfm::_internal_mutable_hdr() {
  
  if (hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::mhdr::MsgHdr>(GetArena());
    hdr_ = p;
  }
  return hdr_;
}
inline ::mhdr::MsgHdr* ModifyPDCPConfigCfm::mutable_hdr() {
  // @@protoc_insertion_point(field_mutable:srvCp.ModifyPDCPConfigCfm.hdr)
  return _internal_mutable_hdr();
}
inline void ModifyPDCPConfigCfm::set_allocated_hdr(::mhdr::MsgHdr* hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  if (hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr)->GetArena();
    if (message_arena != submessage_arena) {
      hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hdr, submessage_arena);
    }
    
  } else {
    
  }
  hdr_ = hdr;
  // @@protoc_insertion_point(field_set_allocated:srvCp.ModifyPDCPConfigCfm.hdr)
}

// .structure.CpUpHdr cp_up_hdr = 20;
inline bool ModifyPDCPConfigCfm::_internal_has_cp_up_hdr() const {
  return this != internal_default_instance() && cp_up_hdr_ != nullptr;
}
inline bool ModifyPDCPConfigCfm::has_cp_up_hdr() const {
  return _internal_has_cp_up_hdr();
}
inline const ::structure::CpUpHdr& ModifyPDCPConfigCfm::_internal_cp_up_hdr() const {
  const ::structure::CpUpHdr* p = cp_up_hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::structure::CpUpHdr*>(
      &::structure::_CpUpHdr_default_instance_);
}
inline const ::structure::CpUpHdr& ModifyPDCPConfigCfm::cp_up_hdr() const {
  // @@protoc_insertion_point(field_get:srvCp.ModifyPDCPConfigCfm.cp_up_hdr)
  return _internal_cp_up_hdr();
}
inline void ModifyPDCPConfigCfm::unsafe_arena_set_allocated_cp_up_hdr(
    ::structure::CpUpHdr* cp_up_hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr_);
  }
  cp_up_hdr_ = cp_up_hdr;
  if (cp_up_hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvCp.ModifyPDCPConfigCfm.cp_up_hdr)
}
inline ::structure::CpUpHdr* ModifyPDCPConfigCfm::release_cp_up_hdr() {
  
  ::structure::CpUpHdr* temp = cp_up_hdr_;
  cp_up_hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::structure::CpUpHdr* ModifyPDCPConfigCfm::unsafe_arena_release_cp_up_hdr() {
  // @@protoc_insertion_point(field_release:srvCp.ModifyPDCPConfigCfm.cp_up_hdr)
  
  ::structure::CpUpHdr* temp = cp_up_hdr_;
  cp_up_hdr_ = nullptr;
  return temp;
}
inline ::structure::CpUpHdr* ModifyPDCPConfigCfm::_internal_mutable_cp_up_hdr() {
  
  if (cp_up_hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::structure::CpUpHdr>(GetArena());
    cp_up_hdr_ = p;
  }
  return cp_up_hdr_;
}
inline ::structure::CpUpHdr* ModifyPDCPConfigCfm::mutable_cp_up_hdr() {
  // @@protoc_insertion_point(field_mutable:srvCp.ModifyPDCPConfigCfm.cp_up_hdr)
  return _internal_mutable_cp_up_hdr();
}
inline void ModifyPDCPConfigCfm::set_allocated_cp_up_hdr(::structure::CpUpHdr* cp_up_hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr_);
  }
  if (cp_up_hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr)->GetArena();
    if (message_arena != submessage_arena) {
      cp_up_hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cp_up_hdr, submessage_arena);
    }
    
  } else {
    
  }
  cp_up_hdr_ = cp_up_hdr;
  // @@protoc_insertion_point(field_set_allocated:srvCp.ModifyPDCPConfigCfm.cp_up_hdr)
}

// .structure.SecurityCfgCfm sec_cfm = 30;
inline bool ModifyPDCPConfigCfm::_internal_has_sec_cfm() const {
  return this != internal_default_instance() && sec_cfm_ != nullptr;
}
inline bool ModifyPDCPConfigCfm::has_sec_cfm() const {
  return _internal_has_sec_cfm();
}
inline const ::structure::SecurityCfgCfm& ModifyPDCPConfigCfm::_internal_sec_cfm() const {
  const ::structure::SecurityCfgCfm* p = sec_cfm_;
  return p != nullptr ? *p : *reinterpret_cast<const ::structure::SecurityCfgCfm*>(
      &::structure::_SecurityCfgCfm_default_instance_);
}
inline const ::structure::SecurityCfgCfm& ModifyPDCPConfigCfm::sec_cfm() const {
  // @@protoc_insertion_point(field_get:srvCp.ModifyPDCPConfigCfm.sec_cfm)
  return _internal_sec_cfm();
}
inline void ModifyPDCPConfigCfm::unsafe_arena_set_allocated_sec_cfm(
    ::structure::SecurityCfgCfm* sec_cfm) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sec_cfm_);
  }
  sec_cfm_ = sec_cfm;
  if (sec_cfm) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvCp.ModifyPDCPConfigCfm.sec_cfm)
}
inline ::structure::SecurityCfgCfm* ModifyPDCPConfigCfm::release_sec_cfm() {
  
  ::structure::SecurityCfgCfm* temp = sec_cfm_;
  sec_cfm_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::structure::SecurityCfgCfm* ModifyPDCPConfigCfm::unsafe_arena_release_sec_cfm() {
  // @@protoc_insertion_point(field_release:srvCp.ModifyPDCPConfigCfm.sec_cfm)
  
  ::structure::SecurityCfgCfm* temp = sec_cfm_;
  sec_cfm_ = nullptr;
  return temp;
}
inline ::structure::SecurityCfgCfm* ModifyPDCPConfigCfm::_internal_mutable_sec_cfm() {
  
  if (sec_cfm_ == nullptr) {
    auto* p = CreateMaybeMessage<::structure::SecurityCfgCfm>(GetArena());
    sec_cfm_ = p;
  }
  return sec_cfm_;
}
inline ::structure::SecurityCfgCfm* ModifyPDCPConfigCfm::mutable_sec_cfm() {
  // @@protoc_insertion_point(field_mutable:srvCp.ModifyPDCPConfigCfm.sec_cfm)
  return _internal_mutable_sec_cfm();
}
inline void ModifyPDCPConfigCfm::set_allocated_sec_cfm(::structure::SecurityCfgCfm* sec_cfm) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sec_cfm_);
  }
  if (sec_cfm) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sec_cfm)->GetArena();
    if (message_arena != submessage_arena) {
      sec_cfm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sec_cfm, submessage_arena);
    }
    
  } else {
    
  }
  sec_cfm_ = sec_cfm;
  // @@protoc_insertion_point(field_set_allocated:srvCp.ModifyPDCPConfigCfm.sec_cfm)
}

// uint32 num_ent = 40;
inline void ModifyPDCPConfigCfm::clear_num_ent() {
  num_ent_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModifyPDCPConfigCfm::_internal_num_ent() const {
  return num_ent_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModifyPDCPConfigCfm::num_ent() const {
  // @@protoc_insertion_point(field_get:srvCp.ModifyPDCPConfigCfm.num_ent)
  return _internal_num_ent();
}
inline void ModifyPDCPConfigCfm::_internal_set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_ent_ = value;
}
inline void ModifyPDCPConfigCfm::set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_ent(value);
  // @@protoc_insertion_point(field_set:srvCp.ModifyPDCPConfigCfm.num_ent)
}

// repeated .structure.PDCPModCfgCfmEnt config_cfm_ent = 50;
inline int ModifyPDCPConfigCfm::_internal_config_cfm_ent_size() const {
  return config_cfm_ent_.size();
}
inline int ModifyPDCPConfigCfm::config_cfm_ent_size() const {
  return _internal_config_cfm_ent_size();
}
inline ::structure::PDCPModCfgCfmEnt* ModifyPDCPConfigCfm::mutable_config_cfm_ent(int index) {
  // @@protoc_insertion_point(field_mutable:srvCp.ModifyPDCPConfigCfm.config_cfm_ent)
  return config_cfm_ent_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::PDCPModCfgCfmEnt >*
ModifyPDCPConfigCfm::mutable_config_cfm_ent() {
  // @@protoc_insertion_point(field_mutable_list:srvCp.ModifyPDCPConfigCfm.config_cfm_ent)
  return &config_cfm_ent_;
}
inline const ::structure::PDCPModCfgCfmEnt& ModifyPDCPConfigCfm::_internal_config_cfm_ent(int index) const {
  return config_cfm_ent_.Get(index);
}
inline const ::structure::PDCPModCfgCfmEnt& ModifyPDCPConfigCfm::config_cfm_ent(int index) const {
  // @@protoc_insertion_point(field_get:srvCp.ModifyPDCPConfigCfm.config_cfm_ent)
  return _internal_config_cfm_ent(index);
}
inline ::structure::PDCPModCfgCfmEnt* ModifyPDCPConfigCfm::_internal_add_config_cfm_ent() {
  return config_cfm_ent_.Add();
}
inline ::structure::PDCPModCfgCfmEnt* ModifyPDCPConfigCfm::add_config_cfm_ent() {
  // @@protoc_insertion_point(field_add:srvCp.ModifyPDCPConfigCfm.config_cfm_ent)
  return _internal_add_config_cfm_ent();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::PDCPModCfgCfmEnt >&
ModifyPDCPConfigCfm::config_cfm_ent() const {
  // @@protoc_insertion_point(field_list:srvCp.ModifyPDCPConfigCfm.config_cfm_ent)
  return config_cfm_ent_;
}

// -------------------------------------------------------------------

// CfmReply

// .mhdr.MsgHdr hdr = 10;
inline bool CfmReply::_internal_has_hdr() const {
  return this != internal_default_instance() && hdr_ != nullptr;
}
inline bool CfmReply::has_hdr() const {
  return _internal_has_hdr();
}
inline const ::mhdr::MsgHdr& CfmReply::_internal_hdr() const {
  const ::mhdr::MsgHdr* p = hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mhdr::MsgHdr*>(
      &::mhdr::_MsgHdr_default_instance_);
}
inline const ::mhdr::MsgHdr& CfmReply::hdr() const {
  // @@protoc_insertion_point(field_get:srvCp.CfmReply.hdr)
  return _internal_hdr();
}
inline void CfmReply::unsafe_arena_set_allocated_hdr(
    ::mhdr::MsgHdr* hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  hdr_ = hdr;
  if (hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvCp.CfmReply.hdr)
}
inline ::mhdr::MsgHdr* CfmReply::release_hdr() {
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mhdr::MsgHdr* CfmReply::unsafe_arena_release_hdr() {
  // @@protoc_insertion_point(field_release:srvCp.CfmReply.hdr)
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  return temp;
}
inline ::mhdr::MsgHdr* CfmReply::_internal_mutable_hdr() {
  
  if (hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::mhdr::MsgHdr>(GetArena());
    hdr_ = p;
  }
  return hdr_;
}
inline ::mhdr::MsgHdr* CfmReply::mutable_hdr() {
  // @@protoc_insertion_point(field_mutable:srvCp.CfmReply.hdr)
  return _internal_mutable_hdr();
}
inline void CfmReply::set_allocated_hdr(::mhdr::MsgHdr* hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  if (hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr)->GetArena();
    if (message_arena != submessage_arena) {
      hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hdr, submessage_arena);
    }
    
  } else {
    
  }
  hdr_ = hdr;
  // @@protoc_insertion_point(field_set_allocated:srvCp.CfmReply.hdr)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace srvCp

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::srvCp::method> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::srvCp::method>() {
  return ::srvCp::method_descriptor();
}
template <> struct is_proto_enum< ::srvCp::version> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::srvCp::version>() {
  return ::srvCp::version_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_srvCp_2eproto
