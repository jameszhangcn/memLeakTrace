// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: srvCp.proto
#ifndef GRPC_srvCp_2eproto__INCLUDED
#define GRPC_srvCp_2eproto__INCLUDED

#include "srvCp.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace srvCp {

class Cp final {
 public:
  static constexpr char const* service_full_name() {
    return "srvCp.Cp";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Security
    virtual ::grpc::Status SubmitSecurityConfigCfm(::grpc::ClientContext* context, const ::srvCp::SecurityConfigCfm& request, ::srvCp::CfmReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>> AsyncSubmitSecurityConfigCfm(::grpc::ClientContext* context, const ::srvCp::SecurityConfigCfm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>>(AsyncSubmitSecurityConfigCfmRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>> PrepareAsyncSubmitSecurityConfigCfm(::grpc::ClientContext* context, const ::srvCp::SecurityConfigCfm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>>(PrepareAsyncSubmitSecurityConfigCfmRaw(context, request, cq));
    }
    // Tunnel
    virtual ::grpc::Status SubmitCreateTunnelCfm(::grpc::ClientContext* context, const ::srvCp::CreateTunnelCfm& request, ::srvCp::CfmReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>> AsyncSubmitCreateTunnelCfm(::grpc::ClientContext* context, const ::srvCp::CreateTunnelCfm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>>(AsyncSubmitCreateTunnelCfmRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>> PrepareAsyncSubmitCreateTunnelCfm(::grpc::ClientContext* context, const ::srvCp::CreateTunnelCfm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>>(PrepareAsyncSubmitCreateTunnelCfmRaw(context, request, cq));
    }
    virtual ::grpc::Status SubmitModifyTunnelCfm(::grpc::ClientContext* context, const ::srvCp::ModifyTunnelCfm& request, ::srvCp::CfmReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>> AsyncSubmitModifyTunnelCfm(::grpc::ClientContext* context, const ::srvCp::ModifyTunnelCfm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>>(AsyncSubmitModifyTunnelCfmRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>> PrepareAsyncSubmitModifyTunnelCfm(::grpc::ClientContext* context, const ::srvCp::ModifyTunnelCfm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>>(PrepareAsyncSubmitModifyTunnelCfmRaw(context, request, cq));
    }
    virtual ::grpc::Status SubmitDeleteTunnelCfm(::grpc::ClientContext* context, const ::srvCp::DeleteTunnelCfm& request, ::srvCp::CfmReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>> AsyncSubmitDeleteTunnelCfm(::grpc::ClientContext* context, const ::srvCp::DeleteTunnelCfm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>>(AsyncSubmitDeleteTunnelCfmRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>> PrepareAsyncSubmitDeleteTunnelCfm(::grpc::ClientContext* context, const ::srvCp::DeleteTunnelCfm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>>(PrepareAsyncSubmitDeleteTunnelCfmRaw(context, request, cq));
    }
    // RB
    virtual ::grpc::Status SubmitAddRbConfigCfm(::grpc::ClientContext* context, const ::srvCp::AddRbConfigCfm& request, ::srvCp::CfmReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>> AsyncSubmitAddRbConfigCfm(::grpc::ClientContext* context, const ::srvCp::AddRbConfigCfm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>>(AsyncSubmitAddRbConfigCfmRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>> PrepareAsyncSubmitAddRbConfigCfm(::grpc::ClientContext* context, const ::srvCp::AddRbConfigCfm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>>(PrepareAsyncSubmitAddRbConfigCfmRaw(context, request, cq));
    }
    virtual ::grpc::Status SubmitModifyRbConfigCfm(::grpc::ClientContext* context, const ::srvCp::ModifyRbConfigCfm& request, ::srvCp::CfmReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>> AsyncSubmitModifyRbConfigCfm(::grpc::ClientContext* context, const ::srvCp::ModifyRbConfigCfm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>>(AsyncSubmitModifyRbConfigCfmRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>> PrepareAsyncSubmitModifyRbConfigCfm(::grpc::ClientContext* context, const ::srvCp::ModifyRbConfigCfm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>>(PrepareAsyncSubmitModifyRbConfigCfmRaw(context, request, cq));
    }
    virtual ::grpc::Status SubmitDeleteRbConfigCfm(::grpc::ClientContext* context, const ::srvCp::DeleteRbConfigCfm& request, ::srvCp::CfmReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>> AsyncSubmitDeleteRbConfigCfm(::grpc::ClientContext* context, const ::srvCp::DeleteRbConfigCfm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>>(AsyncSubmitDeleteRbConfigCfmRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>> PrepareAsyncSubmitDeleteRbConfigCfm(::grpc::ClientContext* context, const ::srvCp::DeleteRbConfigCfm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>>(PrepareAsyncSubmitDeleteRbConfigCfmRaw(context, request, cq));
    }
    // Intra BBU handover
    virtual ::grpc::Status SubmitPDCPSduStatusCfm(::grpc::ClientContext* context, const ::srvCp::PDCPSduStatusCfm& request, ::srvCp::CfmReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>> AsyncSubmitPDCPSduStatusCfm(::grpc::ClientContext* context, const ::srvCp::PDCPSduStatusCfm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>>(AsyncSubmitPDCPSduStatusCfmRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>> PrepareAsyncSubmitPDCPSduStatusCfm(::grpc::ClientContext* context, const ::srvCp::PDCPSduStatusCfm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>>(PrepareAsyncSubmitPDCPSduStatusCfmRaw(context, request, cq));
    }
    // S1&X2 handover
    virtual ::grpc::Status SubmitAddPDCPConfigCfm(::grpc::ClientContext* context, const ::srvCp::AddPDCPConfigCfm& request, ::srvCp::CfmReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>> AsyncSubmitAddPDCPConfigCfm(::grpc::ClientContext* context, const ::srvCp::AddPDCPConfigCfm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>>(AsyncSubmitAddPDCPConfigCfmRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>> PrepareAsyncSubmitAddPDCPConfigCfm(::grpc::ClientContext* context, const ::srvCp::AddPDCPConfigCfm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>>(PrepareAsyncSubmitAddPDCPConfigCfmRaw(context, request, cq));
    }
    virtual ::grpc::Status SubmitModifyPDCPConfigCfm(::grpc::ClientContext* context, const ::srvCp::ModifyPDCPConfigCfm& request, ::srvCp::CfmReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>> AsyncSubmitModifyPDCPConfigCfm(::grpc::ClientContext* context, const ::srvCp::ModifyPDCPConfigCfm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>>(AsyncSubmitModifyPDCPConfigCfmRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>> PrepareAsyncSubmitModifyPDCPConfigCfm(::grpc::ClientContext* context, const ::srvCp::ModifyPDCPConfigCfm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>>(PrepareAsyncSubmitModifyPDCPConfigCfmRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Security
      virtual void SubmitSecurityConfigCfm(::grpc::ClientContext* context, const ::srvCp::SecurityConfigCfm* request, ::srvCp::CfmReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SubmitSecurityConfigCfm(::grpc::ClientContext* context, const ::srvCp::SecurityConfigCfm* request, ::srvCp::CfmReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SubmitSecurityConfigCfm(::grpc::ClientContext* context, const ::srvCp::SecurityConfigCfm* request, ::srvCp::CfmReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Tunnel
      virtual void SubmitCreateTunnelCfm(::grpc::ClientContext* context, const ::srvCp::CreateTunnelCfm* request, ::srvCp::CfmReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SubmitCreateTunnelCfm(::grpc::ClientContext* context, const ::srvCp::CreateTunnelCfm* request, ::srvCp::CfmReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SubmitCreateTunnelCfm(::grpc::ClientContext* context, const ::srvCp::CreateTunnelCfm* request, ::srvCp::CfmReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SubmitModifyTunnelCfm(::grpc::ClientContext* context, const ::srvCp::ModifyTunnelCfm* request, ::srvCp::CfmReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SubmitModifyTunnelCfm(::grpc::ClientContext* context, const ::srvCp::ModifyTunnelCfm* request, ::srvCp::CfmReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SubmitModifyTunnelCfm(::grpc::ClientContext* context, const ::srvCp::ModifyTunnelCfm* request, ::srvCp::CfmReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SubmitDeleteTunnelCfm(::grpc::ClientContext* context, const ::srvCp::DeleteTunnelCfm* request, ::srvCp::CfmReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SubmitDeleteTunnelCfm(::grpc::ClientContext* context, const ::srvCp::DeleteTunnelCfm* request, ::srvCp::CfmReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SubmitDeleteTunnelCfm(::grpc::ClientContext* context, const ::srvCp::DeleteTunnelCfm* request, ::srvCp::CfmReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // RB
      virtual void SubmitAddRbConfigCfm(::grpc::ClientContext* context, const ::srvCp::AddRbConfigCfm* request, ::srvCp::CfmReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SubmitAddRbConfigCfm(::grpc::ClientContext* context, const ::srvCp::AddRbConfigCfm* request, ::srvCp::CfmReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SubmitAddRbConfigCfm(::grpc::ClientContext* context, const ::srvCp::AddRbConfigCfm* request, ::srvCp::CfmReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SubmitModifyRbConfigCfm(::grpc::ClientContext* context, const ::srvCp::ModifyRbConfigCfm* request, ::srvCp::CfmReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SubmitModifyRbConfigCfm(::grpc::ClientContext* context, const ::srvCp::ModifyRbConfigCfm* request, ::srvCp::CfmReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SubmitModifyRbConfigCfm(::grpc::ClientContext* context, const ::srvCp::ModifyRbConfigCfm* request, ::srvCp::CfmReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SubmitDeleteRbConfigCfm(::grpc::ClientContext* context, const ::srvCp::DeleteRbConfigCfm* request, ::srvCp::CfmReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SubmitDeleteRbConfigCfm(::grpc::ClientContext* context, const ::srvCp::DeleteRbConfigCfm* request, ::srvCp::CfmReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SubmitDeleteRbConfigCfm(::grpc::ClientContext* context, const ::srvCp::DeleteRbConfigCfm* request, ::srvCp::CfmReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Intra BBU handover
      virtual void SubmitPDCPSduStatusCfm(::grpc::ClientContext* context, const ::srvCp::PDCPSduStatusCfm* request, ::srvCp::CfmReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SubmitPDCPSduStatusCfm(::grpc::ClientContext* context, const ::srvCp::PDCPSduStatusCfm* request, ::srvCp::CfmReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SubmitPDCPSduStatusCfm(::grpc::ClientContext* context, const ::srvCp::PDCPSduStatusCfm* request, ::srvCp::CfmReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // S1&X2 handover
      virtual void SubmitAddPDCPConfigCfm(::grpc::ClientContext* context, const ::srvCp::AddPDCPConfigCfm* request, ::srvCp::CfmReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SubmitAddPDCPConfigCfm(::grpc::ClientContext* context, const ::srvCp::AddPDCPConfigCfm* request, ::srvCp::CfmReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SubmitAddPDCPConfigCfm(::grpc::ClientContext* context, const ::srvCp::AddPDCPConfigCfm* request, ::srvCp::CfmReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SubmitModifyPDCPConfigCfm(::grpc::ClientContext* context, const ::srvCp::ModifyPDCPConfigCfm* request, ::srvCp::CfmReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SubmitModifyPDCPConfigCfm(::grpc::ClientContext* context, const ::srvCp::ModifyPDCPConfigCfm* request, ::srvCp::CfmReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SubmitModifyPDCPConfigCfm(::grpc::ClientContext* context, const ::srvCp::ModifyPDCPConfigCfm* request, ::srvCp::CfmReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>* AsyncSubmitSecurityConfigCfmRaw(::grpc::ClientContext* context, const ::srvCp::SecurityConfigCfm& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>* PrepareAsyncSubmitSecurityConfigCfmRaw(::grpc::ClientContext* context, const ::srvCp::SecurityConfigCfm& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>* AsyncSubmitCreateTunnelCfmRaw(::grpc::ClientContext* context, const ::srvCp::CreateTunnelCfm& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>* PrepareAsyncSubmitCreateTunnelCfmRaw(::grpc::ClientContext* context, const ::srvCp::CreateTunnelCfm& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>* AsyncSubmitModifyTunnelCfmRaw(::grpc::ClientContext* context, const ::srvCp::ModifyTunnelCfm& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>* PrepareAsyncSubmitModifyTunnelCfmRaw(::grpc::ClientContext* context, const ::srvCp::ModifyTunnelCfm& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>* AsyncSubmitDeleteTunnelCfmRaw(::grpc::ClientContext* context, const ::srvCp::DeleteTunnelCfm& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>* PrepareAsyncSubmitDeleteTunnelCfmRaw(::grpc::ClientContext* context, const ::srvCp::DeleteTunnelCfm& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>* AsyncSubmitAddRbConfigCfmRaw(::grpc::ClientContext* context, const ::srvCp::AddRbConfigCfm& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>* PrepareAsyncSubmitAddRbConfigCfmRaw(::grpc::ClientContext* context, const ::srvCp::AddRbConfigCfm& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>* AsyncSubmitModifyRbConfigCfmRaw(::grpc::ClientContext* context, const ::srvCp::ModifyRbConfigCfm& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>* PrepareAsyncSubmitModifyRbConfigCfmRaw(::grpc::ClientContext* context, const ::srvCp::ModifyRbConfigCfm& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>* AsyncSubmitDeleteRbConfigCfmRaw(::grpc::ClientContext* context, const ::srvCp::DeleteRbConfigCfm& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>* PrepareAsyncSubmitDeleteRbConfigCfmRaw(::grpc::ClientContext* context, const ::srvCp::DeleteRbConfigCfm& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>* AsyncSubmitPDCPSduStatusCfmRaw(::grpc::ClientContext* context, const ::srvCp::PDCPSduStatusCfm& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>* PrepareAsyncSubmitPDCPSduStatusCfmRaw(::grpc::ClientContext* context, const ::srvCp::PDCPSduStatusCfm& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>* AsyncSubmitAddPDCPConfigCfmRaw(::grpc::ClientContext* context, const ::srvCp::AddPDCPConfigCfm& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>* PrepareAsyncSubmitAddPDCPConfigCfmRaw(::grpc::ClientContext* context, const ::srvCp::AddPDCPConfigCfm& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>* AsyncSubmitModifyPDCPConfigCfmRaw(::grpc::ClientContext* context, const ::srvCp::ModifyPDCPConfigCfm& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>* PrepareAsyncSubmitModifyPDCPConfigCfmRaw(::grpc::ClientContext* context, const ::srvCp::ModifyPDCPConfigCfm& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status SubmitSecurityConfigCfm(::grpc::ClientContext* context, const ::srvCp::SecurityConfigCfm& request, ::srvCp::CfmReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>> AsyncSubmitSecurityConfigCfm(::grpc::ClientContext* context, const ::srvCp::SecurityConfigCfm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>>(AsyncSubmitSecurityConfigCfmRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>> PrepareAsyncSubmitSecurityConfigCfm(::grpc::ClientContext* context, const ::srvCp::SecurityConfigCfm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>>(PrepareAsyncSubmitSecurityConfigCfmRaw(context, request, cq));
    }
    ::grpc::Status SubmitCreateTunnelCfm(::grpc::ClientContext* context, const ::srvCp::CreateTunnelCfm& request, ::srvCp::CfmReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>> AsyncSubmitCreateTunnelCfm(::grpc::ClientContext* context, const ::srvCp::CreateTunnelCfm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>>(AsyncSubmitCreateTunnelCfmRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>> PrepareAsyncSubmitCreateTunnelCfm(::grpc::ClientContext* context, const ::srvCp::CreateTunnelCfm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>>(PrepareAsyncSubmitCreateTunnelCfmRaw(context, request, cq));
    }
    ::grpc::Status SubmitModifyTunnelCfm(::grpc::ClientContext* context, const ::srvCp::ModifyTunnelCfm& request, ::srvCp::CfmReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>> AsyncSubmitModifyTunnelCfm(::grpc::ClientContext* context, const ::srvCp::ModifyTunnelCfm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>>(AsyncSubmitModifyTunnelCfmRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>> PrepareAsyncSubmitModifyTunnelCfm(::grpc::ClientContext* context, const ::srvCp::ModifyTunnelCfm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>>(PrepareAsyncSubmitModifyTunnelCfmRaw(context, request, cq));
    }
    ::grpc::Status SubmitDeleteTunnelCfm(::grpc::ClientContext* context, const ::srvCp::DeleteTunnelCfm& request, ::srvCp::CfmReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>> AsyncSubmitDeleteTunnelCfm(::grpc::ClientContext* context, const ::srvCp::DeleteTunnelCfm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>>(AsyncSubmitDeleteTunnelCfmRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>> PrepareAsyncSubmitDeleteTunnelCfm(::grpc::ClientContext* context, const ::srvCp::DeleteTunnelCfm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>>(PrepareAsyncSubmitDeleteTunnelCfmRaw(context, request, cq));
    }
    ::grpc::Status SubmitAddRbConfigCfm(::grpc::ClientContext* context, const ::srvCp::AddRbConfigCfm& request, ::srvCp::CfmReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>> AsyncSubmitAddRbConfigCfm(::grpc::ClientContext* context, const ::srvCp::AddRbConfigCfm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>>(AsyncSubmitAddRbConfigCfmRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>> PrepareAsyncSubmitAddRbConfigCfm(::grpc::ClientContext* context, const ::srvCp::AddRbConfigCfm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>>(PrepareAsyncSubmitAddRbConfigCfmRaw(context, request, cq));
    }
    ::grpc::Status SubmitModifyRbConfigCfm(::grpc::ClientContext* context, const ::srvCp::ModifyRbConfigCfm& request, ::srvCp::CfmReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>> AsyncSubmitModifyRbConfigCfm(::grpc::ClientContext* context, const ::srvCp::ModifyRbConfigCfm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>>(AsyncSubmitModifyRbConfigCfmRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>> PrepareAsyncSubmitModifyRbConfigCfm(::grpc::ClientContext* context, const ::srvCp::ModifyRbConfigCfm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>>(PrepareAsyncSubmitModifyRbConfigCfmRaw(context, request, cq));
    }
    ::grpc::Status SubmitDeleteRbConfigCfm(::grpc::ClientContext* context, const ::srvCp::DeleteRbConfigCfm& request, ::srvCp::CfmReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>> AsyncSubmitDeleteRbConfigCfm(::grpc::ClientContext* context, const ::srvCp::DeleteRbConfigCfm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>>(AsyncSubmitDeleteRbConfigCfmRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>> PrepareAsyncSubmitDeleteRbConfigCfm(::grpc::ClientContext* context, const ::srvCp::DeleteRbConfigCfm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>>(PrepareAsyncSubmitDeleteRbConfigCfmRaw(context, request, cq));
    }
    ::grpc::Status SubmitPDCPSduStatusCfm(::grpc::ClientContext* context, const ::srvCp::PDCPSduStatusCfm& request, ::srvCp::CfmReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>> AsyncSubmitPDCPSduStatusCfm(::grpc::ClientContext* context, const ::srvCp::PDCPSduStatusCfm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>>(AsyncSubmitPDCPSduStatusCfmRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>> PrepareAsyncSubmitPDCPSduStatusCfm(::grpc::ClientContext* context, const ::srvCp::PDCPSduStatusCfm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>>(PrepareAsyncSubmitPDCPSduStatusCfmRaw(context, request, cq));
    }
    ::grpc::Status SubmitAddPDCPConfigCfm(::grpc::ClientContext* context, const ::srvCp::AddPDCPConfigCfm& request, ::srvCp::CfmReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>> AsyncSubmitAddPDCPConfigCfm(::grpc::ClientContext* context, const ::srvCp::AddPDCPConfigCfm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>>(AsyncSubmitAddPDCPConfigCfmRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>> PrepareAsyncSubmitAddPDCPConfigCfm(::grpc::ClientContext* context, const ::srvCp::AddPDCPConfigCfm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>>(PrepareAsyncSubmitAddPDCPConfigCfmRaw(context, request, cq));
    }
    ::grpc::Status SubmitModifyPDCPConfigCfm(::grpc::ClientContext* context, const ::srvCp::ModifyPDCPConfigCfm& request, ::srvCp::CfmReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>> AsyncSubmitModifyPDCPConfigCfm(::grpc::ClientContext* context, const ::srvCp::ModifyPDCPConfigCfm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>>(AsyncSubmitModifyPDCPConfigCfmRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>> PrepareAsyncSubmitModifyPDCPConfigCfm(::grpc::ClientContext* context, const ::srvCp::ModifyPDCPConfigCfm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>>(PrepareAsyncSubmitModifyPDCPConfigCfmRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void SubmitSecurityConfigCfm(::grpc::ClientContext* context, const ::srvCp::SecurityConfigCfm* request, ::srvCp::CfmReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SubmitSecurityConfigCfm(::grpc::ClientContext* context, const ::srvCp::SecurityConfigCfm* request, ::srvCp::CfmReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SubmitSecurityConfigCfm(::grpc::ClientContext* context, const ::srvCp::SecurityConfigCfm* request, ::srvCp::CfmReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SubmitCreateTunnelCfm(::grpc::ClientContext* context, const ::srvCp::CreateTunnelCfm* request, ::srvCp::CfmReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SubmitCreateTunnelCfm(::grpc::ClientContext* context, const ::srvCp::CreateTunnelCfm* request, ::srvCp::CfmReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SubmitCreateTunnelCfm(::grpc::ClientContext* context, const ::srvCp::CreateTunnelCfm* request, ::srvCp::CfmReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SubmitModifyTunnelCfm(::grpc::ClientContext* context, const ::srvCp::ModifyTunnelCfm* request, ::srvCp::CfmReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SubmitModifyTunnelCfm(::grpc::ClientContext* context, const ::srvCp::ModifyTunnelCfm* request, ::srvCp::CfmReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SubmitModifyTunnelCfm(::grpc::ClientContext* context, const ::srvCp::ModifyTunnelCfm* request, ::srvCp::CfmReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SubmitDeleteTunnelCfm(::grpc::ClientContext* context, const ::srvCp::DeleteTunnelCfm* request, ::srvCp::CfmReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SubmitDeleteTunnelCfm(::grpc::ClientContext* context, const ::srvCp::DeleteTunnelCfm* request, ::srvCp::CfmReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SubmitDeleteTunnelCfm(::grpc::ClientContext* context, const ::srvCp::DeleteTunnelCfm* request, ::srvCp::CfmReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SubmitAddRbConfigCfm(::grpc::ClientContext* context, const ::srvCp::AddRbConfigCfm* request, ::srvCp::CfmReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SubmitAddRbConfigCfm(::grpc::ClientContext* context, const ::srvCp::AddRbConfigCfm* request, ::srvCp::CfmReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SubmitAddRbConfigCfm(::grpc::ClientContext* context, const ::srvCp::AddRbConfigCfm* request, ::srvCp::CfmReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SubmitModifyRbConfigCfm(::grpc::ClientContext* context, const ::srvCp::ModifyRbConfigCfm* request, ::srvCp::CfmReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SubmitModifyRbConfigCfm(::grpc::ClientContext* context, const ::srvCp::ModifyRbConfigCfm* request, ::srvCp::CfmReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SubmitModifyRbConfigCfm(::grpc::ClientContext* context, const ::srvCp::ModifyRbConfigCfm* request, ::srvCp::CfmReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SubmitDeleteRbConfigCfm(::grpc::ClientContext* context, const ::srvCp::DeleteRbConfigCfm* request, ::srvCp::CfmReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SubmitDeleteRbConfigCfm(::grpc::ClientContext* context, const ::srvCp::DeleteRbConfigCfm* request, ::srvCp::CfmReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SubmitDeleteRbConfigCfm(::grpc::ClientContext* context, const ::srvCp::DeleteRbConfigCfm* request, ::srvCp::CfmReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SubmitPDCPSduStatusCfm(::grpc::ClientContext* context, const ::srvCp::PDCPSduStatusCfm* request, ::srvCp::CfmReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SubmitPDCPSduStatusCfm(::grpc::ClientContext* context, const ::srvCp::PDCPSduStatusCfm* request, ::srvCp::CfmReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SubmitPDCPSduStatusCfm(::grpc::ClientContext* context, const ::srvCp::PDCPSduStatusCfm* request, ::srvCp::CfmReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SubmitAddPDCPConfigCfm(::grpc::ClientContext* context, const ::srvCp::AddPDCPConfigCfm* request, ::srvCp::CfmReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SubmitAddPDCPConfigCfm(::grpc::ClientContext* context, const ::srvCp::AddPDCPConfigCfm* request, ::srvCp::CfmReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SubmitAddPDCPConfigCfm(::grpc::ClientContext* context, const ::srvCp::AddPDCPConfigCfm* request, ::srvCp::CfmReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SubmitModifyPDCPConfigCfm(::grpc::ClientContext* context, const ::srvCp::ModifyPDCPConfigCfm* request, ::srvCp::CfmReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SubmitModifyPDCPConfigCfm(::grpc::ClientContext* context, const ::srvCp::ModifyPDCPConfigCfm* request, ::srvCp::CfmReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SubmitModifyPDCPConfigCfm(::grpc::ClientContext* context, const ::srvCp::ModifyPDCPConfigCfm* request, ::srvCp::CfmReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>* AsyncSubmitSecurityConfigCfmRaw(::grpc::ClientContext* context, const ::srvCp::SecurityConfigCfm& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>* PrepareAsyncSubmitSecurityConfigCfmRaw(::grpc::ClientContext* context, const ::srvCp::SecurityConfigCfm& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>* AsyncSubmitCreateTunnelCfmRaw(::grpc::ClientContext* context, const ::srvCp::CreateTunnelCfm& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>* PrepareAsyncSubmitCreateTunnelCfmRaw(::grpc::ClientContext* context, const ::srvCp::CreateTunnelCfm& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>* AsyncSubmitModifyTunnelCfmRaw(::grpc::ClientContext* context, const ::srvCp::ModifyTunnelCfm& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>* PrepareAsyncSubmitModifyTunnelCfmRaw(::grpc::ClientContext* context, const ::srvCp::ModifyTunnelCfm& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>* AsyncSubmitDeleteTunnelCfmRaw(::grpc::ClientContext* context, const ::srvCp::DeleteTunnelCfm& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>* PrepareAsyncSubmitDeleteTunnelCfmRaw(::grpc::ClientContext* context, const ::srvCp::DeleteTunnelCfm& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>* AsyncSubmitAddRbConfigCfmRaw(::grpc::ClientContext* context, const ::srvCp::AddRbConfigCfm& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>* PrepareAsyncSubmitAddRbConfigCfmRaw(::grpc::ClientContext* context, const ::srvCp::AddRbConfigCfm& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>* AsyncSubmitModifyRbConfigCfmRaw(::grpc::ClientContext* context, const ::srvCp::ModifyRbConfigCfm& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>* PrepareAsyncSubmitModifyRbConfigCfmRaw(::grpc::ClientContext* context, const ::srvCp::ModifyRbConfigCfm& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>* AsyncSubmitDeleteRbConfigCfmRaw(::grpc::ClientContext* context, const ::srvCp::DeleteRbConfigCfm& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>* PrepareAsyncSubmitDeleteRbConfigCfmRaw(::grpc::ClientContext* context, const ::srvCp::DeleteRbConfigCfm& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>* AsyncSubmitPDCPSduStatusCfmRaw(::grpc::ClientContext* context, const ::srvCp::PDCPSduStatusCfm& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>* PrepareAsyncSubmitPDCPSduStatusCfmRaw(::grpc::ClientContext* context, const ::srvCp::PDCPSduStatusCfm& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>* AsyncSubmitAddPDCPConfigCfmRaw(::grpc::ClientContext* context, const ::srvCp::AddPDCPConfigCfm& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>* PrepareAsyncSubmitAddPDCPConfigCfmRaw(::grpc::ClientContext* context, const ::srvCp::AddPDCPConfigCfm& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>* AsyncSubmitModifyPDCPConfigCfmRaw(::grpc::ClientContext* context, const ::srvCp::ModifyPDCPConfigCfm& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>* PrepareAsyncSubmitModifyPDCPConfigCfmRaw(::grpc::ClientContext* context, const ::srvCp::ModifyPDCPConfigCfm& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SubmitSecurityConfigCfm_;
    const ::grpc::internal::RpcMethod rpcmethod_SubmitCreateTunnelCfm_;
    const ::grpc::internal::RpcMethod rpcmethod_SubmitModifyTunnelCfm_;
    const ::grpc::internal::RpcMethod rpcmethod_SubmitDeleteTunnelCfm_;
    const ::grpc::internal::RpcMethod rpcmethod_SubmitAddRbConfigCfm_;
    const ::grpc::internal::RpcMethod rpcmethod_SubmitModifyRbConfigCfm_;
    const ::grpc::internal::RpcMethod rpcmethod_SubmitDeleteRbConfigCfm_;
    const ::grpc::internal::RpcMethod rpcmethod_SubmitPDCPSduStatusCfm_;
    const ::grpc::internal::RpcMethod rpcmethod_SubmitAddPDCPConfigCfm_;
    const ::grpc::internal::RpcMethod rpcmethod_SubmitModifyPDCPConfigCfm_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Security
    virtual ::grpc::Status SubmitSecurityConfigCfm(::grpc::ServerContext* context, const ::srvCp::SecurityConfigCfm* request, ::srvCp::CfmReply* response);
    // Tunnel
    virtual ::grpc::Status SubmitCreateTunnelCfm(::grpc::ServerContext* context, const ::srvCp::CreateTunnelCfm* request, ::srvCp::CfmReply* response);
    virtual ::grpc::Status SubmitModifyTunnelCfm(::grpc::ServerContext* context, const ::srvCp::ModifyTunnelCfm* request, ::srvCp::CfmReply* response);
    virtual ::grpc::Status SubmitDeleteTunnelCfm(::grpc::ServerContext* context, const ::srvCp::DeleteTunnelCfm* request, ::srvCp::CfmReply* response);
    // RB
    virtual ::grpc::Status SubmitAddRbConfigCfm(::grpc::ServerContext* context, const ::srvCp::AddRbConfigCfm* request, ::srvCp::CfmReply* response);
    virtual ::grpc::Status SubmitModifyRbConfigCfm(::grpc::ServerContext* context, const ::srvCp::ModifyRbConfigCfm* request, ::srvCp::CfmReply* response);
    virtual ::grpc::Status SubmitDeleteRbConfigCfm(::grpc::ServerContext* context, const ::srvCp::DeleteRbConfigCfm* request, ::srvCp::CfmReply* response);
    // Intra BBU handover
    virtual ::grpc::Status SubmitPDCPSduStatusCfm(::grpc::ServerContext* context, const ::srvCp::PDCPSduStatusCfm* request, ::srvCp::CfmReply* response);
    // S1&X2 handover
    virtual ::grpc::Status SubmitAddPDCPConfigCfm(::grpc::ServerContext* context, const ::srvCp::AddPDCPConfigCfm* request, ::srvCp::CfmReply* response);
    virtual ::grpc::Status SubmitModifyPDCPConfigCfm(::grpc::ServerContext* context, const ::srvCp::ModifyPDCPConfigCfm* request, ::srvCp::CfmReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SubmitSecurityConfigCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubmitSecurityConfigCfm() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SubmitSecurityConfigCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitSecurityConfigCfm(::grpc::ServerContext* /*context*/, const ::srvCp::SecurityConfigCfm* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitSecurityConfigCfm(::grpc::ServerContext* context, ::srvCp::SecurityConfigCfm* request, ::grpc::ServerAsyncResponseWriter< ::srvCp::CfmReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubmitCreateTunnelCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubmitCreateTunnelCfm() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SubmitCreateTunnelCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitCreateTunnelCfm(::grpc::ServerContext* /*context*/, const ::srvCp::CreateTunnelCfm* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitCreateTunnelCfm(::grpc::ServerContext* context, ::srvCp::CreateTunnelCfm* request, ::grpc::ServerAsyncResponseWriter< ::srvCp::CfmReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubmitModifyTunnelCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubmitModifyTunnelCfm() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SubmitModifyTunnelCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitModifyTunnelCfm(::grpc::ServerContext* /*context*/, const ::srvCp::ModifyTunnelCfm* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitModifyTunnelCfm(::grpc::ServerContext* context, ::srvCp::ModifyTunnelCfm* request, ::grpc::ServerAsyncResponseWriter< ::srvCp::CfmReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubmitDeleteTunnelCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubmitDeleteTunnelCfm() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SubmitDeleteTunnelCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitDeleteTunnelCfm(::grpc::ServerContext* /*context*/, const ::srvCp::DeleteTunnelCfm* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitDeleteTunnelCfm(::grpc::ServerContext* context, ::srvCp::DeleteTunnelCfm* request, ::grpc::ServerAsyncResponseWriter< ::srvCp::CfmReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubmitAddRbConfigCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubmitAddRbConfigCfm() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_SubmitAddRbConfigCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitAddRbConfigCfm(::grpc::ServerContext* /*context*/, const ::srvCp::AddRbConfigCfm* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitAddRbConfigCfm(::grpc::ServerContext* context, ::srvCp::AddRbConfigCfm* request, ::grpc::ServerAsyncResponseWriter< ::srvCp::CfmReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubmitModifyRbConfigCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubmitModifyRbConfigCfm() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_SubmitModifyRbConfigCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitModifyRbConfigCfm(::grpc::ServerContext* /*context*/, const ::srvCp::ModifyRbConfigCfm* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitModifyRbConfigCfm(::grpc::ServerContext* context, ::srvCp::ModifyRbConfigCfm* request, ::grpc::ServerAsyncResponseWriter< ::srvCp::CfmReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubmitDeleteRbConfigCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubmitDeleteRbConfigCfm() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_SubmitDeleteRbConfigCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitDeleteRbConfigCfm(::grpc::ServerContext* /*context*/, const ::srvCp::DeleteRbConfigCfm* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitDeleteRbConfigCfm(::grpc::ServerContext* context, ::srvCp::DeleteRbConfigCfm* request, ::grpc::ServerAsyncResponseWriter< ::srvCp::CfmReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubmitPDCPSduStatusCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubmitPDCPSduStatusCfm() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_SubmitPDCPSduStatusCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitPDCPSduStatusCfm(::grpc::ServerContext* /*context*/, const ::srvCp::PDCPSduStatusCfm* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitPDCPSduStatusCfm(::grpc::ServerContext* context, ::srvCp::PDCPSduStatusCfm* request, ::grpc::ServerAsyncResponseWriter< ::srvCp::CfmReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubmitAddPDCPConfigCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubmitAddPDCPConfigCfm() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_SubmitAddPDCPConfigCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitAddPDCPConfigCfm(::grpc::ServerContext* /*context*/, const ::srvCp::AddPDCPConfigCfm* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitAddPDCPConfigCfm(::grpc::ServerContext* context, ::srvCp::AddPDCPConfigCfm* request, ::grpc::ServerAsyncResponseWriter< ::srvCp::CfmReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubmitModifyPDCPConfigCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubmitModifyPDCPConfigCfm() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_SubmitModifyPDCPConfigCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitModifyPDCPConfigCfm(::grpc::ServerContext* /*context*/, const ::srvCp::ModifyPDCPConfigCfm* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitModifyPDCPConfigCfm(::grpc::ServerContext* context, ::srvCp::ModifyPDCPConfigCfm* request, ::grpc::ServerAsyncResponseWriter< ::srvCp::CfmReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SubmitSecurityConfigCfm<WithAsyncMethod_SubmitCreateTunnelCfm<WithAsyncMethod_SubmitModifyTunnelCfm<WithAsyncMethod_SubmitDeleteTunnelCfm<WithAsyncMethod_SubmitAddRbConfigCfm<WithAsyncMethod_SubmitModifyRbConfigCfm<WithAsyncMethod_SubmitDeleteRbConfigCfm<WithAsyncMethod_SubmitPDCPSduStatusCfm<WithAsyncMethod_SubmitAddPDCPConfigCfm<WithAsyncMethod_SubmitModifyPDCPConfigCfm<Service > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SubmitSecurityConfigCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SubmitSecurityConfigCfm() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::srvCp::SecurityConfigCfm, ::srvCp::CfmReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::srvCp::SecurityConfigCfm* request, ::srvCp::CfmReply* response) { return this->SubmitSecurityConfigCfm(context, request, response); }));}
    void SetMessageAllocatorFor_SubmitSecurityConfigCfm(
        ::grpc::experimental::MessageAllocator< ::srvCp::SecurityConfigCfm, ::srvCp::CfmReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::srvCp::SecurityConfigCfm, ::srvCp::CfmReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SubmitSecurityConfigCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitSecurityConfigCfm(::grpc::ServerContext* /*context*/, const ::srvCp::SecurityConfigCfm* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubmitSecurityConfigCfm(
      ::grpc::CallbackServerContext* /*context*/, const ::srvCp::SecurityConfigCfm* /*request*/, ::srvCp::CfmReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubmitSecurityConfigCfm(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::srvCp::SecurityConfigCfm* /*request*/, ::srvCp::CfmReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SubmitCreateTunnelCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SubmitCreateTunnelCfm() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::srvCp::CreateTunnelCfm, ::srvCp::CfmReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::srvCp::CreateTunnelCfm* request, ::srvCp::CfmReply* response) { return this->SubmitCreateTunnelCfm(context, request, response); }));}
    void SetMessageAllocatorFor_SubmitCreateTunnelCfm(
        ::grpc::experimental::MessageAllocator< ::srvCp::CreateTunnelCfm, ::srvCp::CfmReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::srvCp::CreateTunnelCfm, ::srvCp::CfmReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SubmitCreateTunnelCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitCreateTunnelCfm(::grpc::ServerContext* /*context*/, const ::srvCp::CreateTunnelCfm* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubmitCreateTunnelCfm(
      ::grpc::CallbackServerContext* /*context*/, const ::srvCp::CreateTunnelCfm* /*request*/, ::srvCp::CfmReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubmitCreateTunnelCfm(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::srvCp::CreateTunnelCfm* /*request*/, ::srvCp::CfmReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SubmitModifyTunnelCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SubmitModifyTunnelCfm() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::srvCp::ModifyTunnelCfm, ::srvCp::CfmReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::srvCp::ModifyTunnelCfm* request, ::srvCp::CfmReply* response) { return this->SubmitModifyTunnelCfm(context, request, response); }));}
    void SetMessageAllocatorFor_SubmitModifyTunnelCfm(
        ::grpc::experimental::MessageAllocator< ::srvCp::ModifyTunnelCfm, ::srvCp::CfmReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::srvCp::ModifyTunnelCfm, ::srvCp::CfmReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SubmitModifyTunnelCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitModifyTunnelCfm(::grpc::ServerContext* /*context*/, const ::srvCp::ModifyTunnelCfm* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubmitModifyTunnelCfm(
      ::grpc::CallbackServerContext* /*context*/, const ::srvCp::ModifyTunnelCfm* /*request*/, ::srvCp::CfmReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubmitModifyTunnelCfm(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::srvCp::ModifyTunnelCfm* /*request*/, ::srvCp::CfmReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SubmitDeleteTunnelCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SubmitDeleteTunnelCfm() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::srvCp::DeleteTunnelCfm, ::srvCp::CfmReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::srvCp::DeleteTunnelCfm* request, ::srvCp::CfmReply* response) { return this->SubmitDeleteTunnelCfm(context, request, response); }));}
    void SetMessageAllocatorFor_SubmitDeleteTunnelCfm(
        ::grpc::experimental::MessageAllocator< ::srvCp::DeleteTunnelCfm, ::srvCp::CfmReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::srvCp::DeleteTunnelCfm, ::srvCp::CfmReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SubmitDeleteTunnelCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitDeleteTunnelCfm(::grpc::ServerContext* /*context*/, const ::srvCp::DeleteTunnelCfm* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubmitDeleteTunnelCfm(
      ::grpc::CallbackServerContext* /*context*/, const ::srvCp::DeleteTunnelCfm* /*request*/, ::srvCp::CfmReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubmitDeleteTunnelCfm(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::srvCp::DeleteTunnelCfm* /*request*/, ::srvCp::CfmReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SubmitAddRbConfigCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SubmitAddRbConfigCfm() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::srvCp::AddRbConfigCfm, ::srvCp::CfmReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::srvCp::AddRbConfigCfm* request, ::srvCp::CfmReply* response) { return this->SubmitAddRbConfigCfm(context, request, response); }));}
    void SetMessageAllocatorFor_SubmitAddRbConfigCfm(
        ::grpc::experimental::MessageAllocator< ::srvCp::AddRbConfigCfm, ::srvCp::CfmReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::srvCp::AddRbConfigCfm, ::srvCp::CfmReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SubmitAddRbConfigCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitAddRbConfigCfm(::grpc::ServerContext* /*context*/, const ::srvCp::AddRbConfigCfm* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubmitAddRbConfigCfm(
      ::grpc::CallbackServerContext* /*context*/, const ::srvCp::AddRbConfigCfm* /*request*/, ::srvCp::CfmReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubmitAddRbConfigCfm(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::srvCp::AddRbConfigCfm* /*request*/, ::srvCp::CfmReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SubmitModifyRbConfigCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SubmitModifyRbConfigCfm() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::srvCp::ModifyRbConfigCfm, ::srvCp::CfmReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::srvCp::ModifyRbConfigCfm* request, ::srvCp::CfmReply* response) { return this->SubmitModifyRbConfigCfm(context, request, response); }));}
    void SetMessageAllocatorFor_SubmitModifyRbConfigCfm(
        ::grpc::experimental::MessageAllocator< ::srvCp::ModifyRbConfigCfm, ::srvCp::CfmReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::srvCp::ModifyRbConfigCfm, ::srvCp::CfmReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SubmitModifyRbConfigCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitModifyRbConfigCfm(::grpc::ServerContext* /*context*/, const ::srvCp::ModifyRbConfigCfm* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubmitModifyRbConfigCfm(
      ::grpc::CallbackServerContext* /*context*/, const ::srvCp::ModifyRbConfigCfm* /*request*/, ::srvCp::CfmReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubmitModifyRbConfigCfm(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::srvCp::ModifyRbConfigCfm* /*request*/, ::srvCp::CfmReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SubmitDeleteRbConfigCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SubmitDeleteRbConfigCfm() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::srvCp::DeleteRbConfigCfm, ::srvCp::CfmReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::srvCp::DeleteRbConfigCfm* request, ::srvCp::CfmReply* response) { return this->SubmitDeleteRbConfigCfm(context, request, response); }));}
    void SetMessageAllocatorFor_SubmitDeleteRbConfigCfm(
        ::grpc::experimental::MessageAllocator< ::srvCp::DeleteRbConfigCfm, ::srvCp::CfmReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::srvCp::DeleteRbConfigCfm, ::srvCp::CfmReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SubmitDeleteRbConfigCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitDeleteRbConfigCfm(::grpc::ServerContext* /*context*/, const ::srvCp::DeleteRbConfigCfm* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubmitDeleteRbConfigCfm(
      ::grpc::CallbackServerContext* /*context*/, const ::srvCp::DeleteRbConfigCfm* /*request*/, ::srvCp::CfmReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubmitDeleteRbConfigCfm(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::srvCp::DeleteRbConfigCfm* /*request*/, ::srvCp::CfmReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SubmitPDCPSduStatusCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SubmitPDCPSduStatusCfm() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::srvCp::PDCPSduStatusCfm, ::srvCp::CfmReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::srvCp::PDCPSduStatusCfm* request, ::srvCp::CfmReply* response) { return this->SubmitPDCPSduStatusCfm(context, request, response); }));}
    void SetMessageAllocatorFor_SubmitPDCPSduStatusCfm(
        ::grpc::experimental::MessageAllocator< ::srvCp::PDCPSduStatusCfm, ::srvCp::CfmReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(7);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::srvCp::PDCPSduStatusCfm, ::srvCp::CfmReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SubmitPDCPSduStatusCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitPDCPSduStatusCfm(::grpc::ServerContext* /*context*/, const ::srvCp::PDCPSduStatusCfm* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubmitPDCPSduStatusCfm(
      ::grpc::CallbackServerContext* /*context*/, const ::srvCp::PDCPSduStatusCfm* /*request*/, ::srvCp::CfmReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubmitPDCPSduStatusCfm(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::srvCp::PDCPSduStatusCfm* /*request*/, ::srvCp::CfmReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SubmitAddPDCPConfigCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SubmitAddPDCPConfigCfm() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::srvCp::AddPDCPConfigCfm, ::srvCp::CfmReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::srvCp::AddPDCPConfigCfm* request, ::srvCp::CfmReply* response) { return this->SubmitAddPDCPConfigCfm(context, request, response); }));}
    void SetMessageAllocatorFor_SubmitAddPDCPConfigCfm(
        ::grpc::experimental::MessageAllocator< ::srvCp::AddPDCPConfigCfm, ::srvCp::CfmReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(8);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::srvCp::AddPDCPConfigCfm, ::srvCp::CfmReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SubmitAddPDCPConfigCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitAddPDCPConfigCfm(::grpc::ServerContext* /*context*/, const ::srvCp::AddPDCPConfigCfm* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubmitAddPDCPConfigCfm(
      ::grpc::CallbackServerContext* /*context*/, const ::srvCp::AddPDCPConfigCfm* /*request*/, ::srvCp::CfmReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubmitAddPDCPConfigCfm(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::srvCp::AddPDCPConfigCfm* /*request*/, ::srvCp::CfmReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SubmitModifyPDCPConfigCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SubmitModifyPDCPConfigCfm() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::srvCp::ModifyPDCPConfigCfm, ::srvCp::CfmReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::srvCp::ModifyPDCPConfigCfm* request, ::srvCp::CfmReply* response) { return this->SubmitModifyPDCPConfigCfm(context, request, response); }));}
    void SetMessageAllocatorFor_SubmitModifyPDCPConfigCfm(
        ::grpc::experimental::MessageAllocator< ::srvCp::ModifyPDCPConfigCfm, ::srvCp::CfmReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(9);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::srvCp::ModifyPDCPConfigCfm, ::srvCp::CfmReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SubmitModifyPDCPConfigCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitModifyPDCPConfigCfm(::grpc::ServerContext* /*context*/, const ::srvCp::ModifyPDCPConfigCfm* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubmitModifyPDCPConfigCfm(
      ::grpc::CallbackServerContext* /*context*/, const ::srvCp::ModifyPDCPConfigCfm* /*request*/, ::srvCp::CfmReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubmitModifyPDCPConfigCfm(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::srvCp::ModifyPDCPConfigCfm* /*request*/, ::srvCp::CfmReply* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_SubmitSecurityConfigCfm<ExperimentalWithCallbackMethod_SubmitCreateTunnelCfm<ExperimentalWithCallbackMethod_SubmitModifyTunnelCfm<ExperimentalWithCallbackMethod_SubmitDeleteTunnelCfm<ExperimentalWithCallbackMethod_SubmitAddRbConfigCfm<ExperimentalWithCallbackMethod_SubmitModifyRbConfigCfm<ExperimentalWithCallbackMethod_SubmitDeleteRbConfigCfm<ExperimentalWithCallbackMethod_SubmitPDCPSduStatusCfm<ExperimentalWithCallbackMethod_SubmitAddPDCPConfigCfm<ExperimentalWithCallbackMethod_SubmitModifyPDCPConfigCfm<Service > > > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_SubmitSecurityConfigCfm<ExperimentalWithCallbackMethod_SubmitCreateTunnelCfm<ExperimentalWithCallbackMethod_SubmitModifyTunnelCfm<ExperimentalWithCallbackMethod_SubmitDeleteTunnelCfm<ExperimentalWithCallbackMethod_SubmitAddRbConfigCfm<ExperimentalWithCallbackMethod_SubmitModifyRbConfigCfm<ExperimentalWithCallbackMethod_SubmitDeleteRbConfigCfm<ExperimentalWithCallbackMethod_SubmitPDCPSduStatusCfm<ExperimentalWithCallbackMethod_SubmitAddPDCPConfigCfm<ExperimentalWithCallbackMethod_SubmitModifyPDCPConfigCfm<Service > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SubmitSecurityConfigCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubmitSecurityConfigCfm() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SubmitSecurityConfigCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitSecurityConfigCfm(::grpc::ServerContext* /*context*/, const ::srvCp::SecurityConfigCfm* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubmitCreateTunnelCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubmitCreateTunnelCfm() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SubmitCreateTunnelCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitCreateTunnelCfm(::grpc::ServerContext* /*context*/, const ::srvCp::CreateTunnelCfm* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubmitModifyTunnelCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubmitModifyTunnelCfm() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SubmitModifyTunnelCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitModifyTunnelCfm(::grpc::ServerContext* /*context*/, const ::srvCp::ModifyTunnelCfm* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubmitDeleteTunnelCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubmitDeleteTunnelCfm() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SubmitDeleteTunnelCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitDeleteTunnelCfm(::grpc::ServerContext* /*context*/, const ::srvCp::DeleteTunnelCfm* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubmitAddRbConfigCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubmitAddRbConfigCfm() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_SubmitAddRbConfigCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitAddRbConfigCfm(::grpc::ServerContext* /*context*/, const ::srvCp::AddRbConfigCfm* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubmitModifyRbConfigCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubmitModifyRbConfigCfm() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_SubmitModifyRbConfigCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitModifyRbConfigCfm(::grpc::ServerContext* /*context*/, const ::srvCp::ModifyRbConfigCfm* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubmitDeleteRbConfigCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubmitDeleteRbConfigCfm() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_SubmitDeleteRbConfigCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitDeleteRbConfigCfm(::grpc::ServerContext* /*context*/, const ::srvCp::DeleteRbConfigCfm* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubmitPDCPSduStatusCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubmitPDCPSduStatusCfm() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_SubmitPDCPSduStatusCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitPDCPSduStatusCfm(::grpc::ServerContext* /*context*/, const ::srvCp::PDCPSduStatusCfm* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubmitAddPDCPConfigCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubmitAddPDCPConfigCfm() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_SubmitAddPDCPConfigCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitAddPDCPConfigCfm(::grpc::ServerContext* /*context*/, const ::srvCp::AddPDCPConfigCfm* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubmitModifyPDCPConfigCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubmitModifyPDCPConfigCfm() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_SubmitModifyPDCPConfigCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitModifyPDCPConfigCfm(::grpc::ServerContext* /*context*/, const ::srvCp::ModifyPDCPConfigCfm* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubmitSecurityConfigCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubmitSecurityConfigCfm() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SubmitSecurityConfigCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitSecurityConfigCfm(::grpc::ServerContext* /*context*/, const ::srvCp::SecurityConfigCfm* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitSecurityConfigCfm(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubmitCreateTunnelCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubmitCreateTunnelCfm() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SubmitCreateTunnelCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitCreateTunnelCfm(::grpc::ServerContext* /*context*/, const ::srvCp::CreateTunnelCfm* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitCreateTunnelCfm(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubmitModifyTunnelCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubmitModifyTunnelCfm() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SubmitModifyTunnelCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitModifyTunnelCfm(::grpc::ServerContext* /*context*/, const ::srvCp::ModifyTunnelCfm* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitModifyTunnelCfm(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubmitDeleteTunnelCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubmitDeleteTunnelCfm() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SubmitDeleteTunnelCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitDeleteTunnelCfm(::grpc::ServerContext* /*context*/, const ::srvCp::DeleteTunnelCfm* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitDeleteTunnelCfm(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubmitAddRbConfigCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubmitAddRbConfigCfm() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_SubmitAddRbConfigCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitAddRbConfigCfm(::grpc::ServerContext* /*context*/, const ::srvCp::AddRbConfigCfm* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitAddRbConfigCfm(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubmitModifyRbConfigCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubmitModifyRbConfigCfm() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_SubmitModifyRbConfigCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitModifyRbConfigCfm(::grpc::ServerContext* /*context*/, const ::srvCp::ModifyRbConfigCfm* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitModifyRbConfigCfm(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubmitDeleteRbConfigCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubmitDeleteRbConfigCfm() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_SubmitDeleteRbConfigCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitDeleteRbConfigCfm(::grpc::ServerContext* /*context*/, const ::srvCp::DeleteRbConfigCfm* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitDeleteRbConfigCfm(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubmitPDCPSduStatusCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubmitPDCPSduStatusCfm() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_SubmitPDCPSduStatusCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitPDCPSduStatusCfm(::grpc::ServerContext* /*context*/, const ::srvCp::PDCPSduStatusCfm* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitPDCPSduStatusCfm(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubmitAddPDCPConfigCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubmitAddPDCPConfigCfm() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_SubmitAddPDCPConfigCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitAddPDCPConfigCfm(::grpc::ServerContext* /*context*/, const ::srvCp::AddPDCPConfigCfm* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitAddPDCPConfigCfm(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubmitModifyPDCPConfigCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubmitModifyPDCPConfigCfm() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_SubmitModifyPDCPConfigCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitModifyPDCPConfigCfm(::grpc::ServerContext* /*context*/, const ::srvCp::ModifyPDCPConfigCfm* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitModifyPDCPConfigCfm(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SubmitSecurityConfigCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SubmitSecurityConfigCfm() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SubmitSecurityConfigCfm(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SubmitSecurityConfigCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitSecurityConfigCfm(::grpc::ServerContext* /*context*/, const ::srvCp::SecurityConfigCfm* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubmitSecurityConfigCfm(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubmitSecurityConfigCfm(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SubmitCreateTunnelCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SubmitCreateTunnelCfm() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SubmitCreateTunnelCfm(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SubmitCreateTunnelCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitCreateTunnelCfm(::grpc::ServerContext* /*context*/, const ::srvCp::CreateTunnelCfm* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubmitCreateTunnelCfm(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubmitCreateTunnelCfm(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SubmitModifyTunnelCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SubmitModifyTunnelCfm() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SubmitModifyTunnelCfm(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SubmitModifyTunnelCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitModifyTunnelCfm(::grpc::ServerContext* /*context*/, const ::srvCp::ModifyTunnelCfm* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubmitModifyTunnelCfm(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubmitModifyTunnelCfm(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SubmitDeleteTunnelCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SubmitDeleteTunnelCfm() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SubmitDeleteTunnelCfm(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SubmitDeleteTunnelCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitDeleteTunnelCfm(::grpc::ServerContext* /*context*/, const ::srvCp::DeleteTunnelCfm* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubmitDeleteTunnelCfm(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubmitDeleteTunnelCfm(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SubmitAddRbConfigCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SubmitAddRbConfigCfm() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SubmitAddRbConfigCfm(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SubmitAddRbConfigCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitAddRbConfigCfm(::grpc::ServerContext* /*context*/, const ::srvCp::AddRbConfigCfm* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubmitAddRbConfigCfm(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubmitAddRbConfigCfm(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SubmitModifyRbConfigCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SubmitModifyRbConfigCfm() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SubmitModifyRbConfigCfm(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SubmitModifyRbConfigCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitModifyRbConfigCfm(::grpc::ServerContext* /*context*/, const ::srvCp::ModifyRbConfigCfm* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubmitModifyRbConfigCfm(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubmitModifyRbConfigCfm(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SubmitDeleteRbConfigCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SubmitDeleteRbConfigCfm() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SubmitDeleteRbConfigCfm(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SubmitDeleteRbConfigCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitDeleteRbConfigCfm(::grpc::ServerContext* /*context*/, const ::srvCp::DeleteRbConfigCfm* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubmitDeleteRbConfigCfm(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubmitDeleteRbConfigCfm(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SubmitPDCPSduStatusCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SubmitPDCPSduStatusCfm() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SubmitPDCPSduStatusCfm(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SubmitPDCPSduStatusCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitPDCPSduStatusCfm(::grpc::ServerContext* /*context*/, const ::srvCp::PDCPSduStatusCfm* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubmitPDCPSduStatusCfm(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubmitPDCPSduStatusCfm(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SubmitAddPDCPConfigCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SubmitAddPDCPConfigCfm() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SubmitAddPDCPConfigCfm(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SubmitAddPDCPConfigCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitAddPDCPConfigCfm(::grpc::ServerContext* /*context*/, const ::srvCp::AddPDCPConfigCfm* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubmitAddPDCPConfigCfm(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubmitAddPDCPConfigCfm(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SubmitModifyPDCPConfigCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SubmitModifyPDCPConfigCfm() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SubmitModifyPDCPConfigCfm(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SubmitModifyPDCPConfigCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitModifyPDCPConfigCfm(::grpc::ServerContext* /*context*/, const ::srvCp::ModifyPDCPConfigCfm* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubmitModifyPDCPConfigCfm(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubmitModifyPDCPConfigCfm(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SubmitSecurityConfigCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SubmitSecurityConfigCfm() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::srvCp::SecurityConfigCfm, ::srvCp::CfmReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::srvCp::SecurityConfigCfm, ::srvCp::CfmReply>* streamer) {
                       return this->StreamedSubmitSecurityConfigCfm(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SubmitSecurityConfigCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubmitSecurityConfigCfm(::grpc::ServerContext* /*context*/, const ::srvCp::SecurityConfigCfm* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubmitSecurityConfigCfm(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::srvCp::SecurityConfigCfm,::srvCp::CfmReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SubmitCreateTunnelCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SubmitCreateTunnelCfm() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::srvCp::CreateTunnelCfm, ::srvCp::CfmReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::srvCp::CreateTunnelCfm, ::srvCp::CfmReply>* streamer) {
                       return this->StreamedSubmitCreateTunnelCfm(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SubmitCreateTunnelCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubmitCreateTunnelCfm(::grpc::ServerContext* /*context*/, const ::srvCp::CreateTunnelCfm* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubmitCreateTunnelCfm(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::srvCp::CreateTunnelCfm,::srvCp::CfmReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SubmitModifyTunnelCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SubmitModifyTunnelCfm() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::srvCp::ModifyTunnelCfm, ::srvCp::CfmReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::srvCp::ModifyTunnelCfm, ::srvCp::CfmReply>* streamer) {
                       return this->StreamedSubmitModifyTunnelCfm(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SubmitModifyTunnelCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubmitModifyTunnelCfm(::grpc::ServerContext* /*context*/, const ::srvCp::ModifyTunnelCfm* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubmitModifyTunnelCfm(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::srvCp::ModifyTunnelCfm,::srvCp::CfmReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SubmitDeleteTunnelCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SubmitDeleteTunnelCfm() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::srvCp::DeleteTunnelCfm, ::srvCp::CfmReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::srvCp::DeleteTunnelCfm, ::srvCp::CfmReply>* streamer) {
                       return this->StreamedSubmitDeleteTunnelCfm(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SubmitDeleteTunnelCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubmitDeleteTunnelCfm(::grpc::ServerContext* /*context*/, const ::srvCp::DeleteTunnelCfm* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubmitDeleteTunnelCfm(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::srvCp::DeleteTunnelCfm,::srvCp::CfmReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SubmitAddRbConfigCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SubmitAddRbConfigCfm() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::srvCp::AddRbConfigCfm, ::srvCp::CfmReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::srvCp::AddRbConfigCfm, ::srvCp::CfmReply>* streamer) {
                       return this->StreamedSubmitAddRbConfigCfm(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SubmitAddRbConfigCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubmitAddRbConfigCfm(::grpc::ServerContext* /*context*/, const ::srvCp::AddRbConfigCfm* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubmitAddRbConfigCfm(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::srvCp::AddRbConfigCfm,::srvCp::CfmReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SubmitModifyRbConfigCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SubmitModifyRbConfigCfm() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::srvCp::ModifyRbConfigCfm, ::srvCp::CfmReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::srvCp::ModifyRbConfigCfm, ::srvCp::CfmReply>* streamer) {
                       return this->StreamedSubmitModifyRbConfigCfm(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SubmitModifyRbConfigCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubmitModifyRbConfigCfm(::grpc::ServerContext* /*context*/, const ::srvCp::ModifyRbConfigCfm* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubmitModifyRbConfigCfm(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::srvCp::ModifyRbConfigCfm,::srvCp::CfmReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SubmitDeleteRbConfigCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SubmitDeleteRbConfigCfm() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::srvCp::DeleteRbConfigCfm, ::srvCp::CfmReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::srvCp::DeleteRbConfigCfm, ::srvCp::CfmReply>* streamer) {
                       return this->StreamedSubmitDeleteRbConfigCfm(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SubmitDeleteRbConfigCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubmitDeleteRbConfigCfm(::grpc::ServerContext* /*context*/, const ::srvCp::DeleteRbConfigCfm* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubmitDeleteRbConfigCfm(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::srvCp::DeleteRbConfigCfm,::srvCp::CfmReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SubmitPDCPSduStatusCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SubmitPDCPSduStatusCfm() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::srvCp::PDCPSduStatusCfm, ::srvCp::CfmReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::srvCp::PDCPSduStatusCfm, ::srvCp::CfmReply>* streamer) {
                       return this->StreamedSubmitPDCPSduStatusCfm(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SubmitPDCPSduStatusCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubmitPDCPSduStatusCfm(::grpc::ServerContext* /*context*/, const ::srvCp::PDCPSduStatusCfm* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubmitPDCPSduStatusCfm(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::srvCp::PDCPSduStatusCfm,::srvCp::CfmReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SubmitAddPDCPConfigCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SubmitAddPDCPConfigCfm() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::srvCp::AddPDCPConfigCfm, ::srvCp::CfmReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::srvCp::AddPDCPConfigCfm, ::srvCp::CfmReply>* streamer) {
                       return this->StreamedSubmitAddPDCPConfigCfm(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SubmitAddPDCPConfigCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubmitAddPDCPConfigCfm(::grpc::ServerContext* /*context*/, const ::srvCp::AddPDCPConfigCfm* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubmitAddPDCPConfigCfm(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::srvCp::AddPDCPConfigCfm,::srvCp::CfmReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SubmitModifyPDCPConfigCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SubmitModifyPDCPConfigCfm() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::srvCp::ModifyPDCPConfigCfm, ::srvCp::CfmReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::srvCp::ModifyPDCPConfigCfm, ::srvCp::CfmReply>* streamer) {
                       return this->StreamedSubmitModifyPDCPConfigCfm(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SubmitModifyPDCPConfigCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubmitModifyPDCPConfigCfm(::grpc::ServerContext* /*context*/, const ::srvCp::ModifyPDCPConfigCfm* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubmitModifyPDCPConfigCfm(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::srvCp::ModifyPDCPConfigCfm,::srvCp::CfmReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SubmitSecurityConfigCfm<WithStreamedUnaryMethod_SubmitCreateTunnelCfm<WithStreamedUnaryMethod_SubmitModifyTunnelCfm<WithStreamedUnaryMethod_SubmitDeleteTunnelCfm<WithStreamedUnaryMethod_SubmitAddRbConfigCfm<WithStreamedUnaryMethod_SubmitModifyRbConfigCfm<WithStreamedUnaryMethod_SubmitDeleteRbConfigCfm<WithStreamedUnaryMethod_SubmitPDCPSduStatusCfm<WithStreamedUnaryMethod_SubmitAddPDCPConfigCfm<WithStreamedUnaryMethod_SubmitModifyPDCPConfigCfm<Service > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SubmitSecurityConfigCfm<WithStreamedUnaryMethod_SubmitCreateTunnelCfm<WithStreamedUnaryMethod_SubmitModifyTunnelCfm<WithStreamedUnaryMethod_SubmitDeleteTunnelCfm<WithStreamedUnaryMethod_SubmitAddRbConfigCfm<WithStreamedUnaryMethod_SubmitModifyRbConfigCfm<WithStreamedUnaryMethod_SubmitDeleteRbConfigCfm<WithStreamedUnaryMethod_SubmitPDCPSduStatusCfm<WithStreamedUnaryMethod_SubmitAddPDCPConfigCfm<WithStreamedUnaryMethod_SubmitModifyPDCPConfigCfm<Service > > > > > > > > > > StreamedService;
};

}  // namespace srvCp


#endif  // GRPC_srvCp_2eproto__INCLUDED
