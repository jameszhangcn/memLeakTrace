// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: srvEbm.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_srvEbm_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_srvEbm_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "mhdr.pb.h"
#include "structure.pb.h"
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_srvEbm_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_srvEbm_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[17]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_srvEbm_2eproto;
namespace srvEbm {
class AddPDCPConfigReq;
class AddPDCPConfigReqDefaultTypeInternal;
extern AddPDCPConfigReqDefaultTypeInternal _AddPDCPConfigReq_default_instance_;
class AddRbConfigReq;
class AddRbConfigReqDefaultTypeInternal;
extern AddRbConfigReqDefaultTypeInternal _AddRbConfigReq_default_instance_;
class CreateTunnelReq;
class CreateTunnelReqDefaultTypeInternal;
extern CreateTunnelReqDefaultTypeInternal _CreateTunnelReq_default_instance_;
class DataForwardingReq;
class DataForwardingReqDefaultTypeInternal;
extern DataForwardingReqDefaultTypeInternal _DataForwardingReq_default_instance_;
class DeleteRbConfigReq;
class DeleteRbConfigReqDefaultTypeInternal;
extern DeleteRbConfigReqDefaultTypeInternal _DeleteRbConfigReq_default_instance_;
class DeleteTunnelReq;
class DeleteTunnelReqDefaultTypeInternal;
extern DeleteTunnelReqDefaultTypeInternal _DeleteTunnelReq_default_instance_;
class IpAddressConfigMsg;
class IpAddressConfigMsgDefaultTypeInternal;
extern IpAddressConfigMsgDefaultTypeInternal _IpAddressConfigMsg_default_instance_;
class ModifyPDCPConfigReq;
class ModifyPDCPConfigReqDefaultTypeInternal;
extern ModifyPDCPConfigReqDefaultTypeInternal _ModifyPDCPConfigReq_default_instance_;
class ModifyRbConfigReq;
class ModifyRbConfigReqDefaultTypeInternal;
extern ModifyRbConfigReqDefaultTypeInternal _ModifyRbConfigReq_default_instance_;
class ModifyTunnelReq;
class ModifyTunnelReqDefaultTypeInternal;
extern ModifyTunnelReqDefaultTypeInternal _ModifyTunnelReq_default_instance_;
class NotifyPathStatusMsg;
class NotifyPathStatusMsgDefaultTypeInternal;
extern NotifyPathStatusMsgDefaultTypeInternal _NotifyPathStatusMsg_default_instance_;
class PDCPSduStatusReq;
class PDCPSduStatusReqDefaultTypeInternal;
extern PDCPSduStatusReqDefaultTypeInternal _PDCPSduStatusReq_default_instance_;
class PathManagementConfigMsg;
class PathManagementConfigMsgDefaultTypeInternal;
extern PathManagementConfigMsgDefaultTypeInternal _PathManagementConfigMsg_default_instance_;
class PauseResumeDataReq;
class PauseResumeDataReqDefaultTypeInternal;
extern PauseResumeDataReqDefaultTypeInternal _PauseResumeDataReq_default_instance_;
class SecurityConfigReq;
class SecurityConfigReqDefaultTypeInternal;
extern SecurityConfigReqDefaultTypeInternal _SecurityConfigReq_default_instance_;
class TunnelStateChangeReq;
class TunnelStateChangeReqDefaultTypeInternal;
extern TunnelStateChangeReqDefaultTypeInternal _TunnelStateChangeReq_default_instance_;
class UeInactivityTimerReq;
class UeInactivityTimerReqDefaultTypeInternal;
extern UeInactivityTimerReqDefaultTypeInternal _UeInactivityTimerReq_default_instance_;
}  // namespace srvEbm
PROTOBUF_NAMESPACE_OPEN
template<> ::srvEbm::AddPDCPConfigReq* Arena::CreateMaybeMessage<::srvEbm::AddPDCPConfigReq>(Arena*);
template<> ::srvEbm::AddRbConfigReq* Arena::CreateMaybeMessage<::srvEbm::AddRbConfigReq>(Arena*);
template<> ::srvEbm::CreateTunnelReq* Arena::CreateMaybeMessage<::srvEbm::CreateTunnelReq>(Arena*);
template<> ::srvEbm::DataForwardingReq* Arena::CreateMaybeMessage<::srvEbm::DataForwardingReq>(Arena*);
template<> ::srvEbm::DeleteRbConfigReq* Arena::CreateMaybeMessage<::srvEbm::DeleteRbConfigReq>(Arena*);
template<> ::srvEbm::DeleteTunnelReq* Arena::CreateMaybeMessage<::srvEbm::DeleteTunnelReq>(Arena*);
template<> ::srvEbm::IpAddressConfigMsg* Arena::CreateMaybeMessage<::srvEbm::IpAddressConfigMsg>(Arena*);
template<> ::srvEbm::ModifyPDCPConfigReq* Arena::CreateMaybeMessage<::srvEbm::ModifyPDCPConfigReq>(Arena*);
template<> ::srvEbm::ModifyRbConfigReq* Arena::CreateMaybeMessage<::srvEbm::ModifyRbConfigReq>(Arena*);
template<> ::srvEbm::ModifyTunnelReq* Arena::CreateMaybeMessage<::srvEbm::ModifyTunnelReq>(Arena*);
template<> ::srvEbm::NotifyPathStatusMsg* Arena::CreateMaybeMessage<::srvEbm::NotifyPathStatusMsg>(Arena*);
template<> ::srvEbm::PDCPSduStatusReq* Arena::CreateMaybeMessage<::srvEbm::PDCPSduStatusReq>(Arena*);
template<> ::srvEbm::PathManagementConfigMsg* Arena::CreateMaybeMessage<::srvEbm::PathManagementConfigMsg>(Arena*);
template<> ::srvEbm::PauseResumeDataReq* Arena::CreateMaybeMessage<::srvEbm::PauseResumeDataReq>(Arena*);
template<> ::srvEbm::SecurityConfigReq* Arena::CreateMaybeMessage<::srvEbm::SecurityConfigReq>(Arena*);
template<> ::srvEbm::TunnelStateChangeReq* Arena::CreateMaybeMessage<::srvEbm::TunnelStateChangeReq>(Arena*);
template<> ::srvEbm::UeInactivityTimerReq* Arena::CreateMaybeMessage<::srvEbm::UeInactivityTimerReq>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace srvEbm {

enum method : int {
  MethodUnknown = 0,
  MethodSubmitSecurityConfigReq = 1,
  MethodSubmitCreateTunnelReq = 2,
  MethodSubmitModifyTunnelReq = 3,
  MethodSubmitDeleteTunnelReq = 4,
  MethodSubmitAddRbConfigReq = 5,
  MethodSubmitModifyRbConfigReq = 6,
  MethodSubmitDeleteRbConfigReq = 7,
  MethodSubmitPauseResumeDataReq = 8,
  MethodSubmitPDCPSduStatusReq = 9,
  MethodSubmitDataForwardingReq = 10,
  MethodSubmitUeInactivityTimerReq = 11,
  MethodSubmitIpAddressConfMsg = 12,
  MethodSubmitPathManagementConfigMsg = 13,
  MethodSubmitNotifyPathStatusMsg = 14,
  MethodSubmitAddPDCPConfigReq = 15,
  MethodSubmitModifyPDCPConfigReq = 16,
  MethodSubmitTunnelStateChangeReq = 17,
  MethodReqReply = 20,
  method_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  method_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool method_IsValid(int value);
constexpr method method_MIN = MethodUnknown;
constexpr method method_MAX = MethodReqReply;
constexpr int method_ARRAYSIZE = method_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* method_descriptor();
template<typename T>
inline const std::string& method_Name(T enum_t_value) {
  static_assert(::std::is_same<T, method>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function method_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    method_descriptor(), enum_t_value);
}
inline bool method_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, method* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<method>(
    method_descriptor(), name, value);
}
enum version : int {
  VerUnknown = 0,
  Ver = 1,
  version_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  version_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool version_IsValid(int value);
constexpr version version_MIN = VerUnknown;
constexpr version version_MAX = Ver;
constexpr int version_ARRAYSIZE = version_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* version_descriptor();
template<typename T>
inline const std::string& version_Name(T enum_t_value) {
  static_assert(::std::is_same<T, version>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function version_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    version_descriptor(), enum_t_value);
}
inline bool version_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, version* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<version>(
    version_descriptor(), name, value);
}
// ===================================================================

class SecurityConfigReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srvEbm.SecurityConfigReq) */ {
 public:
  inline SecurityConfigReq() : SecurityConfigReq(nullptr) {}
  virtual ~SecurityConfigReq();

  SecurityConfigReq(const SecurityConfigReq& from);
  SecurityConfigReq(SecurityConfigReq&& from) noexcept
    : SecurityConfigReq() {
    *this = ::std::move(from);
  }

  inline SecurityConfigReq& operator=(const SecurityConfigReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecurityConfigReq& operator=(SecurityConfigReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecurityConfigReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecurityConfigReq* internal_default_instance() {
    return reinterpret_cast<const SecurityConfigReq*>(
               &_SecurityConfigReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SecurityConfigReq& a, SecurityConfigReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SecurityConfigReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecurityConfigReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecurityConfigReq* New() const final {
    return CreateMaybeMessage<SecurityConfigReq>(nullptr);
  }

  SecurityConfigReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecurityConfigReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecurityConfigReq& from);
  void MergeFrom(const SecurityConfigReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecurityConfigReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srvEbm.SecurityConfigReq";
  }
  protected:
  explicit SecurityConfigReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_srvEbm_2eproto);
    return ::descriptor_table_srvEbm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHdrFieldNumber = 10,
    kCpUpHdrFieldNumber = 20,
    kSecurityConfigFieldNumber = 30,
    kIsHoFieldNumber = 21,
  };
  // .mhdr.MsgHdr hdr = 10;
  bool has_hdr() const;
  private:
  bool _internal_has_hdr() const;
  public:
  void clear_hdr();
  const ::mhdr::MsgHdr& hdr() const;
  ::mhdr::MsgHdr* release_hdr();
  ::mhdr::MsgHdr* mutable_hdr();
  void set_allocated_hdr(::mhdr::MsgHdr* hdr);
  private:
  const ::mhdr::MsgHdr& _internal_hdr() const;
  ::mhdr::MsgHdr* _internal_mutable_hdr();
  public:
  void unsafe_arena_set_allocated_hdr(
      ::mhdr::MsgHdr* hdr);
  ::mhdr::MsgHdr* unsafe_arena_release_hdr();

  // .structure.CpUpHdr cp_up_hdr = 20;
  bool has_cp_up_hdr() const;
  private:
  bool _internal_has_cp_up_hdr() const;
  public:
  void clear_cp_up_hdr();
  const ::structure::CpUpHdr& cp_up_hdr() const;
  ::structure::CpUpHdr* release_cp_up_hdr();
  ::structure::CpUpHdr* mutable_cp_up_hdr();
  void set_allocated_cp_up_hdr(::structure::CpUpHdr* cp_up_hdr);
  private:
  const ::structure::CpUpHdr& _internal_cp_up_hdr() const;
  ::structure::CpUpHdr* _internal_mutable_cp_up_hdr();
  public:
  void unsafe_arena_set_allocated_cp_up_hdr(
      ::structure::CpUpHdr* cp_up_hdr);
  ::structure::CpUpHdr* unsafe_arena_release_cp_up_hdr();

  // .structure.SecurityConfig security_config = 30;
  bool has_security_config() const;
  private:
  bool _internal_has_security_config() const;
  public:
  void clear_security_config();
  const ::structure::SecurityConfig& security_config() const;
  ::structure::SecurityConfig* release_security_config();
  ::structure::SecurityConfig* mutable_security_config();
  void set_allocated_security_config(::structure::SecurityConfig* security_config);
  private:
  const ::structure::SecurityConfig& _internal_security_config() const;
  ::structure::SecurityConfig* _internal_mutable_security_config();
  public:
  void unsafe_arena_set_allocated_security_config(
      ::structure::SecurityConfig* security_config);
  ::structure::SecurityConfig* unsafe_arena_release_security_config();

  // bool is_ho = 21;
  void clear_is_ho();
  bool is_ho() const;
  void set_is_ho(bool value);
  private:
  bool _internal_is_ho() const;
  void _internal_set_is_ho(bool value);
  public:

  // @@protoc_insertion_point(class_scope:srvEbm.SecurityConfigReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mhdr::MsgHdr* hdr_;
  ::structure::CpUpHdr* cp_up_hdr_;
  ::structure::SecurityConfig* security_config_;
  bool is_ho_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_srvEbm_2eproto;
};
// -------------------------------------------------------------------

class CreateTunnelReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srvEbm.CreateTunnelReq) */ {
 public:
  inline CreateTunnelReq() : CreateTunnelReq(nullptr) {}
  virtual ~CreateTunnelReq();

  CreateTunnelReq(const CreateTunnelReq& from);
  CreateTunnelReq(CreateTunnelReq&& from) noexcept
    : CreateTunnelReq() {
    *this = ::std::move(from);
  }

  inline CreateTunnelReq& operator=(const CreateTunnelReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateTunnelReq& operator=(CreateTunnelReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateTunnelReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateTunnelReq* internal_default_instance() {
    return reinterpret_cast<const CreateTunnelReq*>(
               &_CreateTunnelReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateTunnelReq& a, CreateTunnelReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateTunnelReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateTunnelReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateTunnelReq* New() const final {
    return CreateMaybeMessage<CreateTunnelReq>(nullptr);
  }

  CreateTunnelReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateTunnelReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateTunnelReq& from);
  void MergeFrom(const CreateTunnelReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTunnelReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srvEbm.CreateTunnelReq";
  }
  protected:
  explicit CreateTunnelReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_srvEbm_2eproto);
    return ::descriptor_table_srvEbm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTnlInfoListFieldNumber = 40,
    kHdrFieldNumber = 10,
    kCpUpHdrFieldNumber = 20,
    kNumEntFieldNumber = 31,
  };
  // repeated .structure.GtpTunnelInfo tnl_info_list = 40;
  int tnl_info_list_size() const;
  private:
  int _internal_tnl_info_list_size() const;
  public:
  void clear_tnl_info_list();
  ::structure::GtpTunnelInfo* mutable_tnl_info_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::GtpTunnelInfo >*
      mutable_tnl_info_list();
  private:
  const ::structure::GtpTunnelInfo& _internal_tnl_info_list(int index) const;
  ::structure::GtpTunnelInfo* _internal_add_tnl_info_list();
  public:
  const ::structure::GtpTunnelInfo& tnl_info_list(int index) const;
  ::structure::GtpTunnelInfo* add_tnl_info_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::GtpTunnelInfo >&
      tnl_info_list() const;

  // .mhdr.MsgHdr hdr = 10;
  bool has_hdr() const;
  private:
  bool _internal_has_hdr() const;
  public:
  void clear_hdr();
  const ::mhdr::MsgHdr& hdr() const;
  ::mhdr::MsgHdr* release_hdr();
  ::mhdr::MsgHdr* mutable_hdr();
  void set_allocated_hdr(::mhdr::MsgHdr* hdr);
  private:
  const ::mhdr::MsgHdr& _internal_hdr() const;
  ::mhdr::MsgHdr* _internal_mutable_hdr();
  public:
  void unsafe_arena_set_allocated_hdr(
      ::mhdr::MsgHdr* hdr);
  ::mhdr::MsgHdr* unsafe_arena_release_hdr();

  // .structure.CpUpHdr cp_up_hdr = 20;
  bool has_cp_up_hdr() const;
  private:
  bool _internal_has_cp_up_hdr() const;
  public:
  void clear_cp_up_hdr();
  const ::structure::CpUpHdr& cp_up_hdr() const;
  ::structure::CpUpHdr* release_cp_up_hdr();
  ::structure::CpUpHdr* mutable_cp_up_hdr();
  void set_allocated_cp_up_hdr(::structure::CpUpHdr* cp_up_hdr);
  private:
  const ::structure::CpUpHdr& _internal_cp_up_hdr() const;
  ::structure::CpUpHdr* _internal_mutable_cp_up_hdr();
  public:
  void unsafe_arena_set_allocated_cp_up_hdr(
      ::structure::CpUpHdr* cp_up_hdr);
  ::structure::CpUpHdr* unsafe_arena_release_cp_up_hdr();

  // uint32 num_ent = 31;
  void clear_num_ent();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_ent() const;
  void set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_ent() const;
  void _internal_set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:srvEbm.CreateTunnelReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::GtpTunnelInfo > tnl_info_list_;
  ::mhdr::MsgHdr* hdr_;
  ::structure::CpUpHdr* cp_up_hdr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_ent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_srvEbm_2eproto;
};
// -------------------------------------------------------------------

class ModifyTunnelReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srvEbm.ModifyTunnelReq) */ {
 public:
  inline ModifyTunnelReq() : ModifyTunnelReq(nullptr) {}
  virtual ~ModifyTunnelReq();

  ModifyTunnelReq(const ModifyTunnelReq& from);
  ModifyTunnelReq(ModifyTunnelReq&& from) noexcept
    : ModifyTunnelReq() {
    *this = ::std::move(from);
  }

  inline ModifyTunnelReq& operator=(const ModifyTunnelReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModifyTunnelReq& operator=(ModifyTunnelReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModifyTunnelReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModifyTunnelReq* internal_default_instance() {
    return reinterpret_cast<const ModifyTunnelReq*>(
               &_ModifyTunnelReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ModifyTunnelReq& a, ModifyTunnelReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ModifyTunnelReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModifyTunnelReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModifyTunnelReq* New() const final {
    return CreateMaybeMessage<ModifyTunnelReq>(nullptr);
  }

  ModifyTunnelReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModifyTunnelReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModifyTunnelReq& from);
  void MergeFrom(const ModifyTunnelReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModifyTunnelReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srvEbm.ModifyTunnelReq";
  }
  protected:
  explicit ModifyTunnelReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_srvEbm_2eproto);
    return ::descriptor_table_srvEbm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTnlInfoListFieldNumber = 40,
    kHdrFieldNumber = 10,
    kCpUpHdrFieldNumber = 20,
    kNumEntFieldNumber = 31,
  };
  // repeated .structure.GtpTunnelInfo tnl_info_list = 40;
  int tnl_info_list_size() const;
  private:
  int _internal_tnl_info_list_size() const;
  public:
  void clear_tnl_info_list();
  ::structure::GtpTunnelInfo* mutable_tnl_info_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::GtpTunnelInfo >*
      mutable_tnl_info_list();
  private:
  const ::structure::GtpTunnelInfo& _internal_tnl_info_list(int index) const;
  ::structure::GtpTunnelInfo* _internal_add_tnl_info_list();
  public:
  const ::structure::GtpTunnelInfo& tnl_info_list(int index) const;
  ::structure::GtpTunnelInfo* add_tnl_info_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::GtpTunnelInfo >&
      tnl_info_list() const;

  // .mhdr.MsgHdr hdr = 10;
  bool has_hdr() const;
  private:
  bool _internal_has_hdr() const;
  public:
  void clear_hdr();
  const ::mhdr::MsgHdr& hdr() const;
  ::mhdr::MsgHdr* release_hdr();
  ::mhdr::MsgHdr* mutable_hdr();
  void set_allocated_hdr(::mhdr::MsgHdr* hdr);
  private:
  const ::mhdr::MsgHdr& _internal_hdr() const;
  ::mhdr::MsgHdr* _internal_mutable_hdr();
  public:
  void unsafe_arena_set_allocated_hdr(
      ::mhdr::MsgHdr* hdr);
  ::mhdr::MsgHdr* unsafe_arena_release_hdr();

  // .structure.CpUpHdr cp_up_hdr = 20;
  bool has_cp_up_hdr() const;
  private:
  bool _internal_has_cp_up_hdr() const;
  public:
  void clear_cp_up_hdr();
  const ::structure::CpUpHdr& cp_up_hdr() const;
  ::structure::CpUpHdr* release_cp_up_hdr();
  ::structure::CpUpHdr* mutable_cp_up_hdr();
  void set_allocated_cp_up_hdr(::structure::CpUpHdr* cp_up_hdr);
  private:
  const ::structure::CpUpHdr& _internal_cp_up_hdr() const;
  ::structure::CpUpHdr* _internal_mutable_cp_up_hdr();
  public:
  void unsafe_arena_set_allocated_cp_up_hdr(
      ::structure::CpUpHdr* cp_up_hdr);
  ::structure::CpUpHdr* unsafe_arena_release_cp_up_hdr();

  // uint32 num_ent = 31;
  void clear_num_ent();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_ent() const;
  void set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_ent() const;
  void _internal_set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:srvEbm.ModifyTunnelReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::GtpTunnelInfo > tnl_info_list_;
  ::mhdr::MsgHdr* hdr_;
  ::structure::CpUpHdr* cp_up_hdr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_ent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_srvEbm_2eproto;
};
// -------------------------------------------------------------------

class DeleteTunnelReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srvEbm.DeleteTunnelReq) */ {
 public:
  inline DeleteTunnelReq() : DeleteTunnelReq(nullptr) {}
  virtual ~DeleteTunnelReq();

  DeleteTunnelReq(const DeleteTunnelReq& from);
  DeleteTunnelReq(DeleteTunnelReq&& from) noexcept
    : DeleteTunnelReq() {
    *this = ::std::move(from);
  }

  inline DeleteTunnelReq& operator=(const DeleteTunnelReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteTunnelReq& operator=(DeleteTunnelReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteTunnelReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteTunnelReq* internal_default_instance() {
    return reinterpret_cast<const DeleteTunnelReq*>(
               &_DeleteTunnelReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DeleteTunnelReq& a, DeleteTunnelReq& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteTunnelReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteTunnelReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteTunnelReq* New() const final {
    return CreateMaybeMessage<DeleteTunnelReq>(nullptr);
  }

  DeleteTunnelReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteTunnelReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteTunnelReq& from);
  void MergeFrom(const DeleteTunnelReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteTunnelReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srvEbm.DeleteTunnelReq";
  }
  protected:
  explicit DeleteTunnelReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_srvEbm_2eproto);
    return ::descriptor_table_srvEbm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTnlInfoListFieldNumber = 40,
    kHdrFieldNumber = 10,
    kCpUpHdrFieldNumber = 20,
    kNumEntFieldNumber = 31,
  };
  // repeated .structure.GtpTunnelInfo tnl_info_list = 40;
  int tnl_info_list_size() const;
  private:
  int _internal_tnl_info_list_size() const;
  public:
  void clear_tnl_info_list();
  ::structure::GtpTunnelInfo* mutable_tnl_info_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::GtpTunnelInfo >*
      mutable_tnl_info_list();
  private:
  const ::structure::GtpTunnelInfo& _internal_tnl_info_list(int index) const;
  ::structure::GtpTunnelInfo* _internal_add_tnl_info_list();
  public:
  const ::structure::GtpTunnelInfo& tnl_info_list(int index) const;
  ::structure::GtpTunnelInfo* add_tnl_info_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::GtpTunnelInfo >&
      tnl_info_list() const;

  // .mhdr.MsgHdr hdr = 10;
  bool has_hdr() const;
  private:
  bool _internal_has_hdr() const;
  public:
  void clear_hdr();
  const ::mhdr::MsgHdr& hdr() const;
  ::mhdr::MsgHdr* release_hdr();
  ::mhdr::MsgHdr* mutable_hdr();
  void set_allocated_hdr(::mhdr::MsgHdr* hdr);
  private:
  const ::mhdr::MsgHdr& _internal_hdr() const;
  ::mhdr::MsgHdr* _internal_mutable_hdr();
  public:
  void unsafe_arena_set_allocated_hdr(
      ::mhdr::MsgHdr* hdr);
  ::mhdr::MsgHdr* unsafe_arena_release_hdr();

  // .structure.CpUpHdr cp_up_hdr = 20;
  bool has_cp_up_hdr() const;
  private:
  bool _internal_has_cp_up_hdr() const;
  public:
  void clear_cp_up_hdr();
  const ::structure::CpUpHdr& cp_up_hdr() const;
  ::structure::CpUpHdr* release_cp_up_hdr();
  ::structure::CpUpHdr* mutable_cp_up_hdr();
  void set_allocated_cp_up_hdr(::structure::CpUpHdr* cp_up_hdr);
  private:
  const ::structure::CpUpHdr& _internal_cp_up_hdr() const;
  ::structure::CpUpHdr* _internal_mutable_cp_up_hdr();
  public:
  void unsafe_arena_set_allocated_cp_up_hdr(
      ::structure::CpUpHdr* cp_up_hdr);
  ::structure::CpUpHdr* unsafe_arena_release_cp_up_hdr();

  // uint32 num_ent = 31;
  void clear_num_ent();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_ent() const;
  void set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_ent() const;
  void _internal_set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:srvEbm.DeleteTunnelReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::GtpTunnelInfo > tnl_info_list_;
  ::mhdr::MsgHdr* hdr_;
  ::structure::CpUpHdr* cp_up_hdr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_ent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_srvEbm_2eproto;
};
// -------------------------------------------------------------------

class AddRbConfigReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srvEbm.AddRbConfigReq) */ {
 public:
  inline AddRbConfigReq() : AddRbConfigReq(nullptr) {}
  virtual ~AddRbConfigReq();

  AddRbConfigReq(const AddRbConfigReq& from);
  AddRbConfigReq(AddRbConfigReq&& from) noexcept
    : AddRbConfigReq() {
    *this = ::std::move(from);
  }

  inline AddRbConfigReq& operator=(const AddRbConfigReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddRbConfigReq& operator=(AddRbConfigReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddRbConfigReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddRbConfigReq* internal_default_instance() {
    return reinterpret_cast<const AddRbConfigReq*>(
               &_AddRbConfigReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AddRbConfigReq& a, AddRbConfigReq& b) {
    a.Swap(&b);
  }
  inline void Swap(AddRbConfigReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddRbConfigReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddRbConfigReq* New() const final {
    return CreateMaybeMessage<AddRbConfigReq>(nullptr);
  }

  AddRbConfigReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddRbConfigReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddRbConfigReq& from);
  void MergeFrom(const AddRbConfigReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddRbConfigReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srvEbm.AddRbConfigReq";
  }
  protected:
  explicit AddRbConfigReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_srvEbm_2eproto);
    return ::descriptor_table_srvEbm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigListFieldNumber = 30,
    kHdrFieldNumber = 10,
    kCpUpHdrFieldNumber = 20,
    kNumEntFieldNumber = 21,
    kIsHoFieldNumber = 22,
    kRlcUlSapIdFieldNumber = 23,
    kRlcDlSapIdFieldNumber = 24,
  };
  // repeated .structure.PDCPAddCfgEnt config_list = 30;
  int config_list_size() const;
  private:
  int _internal_config_list_size() const;
  public:
  void clear_config_list();
  ::structure::PDCPAddCfgEnt* mutable_config_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::PDCPAddCfgEnt >*
      mutable_config_list();
  private:
  const ::structure::PDCPAddCfgEnt& _internal_config_list(int index) const;
  ::structure::PDCPAddCfgEnt* _internal_add_config_list();
  public:
  const ::structure::PDCPAddCfgEnt& config_list(int index) const;
  ::structure::PDCPAddCfgEnt* add_config_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::PDCPAddCfgEnt >&
      config_list() const;

  // .mhdr.MsgHdr hdr = 10;
  bool has_hdr() const;
  private:
  bool _internal_has_hdr() const;
  public:
  void clear_hdr();
  const ::mhdr::MsgHdr& hdr() const;
  ::mhdr::MsgHdr* release_hdr();
  ::mhdr::MsgHdr* mutable_hdr();
  void set_allocated_hdr(::mhdr::MsgHdr* hdr);
  private:
  const ::mhdr::MsgHdr& _internal_hdr() const;
  ::mhdr::MsgHdr* _internal_mutable_hdr();
  public:
  void unsafe_arena_set_allocated_hdr(
      ::mhdr::MsgHdr* hdr);
  ::mhdr::MsgHdr* unsafe_arena_release_hdr();

  // .structure.CpUpHdr cp_up_hdr = 20;
  bool has_cp_up_hdr() const;
  private:
  bool _internal_has_cp_up_hdr() const;
  public:
  void clear_cp_up_hdr();
  const ::structure::CpUpHdr& cp_up_hdr() const;
  ::structure::CpUpHdr* release_cp_up_hdr();
  ::structure::CpUpHdr* mutable_cp_up_hdr();
  void set_allocated_cp_up_hdr(::structure::CpUpHdr* cp_up_hdr);
  private:
  const ::structure::CpUpHdr& _internal_cp_up_hdr() const;
  ::structure::CpUpHdr* _internal_mutable_cp_up_hdr();
  public:
  void unsafe_arena_set_allocated_cp_up_hdr(
      ::structure::CpUpHdr* cp_up_hdr);
  ::structure::CpUpHdr* unsafe_arena_release_cp_up_hdr();

  // uint32 num_ent = 21;
  void clear_num_ent();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_ent() const;
  void set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_ent() const;
  void _internal_set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 is_ho = 22;
  void clear_is_ho();
  ::PROTOBUF_NAMESPACE_ID::uint32 is_ho() const;
  void set_is_ho(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_is_ho() const;
  void _internal_set_is_ho(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 rlc_ul_sap_id = 23;
  void clear_rlc_ul_sap_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 rlc_ul_sap_id() const;
  void set_rlc_ul_sap_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rlc_ul_sap_id() const;
  void _internal_set_rlc_ul_sap_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 rlc_dl_sap_id = 24;
  void clear_rlc_dl_sap_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 rlc_dl_sap_id() const;
  void set_rlc_dl_sap_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rlc_dl_sap_id() const;
  void _internal_set_rlc_dl_sap_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:srvEbm.AddRbConfigReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::PDCPAddCfgEnt > config_list_;
  ::mhdr::MsgHdr* hdr_;
  ::structure::CpUpHdr* cp_up_hdr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_ent_;
  ::PROTOBUF_NAMESPACE_ID::uint32 is_ho_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rlc_ul_sap_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rlc_dl_sap_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_srvEbm_2eproto;
};
// -------------------------------------------------------------------

class ModifyRbConfigReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srvEbm.ModifyRbConfigReq) */ {
 public:
  inline ModifyRbConfigReq() : ModifyRbConfigReq(nullptr) {}
  virtual ~ModifyRbConfigReq();

  ModifyRbConfigReq(const ModifyRbConfigReq& from);
  ModifyRbConfigReq(ModifyRbConfigReq&& from) noexcept
    : ModifyRbConfigReq() {
    *this = ::std::move(from);
  }

  inline ModifyRbConfigReq& operator=(const ModifyRbConfigReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModifyRbConfigReq& operator=(ModifyRbConfigReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModifyRbConfigReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModifyRbConfigReq* internal_default_instance() {
    return reinterpret_cast<const ModifyRbConfigReq*>(
               &_ModifyRbConfigReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ModifyRbConfigReq& a, ModifyRbConfigReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ModifyRbConfigReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModifyRbConfigReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModifyRbConfigReq* New() const final {
    return CreateMaybeMessage<ModifyRbConfigReq>(nullptr);
  }

  ModifyRbConfigReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModifyRbConfigReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModifyRbConfigReq& from);
  void MergeFrom(const ModifyRbConfigReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModifyRbConfigReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srvEbm.ModifyRbConfigReq";
  }
  protected:
  explicit ModifyRbConfigReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_srvEbm_2eproto);
    return ::descriptor_table_srvEbm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigListFieldNumber = 30,
    kHdrFieldNumber = 10,
    kCpUpHdrFieldNumber = 20,
    kNumEntFieldNumber = 21,
  };
  // repeated .structure.PDCPModCfgEnt config_list = 30;
  int config_list_size() const;
  private:
  int _internal_config_list_size() const;
  public:
  void clear_config_list();
  ::structure::PDCPModCfgEnt* mutable_config_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::PDCPModCfgEnt >*
      mutable_config_list();
  private:
  const ::structure::PDCPModCfgEnt& _internal_config_list(int index) const;
  ::structure::PDCPModCfgEnt* _internal_add_config_list();
  public:
  const ::structure::PDCPModCfgEnt& config_list(int index) const;
  ::structure::PDCPModCfgEnt* add_config_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::PDCPModCfgEnt >&
      config_list() const;

  // .mhdr.MsgHdr hdr = 10;
  bool has_hdr() const;
  private:
  bool _internal_has_hdr() const;
  public:
  void clear_hdr();
  const ::mhdr::MsgHdr& hdr() const;
  ::mhdr::MsgHdr* release_hdr();
  ::mhdr::MsgHdr* mutable_hdr();
  void set_allocated_hdr(::mhdr::MsgHdr* hdr);
  private:
  const ::mhdr::MsgHdr& _internal_hdr() const;
  ::mhdr::MsgHdr* _internal_mutable_hdr();
  public:
  void unsafe_arena_set_allocated_hdr(
      ::mhdr::MsgHdr* hdr);
  ::mhdr::MsgHdr* unsafe_arena_release_hdr();

  // .structure.CpUpHdr cp_up_hdr = 20;
  bool has_cp_up_hdr() const;
  private:
  bool _internal_has_cp_up_hdr() const;
  public:
  void clear_cp_up_hdr();
  const ::structure::CpUpHdr& cp_up_hdr() const;
  ::structure::CpUpHdr* release_cp_up_hdr();
  ::structure::CpUpHdr* mutable_cp_up_hdr();
  void set_allocated_cp_up_hdr(::structure::CpUpHdr* cp_up_hdr);
  private:
  const ::structure::CpUpHdr& _internal_cp_up_hdr() const;
  ::structure::CpUpHdr* _internal_mutable_cp_up_hdr();
  public:
  void unsafe_arena_set_allocated_cp_up_hdr(
      ::structure::CpUpHdr* cp_up_hdr);
  ::structure::CpUpHdr* unsafe_arena_release_cp_up_hdr();

  // uint32 num_ent = 21;
  void clear_num_ent();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_ent() const;
  void set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_ent() const;
  void _internal_set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:srvEbm.ModifyRbConfigReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::PDCPModCfgEnt > config_list_;
  ::mhdr::MsgHdr* hdr_;
  ::structure::CpUpHdr* cp_up_hdr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_ent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_srvEbm_2eproto;
};
// -------------------------------------------------------------------

class DeleteRbConfigReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srvEbm.DeleteRbConfigReq) */ {
 public:
  inline DeleteRbConfigReq() : DeleteRbConfigReq(nullptr) {}
  virtual ~DeleteRbConfigReq();

  DeleteRbConfigReq(const DeleteRbConfigReq& from);
  DeleteRbConfigReq(DeleteRbConfigReq&& from) noexcept
    : DeleteRbConfigReq() {
    *this = ::std::move(from);
  }

  inline DeleteRbConfigReq& operator=(const DeleteRbConfigReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRbConfigReq& operator=(DeleteRbConfigReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteRbConfigReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteRbConfigReq* internal_default_instance() {
    return reinterpret_cast<const DeleteRbConfigReq*>(
               &_DeleteRbConfigReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DeleteRbConfigReq& a, DeleteRbConfigReq& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteRbConfigReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteRbConfigReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteRbConfigReq* New() const final {
    return CreateMaybeMessage<DeleteRbConfigReq>(nullptr);
  }

  DeleteRbConfigReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteRbConfigReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteRbConfigReq& from);
  void MergeFrom(const DeleteRbConfigReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRbConfigReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srvEbm.DeleteRbConfigReq";
  }
  protected:
  explicit DeleteRbConfigReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_srvEbm_2eproto);
    return ::descriptor_table_srvEbm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigListFieldNumber = 30,
    kHdrFieldNumber = 10,
    kCpUpHdrFieldNumber = 20,
    kNumEntFieldNumber = 21,
  };
  // repeated .structure.PDCPDelCfgEnt config_list = 30;
  int config_list_size() const;
  private:
  int _internal_config_list_size() const;
  public:
  void clear_config_list();
  ::structure::PDCPDelCfgEnt* mutable_config_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::PDCPDelCfgEnt >*
      mutable_config_list();
  private:
  const ::structure::PDCPDelCfgEnt& _internal_config_list(int index) const;
  ::structure::PDCPDelCfgEnt* _internal_add_config_list();
  public:
  const ::structure::PDCPDelCfgEnt& config_list(int index) const;
  ::structure::PDCPDelCfgEnt* add_config_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::PDCPDelCfgEnt >&
      config_list() const;

  // .mhdr.MsgHdr hdr = 10;
  bool has_hdr() const;
  private:
  bool _internal_has_hdr() const;
  public:
  void clear_hdr();
  const ::mhdr::MsgHdr& hdr() const;
  ::mhdr::MsgHdr* release_hdr();
  ::mhdr::MsgHdr* mutable_hdr();
  void set_allocated_hdr(::mhdr::MsgHdr* hdr);
  private:
  const ::mhdr::MsgHdr& _internal_hdr() const;
  ::mhdr::MsgHdr* _internal_mutable_hdr();
  public:
  void unsafe_arena_set_allocated_hdr(
      ::mhdr::MsgHdr* hdr);
  ::mhdr::MsgHdr* unsafe_arena_release_hdr();

  // .structure.CpUpHdr cp_up_hdr = 20;
  bool has_cp_up_hdr() const;
  private:
  bool _internal_has_cp_up_hdr() const;
  public:
  void clear_cp_up_hdr();
  const ::structure::CpUpHdr& cp_up_hdr() const;
  ::structure::CpUpHdr* release_cp_up_hdr();
  ::structure::CpUpHdr* mutable_cp_up_hdr();
  void set_allocated_cp_up_hdr(::structure::CpUpHdr* cp_up_hdr);
  private:
  const ::structure::CpUpHdr& _internal_cp_up_hdr() const;
  ::structure::CpUpHdr* _internal_mutable_cp_up_hdr();
  public:
  void unsafe_arena_set_allocated_cp_up_hdr(
      ::structure::CpUpHdr* cp_up_hdr);
  ::structure::CpUpHdr* unsafe_arena_release_cp_up_hdr();

  // uint32 num_ent = 21;
  void clear_num_ent();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_ent() const;
  void set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_ent() const;
  void _internal_set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:srvEbm.DeleteRbConfigReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::PDCPDelCfgEnt > config_list_;
  ::mhdr::MsgHdr* hdr_;
  ::structure::CpUpHdr* cp_up_hdr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_ent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_srvEbm_2eproto;
};
// -------------------------------------------------------------------

class PauseResumeDataReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srvEbm.PauseResumeDataReq) */ {
 public:
  inline PauseResumeDataReq() : PauseResumeDataReq(nullptr) {}
  virtual ~PauseResumeDataReq();

  PauseResumeDataReq(const PauseResumeDataReq& from);
  PauseResumeDataReq(PauseResumeDataReq&& from) noexcept
    : PauseResumeDataReq() {
    *this = ::std::move(from);
  }

  inline PauseResumeDataReq& operator=(const PauseResumeDataReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline PauseResumeDataReq& operator=(PauseResumeDataReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PauseResumeDataReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PauseResumeDataReq* internal_default_instance() {
    return reinterpret_cast<const PauseResumeDataReq*>(
               &_PauseResumeDataReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PauseResumeDataReq& a, PauseResumeDataReq& b) {
    a.Swap(&b);
  }
  inline void Swap(PauseResumeDataReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PauseResumeDataReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PauseResumeDataReq* New() const final {
    return CreateMaybeMessage<PauseResumeDataReq>(nullptr);
  }

  PauseResumeDataReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PauseResumeDataReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PauseResumeDataReq& from);
  void MergeFrom(const PauseResumeDataReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PauseResumeDataReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srvEbm.PauseResumeDataReq";
  }
  protected:
  explicit PauseResumeDataReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_srvEbm_2eproto);
    return ::descriptor_table_srvEbm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHdrFieldNumber = 10,
    kCpUpHdrFieldNumber = 20,
    kTgtCellIdFieldNumber = 30,
    kNewRntiFieldNumber = 35,
    kIsPauseFieldNumber = 40,
    kHoTypeFieldNumber = 50,
  };
  // .mhdr.MsgHdr hdr = 10;
  bool has_hdr() const;
  private:
  bool _internal_has_hdr() const;
  public:
  void clear_hdr();
  const ::mhdr::MsgHdr& hdr() const;
  ::mhdr::MsgHdr* release_hdr();
  ::mhdr::MsgHdr* mutable_hdr();
  void set_allocated_hdr(::mhdr::MsgHdr* hdr);
  private:
  const ::mhdr::MsgHdr& _internal_hdr() const;
  ::mhdr::MsgHdr* _internal_mutable_hdr();
  public:
  void unsafe_arena_set_allocated_hdr(
      ::mhdr::MsgHdr* hdr);
  ::mhdr::MsgHdr* unsafe_arena_release_hdr();

  // .structure.CpUpHdr cp_up_hdr = 20;
  bool has_cp_up_hdr() const;
  private:
  bool _internal_has_cp_up_hdr() const;
  public:
  void clear_cp_up_hdr();
  const ::structure::CpUpHdr& cp_up_hdr() const;
  ::structure::CpUpHdr* release_cp_up_hdr();
  ::structure::CpUpHdr* mutable_cp_up_hdr();
  void set_allocated_cp_up_hdr(::structure::CpUpHdr* cp_up_hdr);
  private:
  const ::structure::CpUpHdr& _internal_cp_up_hdr() const;
  ::structure::CpUpHdr* _internal_mutable_cp_up_hdr();
  public:
  void unsafe_arena_set_allocated_cp_up_hdr(
      ::structure::CpUpHdr* cp_up_hdr);
  ::structure::CpUpHdr* unsafe_arena_release_cp_up_hdr();

  // uint32 tgt_cell_id = 30;
  void clear_tgt_cell_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 tgt_cell_id() const;
  void set_tgt_cell_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tgt_cell_id() const;
  void _internal_set_tgt_cell_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 new_rnti = 35;
  void clear_new_rnti();
  ::PROTOBUF_NAMESPACE_ID::uint32 new_rnti() const;
  void set_new_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_new_rnti() const;
  void _internal_set_new_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool is_pause = 40;
  void clear_is_pause();
  bool is_pause() const;
  void set_is_pause(bool value);
  private:
  bool _internal_is_pause() const;
  void _internal_set_is_pause(bool value);
  public:

  // .structure.HandoverType ho_type = 50;
  void clear_ho_type();
  ::structure::HandoverType ho_type() const;
  void set_ho_type(::structure::HandoverType value);
  private:
  ::structure::HandoverType _internal_ho_type() const;
  void _internal_set_ho_type(::structure::HandoverType value);
  public:

  // @@protoc_insertion_point(class_scope:srvEbm.PauseResumeDataReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mhdr::MsgHdr* hdr_;
  ::structure::CpUpHdr* cp_up_hdr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tgt_cell_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 new_rnti_;
  bool is_pause_;
  int ho_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_srvEbm_2eproto;
};
// -------------------------------------------------------------------

class PDCPSduStatusReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srvEbm.PDCPSduStatusReq) */ {
 public:
  inline PDCPSduStatusReq() : PDCPSduStatusReq(nullptr) {}
  virtual ~PDCPSduStatusReq();

  PDCPSduStatusReq(const PDCPSduStatusReq& from);
  PDCPSduStatusReq(PDCPSduStatusReq&& from) noexcept
    : PDCPSduStatusReq() {
    *this = ::std::move(from);
  }

  inline PDCPSduStatusReq& operator=(const PDCPSduStatusReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline PDCPSduStatusReq& operator=(PDCPSduStatusReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PDCPSduStatusReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PDCPSduStatusReq* internal_default_instance() {
    return reinterpret_cast<const PDCPSduStatusReq*>(
               &_PDCPSduStatusReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PDCPSduStatusReq& a, PDCPSduStatusReq& b) {
    a.Swap(&b);
  }
  inline void Swap(PDCPSduStatusReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PDCPSduStatusReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PDCPSduStatusReq* New() const final {
    return CreateMaybeMessage<PDCPSduStatusReq>(nullptr);
  }

  PDCPSduStatusReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PDCPSduStatusReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PDCPSduStatusReq& from);
  void MergeFrom(const PDCPSduStatusReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PDCPSduStatusReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srvEbm.PDCPSduStatusReq";
  }
  protected:
  explicit PDCPSduStatusReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_srvEbm_2eproto);
    return ::descriptor_table_srvEbm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHdrFieldNumber = 10,
    kCpUpHdrFieldNumber = 20,
  };
  // .mhdr.MsgHdr hdr = 10;
  bool has_hdr() const;
  private:
  bool _internal_has_hdr() const;
  public:
  void clear_hdr();
  const ::mhdr::MsgHdr& hdr() const;
  ::mhdr::MsgHdr* release_hdr();
  ::mhdr::MsgHdr* mutable_hdr();
  void set_allocated_hdr(::mhdr::MsgHdr* hdr);
  private:
  const ::mhdr::MsgHdr& _internal_hdr() const;
  ::mhdr::MsgHdr* _internal_mutable_hdr();
  public:
  void unsafe_arena_set_allocated_hdr(
      ::mhdr::MsgHdr* hdr);
  ::mhdr::MsgHdr* unsafe_arena_release_hdr();

  // .structure.CpUpHdr cp_up_hdr = 20;
  bool has_cp_up_hdr() const;
  private:
  bool _internal_has_cp_up_hdr() const;
  public:
  void clear_cp_up_hdr();
  const ::structure::CpUpHdr& cp_up_hdr() const;
  ::structure::CpUpHdr* release_cp_up_hdr();
  ::structure::CpUpHdr* mutable_cp_up_hdr();
  void set_allocated_cp_up_hdr(::structure::CpUpHdr* cp_up_hdr);
  private:
  const ::structure::CpUpHdr& _internal_cp_up_hdr() const;
  ::structure::CpUpHdr* _internal_mutable_cp_up_hdr();
  public:
  void unsafe_arena_set_allocated_cp_up_hdr(
      ::structure::CpUpHdr* cp_up_hdr);
  ::structure::CpUpHdr* unsafe_arena_release_cp_up_hdr();

  // @@protoc_insertion_point(class_scope:srvEbm.PDCPSduStatusReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mhdr::MsgHdr* hdr_;
  ::structure::CpUpHdr* cp_up_hdr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_srvEbm_2eproto;
};
// -------------------------------------------------------------------

class DataForwardingReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srvEbm.DataForwardingReq) */ {
 public:
  inline DataForwardingReq() : DataForwardingReq(nullptr) {}
  virtual ~DataForwardingReq();

  DataForwardingReq(const DataForwardingReq& from);
  DataForwardingReq(DataForwardingReq&& from) noexcept
    : DataForwardingReq() {
    *this = ::std::move(from);
  }

  inline DataForwardingReq& operator=(const DataForwardingReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataForwardingReq& operator=(DataForwardingReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataForwardingReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataForwardingReq* internal_default_instance() {
    return reinterpret_cast<const DataForwardingReq*>(
               &_DataForwardingReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DataForwardingReq& a, DataForwardingReq& b) {
    a.Swap(&b);
  }
  inline void Swap(DataForwardingReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataForwardingReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataForwardingReq* New() const final {
    return CreateMaybeMessage<DataForwardingReq>(nullptr);
  }

  DataForwardingReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataForwardingReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataForwardingReq& from);
  void MergeFrom(const DataForwardingReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataForwardingReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srvEbm.DataForwardingReq";
  }
  protected:
  explicit DataForwardingReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_srvEbm_2eproto);
    return ::descriptor_table_srvEbm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHdrFieldNumber = 10,
    kCpUpHdrFieldNumber = 20,
    kIsUlDataFwdReqFieldNumber = 30,
    kHandoverTypeFieldNumber = 40,
  };
  // .mhdr.MsgHdr hdr = 10;
  bool has_hdr() const;
  private:
  bool _internal_has_hdr() const;
  public:
  void clear_hdr();
  const ::mhdr::MsgHdr& hdr() const;
  ::mhdr::MsgHdr* release_hdr();
  ::mhdr::MsgHdr* mutable_hdr();
  void set_allocated_hdr(::mhdr::MsgHdr* hdr);
  private:
  const ::mhdr::MsgHdr& _internal_hdr() const;
  ::mhdr::MsgHdr* _internal_mutable_hdr();
  public:
  void unsafe_arena_set_allocated_hdr(
      ::mhdr::MsgHdr* hdr);
  ::mhdr::MsgHdr* unsafe_arena_release_hdr();

  // .structure.CpUpHdr cp_up_hdr = 20;
  bool has_cp_up_hdr() const;
  private:
  bool _internal_has_cp_up_hdr() const;
  public:
  void clear_cp_up_hdr();
  const ::structure::CpUpHdr& cp_up_hdr() const;
  ::structure::CpUpHdr* release_cp_up_hdr();
  ::structure::CpUpHdr* mutable_cp_up_hdr();
  void set_allocated_cp_up_hdr(::structure::CpUpHdr* cp_up_hdr);
  private:
  const ::structure::CpUpHdr& _internal_cp_up_hdr() const;
  ::structure::CpUpHdr* _internal_mutable_cp_up_hdr();
  public:
  void unsafe_arena_set_allocated_cp_up_hdr(
      ::structure::CpUpHdr* cp_up_hdr);
  ::structure::CpUpHdr* unsafe_arena_release_cp_up_hdr();

  // bool is_ul_data_fwd_Req = 30;
  void clear_is_ul_data_fwd_req();
  bool is_ul_data_fwd_req() const;
  void set_is_ul_data_fwd_req(bool value);
  private:
  bool _internal_is_ul_data_fwd_req() const;
  void _internal_set_is_ul_data_fwd_req(bool value);
  public:

  // .structure.HandoverType handover_type = 40;
  void clear_handover_type();
  ::structure::HandoverType handover_type() const;
  void set_handover_type(::structure::HandoverType value);
  private:
  ::structure::HandoverType _internal_handover_type() const;
  void _internal_set_handover_type(::structure::HandoverType value);
  public:

  // @@protoc_insertion_point(class_scope:srvEbm.DataForwardingReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mhdr::MsgHdr* hdr_;
  ::structure::CpUpHdr* cp_up_hdr_;
  bool is_ul_data_fwd_req_;
  int handover_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_srvEbm_2eproto;
};
// -------------------------------------------------------------------

class UeInactivityTimerReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srvEbm.UeInactivityTimerReq) */ {
 public:
  inline UeInactivityTimerReq() : UeInactivityTimerReq(nullptr) {}
  virtual ~UeInactivityTimerReq();

  UeInactivityTimerReq(const UeInactivityTimerReq& from);
  UeInactivityTimerReq(UeInactivityTimerReq&& from) noexcept
    : UeInactivityTimerReq() {
    *this = ::std::move(from);
  }

  inline UeInactivityTimerReq& operator=(const UeInactivityTimerReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline UeInactivityTimerReq& operator=(UeInactivityTimerReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UeInactivityTimerReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UeInactivityTimerReq* internal_default_instance() {
    return reinterpret_cast<const UeInactivityTimerReq*>(
               &_UeInactivityTimerReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(UeInactivityTimerReq& a, UeInactivityTimerReq& b) {
    a.Swap(&b);
  }
  inline void Swap(UeInactivityTimerReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UeInactivityTimerReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UeInactivityTimerReq* New() const final {
    return CreateMaybeMessage<UeInactivityTimerReq>(nullptr);
  }

  UeInactivityTimerReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UeInactivityTimerReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UeInactivityTimerReq& from);
  void MergeFrom(const UeInactivityTimerReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UeInactivityTimerReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srvEbm.UeInactivityTimerReq";
  }
  protected:
  explicit UeInactivityTimerReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_srvEbm_2eproto);
    return ::descriptor_table_srvEbm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHdrFieldNumber = 10,
    kCpUpHdrFieldNumber = 20,
  };
  // .mhdr.MsgHdr hdr = 10;
  bool has_hdr() const;
  private:
  bool _internal_has_hdr() const;
  public:
  void clear_hdr();
  const ::mhdr::MsgHdr& hdr() const;
  ::mhdr::MsgHdr* release_hdr();
  ::mhdr::MsgHdr* mutable_hdr();
  void set_allocated_hdr(::mhdr::MsgHdr* hdr);
  private:
  const ::mhdr::MsgHdr& _internal_hdr() const;
  ::mhdr::MsgHdr* _internal_mutable_hdr();
  public:
  void unsafe_arena_set_allocated_hdr(
      ::mhdr::MsgHdr* hdr);
  ::mhdr::MsgHdr* unsafe_arena_release_hdr();

  // .structure.CpUpHdr cp_up_hdr = 20;
  bool has_cp_up_hdr() const;
  private:
  bool _internal_has_cp_up_hdr() const;
  public:
  void clear_cp_up_hdr();
  const ::structure::CpUpHdr& cp_up_hdr() const;
  ::structure::CpUpHdr* release_cp_up_hdr();
  ::structure::CpUpHdr* mutable_cp_up_hdr();
  void set_allocated_cp_up_hdr(::structure::CpUpHdr* cp_up_hdr);
  private:
  const ::structure::CpUpHdr& _internal_cp_up_hdr() const;
  ::structure::CpUpHdr* _internal_mutable_cp_up_hdr();
  public:
  void unsafe_arena_set_allocated_cp_up_hdr(
      ::structure::CpUpHdr* cp_up_hdr);
  ::structure::CpUpHdr* unsafe_arena_release_cp_up_hdr();

  // @@protoc_insertion_point(class_scope:srvEbm.UeInactivityTimerReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mhdr::MsgHdr* hdr_;
  ::structure::CpUpHdr* cp_up_hdr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_srvEbm_2eproto;
};
// -------------------------------------------------------------------

class AddPDCPConfigReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srvEbm.AddPDCPConfigReq) */ {
 public:
  inline AddPDCPConfigReq() : AddPDCPConfigReq(nullptr) {}
  virtual ~AddPDCPConfigReq();

  AddPDCPConfigReq(const AddPDCPConfigReq& from);
  AddPDCPConfigReq(AddPDCPConfigReq&& from) noexcept
    : AddPDCPConfigReq() {
    *this = ::std::move(from);
  }

  inline AddPDCPConfigReq& operator=(const AddPDCPConfigReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddPDCPConfigReq& operator=(AddPDCPConfigReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddPDCPConfigReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddPDCPConfigReq* internal_default_instance() {
    return reinterpret_cast<const AddPDCPConfigReq*>(
               &_AddPDCPConfigReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(AddPDCPConfigReq& a, AddPDCPConfigReq& b) {
    a.Swap(&b);
  }
  inline void Swap(AddPDCPConfigReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddPDCPConfigReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddPDCPConfigReq* New() const final {
    return CreateMaybeMessage<AddPDCPConfigReq>(nullptr);
  }

  AddPDCPConfigReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddPDCPConfigReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddPDCPConfigReq& from);
  void MergeFrom(const AddPDCPConfigReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddPDCPConfigReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srvEbm.AddPDCPConfigReq";
  }
  protected:
  explicit AddPDCPConfigReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_srvEbm_2eproto);
    return ::descriptor_table_srvEbm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigListFieldNumber = 50,
    kHdrFieldNumber = 10,
    kCpUpHdrFieldNumber = 20,
    kSecurityConfigFieldNumber = 31,
    kIsHoFieldNumber = 30,
    kNumEntFieldNumber = 40,
    kRlcUlSapIdFieldNumber = 43,
    kRlcDlSapIdFieldNumber = 44,
  };
  // repeated .structure.PDCPAddCfgEnt config_list = 50;
  int config_list_size() const;
  private:
  int _internal_config_list_size() const;
  public:
  void clear_config_list();
  ::structure::PDCPAddCfgEnt* mutable_config_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::PDCPAddCfgEnt >*
      mutable_config_list();
  private:
  const ::structure::PDCPAddCfgEnt& _internal_config_list(int index) const;
  ::structure::PDCPAddCfgEnt* _internal_add_config_list();
  public:
  const ::structure::PDCPAddCfgEnt& config_list(int index) const;
  ::structure::PDCPAddCfgEnt* add_config_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::PDCPAddCfgEnt >&
      config_list() const;

  // .mhdr.MsgHdr hdr = 10;
  bool has_hdr() const;
  private:
  bool _internal_has_hdr() const;
  public:
  void clear_hdr();
  const ::mhdr::MsgHdr& hdr() const;
  ::mhdr::MsgHdr* release_hdr();
  ::mhdr::MsgHdr* mutable_hdr();
  void set_allocated_hdr(::mhdr::MsgHdr* hdr);
  private:
  const ::mhdr::MsgHdr& _internal_hdr() const;
  ::mhdr::MsgHdr* _internal_mutable_hdr();
  public:
  void unsafe_arena_set_allocated_hdr(
      ::mhdr::MsgHdr* hdr);
  ::mhdr::MsgHdr* unsafe_arena_release_hdr();

  // .structure.CpUpHdr cp_up_hdr = 20;
  bool has_cp_up_hdr() const;
  private:
  bool _internal_has_cp_up_hdr() const;
  public:
  void clear_cp_up_hdr();
  const ::structure::CpUpHdr& cp_up_hdr() const;
  ::structure::CpUpHdr* release_cp_up_hdr();
  ::structure::CpUpHdr* mutable_cp_up_hdr();
  void set_allocated_cp_up_hdr(::structure::CpUpHdr* cp_up_hdr);
  private:
  const ::structure::CpUpHdr& _internal_cp_up_hdr() const;
  ::structure::CpUpHdr* _internal_mutable_cp_up_hdr();
  public:
  void unsafe_arena_set_allocated_cp_up_hdr(
      ::structure::CpUpHdr* cp_up_hdr);
  ::structure::CpUpHdr* unsafe_arena_release_cp_up_hdr();

  // .structure.SecurityConfig security_config = 31;
  bool has_security_config() const;
  private:
  bool _internal_has_security_config() const;
  public:
  void clear_security_config();
  const ::structure::SecurityConfig& security_config() const;
  ::structure::SecurityConfig* release_security_config();
  ::structure::SecurityConfig* mutable_security_config();
  void set_allocated_security_config(::structure::SecurityConfig* security_config);
  private:
  const ::structure::SecurityConfig& _internal_security_config() const;
  ::structure::SecurityConfig* _internal_mutable_security_config();
  public:
  void unsafe_arena_set_allocated_security_config(
      ::structure::SecurityConfig* security_config);
  ::structure::SecurityConfig* unsafe_arena_release_security_config();

  // bool is_ho = 30;
  void clear_is_ho();
  bool is_ho() const;
  void set_is_ho(bool value);
  private:
  bool _internal_is_ho() const;
  void _internal_set_is_ho(bool value);
  public:

  // uint32 num_ent = 40;
  void clear_num_ent();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_ent() const;
  void set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_ent() const;
  void _internal_set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 rlc_ul_sap_id = 43;
  void clear_rlc_ul_sap_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 rlc_ul_sap_id() const;
  void set_rlc_ul_sap_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rlc_ul_sap_id() const;
  void _internal_set_rlc_ul_sap_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 rlc_dl_sap_id = 44;
  void clear_rlc_dl_sap_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 rlc_dl_sap_id() const;
  void set_rlc_dl_sap_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rlc_dl_sap_id() const;
  void _internal_set_rlc_dl_sap_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:srvEbm.AddPDCPConfigReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::PDCPAddCfgEnt > config_list_;
  ::mhdr::MsgHdr* hdr_;
  ::structure::CpUpHdr* cp_up_hdr_;
  ::structure::SecurityConfig* security_config_;
  bool is_ho_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_ent_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rlc_ul_sap_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rlc_dl_sap_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_srvEbm_2eproto;
};
// -------------------------------------------------------------------

class ModifyPDCPConfigReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srvEbm.ModifyPDCPConfigReq) */ {
 public:
  inline ModifyPDCPConfigReq() : ModifyPDCPConfigReq(nullptr) {}
  virtual ~ModifyPDCPConfigReq();

  ModifyPDCPConfigReq(const ModifyPDCPConfigReq& from);
  ModifyPDCPConfigReq(ModifyPDCPConfigReq&& from) noexcept
    : ModifyPDCPConfigReq() {
    *this = ::std::move(from);
  }

  inline ModifyPDCPConfigReq& operator=(const ModifyPDCPConfigReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModifyPDCPConfigReq& operator=(ModifyPDCPConfigReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModifyPDCPConfigReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModifyPDCPConfigReq* internal_default_instance() {
    return reinterpret_cast<const ModifyPDCPConfigReq*>(
               &_ModifyPDCPConfigReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ModifyPDCPConfigReq& a, ModifyPDCPConfigReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ModifyPDCPConfigReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModifyPDCPConfigReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModifyPDCPConfigReq* New() const final {
    return CreateMaybeMessage<ModifyPDCPConfigReq>(nullptr);
  }

  ModifyPDCPConfigReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModifyPDCPConfigReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModifyPDCPConfigReq& from);
  void MergeFrom(const ModifyPDCPConfigReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModifyPDCPConfigReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srvEbm.ModifyPDCPConfigReq";
  }
  protected:
  explicit ModifyPDCPConfigReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_srvEbm_2eproto);
    return ::descriptor_table_srvEbm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigListFieldNumber = 50,
    kHdrFieldNumber = 10,
    kCpUpHdrFieldNumber = 20,
    kSecurityConfigFieldNumber = 31,
    kIsHoFieldNumber = 30,
    kNumEntFieldNumber = 40,
    kNewCpUeIdFieldNumber = 43,
    kNewCellIdFieldNumber = 44,
  };
  // repeated .structure.PDCPModCfgEnt config_list = 50;
  int config_list_size() const;
  private:
  int _internal_config_list_size() const;
  public:
  void clear_config_list();
  ::structure::PDCPModCfgEnt* mutable_config_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::PDCPModCfgEnt >*
      mutable_config_list();
  private:
  const ::structure::PDCPModCfgEnt& _internal_config_list(int index) const;
  ::structure::PDCPModCfgEnt* _internal_add_config_list();
  public:
  const ::structure::PDCPModCfgEnt& config_list(int index) const;
  ::structure::PDCPModCfgEnt* add_config_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::PDCPModCfgEnt >&
      config_list() const;

  // .mhdr.MsgHdr hdr = 10;
  bool has_hdr() const;
  private:
  bool _internal_has_hdr() const;
  public:
  void clear_hdr();
  const ::mhdr::MsgHdr& hdr() const;
  ::mhdr::MsgHdr* release_hdr();
  ::mhdr::MsgHdr* mutable_hdr();
  void set_allocated_hdr(::mhdr::MsgHdr* hdr);
  private:
  const ::mhdr::MsgHdr& _internal_hdr() const;
  ::mhdr::MsgHdr* _internal_mutable_hdr();
  public:
  void unsafe_arena_set_allocated_hdr(
      ::mhdr::MsgHdr* hdr);
  ::mhdr::MsgHdr* unsafe_arena_release_hdr();

  // .structure.CpUpHdr cp_up_hdr = 20;
  bool has_cp_up_hdr() const;
  private:
  bool _internal_has_cp_up_hdr() const;
  public:
  void clear_cp_up_hdr();
  const ::structure::CpUpHdr& cp_up_hdr() const;
  ::structure::CpUpHdr* release_cp_up_hdr();
  ::structure::CpUpHdr* mutable_cp_up_hdr();
  void set_allocated_cp_up_hdr(::structure::CpUpHdr* cp_up_hdr);
  private:
  const ::structure::CpUpHdr& _internal_cp_up_hdr() const;
  ::structure::CpUpHdr* _internal_mutable_cp_up_hdr();
  public:
  void unsafe_arena_set_allocated_cp_up_hdr(
      ::structure::CpUpHdr* cp_up_hdr);
  ::structure::CpUpHdr* unsafe_arena_release_cp_up_hdr();

  // .structure.SecurityConfig security_config = 31;
  bool has_security_config() const;
  private:
  bool _internal_has_security_config() const;
  public:
  void clear_security_config();
  const ::structure::SecurityConfig& security_config() const;
  ::structure::SecurityConfig* release_security_config();
  ::structure::SecurityConfig* mutable_security_config();
  void set_allocated_security_config(::structure::SecurityConfig* security_config);
  private:
  const ::structure::SecurityConfig& _internal_security_config() const;
  ::structure::SecurityConfig* _internal_mutable_security_config();
  public:
  void unsafe_arena_set_allocated_security_config(
      ::structure::SecurityConfig* security_config);
  ::structure::SecurityConfig* unsafe_arena_release_security_config();

  // bool is_ho = 30;
  void clear_is_ho();
  bool is_ho() const;
  void set_is_ho(bool value);
  private:
  bool _internal_is_ho() const;
  void _internal_set_is_ho(bool value);
  public:

  // uint32 num_ent = 40;
  void clear_num_ent();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_ent() const;
  void set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_ent() const;
  void _internal_set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 new_cp_ue_id = 43;
  void clear_new_cp_ue_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 new_cp_ue_id() const;
  void set_new_cp_ue_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_new_cp_ue_id() const;
  void _internal_set_new_cp_ue_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 new_cell_id = 44;
  void clear_new_cell_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 new_cell_id() const;
  void set_new_cell_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_new_cell_id() const;
  void _internal_set_new_cell_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:srvEbm.ModifyPDCPConfigReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::PDCPModCfgEnt > config_list_;
  ::mhdr::MsgHdr* hdr_;
  ::structure::CpUpHdr* cp_up_hdr_;
  ::structure::SecurityConfig* security_config_;
  bool is_ho_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_ent_;
  ::PROTOBUF_NAMESPACE_ID::uint32 new_cp_ue_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 new_cell_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_srvEbm_2eproto;
};
// -------------------------------------------------------------------

class TunnelStateChangeReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srvEbm.TunnelStateChangeReq) */ {
 public:
  inline TunnelStateChangeReq() : TunnelStateChangeReq(nullptr) {}
  virtual ~TunnelStateChangeReq();

  TunnelStateChangeReq(const TunnelStateChangeReq& from);
  TunnelStateChangeReq(TunnelStateChangeReq&& from) noexcept
    : TunnelStateChangeReq() {
    *this = ::std::move(from);
  }

  inline TunnelStateChangeReq& operator=(const TunnelStateChangeReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline TunnelStateChangeReq& operator=(TunnelStateChangeReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TunnelStateChangeReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TunnelStateChangeReq* internal_default_instance() {
    return reinterpret_cast<const TunnelStateChangeReq*>(
               &_TunnelStateChangeReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(TunnelStateChangeReq& a, TunnelStateChangeReq& b) {
    a.Swap(&b);
  }
  inline void Swap(TunnelStateChangeReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TunnelStateChangeReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TunnelStateChangeReq* New() const final {
    return CreateMaybeMessage<TunnelStateChangeReq>(nullptr);
  }

  TunnelStateChangeReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TunnelStateChangeReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TunnelStateChangeReq& from);
  void MergeFrom(const TunnelStateChangeReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TunnelStateChangeReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srvEbm.TunnelStateChangeReq";
  }
  protected:
  explicit TunnelStateChangeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_srvEbm_2eproto);
    return ::descriptor_table_srvEbm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHdrFieldNumber = 10,
    kCpUpHdrFieldNumber = 20,
    kTunnelStateInfoFieldNumber = 30,
  };
  // .mhdr.MsgHdr hdr = 10;
  bool has_hdr() const;
  private:
  bool _internal_has_hdr() const;
  public:
  void clear_hdr();
  const ::mhdr::MsgHdr& hdr() const;
  ::mhdr::MsgHdr* release_hdr();
  ::mhdr::MsgHdr* mutable_hdr();
  void set_allocated_hdr(::mhdr::MsgHdr* hdr);
  private:
  const ::mhdr::MsgHdr& _internal_hdr() const;
  ::mhdr::MsgHdr* _internal_mutable_hdr();
  public:
  void unsafe_arena_set_allocated_hdr(
      ::mhdr::MsgHdr* hdr);
  ::mhdr::MsgHdr* unsafe_arena_release_hdr();

  // .structure.CpUpHdr cp_up_hdr = 20;
  bool has_cp_up_hdr() const;
  private:
  bool _internal_has_cp_up_hdr() const;
  public:
  void clear_cp_up_hdr();
  const ::structure::CpUpHdr& cp_up_hdr() const;
  ::structure::CpUpHdr* release_cp_up_hdr();
  ::structure::CpUpHdr* mutable_cp_up_hdr();
  void set_allocated_cp_up_hdr(::structure::CpUpHdr* cp_up_hdr);
  private:
  const ::structure::CpUpHdr& _internal_cp_up_hdr() const;
  ::structure::CpUpHdr* _internal_mutable_cp_up_hdr();
  public:
  void unsafe_arena_set_allocated_cp_up_hdr(
      ::structure::CpUpHdr* cp_up_hdr);
  ::structure::CpUpHdr* unsafe_arena_release_cp_up_hdr();

  // .structure.TunnelStateInfo tunnel_state_info = 30;
  bool has_tunnel_state_info() const;
  private:
  bool _internal_has_tunnel_state_info() const;
  public:
  void clear_tunnel_state_info();
  const ::structure::TunnelStateInfo& tunnel_state_info() const;
  ::structure::TunnelStateInfo* release_tunnel_state_info();
  ::structure::TunnelStateInfo* mutable_tunnel_state_info();
  void set_allocated_tunnel_state_info(::structure::TunnelStateInfo* tunnel_state_info);
  private:
  const ::structure::TunnelStateInfo& _internal_tunnel_state_info() const;
  ::structure::TunnelStateInfo* _internal_mutable_tunnel_state_info();
  public:
  void unsafe_arena_set_allocated_tunnel_state_info(
      ::structure::TunnelStateInfo* tunnel_state_info);
  ::structure::TunnelStateInfo* unsafe_arena_release_tunnel_state_info();

  // @@protoc_insertion_point(class_scope:srvEbm.TunnelStateChangeReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mhdr::MsgHdr* hdr_;
  ::structure::CpUpHdr* cp_up_hdr_;
  ::structure::TunnelStateInfo* tunnel_state_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_srvEbm_2eproto;
};
// -------------------------------------------------------------------

class IpAddressConfigMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srvEbm.IpAddressConfigMsg) */ {
 public:
  inline IpAddressConfigMsg() : IpAddressConfigMsg(nullptr) {}
  virtual ~IpAddressConfigMsg();

  IpAddressConfigMsg(const IpAddressConfigMsg& from);
  IpAddressConfigMsg(IpAddressConfigMsg&& from) noexcept
    : IpAddressConfigMsg() {
    *this = ::std::move(from);
  }

  inline IpAddressConfigMsg& operator=(const IpAddressConfigMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline IpAddressConfigMsg& operator=(IpAddressConfigMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IpAddressConfigMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IpAddressConfigMsg* internal_default_instance() {
    return reinterpret_cast<const IpAddressConfigMsg*>(
               &_IpAddressConfigMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(IpAddressConfigMsg& a, IpAddressConfigMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(IpAddressConfigMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IpAddressConfigMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IpAddressConfigMsg* New() const final {
    return CreateMaybeMessage<IpAddressConfigMsg>(nullptr);
  }

  IpAddressConfigMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IpAddressConfigMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IpAddressConfigMsg& from);
  void MergeFrom(const IpAddressConfigMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IpAddressConfigMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srvEbm.IpAddressConfigMsg";
  }
  protected:
  explicit IpAddressConfigMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_srvEbm_2eproto);
    return ::descriptor_table_srvEbm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHdrFieldNumber = 10,
    kAddressFieldNumber = 40,
    kTypeFieldNumber = 20,
    kActionFieldNumber = 30,
  };
  // .mhdr.MsgHdr hdr = 10;
  bool has_hdr() const;
  private:
  bool _internal_has_hdr() const;
  public:
  void clear_hdr();
  const ::mhdr::MsgHdr& hdr() const;
  ::mhdr::MsgHdr* release_hdr();
  ::mhdr::MsgHdr* mutable_hdr();
  void set_allocated_hdr(::mhdr::MsgHdr* hdr);
  private:
  const ::mhdr::MsgHdr& _internal_hdr() const;
  ::mhdr::MsgHdr* _internal_mutable_hdr();
  public:
  void unsafe_arena_set_allocated_hdr(
      ::mhdr::MsgHdr* hdr);
  ::mhdr::MsgHdr* unsafe_arena_release_hdr();

  // .common.IpAddress address = 40;
  bool has_address() const;
  private:
  bool _internal_has_address() const;
  public:
  void clear_address();
  const ::common::IpAddress& address() const;
  ::common::IpAddress* release_address();
  ::common::IpAddress* mutable_address();
  void set_allocated_address(::common::IpAddress* address);
  private:
  const ::common::IpAddress& _internal_address() const;
  ::common::IpAddress* _internal_mutable_address();
  public:
  void unsafe_arena_set_allocated_address(
      ::common::IpAddress* address);
  ::common::IpAddress* unsafe_arena_release_address();

  // .structure.InterfaceType type = 20;
  void clear_type();
  ::structure::InterfaceType type() const;
  void set_type(::structure::InterfaceType value);
  private:
  ::structure::InterfaceType _internal_type() const;
  void _internal_set_type(::structure::InterfaceType value);
  public:

  // .structure.IpAddressAction action = 30;
  void clear_action();
  ::structure::IpAddressAction action() const;
  void set_action(::structure::IpAddressAction value);
  private:
  ::structure::IpAddressAction _internal_action() const;
  void _internal_set_action(::structure::IpAddressAction value);
  public:

  // @@protoc_insertion_point(class_scope:srvEbm.IpAddressConfigMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mhdr::MsgHdr* hdr_;
  ::common::IpAddress* address_;
  int type_;
  int action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_srvEbm_2eproto;
};
// -------------------------------------------------------------------

class PathManagementConfigMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srvEbm.PathManagementConfigMsg) */ {
 public:
  inline PathManagementConfigMsg() : PathManagementConfigMsg(nullptr) {}
  virtual ~PathManagementConfigMsg();

  PathManagementConfigMsg(const PathManagementConfigMsg& from);
  PathManagementConfigMsg(PathManagementConfigMsg&& from) noexcept
    : PathManagementConfigMsg() {
    *this = ::std::move(from);
  }

  inline PathManagementConfigMsg& operator=(const PathManagementConfigMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline PathManagementConfigMsg& operator=(PathManagementConfigMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PathManagementConfigMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PathManagementConfigMsg* internal_default_instance() {
    return reinterpret_cast<const PathManagementConfigMsg*>(
               &_PathManagementConfigMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(PathManagementConfigMsg& a, PathManagementConfigMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(PathManagementConfigMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PathManagementConfigMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PathManagementConfigMsg* New() const final {
    return CreateMaybeMessage<PathManagementConfigMsg>(nullptr);
  }

  PathManagementConfigMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PathManagementConfigMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PathManagementConfigMsg& from);
  void MergeFrom(const PathManagementConfigMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PathManagementConfigMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srvEbm.PathManagementConfigMsg";
  }
  protected:
  explicit PathManagementConfigMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_srvEbm_2eproto);
    return ::descriptor_table_srvEbm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHdrFieldNumber = 10,
    kEchoIntervalInSecFieldNumber = 20,
    kGtpuT3RespTimerFieldNumber = 30,
    kGtpuN3ReqFieldNumber = 40,
    kPathInfoClearTimerFieldNumber = 50,
  };
  // .mhdr.MsgHdr hdr = 10;
  bool has_hdr() const;
  private:
  bool _internal_has_hdr() const;
  public:
  void clear_hdr();
  const ::mhdr::MsgHdr& hdr() const;
  ::mhdr::MsgHdr* release_hdr();
  ::mhdr::MsgHdr* mutable_hdr();
  void set_allocated_hdr(::mhdr::MsgHdr* hdr);
  private:
  const ::mhdr::MsgHdr& _internal_hdr() const;
  ::mhdr::MsgHdr* _internal_mutable_hdr();
  public:
  void unsafe_arena_set_allocated_hdr(
      ::mhdr::MsgHdr* hdr);
  ::mhdr::MsgHdr* unsafe_arena_release_hdr();

  // uint32 echo_interval_in_sec = 20;
  void clear_echo_interval_in_sec();
  ::PROTOBUF_NAMESPACE_ID::uint32 echo_interval_in_sec() const;
  void set_echo_interval_in_sec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_echo_interval_in_sec() const;
  void _internal_set_echo_interval_in_sec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 gtpu_t3_resp_timer = 30;
  void clear_gtpu_t3_resp_timer();
  ::PROTOBUF_NAMESPACE_ID::uint32 gtpu_t3_resp_timer() const;
  void set_gtpu_t3_resp_timer(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gtpu_t3_resp_timer() const;
  void _internal_set_gtpu_t3_resp_timer(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 gtpu_n3_req = 40;
  void clear_gtpu_n3_req();
  ::PROTOBUF_NAMESPACE_ID::uint32 gtpu_n3_req() const;
  void set_gtpu_n3_req(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gtpu_n3_req() const;
  void _internal_set_gtpu_n3_req(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 path_info_clear_timer = 50;
  void clear_path_info_clear_timer();
  ::PROTOBUF_NAMESPACE_ID::uint32 path_info_clear_timer() const;
  void set_path_info_clear_timer(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_path_info_clear_timer() const;
  void _internal_set_path_info_clear_timer(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:srvEbm.PathManagementConfigMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mhdr::MsgHdr* hdr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 echo_interval_in_sec_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gtpu_t3_resp_timer_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gtpu_n3_req_;
  ::PROTOBUF_NAMESPACE_ID::uint32 path_info_clear_timer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_srvEbm_2eproto;
};
// -------------------------------------------------------------------

class NotifyPathStatusMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srvEbm.NotifyPathStatusMsg) */ {
 public:
  inline NotifyPathStatusMsg() : NotifyPathStatusMsg(nullptr) {}
  virtual ~NotifyPathStatusMsg();

  NotifyPathStatusMsg(const NotifyPathStatusMsg& from);
  NotifyPathStatusMsg(NotifyPathStatusMsg&& from) noexcept
    : NotifyPathStatusMsg() {
    *this = ::std::move(from);
  }

  inline NotifyPathStatusMsg& operator=(const NotifyPathStatusMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotifyPathStatusMsg& operator=(NotifyPathStatusMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NotifyPathStatusMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NotifyPathStatusMsg* internal_default_instance() {
    return reinterpret_cast<const NotifyPathStatusMsg*>(
               &_NotifyPathStatusMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(NotifyPathStatusMsg& a, NotifyPathStatusMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(NotifyPathStatusMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotifyPathStatusMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NotifyPathStatusMsg* New() const final {
    return CreateMaybeMessage<NotifyPathStatusMsg>(nullptr);
  }

  NotifyPathStatusMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NotifyPathStatusMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NotifyPathStatusMsg& from);
  void MergeFrom(const NotifyPathStatusMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotifyPathStatusMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srvEbm.NotifyPathStatusMsg";
  }
  protected:
  explicit NotifyPathStatusMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_srvEbm_2eproto);
    return ::descriptor_table_srvEbm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUeInfoFieldNumber = 60,
    kHdrFieldNumber = 10,
    kLocalIpFieldNumber = 20,
    kRemoteIpFieldNumber = 30,
    kTypeFieldNumber = 40,
    kStatusFieldNumber = 50,
  };
  // repeated .structure.UeInfo ue_info = 60;
  int ue_info_size() const;
  private:
  int _internal_ue_info_size() const;
  public:
  void clear_ue_info();
  ::structure::UeInfo* mutable_ue_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::UeInfo >*
      mutable_ue_info();
  private:
  const ::structure::UeInfo& _internal_ue_info(int index) const;
  ::structure::UeInfo* _internal_add_ue_info();
  public:
  const ::structure::UeInfo& ue_info(int index) const;
  ::structure::UeInfo* add_ue_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::UeInfo >&
      ue_info() const;

  // .mhdr.MsgHdr hdr = 10;
  bool has_hdr() const;
  private:
  bool _internal_has_hdr() const;
  public:
  void clear_hdr();
  const ::mhdr::MsgHdr& hdr() const;
  ::mhdr::MsgHdr* release_hdr();
  ::mhdr::MsgHdr* mutable_hdr();
  void set_allocated_hdr(::mhdr::MsgHdr* hdr);
  private:
  const ::mhdr::MsgHdr& _internal_hdr() const;
  ::mhdr::MsgHdr* _internal_mutable_hdr();
  public:
  void unsafe_arena_set_allocated_hdr(
      ::mhdr::MsgHdr* hdr);
  ::mhdr::MsgHdr* unsafe_arena_release_hdr();

  // .common.IpAddress local_ip = 20;
  bool has_local_ip() const;
  private:
  bool _internal_has_local_ip() const;
  public:
  void clear_local_ip();
  const ::common::IpAddress& local_ip() const;
  ::common::IpAddress* release_local_ip();
  ::common::IpAddress* mutable_local_ip();
  void set_allocated_local_ip(::common::IpAddress* local_ip);
  private:
  const ::common::IpAddress& _internal_local_ip() const;
  ::common::IpAddress* _internal_mutable_local_ip();
  public:
  void unsafe_arena_set_allocated_local_ip(
      ::common::IpAddress* local_ip);
  ::common::IpAddress* unsafe_arena_release_local_ip();

  // .common.IpAddress remote_ip = 30;
  bool has_remote_ip() const;
  private:
  bool _internal_has_remote_ip() const;
  public:
  void clear_remote_ip();
  const ::common::IpAddress& remote_ip() const;
  ::common::IpAddress* release_remote_ip();
  ::common::IpAddress* mutable_remote_ip();
  void set_allocated_remote_ip(::common::IpAddress* remote_ip);
  private:
  const ::common::IpAddress& _internal_remote_ip() const;
  ::common::IpAddress* _internal_mutable_remote_ip();
  public:
  void unsafe_arena_set_allocated_remote_ip(
      ::common::IpAddress* remote_ip);
  ::common::IpAddress* unsafe_arena_release_remote_ip();

  // .structure.InterfaceType type = 40;
  void clear_type();
  ::structure::InterfaceType type() const;
  void set_type(::structure::InterfaceType value);
  private:
  ::structure::InterfaceType _internal_type() const;
  void _internal_set_type(::structure::InterfaceType value);
  public:

  // .structure.PathStatus status = 50;
  void clear_status();
  ::structure::PathStatus status() const;
  void set_status(::structure::PathStatus value);
  private:
  ::structure::PathStatus _internal_status() const;
  void _internal_set_status(::structure::PathStatus value);
  public:

  // @@protoc_insertion_point(class_scope:srvEbm.NotifyPathStatusMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::UeInfo > ue_info_;
  ::mhdr::MsgHdr* hdr_;
  ::common::IpAddress* local_ip_;
  ::common::IpAddress* remote_ip_;
  int type_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_srvEbm_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SecurityConfigReq

// .mhdr.MsgHdr hdr = 10;
inline bool SecurityConfigReq::_internal_has_hdr() const {
  return this != internal_default_instance() && hdr_ != nullptr;
}
inline bool SecurityConfigReq::has_hdr() const {
  return _internal_has_hdr();
}
inline const ::mhdr::MsgHdr& SecurityConfigReq::_internal_hdr() const {
  const ::mhdr::MsgHdr* p = hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mhdr::MsgHdr*>(
      &::mhdr::_MsgHdr_default_instance_);
}
inline const ::mhdr::MsgHdr& SecurityConfigReq::hdr() const {
  // @@protoc_insertion_point(field_get:srvEbm.SecurityConfigReq.hdr)
  return _internal_hdr();
}
inline void SecurityConfigReq::unsafe_arena_set_allocated_hdr(
    ::mhdr::MsgHdr* hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  hdr_ = hdr;
  if (hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvEbm.SecurityConfigReq.hdr)
}
inline ::mhdr::MsgHdr* SecurityConfigReq::release_hdr() {
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mhdr::MsgHdr* SecurityConfigReq::unsafe_arena_release_hdr() {
  // @@protoc_insertion_point(field_release:srvEbm.SecurityConfigReq.hdr)
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  return temp;
}
inline ::mhdr::MsgHdr* SecurityConfigReq::_internal_mutable_hdr() {
  
  if (hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::mhdr::MsgHdr>(GetArena());
    hdr_ = p;
  }
  return hdr_;
}
inline ::mhdr::MsgHdr* SecurityConfigReq::mutable_hdr() {
  // @@protoc_insertion_point(field_mutable:srvEbm.SecurityConfigReq.hdr)
  return _internal_mutable_hdr();
}
inline void SecurityConfigReq::set_allocated_hdr(::mhdr::MsgHdr* hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  if (hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr)->GetArena();
    if (message_arena != submessage_arena) {
      hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hdr, submessage_arena);
    }
    
  } else {
    
  }
  hdr_ = hdr;
  // @@protoc_insertion_point(field_set_allocated:srvEbm.SecurityConfigReq.hdr)
}

// .structure.CpUpHdr cp_up_hdr = 20;
inline bool SecurityConfigReq::_internal_has_cp_up_hdr() const {
  return this != internal_default_instance() && cp_up_hdr_ != nullptr;
}
inline bool SecurityConfigReq::has_cp_up_hdr() const {
  return _internal_has_cp_up_hdr();
}
inline const ::structure::CpUpHdr& SecurityConfigReq::_internal_cp_up_hdr() const {
  const ::structure::CpUpHdr* p = cp_up_hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::structure::CpUpHdr*>(
      &::structure::_CpUpHdr_default_instance_);
}
inline const ::structure::CpUpHdr& SecurityConfigReq::cp_up_hdr() const {
  // @@protoc_insertion_point(field_get:srvEbm.SecurityConfigReq.cp_up_hdr)
  return _internal_cp_up_hdr();
}
inline void SecurityConfigReq::unsafe_arena_set_allocated_cp_up_hdr(
    ::structure::CpUpHdr* cp_up_hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr_);
  }
  cp_up_hdr_ = cp_up_hdr;
  if (cp_up_hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvEbm.SecurityConfigReq.cp_up_hdr)
}
inline ::structure::CpUpHdr* SecurityConfigReq::release_cp_up_hdr() {
  
  ::structure::CpUpHdr* temp = cp_up_hdr_;
  cp_up_hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::structure::CpUpHdr* SecurityConfigReq::unsafe_arena_release_cp_up_hdr() {
  // @@protoc_insertion_point(field_release:srvEbm.SecurityConfigReq.cp_up_hdr)
  
  ::structure::CpUpHdr* temp = cp_up_hdr_;
  cp_up_hdr_ = nullptr;
  return temp;
}
inline ::structure::CpUpHdr* SecurityConfigReq::_internal_mutable_cp_up_hdr() {
  
  if (cp_up_hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::structure::CpUpHdr>(GetArena());
    cp_up_hdr_ = p;
  }
  return cp_up_hdr_;
}
inline ::structure::CpUpHdr* SecurityConfigReq::mutable_cp_up_hdr() {
  // @@protoc_insertion_point(field_mutable:srvEbm.SecurityConfigReq.cp_up_hdr)
  return _internal_mutable_cp_up_hdr();
}
inline void SecurityConfigReq::set_allocated_cp_up_hdr(::structure::CpUpHdr* cp_up_hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr_);
  }
  if (cp_up_hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr)->GetArena();
    if (message_arena != submessage_arena) {
      cp_up_hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cp_up_hdr, submessage_arena);
    }
    
  } else {
    
  }
  cp_up_hdr_ = cp_up_hdr;
  // @@protoc_insertion_point(field_set_allocated:srvEbm.SecurityConfigReq.cp_up_hdr)
}

// bool is_ho = 21;
inline void SecurityConfigReq::clear_is_ho() {
  is_ho_ = false;
}
inline bool SecurityConfigReq::_internal_is_ho() const {
  return is_ho_;
}
inline bool SecurityConfigReq::is_ho() const {
  // @@protoc_insertion_point(field_get:srvEbm.SecurityConfigReq.is_ho)
  return _internal_is_ho();
}
inline void SecurityConfigReq::_internal_set_is_ho(bool value) {
  
  is_ho_ = value;
}
inline void SecurityConfigReq::set_is_ho(bool value) {
  _internal_set_is_ho(value);
  // @@protoc_insertion_point(field_set:srvEbm.SecurityConfigReq.is_ho)
}

// .structure.SecurityConfig security_config = 30;
inline bool SecurityConfigReq::_internal_has_security_config() const {
  return this != internal_default_instance() && security_config_ != nullptr;
}
inline bool SecurityConfigReq::has_security_config() const {
  return _internal_has_security_config();
}
inline const ::structure::SecurityConfig& SecurityConfigReq::_internal_security_config() const {
  const ::structure::SecurityConfig* p = security_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::structure::SecurityConfig*>(
      &::structure::_SecurityConfig_default_instance_);
}
inline const ::structure::SecurityConfig& SecurityConfigReq::security_config() const {
  // @@protoc_insertion_point(field_get:srvEbm.SecurityConfigReq.security_config)
  return _internal_security_config();
}
inline void SecurityConfigReq::unsafe_arena_set_allocated_security_config(
    ::structure::SecurityConfig* security_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(security_config_);
  }
  security_config_ = security_config;
  if (security_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvEbm.SecurityConfigReq.security_config)
}
inline ::structure::SecurityConfig* SecurityConfigReq::release_security_config() {
  
  ::structure::SecurityConfig* temp = security_config_;
  security_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::structure::SecurityConfig* SecurityConfigReq::unsafe_arena_release_security_config() {
  // @@protoc_insertion_point(field_release:srvEbm.SecurityConfigReq.security_config)
  
  ::structure::SecurityConfig* temp = security_config_;
  security_config_ = nullptr;
  return temp;
}
inline ::structure::SecurityConfig* SecurityConfigReq::_internal_mutable_security_config() {
  
  if (security_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::structure::SecurityConfig>(GetArena());
    security_config_ = p;
  }
  return security_config_;
}
inline ::structure::SecurityConfig* SecurityConfigReq::mutable_security_config() {
  // @@protoc_insertion_point(field_mutable:srvEbm.SecurityConfigReq.security_config)
  return _internal_mutable_security_config();
}
inline void SecurityConfigReq::set_allocated_security_config(::structure::SecurityConfig* security_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(security_config_);
  }
  if (security_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(security_config)->GetArena();
    if (message_arena != submessage_arena) {
      security_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, security_config, submessage_arena);
    }
    
  } else {
    
  }
  security_config_ = security_config;
  // @@protoc_insertion_point(field_set_allocated:srvEbm.SecurityConfigReq.security_config)
}

// -------------------------------------------------------------------

// CreateTunnelReq

// .mhdr.MsgHdr hdr = 10;
inline bool CreateTunnelReq::_internal_has_hdr() const {
  return this != internal_default_instance() && hdr_ != nullptr;
}
inline bool CreateTunnelReq::has_hdr() const {
  return _internal_has_hdr();
}
inline const ::mhdr::MsgHdr& CreateTunnelReq::_internal_hdr() const {
  const ::mhdr::MsgHdr* p = hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mhdr::MsgHdr*>(
      &::mhdr::_MsgHdr_default_instance_);
}
inline const ::mhdr::MsgHdr& CreateTunnelReq::hdr() const {
  // @@protoc_insertion_point(field_get:srvEbm.CreateTunnelReq.hdr)
  return _internal_hdr();
}
inline void CreateTunnelReq::unsafe_arena_set_allocated_hdr(
    ::mhdr::MsgHdr* hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  hdr_ = hdr;
  if (hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvEbm.CreateTunnelReq.hdr)
}
inline ::mhdr::MsgHdr* CreateTunnelReq::release_hdr() {
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mhdr::MsgHdr* CreateTunnelReq::unsafe_arena_release_hdr() {
  // @@protoc_insertion_point(field_release:srvEbm.CreateTunnelReq.hdr)
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  return temp;
}
inline ::mhdr::MsgHdr* CreateTunnelReq::_internal_mutable_hdr() {
  
  if (hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::mhdr::MsgHdr>(GetArena());
    hdr_ = p;
  }
  return hdr_;
}
inline ::mhdr::MsgHdr* CreateTunnelReq::mutable_hdr() {
  // @@protoc_insertion_point(field_mutable:srvEbm.CreateTunnelReq.hdr)
  return _internal_mutable_hdr();
}
inline void CreateTunnelReq::set_allocated_hdr(::mhdr::MsgHdr* hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  if (hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr)->GetArena();
    if (message_arena != submessage_arena) {
      hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hdr, submessage_arena);
    }
    
  } else {
    
  }
  hdr_ = hdr;
  // @@protoc_insertion_point(field_set_allocated:srvEbm.CreateTunnelReq.hdr)
}

// .structure.CpUpHdr cp_up_hdr = 20;
inline bool CreateTunnelReq::_internal_has_cp_up_hdr() const {
  return this != internal_default_instance() && cp_up_hdr_ != nullptr;
}
inline bool CreateTunnelReq::has_cp_up_hdr() const {
  return _internal_has_cp_up_hdr();
}
inline const ::structure::CpUpHdr& CreateTunnelReq::_internal_cp_up_hdr() const {
  const ::structure::CpUpHdr* p = cp_up_hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::structure::CpUpHdr*>(
      &::structure::_CpUpHdr_default_instance_);
}
inline const ::structure::CpUpHdr& CreateTunnelReq::cp_up_hdr() const {
  // @@protoc_insertion_point(field_get:srvEbm.CreateTunnelReq.cp_up_hdr)
  return _internal_cp_up_hdr();
}
inline void CreateTunnelReq::unsafe_arena_set_allocated_cp_up_hdr(
    ::structure::CpUpHdr* cp_up_hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr_);
  }
  cp_up_hdr_ = cp_up_hdr;
  if (cp_up_hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvEbm.CreateTunnelReq.cp_up_hdr)
}
inline ::structure::CpUpHdr* CreateTunnelReq::release_cp_up_hdr() {
  
  ::structure::CpUpHdr* temp = cp_up_hdr_;
  cp_up_hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::structure::CpUpHdr* CreateTunnelReq::unsafe_arena_release_cp_up_hdr() {
  // @@protoc_insertion_point(field_release:srvEbm.CreateTunnelReq.cp_up_hdr)
  
  ::structure::CpUpHdr* temp = cp_up_hdr_;
  cp_up_hdr_ = nullptr;
  return temp;
}
inline ::structure::CpUpHdr* CreateTunnelReq::_internal_mutable_cp_up_hdr() {
  
  if (cp_up_hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::structure::CpUpHdr>(GetArena());
    cp_up_hdr_ = p;
  }
  return cp_up_hdr_;
}
inline ::structure::CpUpHdr* CreateTunnelReq::mutable_cp_up_hdr() {
  // @@protoc_insertion_point(field_mutable:srvEbm.CreateTunnelReq.cp_up_hdr)
  return _internal_mutable_cp_up_hdr();
}
inline void CreateTunnelReq::set_allocated_cp_up_hdr(::structure::CpUpHdr* cp_up_hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr_);
  }
  if (cp_up_hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr)->GetArena();
    if (message_arena != submessage_arena) {
      cp_up_hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cp_up_hdr, submessage_arena);
    }
    
  } else {
    
  }
  cp_up_hdr_ = cp_up_hdr;
  // @@protoc_insertion_point(field_set_allocated:srvEbm.CreateTunnelReq.cp_up_hdr)
}

// uint32 num_ent = 31;
inline void CreateTunnelReq::clear_num_ent() {
  num_ent_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateTunnelReq::_internal_num_ent() const {
  return num_ent_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateTunnelReq::num_ent() const {
  // @@protoc_insertion_point(field_get:srvEbm.CreateTunnelReq.num_ent)
  return _internal_num_ent();
}
inline void CreateTunnelReq::_internal_set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_ent_ = value;
}
inline void CreateTunnelReq::set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_ent(value);
  // @@protoc_insertion_point(field_set:srvEbm.CreateTunnelReq.num_ent)
}

// repeated .structure.GtpTunnelInfo tnl_info_list = 40;
inline int CreateTunnelReq::_internal_tnl_info_list_size() const {
  return tnl_info_list_.size();
}
inline int CreateTunnelReq::tnl_info_list_size() const {
  return _internal_tnl_info_list_size();
}
inline ::structure::GtpTunnelInfo* CreateTunnelReq::mutable_tnl_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:srvEbm.CreateTunnelReq.tnl_info_list)
  return tnl_info_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::GtpTunnelInfo >*
CreateTunnelReq::mutable_tnl_info_list() {
  // @@protoc_insertion_point(field_mutable_list:srvEbm.CreateTunnelReq.tnl_info_list)
  return &tnl_info_list_;
}
inline const ::structure::GtpTunnelInfo& CreateTunnelReq::_internal_tnl_info_list(int index) const {
  return tnl_info_list_.Get(index);
}
inline const ::structure::GtpTunnelInfo& CreateTunnelReq::tnl_info_list(int index) const {
  // @@protoc_insertion_point(field_get:srvEbm.CreateTunnelReq.tnl_info_list)
  return _internal_tnl_info_list(index);
}
inline ::structure::GtpTunnelInfo* CreateTunnelReq::_internal_add_tnl_info_list() {
  return tnl_info_list_.Add();
}
inline ::structure::GtpTunnelInfo* CreateTunnelReq::add_tnl_info_list() {
  // @@protoc_insertion_point(field_add:srvEbm.CreateTunnelReq.tnl_info_list)
  return _internal_add_tnl_info_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::GtpTunnelInfo >&
CreateTunnelReq::tnl_info_list() const {
  // @@protoc_insertion_point(field_list:srvEbm.CreateTunnelReq.tnl_info_list)
  return tnl_info_list_;
}

// -------------------------------------------------------------------

// ModifyTunnelReq

// .mhdr.MsgHdr hdr = 10;
inline bool ModifyTunnelReq::_internal_has_hdr() const {
  return this != internal_default_instance() && hdr_ != nullptr;
}
inline bool ModifyTunnelReq::has_hdr() const {
  return _internal_has_hdr();
}
inline const ::mhdr::MsgHdr& ModifyTunnelReq::_internal_hdr() const {
  const ::mhdr::MsgHdr* p = hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mhdr::MsgHdr*>(
      &::mhdr::_MsgHdr_default_instance_);
}
inline const ::mhdr::MsgHdr& ModifyTunnelReq::hdr() const {
  // @@protoc_insertion_point(field_get:srvEbm.ModifyTunnelReq.hdr)
  return _internal_hdr();
}
inline void ModifyTunnelReq::unsafe_arena_set_allocated_hdr(
    ::mhdr::MsgHdr* hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  hdr_ = hdr;
  if (hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvEbm.ModifyTunnelReq.hdr)
}
inline ::mhdr::MsgHdr* ModifyTunnelReq::release_hdr() {
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mhdr::MsgHdr* ModifyTunnelReq::unsafe_arena_release_hdr() {
  // @@protoc_insertion_point(field_release:srvEbm.ModifyTunnelReq.hdr)
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  return temp;
}
inline ::mhdr::MsgHdr* ModifyTunnelReq::_internal_mutable_hdr() {
  
  if (hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::mhdr::MsgHdr>(GetArena());
    hdr_ = p;
  }
  return hdr_;
}
inline ::mhdr::MsgHdr* ModifyTunnelReq::mutable_hdr() {
  // @@protoc_insertion_point(field_mutable:srvEbm.ModifyTunnelReq.hdr)
  return _internal_mutable_hdr();
}
inline void ModifyTunnelReq::set_allocated_hdr(::mhdr::MsgHdr* hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  if (hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr)->GetArena();
    if (message_arena != submessage_arena) {
      hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hdr, submessage_arena);
    }
    
  } else {
    
  }
  hdr_ = hdr;
  // @@protoc_insertion_point(field_set_allocated:srvEbm.ModifyTunnelReq.hdr)
}

// .structure.CpUpHdr cp_up_hdr = 20;
inline bool ModifyTunnelReq::_internal_has_cp_up_hdr() const {
  return this != internal_default_instance() && cp_up_hdr_ != nullptr;
}
inline bool ModifyTunnelReq::has_cp_up_hdr() const {
  return _internal_has_cp_up_hdr();
}
inline const ::structure::CpUpHdr& ModifyTunnelReq::_internal_cp_up_hdr() const {
  const ::structure::CpUpHdr* p = cp_up_hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::structure::CpUpHdr*>(
      &::structure::_CpUpHdr_default_instance_);
}
inline const ::structure::CpUpHdr& ModifyTunnelReq::cp_up_hdr() const {
  // @@protoc_insertion_point(field_get:srvEbm.ModifyTunnelReq.cp_up_hdr)
  return _internal_cp_up_hdr();
}
inline void ModifyTunnelReq::unsafe_arena_set_allocated_cp_up_hdr(
    ::structure::CpUpHdr* cp_up_hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr_);
  }
  cp_up_hdr_ = cp_up_hdr;
  if (cp_up_hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvEbm.ModifyTunnelReq.cp_up_hdr)
}
inline ::structure::CpUpHdr* ModifyTunnelReq::release_cp_up_hdr() {
  
  ::structure::CpUpHdr* temp = cp_up_hdr_;
  cp_up_hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::structure::CpUpHdr* ModifyTunnelReq::unsafe_arena_release_cp_up_hdr() {
  // @@protoc_insertion_point(field_release:srvEbm.ModifyTunnelReq.cp_up_hdr)
  
  ::structure::CpUpHdr* temp = cp_up_hdr_;
  cp_up_hdr_ = nullptr;
  return temp;
}
inline ::structure::CpUpHdr* ModifyTunnelReq::_internal_mutable_cp_up_hdr() {
  
  if (cp_up_hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::structure::CpUpHdr>(GetArena());
    cp_up_hdr_ = p;
  }
  return cp_up_hdr_;
}
inline ::structure::CpUpHdr* ModifyTunnelReq::mutable_cp_up_hdr() {
  // @@protoc_insertion_point(field_mutable:srvEbm.ModifyTunnelReq.cp_up_hdr)
  return _internal_mutable_cp_up_hdr();
}
inline void ModifyTunnelReq::set_allocated_cp_up_hdr(::structure::CpUpHdr* cp_up_hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr_);
  }
  if (cp_up_hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr)->GetArena();
    if (message_arena != submessage_arena) {
      cp_up_hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cp_up_hdr, submessage_arena);
    }
    
  } else {
    
  }
  cp_up_hdr_ = cp_up_hdr;
  // @@protoc_insertion_point(field_set_allocated:srvEbm.ModifyTunnelReq.cp_up_hdr)
}

// uint32 num_ent = 31;
inline void ModifyTunnelReq::clear_num_ent() {
  num_ent_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModifyTunnelReq::_internal_num_ent() const {
  return num_ent_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModifyTunnelReq::num_ent() const {
  // @@protoc_insertion_point(field_get:srvEbm.ModifyTunnelReq.num_ent)
  return _internal_num_ent();
}
inline void ModifyTunnelReq::_internal_set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_ent_ = value;
}
inline void ModifyTunnelReq::set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_ent(value);
  // @@protoc_insertion_point(field_set:srvEbm.ModifyTunnelReq.num_ent)
}

// repeated .structure.GtpTunnelInfo tnl_info_list = 40;
inline int ModifyTunnelReq::_internal_tnl_info_list_size() const {
  return tnl_info_list_.size();
}
inline int ModifyTunnelReq::tnl_info_list_size() const {
  return _internal_tnl_info_list_size();
}
inline ::structure::GtpTunnelInfo* ModifyTunnelReq::mutable_tnl_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:srvEbm.ModifyTunnelReq.tnl_info_list)
  return tnl_info_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::GtpTunnelInfo >*
ModifyTunnelReq::mutable_tnl_info_list() {
  // @@protoc_insertion_point(field_mutable_list:srvEbm.ModifyTunnelReq.tnl_info_list)
  return &tnl_info_list_;
}
inline const ::structure::GtpTunnelInfo& ModifyTunnelReq::_internal_tnl_info_list(int index) const {
  return tnl_info_list_.Get(index);
}
inline const ::structure::GtpTunnelInfo& ModifyTunnelReq::tnl_info_list(int index) const {
  // @@protoc_insertion_point(field_get:srvEbm.ModifyTunnelReq.tnl_info_list)
  return _internal_tnl_info_list(index);
}
inline ::structure::GtpTunnelInfo* ModifyTunnelReq::_internal_add_tnl_info_list() {
  return tnl_info_list_.Add();
}
inline ::structure::GtpTunnelInfo* ModifyTunnelReq::add_tnl_info_list() {
  // @@protoc_insertion_point(field_add:srvEbm.ModifyTunnelReq.tnl_info_list)
  return _internal_add_tnl_info_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::GtpTunnelInfo >&
ModifyTunnelReq::tnl_info_list() const {
  // @@protoc_insertion_point(field_list:srvEbm.ModifyTunnelReq.tnl_info_list)
  return tnl_info_list_;
}

// -------------------------------------------------------------------

// DeleteTunnelReq

// .mhdr.MsgHdr hdr = 10;
inline bool DeleteTunnelReq::_internal_has_hdr() const {
  return this != internal_default_instance() && hdr_ != nullptr;
}
inline bool DeleteTunnelReq::has_hdr() const {
  return _internal_has_hdr();
}
inline const ::mhdr::MsgHdr& DeleteTunnelReq::_internal_hdr() const {
  const ::mhdr::MsgHdr* p = hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mhdr::MsgHdr*>(
      &::mhdr::_MsgHdr_default_instance_);
}
inline const ::mhdr::MsgHdr& DeleteTunnelReq::hdr() const {
  // @@protoc_insertion_point(field_get:srvEbm.DeleteTunnelReq.hdr)
  return _internal_hdr();
}
inline void DeleteTunnelReq::unsafe_arena_set_allocated_hdr(
    ::mhdr::MsgHdr* hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  hdr_ = hdr;
  if (hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvEbm.DeleteTunnelReq.hdr)
}
inline ::mhdr::MsgHdr* DeleteTunnelReq::release_hdr() {
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mhdr::MsgHdr* DeleteTunnelReq::unsafe_arena_release_hdr() {
  // @@protoc_insertion_point(field_release:srvEbm.DeleteTunnelReq.hdr)
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  return temp;
}
inline ::mhdr::MsgHdr* DeleteTunnelReq::_internal_mutable_hdr() {
  
  if (hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::mhdr::MsgHdr>(GetArena());
    hdr_ = p;
  }
  return hdr_;
}
inline ::mhdr::MsgHdr* DeleteTunnelReq::mutable_hdr() {
  // @@protoc_insertion_point(field_mutable:srvEbm.DeleteTunnelReq.hdr)
  return _internal_mutable_hdr();
}
inline void DeleteTunnelReq::set_allocated_hdr(::mhdr::MsgHdr* hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  if (hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr)->GetArena();
    if (message_arena != submessage_arena) {
      hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hdr, submessage_arena);
    }
    
  } else {
    
  }
  hdr_ = hdr;
  // @@protoc_insertion_point(field_set_allocated:srvEbm.DeleteTunnelReq.hdr)
}

// .structure.CpUpHdr cp_up_hdr = 20;
inline bool DeleteTunnelReq::_internal_has_cp_up_hdr() const {
  return this != internal_default_instance() && cp_up_hdr_ != nullptr;
}
inline bool DeleteTunnelReq::has_cp_up_hdr() const {
  return _internal_has_cp_up_hdr();
}
inline const ::structure::CpUpHdr& DeleteTunnelReq::_internal_cp_up_hdr() const {
  const ::structure::CpUpHdr* p = cp_up_hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::structure::CpUpHdr*>(
      &::structure::_CpUpHdr_default_instance_);
}
inline const ::structure::CpUpHdr& DeleteTunnelReq::cp_up_hdr() const {
  // @@protoc_insertion_point(field_get:srvEbm.DeleteTunnelReq.cp_up_hdr)
  return _internal_cp_up_hdr();
}
inline void DeleteTunnelReq::unsafe_arena_set_allocated_cp_up_hdr(
    ::structure::CpUpHdr* cp_up_hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr_);
  }
  cp_up_hdr_ = cp_up_hdr;
  if (cp_up_hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvEbm.DeleteTunnelReq.cp_up_hdr)
}
inline ::structure::CpUpHdr* DeleteTunnelReq::release_cp_up_hdr() {
  
  ::structure::CpUpHdr* temp = cp_up_hdr_;
  cp_up_hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::structure::CpUpHdr* DeleteTunnelReq::unsafe_arena_release_cp_up_hdr() {
  // @@protoc_insertion_point(field_release:srvEbm.DeleteTunnelReq.cp_up_hdr)
  
  ::structure::CpUpHdr* temp = cp_up_hdr_;
  cp_up_hdr_ = nullptr;
  return temp;
}
inline ::structure::CpUpHdr* DeleteTunnelReq::_internal_mutable_cp_up_hdr() {
  
  if (cp_up_hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::structure::CpUpHdr>(GetArena());
    cp_up_hdr_ = p;
  }
  return cp_up_hdr_;
}
inline ::structure::CpUpHdr* DeleteTunnelReq::mutable_cp_up_hdr() {
  // @@protoc_insertion_point(field_mutable:srvEbm.DeleteTunnelReq.cp_up_hdr)
  return _internal_mutable_cp_up_hdr();
}
inline void DeleteTunnelReq::set_allocated_cp_up_hdr(::structure::CpUpHdr* cp_up_hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr_);
  }
  if (cp_up_hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr)->GetArena();
    if (message_arena != submessage_arena) {
      cp_up_hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cp_up_hdr, submessage_arena);
    }
    
  } else {
    
  }
  cp_up_hdr_ = cp_up_hdr;
  // @@protoc_insertion_point(field_set_allocated:srvEbm.DeleteTunnelReq.cp_up_hdr)
}

// uint32 num_ent = 31;
inline void DeleteTunnelReq::clear_num_ent() {
  num_ent_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteTunnelReq::_internal_num_ent() const {
  return num_ent_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteTunnelReq::num_ent() const {
  // @@protoc_insertion_point(field_get:srvEbm.DeleteTunnelReq.num_ent)
  return _internal_num_ent();
}
inline void DeleteTunnelReq::_internal_set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_ent_ = value;
}
inline void DeleteTunnelReq::set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_ent(value);
  // @@protoc_insertion_point(field_set:srvEbm.DeleteTunnelReq.num_ent)
}

// repeated .structure.GtpTunnelInfo tnl_info_list = 40;
inline int DeleteTunnelReq::_internal_tnl_info_list_size() const {
  return tnl_info_list_.size();
}
inline int DeleteTunnelReq::tnl_info_list_size() const {
  return _internal_tnl_info_list_size();
}
inline ::structure::GtpTunnelInfo* DeleteTunnelReq::mutable_tnl_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:srvEbm.DeleteTunnelReq.tnl_info_list)
  return tnl_info_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::GtpTunnelInfo >*
DeleteTunnelReq::mutable_tnl_info_list() {
  // @@protoc_insertion_point(field_mutable_list:srvEbm.DeleteTunnelReq.tnl_info_list)
  return &tnl_info_list_;
}
inline const ::structure::GtpTunnelInfo& DeleteTunnelReq::_internal_tnl_info_list(int index) const {
  return tnl_info_list_.Get(index);
}
inline const ::structure::GtpTunnelInfo& DeleteTunnelReq::tnl_info_list(int index) const {
  // @@protoc_insertion_point(field_get:srvEbm.DeleteTunnelReq.tnl_info_list)
  return _internal_tnl_info_list(index);
}
inline ::structure::GtpTunnelInfo* DeleteTunnelReq::_internal_add_tnl_info_list() {
  return tnl_info_list_.Add();
}
inline ::structure::GtpTunnelInfo* DeleteTunnelReq::add_tnl_info_list() {
  // @@protoc_insertion_point(field_add:srvEbm.DeleteTunnelReq.tnl_info_list)
  return _internal_add_tnl_info_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::GtpTunnelInfo >&
DeleteTunnelReq::tnl_info_list() const {
  // @@protoc_insertion_point(field_list:srvEbm.DeleteTunnelReq.tnl_info_list)
  return tnl_info_list_;
}

// -------------------------------------------------------------------

// AddRbConfigReq

// .mhdr.MsgHdr hdr = 10;
inline bool AddRbConfigReq::_internal_has_hdr() const {
  return this != internal_default_instance() && hdr_ != nullptr;
}
inline bool AddRbConfigReq::has_hdr() const {
  return _internal_has_hdr();
}
inline const ::mhdr::MsgHdr& AddRbConfigReq::_internal_hdr() const {
  const ::mhdr::MsgHdr* p = hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mhdr::MsgHdr*>(
      &::mhdr::_MsgHdr_default_instance_);
}
inline const ::mhdr::MsgHdr& AddRbConfigReq::hdr() const {
  // @@protoc_insertion_point(field_get:srvEbm.AddRbConfigReq.hdr)
  return _internal_hdr();
}
inline void AddRbConfigReq::unsafe_arena_set_allocated_hdr(
    ::mhdr::MsgHdr* hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  hdr_ = hdr;
  if (hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvEbm.AddRbConfigReq.hdr)
}
inline ::mhdr::MsgHdr* AddRbConfigReq::release_hdr() {
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mhdr::MsgHdr* AddRbConfigReq::unsafe_arena_release_hdr() {
  // @@protoc_insertion_point(field_release:srvEbm.AddRbConfigReq.hdr)
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  return temp;
}
inline ::mhdr::MsgHdr* AddRbConfigReq::_internal_mutable_hdr() {
  
  if (hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::mhdr::MsgHdr>(GetArena());
    hdr_ = p;
  }
  return hdr_;
}
inline ::mhdr::MsgHdr* AddRbConfigReq::mutable_hdr() {
  // @@protoc_insertion_point(field_mutable:srvEbm.AddRbConfigReq.hdr)
  return _internal_mutable_hdr();
}
inline void AddRbConfigReq::set_allocated_hdr(::mhdr::MsgHdr* hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  if (hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr)->GetArena();
    if (message_arena != submessage_arena) {
      hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hdr, submessage_arena);
    }
    
  } else {
    
  }
  hdr_ = hdr;
  // @@protoc_insertion_point(field_set_allocated:srvEbm.AddRbConfigReq.hdr)
}

// .structure.CpUpHdr cp_up_hdr = 20;
inline bool AddRbConfigReq::_internal_has_cp_up_hdr() const {
  return this != internal_default_instance() && cp_up_hdr_ != nullptr;
}
inline bool AddRbConfigReq::has_cp_up_hdr() const {
  return _internal_has_cp_up_hdr();
}
inline const ::structure::CpUpHdr& AddRbConfigReq::_internal_cp_up_hdr() const {
  const ::structure::CpUpHdr* p = cp_up_hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::structure::CpUpHdr*>(
      &::structure::_CpUpHdr_default_instance_);
}
inline const ::structure::CpUpHdr& AddRbConfigReq::cp_up_hdr() const {
  // @@protoc_insertion_point(field_get:srvEbm.AddRbConfigReq.cp_up_hdr)
  return _internal_cp_up_hdr();
}
inline void AddRbConfigReq::unsafe_arena_set_allocated_cp_up_hdr(
    ::structure::CpUpHdr* cp_up_hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr_);
  }
  cp_up_hdr_ = cp_up_hdr;
  if (cp_up_hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvEbm.AddRbConfigReq.cp_up_hdr)
}
inline ::structure::CpUpHdr* AddRbConfigReq::release_cp_up_hdr() {
  
  ::structure::CpUpHdr* temp = cp_up_hdr_;
  cp_up_hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::structure::CpUpHdr* AddRbConfigReq::unsafe_arena_release_cp_up_hdr() {
  // @@protoc_insertion_point(field_release:srvEbm.AddRbConfigReq.cp_up_hdr)
  
  ::structure::CpUpHdr* temp = cp_up_hdr_;
  cp_up_hdr_ = nullptr;
  return temp;
}
inline ::structure::CpUpHdr* AddRbConfigReq::_internal_mutable_cp_up_hdr() {
  
  if (cp_up_hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::structure::CpUpHdr>(GetArena());
    cp_up_hdr_ = p;
  }
  return cp_up_hdr_;
}
inline ::structure::CpUpHdr* AddRbConfigReq::mutable_cp_up_hdr() {
  // @@protoc_insertion_point(field_mutable:srvEbm.AddRbConfigReq.cp_up_hdr)
  return _internal_mutable_cp_up_hdr();
}
inline void AddRbConfigReq::set_allocated_cp_up_hdr(::structure::CpUpHdr* cp_up_hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr_);
  }
  if (cp_up_hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr)->GetArena();
    if (message_arena != submessage_arena) {
      cp_up_hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cp_up_hdr, submessage_arena);
    }
    
  } else {
    
  }
  cp_up_hdr_ = cp_up_hdr;
  // @@protoc_insertion_point(field_set_allocated:srvEbm.AddRbConfigReq.cp_up_hdr)
}

// uint32 num_ent = 21;
inline void AddRbConfigReq::clear_num_ent() {
  num_ent_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddRbConfigReq::_internal_num_ent() const {
  return num_ent_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddRbConfigReq::num_ent() const {
  // @@protoc_insertion_point(field_get:srvEbm.AddRbConfigReq.num_ent)
  return _internal_num_ent();
}
inline void AddRbConfigReq::_internal_set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_ent_ = value;
}
inline void AddRbConfigReq::set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_ent(value);
  // @@protoc_insertion_point(field_set:srvEbm.AddRbConfigReq.num_ent)
}

// uint32 is_ho = 22;
inline void AddRbConfigReq::clear_is_ho() {
  is_ho_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddRbConfigReq::_internal_is_ho() const {
  return is_ho_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddRbConfigReq::is_ho() const {
  // @@protoc_insertion_point(field_get:srvEbm.AddRbConfigReq.is_ho)
  return _internal_is_ho();
}
inline void AddRbConfigReq::_internal_set_is_ho(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  is_ho_ = value;
}
inline void AddRbConfigReq::set_is_ho(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_is_ho(value);
  // @@protoc_insertion_point(field_set:srvEbm.AddRbConfigReq.is_ho)
}

// uint32 rlc_ul_sap_id = 23;
inline void AddRbConfigReq::clear_rlc_ul_sap_id() {
  rlc_ul_sap_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddRbConfigReq::_internal_rlc_ul_sap_id() const {
  return rlc_ul_sap_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddRbConfigReq::rlc_ul_sap_id() const {
  // @@protoc_insertion_point(field_get:srvEbm.AddRbConfigReq.rlc_ul_sap_id)
  return _internal_rlc_ul_sap_id();
}
inline void AddRbConfigReq::_internal_set_rlc_ul_sap_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rlc_ul_sap_id_ = value;
}
inline void AddRbConfigReq::set_rlc_ul_sap_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rlc_ul_sap_id(value);
  // @@protoc_insertion_point(field_set:srvEbm.AddRbConfigReq.rlc_ul_sap_id)
}

// uint32 rlc_dl_sap_id = 24;
inline void AddRbConfigReq::clear_rlc_dl_sap_id() {
  rlc_dl_sap_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddRbConfigReq::_internal_rlc_dl_sap_id() const {
  return rlc_dl_sap_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddRbConfigReq::rlc_dl_sap_id() const {
  // @@protoc_insertion_point(field_get:srvEbm.AddRbConfigReq.rlc_dl_sap_id)
  return _internal_rlc_dl_sap_id();
}
inline void AddRbConfigReq::_internal_set_rlc_dl_sap_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rlc_dl_sap_id_ = value;
}
inline void AddRbConfigReq::set_rlc_dl_sap_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rlc_dl_sap_id(value);
  // @@protoc_insertion_point(field_set:srvEbm.AddRbConfigReq.rlc_dl_sap_id)
}

// repeated .structure.PDCPAddCfgEnt config_list = 30;
inline int AddRbConfigReq::_internal_config_list_size() const {
  return config_list_.size();
}
inline int AddRbConfigReq::config_list_size() const {
  return _internal_config_list_size();
}
inline ::structure::PDCPAddCfgEnt* AddRbConfigReq::mutable_config_list(int index) {
  // @@protoc_insertion_point(field_mutable:srvEbm.AddRbConfigReq.config_list)
  return config_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::PDCPAddCfgEnt >*
AddRbConfigReq::mutable_config_list() {
  // @@protoc_insertion_point(field_mutable_list:srvEbm.AddRbConfigReq.config_list)
  return &config_list_;
}
inline const ::structure::PDCPAddCfgEnt& AddRbConfigReq::_internal_config_list(int index) const {
  return config_list_.Get(index);
}
inline const ::structure::PDCPAddCfgEnt& AddRbConfigReq::config_list(int index) const {
  // @@protoc_insertion_point(field_get:srvEbm.AddRbConfigReq.config_list)
  return _internal_config_list(index);
}
inline ::structure::PDCPAddCfgEnt* AddRbConfigReq::_internal_add_config_list() {
  return config_list_.Add();
}
inline ::structure::PDCPAddCfgEnt* AddRbConfigReq::add_config_list() {
  // @@protoc_insertion_point(field_add:srvEbm.AddRbConfigReq.config_list)
  return _internal_add_config_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::PDCPAddCfgEnt >&
AddRbConfigReq::config_list() const {
  // @@protoc_insertion_point(field_list:srvEbm.AddRbConfigReq.config_list)
  return config_list_;
}

// -------------------------------------------------------------------

// ModifyRbConfigReq

// .mhdr.MsgHdr hdr = 10;
inline bool ModifyRbConfigReq::_internal_has_hdr() const {
  return this != internal_default_instance() && hdr_ != nullptr;
}
inline bool ModifyRbConfigReq::has_hdr() const {
  return _internal_has_hdr();
}
inline const ::mhdr::MsgHdr& ModifyRbConfigReq::_internal_hdr() const {
  const ::mhdr::MsgHdr* p = hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mhdr::MsgHdr*>(
      &::mhdr::_MsgHdr_default_instance_);
}
inline const ::mhdr::MsgHdr& ModifyRbConfigReq::hdr() const {
  // @@protoc_insertion_point(field_get:srvEbm.ModifyRbConfigReq.hdr)
  return _internal_hdr();
}
inline void ModifyRbConfigReq::unsafe_arena_set_allocated_hdr(
    ::mhdr::MsgHdr* hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  hdr_ = hdr;
  if (hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvEbm.ModifyRbConfigReq.hdr)
}
inline ::mhdr::MsgHdr* ModifyRbConfigReq::release_hdr() {
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mhdr::MsgHdr* ModifyRbConfigReq::unsafe_arena_release_hdr() {
  // @@protoc_insertion_point(field_release:srvEbm.ModifyRbConfigReq.hdr)
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  return temp;
}
inline ::mhdr::MsgHdr* ModifyRbConfigReq::_internal_mutable_hdr() {
  
  if (hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::mhdr::MsgHdr>(GetArena());
    hdr_ = p;
  }
  return hdr_;
}
inline ::mhdr::MsgHdr* ModifyRbConfigReq::mutable_hdr() {
  // @@protoc_insertion_point(field_mutable:srvEbm.ModifyRbConfigReq.hdr)
  return _internal_mutable_hdr();
}
inline void ModifyRbConfigReq::set_allocated_hdr(::mhdr::MsgHdr* hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  if (hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr)->GetArena();
    if (message_arena != submessage_arena) {
      hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hdr, submessage_arena);
    }
    
  } else {
    
  }
  hdr_ = hdr;
  // @@protoc_insertion_point(field_set_allocated:srvEbm.ModifyRbConfigReq.hdr)
}

// .structure.CpUpHdr cp_up_hdr = 20;
inline bool ModifyRbConfigReq::_internal_has_cp_up_hdr() const {
  return this != internal_default_instance() && cp_up_hdr_ != nullptr;
}
inline bool ModifyRbConfigReq::has_cp_up_hdr() const {
  return _internal_has_cp_up_hdr();
}
inline const ::structure::CpUpHdr& ModifyRbConfigReq::_internal_cp_up_hdr() const {
  const ::structure::CpUpHdr* p = cp_up_hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::structure::CpUpHdr*>(
      &::structure::_CpUpHdr_default_instance_);
}
inline const ::structure::CpUpHdr& ModifyRbConfigReq::cp_up_hdr() const {
  // @@protoc_insertion_point(field_get:srvEbm.ModifyRbConfigReq.cp_up_hdr)
  return _internal_cp_up_hdr();
}
inline void ModifyRbConfigReq::unsafe_arena_set_allocated_cp_up_hdr(
    ::structure::CpUpHdr* cp_up_hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr_);
  }
  cp_up_hdr_ = cp_up_hdr;
  if (cp_up_hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvEbm.ModifyRbConfigReq.cp_up_hdr)
}
inline ::structure::CpUpHdr* ModifyRbConfigReq::release_cp_up_hdr() {
  
  ::structure::CpUpHdr* temp = cp_up_hdr_;
  cp_up_hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::structure::CpUpHdr* ModifyRbConfigReq::unsafe_arena_release_cp_up_hdr() {
  // @@protoc_insertion_point(field_release:srvEbm.ModifyRbConfigReq.cp_up_hdr)
  
  ::structure::CpUpHdr* temp = cp_up_hdr_;
  cp_up_hdr_ = nullptr;
  return temp;
}
inline ::structure::CpUpHdr* ModifyRbConfigReq::_internal_mutable_cp_up_hdr() {
  
  if (cp_up_hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::structure::CpUpHdr>(GetArena());
    cp_up_hdr_ = p;
  }
  return cp_up_hdr_;
}
inline ::structure::CpUpHdr* ModifyRbConfigReq::mutable_cp_up_hdr() {
  // @@protoc_insertion_point(field_mutable:srvEbm.ModifyRbConfigReq.cp_up_hdr)
  return _internal_mutable_cp_up_hdr();
}
inline void ModifyRbConfigReq::set_allocated_cp_up_hdr(::structure::CpUpHdr* cp_up_hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr_);
  }
  if (cp_up_hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr)->GetArena();
    if (message_arena != submessage_arena) {
      cp_up_hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cp_up_hdr, submessage_arena);
    }
    
  } else {
    
  }
  cp_up_hdr_ = cp_up_hdr;
  // @@protoc_insertion_point(field_set_allocated:srvEbm.ModifyRbConfigReq.cp_up_hdr)
}

// uint32 num_ent = 21;
inline void ModifyRbConfigReq::clear_num_ent() {
  num_ent_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModifyRbConfigReq::_internal_num_ent() const {
  return num_ent_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModifyRbConfigReq::num_ent() const {
  // @@protoc_insertion_point(field_get:srvEbm.ModifyRbConfigReq.num_ent)
  return _internal_num_ent();
}
inline void ModifyRbConfigReq::_internal_set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_ent_ = value;
}
inline void ModifyRbConfigReq::set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_ent(value);
  // @@protoc_insertion_point(field_set:srvEbm.ModifyRbConfigReq.num_ent)
}

// repeated .structure.PDCPModCfgEnt config_list = 30;
inline int ModifyRbConfigReq::_internal_config_list_size() const {
  return config_list_.size();
}
inline int ModifyRbConfigReq::config_list_size() const {
  return _internal_config_list_size();
}
inline ::structure::PDCPModCfgEnt* ModifyRbConfigReq::mutable_config_list(int index) {
  // @@protoc_insertion_point(field_mutable:srvEbm.ModifyRbConfigReq.config_list)
  return config_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::PDCPModCfgEnt >*
ModifyRbConfigReq::mutable_config_list() {
  // @@protoc_insertion_point(field_mutable_list:srvEbm.ModifyRbConfigReq.config_list)
  return &config_list_;
}
inline const ::structure::PDCPModCfgEnt& ModifyRbConfigReq::_internal_config_list(int index) const {
  return config_list_.Get(index);
}
inline const ::structure::PDCPModCfgEnt& ModifyRbConfigReq::config_list(int index) const {
  // @@protoc_insertion_point(field_get:srvEbm.ModifyRbConfigReq.config_list)
  return _internal_config_list(index);
}
inline ::structure::PDCPModCfgEnt* ModifyRbConfigReq::_internal_add_config_list() {
  return config_list_.Add();
}
inline ::structure::PDCPModCfgEnt* ModifyRbConfigReq::add_config_list() {
  // @@protoc_insertion_point(field_add:srvEbm.ModifyRbConfigReq.config_list)
  return _internal_add_config_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::PDCPModCfgEnt >&
ModifyRbConfigReq::config_list() const {
  // @@protoc_insertion_point(field_list:srvEbm.ModifyRbConfigReq.config_list)
  return config_list_;
}

// -------------------------------------------------------------------

// DeleteRbConfigReq

// .mhdr.MsgHdr hdr = 10;
inline bool DeleteRbConfigReq::_internal_has_hdr() const {
  return this != internal_default_instance() && hdr_ != nullptr;
}
inline bool DeleteRbConfigReq::has_hdr() const {
  return _internal_has_hdr();
}
inline const ::mhdr::MsgHdr& DeleteRbConfigReq::_internal_hdr() const {
  const ::mhdr::MsgHdr* p = hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mhdr::MsgHdr*>(
      &::mhdr::_MsgHdr_default_instance_);
}
inline const ::mhdr::MsgHdr& DeleteRbConfigReq::hdr() const {
  // @@protoc_insertion_point(field_get:srvEbm.DeleteRbConfigReq.hdr)
  return _internal_hdr();
}
inline void DeleteRbConfigReq::unsafe_arena_set_allocated_hdr(
    ::mhdr::MsgHdr* hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  hdr_ = hdr;
  if (hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvEbm.DeleteRbConfigReq.hdr)
}
inline ::mhdr::MsgHdr* DeleteRbConfigReq::release_hdr() {
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mhdr::MsgHdr* DeleteRbConfigReq::unsafe_arena_release_hdr() {
  // @@protoc_insertion_point(field_release:srvEbm.DeleteRbConfigReq.hdr)
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  return temp;
}
inline ::mhdr::MsgHdr* DeleteRbConfigReq::_internal_mutable_hdr() {
  
  if (hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::mhdr::MsgHdr>(GetArena());
    hdr_ = p;
  }
  return hdr_;
}
inline ::mhdr::MsgHdr* DeleteRbConfigReq::mutable_hdr() {
  // @@protoc_insertion_point(field_mutable:srvEbm.DeleteRbConfigReq.hdr)
  return _internal_mutable_hdr();
}
inline void DeleteRbConfigReq::set_allocated_hdr(::mhdr::MsgHdr* hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  if (hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr)->GetArena();
    if (message_arena != submessage_arena) {
      hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hdr, submessage_arena);
    }
    
  } else {
    
  }
  hdr_ = hdr;
  // @@protoc_insertion_point(field_set_allocated:srvEbm.DeleteRbConfigReq.hdr)
}

// .structure.CpUpHdr cp_up_hdr = 20;
inline bool DeleteRbConfigReq::_internal_has_cp_up_hdr() const {
  return this != internal_default_instance() && cp_up_hdr_ != nullptr;
}
inline bool DeleteRbConfigReq::has_cp_up_hdr() const {
  return _internal_has_cp_up_hdr();
}
inline const ::structure::CpUpHdr& DeleteRbConfigReq::_internal_cp_up_hdr() const {
  const ::structure::CpUpHdr* p = cp_up_hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::structure::CpUpHdr*>(
      &::structure::_CpUpHdr_default_instance_);
}
inline const ::structure::CpUpHdr& DeleteRbConfigReq::cp_up_hdr() const {
  // @@protoc_insertion_point(field_get:srvEbm.DeleteRbConfigReq.cp_up_hdr)
  return _internal_cp_up_hdr();
}
inline void DeleteRbConfigReq::unsafe_arena_set_allocated_cp_up_hdr(
    ::structure::CpUpHdr* cp_up_hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr_);
  }
  cp_up_hdr_ = cp_up_hdr;
  if (cp_up_hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvEbm.DeleteRbConfigReq.cp_up_hdr)
}
inline ::structure::CpUpHdr* DeleteRbConfigReq::release_cp_up_hdr() {
  
  ::structure::CpUpHdr* temp = cp_up_hdr_;
  cp_up_hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::structure::CpUpHdr* DeleteRbConfigReq::unsafe_arena_release_cp_up_hdr() {
  // @@protoc_insertion_point(field_release:srvEbm.DeleteRbConfigReq.cp_up_hdr)
  
  ::structure::CpUpHdr* temp = cp_up_hdr_;
  cp_up_hdr_ = nullptr;
  return temp;
}
inline ::structure::CpUpHdr* DeleteRbConfigReq::_internal_mutable_cp_up_hdr() {
  
  if (cp_up_hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::structure::CpUpHdr>(GetArena());
    cp_up_hdr_ = p;
  }
  return cp_up_hdr_;
}
inline ::structure::CpUpHdr* DeleteRbConfigReq::mutable_cp_up_hdr() {
  // @@protoc_insertion_point(field_mutable:srvEbm.DeleteRbConfigReq.cp_up_hdr)
  return _internal_mutable_cp_up_hdr();
}
inline void DeleteRbConfigReq::set_allocated_cp_up_hdr(::structure::CpUpHdr* cp_up_hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr_);
  }
  if (cp_up_hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr)->GetArena();
    if (message_arena != submessage_arena) {
      cp_up_hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cp_up_hdr, submessage_arena);
    }
    
  } else {
    
  }
  cp_up_hdr_ = cp_up_hdr;
  // @@protoc_insertion_point(field_set_allocated:srvEbm.DeleteRbConfigReq.cp_up_hdr)
}

// uint32 num_ent = 21;
inline void DeleteRbConfigReq::clear_num_ent() {
  num_ent_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteRbConfigReq::_internal_num_ent() const {
  return num_ent_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteRbConfigReq::num_ent() const {
  // @@protoc_insertion_point(field_get:srvEbm.DeleteRbConfigReq.num_ent)
  return _internal_num_ent();
}
inline void DeleteRbConfigReq::_internal_set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_ent_ = value;
}
inline void DeleteRbConfigReq::set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_ent(value);
  // @@protoc_insertion_point(field_set:srvEbm.DeleteRbConfigReq.num_ent)
}

// repeated .structure.PDCPDelCfgEnt config_list = 30;
inline int DeleteRbConfigReq::_internal_config_list_size() const {
  return config_list_.size();
}
inline int DeleteRbConfigReq::config_list_size() const {
  return _internal_config_list_size();
}
inline ::structure::PDCPDelCfgEnt* DeleteRbConfigReq::mutable_config_list(int index) {
  // @@protoc_insertion_point(field_mutable:srvEbm.DeleteRbConfigReq.config_list)
  return config_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::PDCPDelCfgEnt >*
DeleteRbConfigReq::mutable_config_list() {
  // @@protoc_insertion_point(field_mutable_list:srvEbm.DeleteRbConfigReq.config_list)
  return &config_list_;
}
inline const ::structure::PDCPDelCfgEnt& DeleteRbConfigReq::_internal_config_list(int index) const {
  return config_list_.Get(index);
}
inline const ::structure::PDCPDelCfgEnt& DeleteRbConfigReq::config_list(int index) const {
  // @@protoc_insertion_point(field_get:srvEbm.DeleteRbConfigReq.config_list)
  return _internal_config_list(index);
}
inline ::structure::PDCPDelCfgEnt* DeleteRbConfigReq::_internal_add_config_list() {
  return config_list_.Add();
}
inline ::structure::PDCPDelCfgEnt* DeleteRbConfigReq::add_config_list() {
  // @@protoc_insertion_point(field_add:srvEbm.DeleteRbConfigReq.config_list)
  return _internal_add_config_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::PDCPDelCfgEnt >&
DeleteRbConfigReq::config_list() const {
  // @@protoc_insertion_point(field_list:srvEbm.DeleteRbConfigReq.config_list)
  return config_list_;
}

// -------------------------------------------------------------------

// PauseResumeDataReq

// .mhdr.MsgHdr hdr = 10;
inline bool PauseResumeDataReq::_internal_has_hdr() const {
  return this != internal_default_instance() && hdr_ != nullptr;
}
inline bool PauseResumeDataReq::has_hdr() const {
  return _internal_has_hdr();
}
inline const ::mhdr::MsgHdr& PauseResumeDataReq::_internal_hdr() const {
  const ::mhdr::MsgHdr* p = hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mhdr::MsgHdr*>(
      &::mhdr::_MsgHdr_default_instance_);
}
inline const ::mhdr::MsgHdr& PauseResumeDataReq::hdr() const {
  // @@protoc_insertion_point(field_get:srvEbm.PauseResumeDataReq.hdr)
  return _internal_hdr();
}
inline void PauseResumeDataReq::unsafe_arena_set_allocated_hdr(
    ::mhdr::MsgHdr* hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  hdr_ = hdr;
  if (hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvEbm.PauseResumeDataReq.hdr)
}
inline ::mhdr::MsgHdr* PauseResumeDataReq::release_hdr() {
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mhdr::MsgHdr* PauseResumeDataReq::unsafe_arena_release_hdr() {
  // @@protoc_insertion_point(field_release:srvEbm.PauseResumeDataReq.hdr)
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  return temp;
}
inline ::mhdr::MsgHdr* PauseResumeDataReq::_internal_mutable_hdr() {
  
  if (hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::mhdr::MsgHdr>(GetArena());
    hdr_ = p;
  }
  return hdr_;
}
inline ::mhdr::MsgHdr* PauseResumeDataReq::mutable_hdr() {
  // @@protoc_insertion_point(field_mutable:srvEbm.PauseResumeDataReq.hdr)
  return _internal_mutable_hdr();
}
inline void PauseResumeDataReq::set_allocated_hdr(::mhdr::MsgHdr* hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  if (hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr)->GetArena();
    if (message_arena != submessage_arena) {
      hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hdr, submessage_arena);
    }
    
  } else {
    
  }
  hdr_ = hdr;
  // @@protoc_insertion_point(field_set_allocated:srvEbm.PauseResumeDataReq.hdr)
}

// .structure.CpUpHdr cp_up_hdr = 20;
inline bool PauseResumeDataReq::_internal_has_cp_up_hdr() const {
  return this != internal_default_instance() && cp_up_hdr_ != nullptr;
}
inline bool PauseResumeDataReq::has_cp_up_hdr() const {
  return _internal_has_cp_up_hdr();
}
inline const ::structure::CpUpHdr& PauseResumeDataReq::_internal_cp_up_hdr() const {
  const ::structure::CpUpHdr* p = cp_up_hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::structure::CpUpHdr*>(
      &::structure::_CpUpHdr_default_instance_);
}
inline const ::structure::CpUpHdr& PauseResumeDataReq::cp_up_hdr() const {
  // @@protoc_insertion_point(field_get:srvEbm.PauseResumeDataReq.cp_up_hdr)
  return _internal_cp_up_hdr();
}
inline void PauseResumeDataReq::unsafe_arena_set_allocated_cp_up_hdr(
    ::structure::CpUpHdr* cp_up_hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr_);
  }
  cp_up_hdr_ = cp_up_hdr;
  if (cp_up_hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvEbm.PauseResumeDataReq.cp_up_hdr)
}
inline ::structure::CpUpHdr* PauseResumeDataReq::release_cp_up_hdr() {
  
  ::structure::CpUpHdr* temp = cp_up_hdr_;
  cp_up_hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::structure::CpUpHdr* PauseResumeDataReq::unsafe_arena_release_cp_up_hdr() {
  // @@protoc_insertion_point(field_release:srvEbm.PauseResumeDataReq.cp_up_hdr)
  
  ::structure::CpUpHdr* temp = cp_up_hdr_;
  cp_up_hdr_ = nullptr;
  return temp;
}
inline ::structure::CpUpHdr* PauseResumeDataReq::_internal_mutable_cp_up_hdr() {
  
  if (cp_up_hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::structure::CpUpHdr>(GetArena());
    cp_up_hdr_ = p;
  }
  return cp_up_hdr_;
}
inline ::structure::CpUpHdr* PauseResumeDataReq::mutable_cp_up_hdr() {
  // @@protoc_insertion_point(field_mutable:srvEbm.PauseResumeDataReq.cp_up_hdr)
  return _internal_mutable_cp_up_hdr();
}
inline void PauseResumeDataReq::set_allocated_cp_up_hdr(::structure::CpUpHdr* cp_up_hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr_);
  }
  if (cp_up_hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr)->GetArena();
    if (message_arena != submessage_arena) {
      cp_up_hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cp_up_hdr, submessage_arena);
    }
    
  } else {
    
  }
  cp_up_hdr_ = cp_up_hdr;
  // @@protoc_insertion_point(field_set_allocated:srvEbm.PauseResumeDataReq.cp_up_hdr)
}

// uint32 tgt_cell_id = 30;
inline void PauseResumeDataReq::clear_tgt_cell_id() {
  tgt_cell_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PauseResumeDataReq::_internal_tgt_cell_id() const {
  return tgt_cell_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PauseResumeDataReq::tgt_cell_id() const {
  // @@protoc_insertion_point(field_get:srvEbm.PauseResumeDataReq.tgt_cell_id)
  return _internal_tgt_cell_id();
}
inline void PauseResumeDataReq::_internal_set_tgt_cell_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tgt_cell_id_ = value;
}
inline void PauseResumeDataReq::set_tgt_cell_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tgt_cell_id(value);
  // @@protoc_insertion_point(field_set:srvEbm.PauseResumeDataReq.tgt_cell_id)
}

// uint32 new_rnti = 35;
inline void PauseResumeDataReq::clear_new_rnti() {
  new_rnti_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PauseResumeDataReq::_internal_new_rnti() const {
  return new_rnti_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PauseResumeDataReq::new_rnti() const {
  // @@protoc_insertion_point(field_get:srvEbm.PauseResumeDataReq.new_rnti)
  return _internal_new_rnti();
}
inline void PauseResumeDataReq::_internal_set_new_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  new_rnti_ = value;
}
inline void PauseResumeDataReq::set_new_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_new_rnti(value);
  // @@protoc_insertion_point(field_set:srvEbm.PauseResumeDataReq.new_rnti)
}

// bool is_pause = 40;
inline void PauseResumeDataReq::clear_is_pause() {
  is_pause_ = false;
}
inline bool PauseResumeDataReq::_internal_is_pause() const {
  return is_pause_;
}
inline bool PauseResumeDataReq::is_pause() const {
  // @@protoc_insertion_point(field_get:srvEbm.PauseResumeDataReq.is_pause)
  return _internal_is_pause();
}
inline void PauseResumeDataReq::_internal_set_is_pause(bool value) {
  
  is_pause_ = value;
}
inline void PauseResumeDataReq::set_is_pause(bool value) {
  _internal_set_is_pause(value);
  // @@protoc_insertion_point(field_set:srvEbm.PauseResumeDataReq.is_pause)
}

// .structure.HandoverType ho_type = 50;
inline void PauseResumeDataReq::clear_ho_type() {
  ho_type_ = 0;
}
inline ::structure::HandoverType PauseResumeDataReq::_internal_ho_type() const {
  return static_cast< ::structure::HandoverType >(ho_type_);
}
inline ::structure::HandoverType PauseResumeDataReq::ho_type() const {
  // @@protoc_insertion_point(field_get:srvEbm.PauseResumeDataReq.ho_type)
  return _internal_ho_type();
}
inline void PauseResumeDataReq::_internal_set_ho_type(::structure::HandoverType value) {
  
  ho_type_ = value;
}
inline void PauseResumeDataReq::set_ho_type(::structure::HandoverType value) {
  _internal_set_ho_type(value);
  // @@protoc_insertion_point(field_set:srvEbm.PauseResumeDataReq.ho_type)
}

// -------------------------------------------------------------------

// PDCPSduStatusReq

// .mhdr.MsgHdr hdr = 10;
inline bool PDCPSduStatusReq::_internal_has_hdr() const {
  return this != internal_default_instance() && hdr_ != nullptr;
}
inline bool PDCPSduStatusReq::has_hdr() const {
  return _internal_has_hdr();
}
inline const ::mhdr::MsgHdr& PDCPSduStatusReq::_internal_hdr() const {
  const ::mhdr::MsgHdr* p = hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mhdr::MsgHdr*>(
      &::mhdr::_MsgHdr_default_instance_);
}
inline const ::mhdr::MsgHdr& PDCPSduStatusReq::hdr() const {
  // @@protoc_insertion_point(field_get:srvEbm.PDCPSduStatusReq.hdr)
  return _internal_hdr();
}
inline void PDCPSduStatusReq::unsafe_arena_set_allocated_hdr(
    ::mhdr::MsgHdr* hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  hdr_ = hdr;
  if (hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvEbm.PDCPSduStatusReq.hdr)
}
inline ::mhdr::MsgHdr* PDCPSduStatusReq::release_hdr() {
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mhdr::MsgHdr* PDCPSduStatusReq::unsafe_arena_release_hdr() {
  // @@protoc_insertion_point(field_release:srvEbm.PDCPSduStatusReq.hdr)
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  return temp;
}
inline ::mhdr::MsgHdr* PDCPSduStatusReq::_internal_mutable_hdr() {
  
  if (hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::mhdr::MsgHdr>(GetArena());
    hdr_ = p;
  }
  return hdr_;
}
inline ::mhdr::MsgHdr* PDCPSduStatusReq::mutable_hdr() {
  // @@protoc_insertion_point(field_mutable:srvEbm.PDCPSduStatusReq.hdr)
  return _internal_mutable_hdr();
}
inline void PDCPSduStatusReq::set_allocated_hdr(::mhdr::MsgHdr* hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  if (hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr)->GetArena();
    if (message_arena != submessage_arena) {
      hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hdr, submessage_arena);
    }
    
  } else {
    
  }
  hdr_ = hdr;
  // @@protoc_insertion_point(field_set_allocated:srvEbm.PDCPSduStatusReq.hdr)
}

// .structure.CpUpHdr cp_up_hdr = 20;
inline bool PDCPSduStatusReq::_internal_has_cp_up_hdr() const {
  return this != internal_default_instance() && cp_up_hdr_ != nullptr;
}
inline bool PDCPSduStatusReq::has_cp_up_hdr() const {
  return _internal_has_cp_up_hdr();
}
inline const ::structure::CpUpHdr& PDCPSduStatusReq::_internal_cp_up_hdr() const {
  const ::structure::CpUpHdr* p = cp_up_hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::structure::CpUpHdr*>(
      &::structure::_CpUpHdr_default_instance_);
}
inline const ::structure::CpUpHdr& PDCPSduStatusReq::cp_up_hdr() const {
  // @@protoc_insertion_point(field_get:srvEbm.PDCPSduStatusReq.cp_up_hdr)
  return _internal_cp_up_hdr();
}
inline void PDCPSduStatusReq::unsafe_arena_set_allocated_cp_up_hdr(
    ::structure::CpUpHdr* cp_up_hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr_);
  }
  cp_up_hdr_ = cp_up_hdr;
  if (cp_up_hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvEbm.PDCPSduStatusReq.cp_up_hdr)
}
inline ::structure::CpUpHdr* PDCPSduStatusReq::release_cp_up_hdr() {
  
  ::structure::CpUpHdr* temp = cp_up_hdr_;
  cp_up_hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::structure::CpUpHdr* PDCPSduStatusReq::unsafe_arena_release_cp_up_hdr() {
  // @@protoc_insertion_point(field_release:srvEbm.PDCPSduStatusReq.cp_up_hdr)
  
  ::structure::CpUpHdr* temp = cp_up_hdr_;
  cp_up_hdr_ = nullptr;
  return temp;
}
inline ::structure::CpUpHdr* PDCPSduStatusReq::_internal_mutable_cp_up_hdr() {
  
  if (cp_up_hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::structure::CpUpHdr>(GetArena());
    cp_up_hdr_ = p;
  }
  return cp_up_hdr_;
}
inline ::structure::CpUpHdr* PDCPSduStatusReq::mutable_cp_up_hdr() {
  // @@protoc_insertion_point(field_mutable:srvEbm.PDCPSduStatusReq.cp_up_hdr)
  return _internal_mutable_cp_up_hdr();
}
inline void PDCPSduStatusReq::set_allocated_cp_up_hdr(::structure::CpUpHdr* cp_up_hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr_);
  }
  if (cp_up_hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr)->GetArena();
    if (message_arena != submessage_arena) {
      cp_up_hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cp_up_hdr, submessage_arena);
    }
    
  } else {
    
  }
  cp_up_hdr_ = cp_up_hdr;
  // @@protoc_insertion_point(field_set_allocated:srvEbm.PDCPSduStatusReq.cp_up_hdr)
}

// -------------------------------------------------------------------

// DataForwardingReq

// .mhdr.MsgHdr hdr = 10;
inline bool DataForwardingReq::_internal_has_hdr() const {
  return this != internal_default_instance() && hdr_ != nullptr;
}
inline bool DataForwardingReq::has_hdr() const {
  return _internal_has_hdr();
}
inline const ::mhdr::MsgHdr& DataForwardingReq::_internal_hdr() const {
  const ::mhdr::MsgHdr* p = hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mhdr::MsgHdr*>(
      &::mhdr::_MsgHdr_default_instance_);
}
inline const ::mhdr::MsgHdr& DataForwardingReq::hdr() const {
  // @@protoc_insertion_point(field_get:srvEbm.DataForwardingReq.hdr)
  return _internal_hdr();
}
inline void DataForwardingReq::unsafe_arena_set_allocated_hdr(
    ::mhdr::MsgHdr* hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  hdr_ = hdr;
  if (hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvEbm.DataForwardingReq.hdr)
}
inline ::mhdr::MsgHdr* DataForwardingReq::release_hdr() {
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mhdr::MsgHdr* DataForwardingReq::unsafe_arena_release_hdr() {
  // @@protoc_insertion_point(field_release:srvEbm.DataForwardingReq.hdr)
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  return temp;
}
inline ::mhdr::MsgHdr* DataForwardingReq::_internal_mutable_hdr() {
  
  if (hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::mhdr::MsgHdr>(GetArena());
    hdr_ = p;
  }
  return hdr_;
}
inline ::mhdr::MsgHdr* DataForwardingReq::mutable_hdr() {
  // @@protoc_insertion_point(field_mutable:srvEbm.DataForwardingReq.hdr)
  return _internal_mutable_hdr();
}
inline void DataForwardingReq::set_allocated_hdr(::mhdr::MsgHdr* hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  if (hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr)->GetArena();
    if (message_arena != submessage_arena) {
      hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hdr, submessage_arena);
    }
    
  } else {
    
  }
  hdr_ = hdr;
  // @@protoc_insertion_point(field_set_allocated:srvEbm.DataForwardingReq.hdr)
}

// .structure.CpUpHdr cp_up_hdr = 20;
inline bool DataForwardingReq::_internal_has_cp_up_hdr() const {
  return this != internal_default_instance() && cp_up_hdr_ != nullptr;
}
inline bool DataForwardingReq::has_cp_up_hdr() const {
  return _internal_has_cp_up_hdr();
}
inline const ::structure::CpUpHdr& DataForwardingReq::_internal_cp_up_hdr() const {
  const ::structure::CpUpHdr* p = cp_up_hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::structure::CpUpHdr*>(
      &::structure::_CpUpHdr_default_instance_);
}
inline const ::structure::CpUpHdr& DataForwardingReq::cp_up_hdr() const {
  // @@protoc_insertion_point(field_get:srvEbm.DataForwardingReq.cp_up_hdr)
  return _internal_cp_up_hdr();
}
inline void DataForwardingReq::unsafe_arena_set_allocated_cp_up_hdr(
    ::structure::CpUpHdr* cp_up_hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr_);
  }
  cp_up_hdr_ = cp_up_hdr;
  if (cp_up_hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvEbm.DataForwardingReq.cp_up_hdr)
}
inline ::structure::CpUpHdr* DataForwardingReq::release_cp_up_hdr() {
  
  ::structure::CpUpHdr* temp = cp_up_hdr_;
  cp_up_hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::structure::CpUpHdr* DataForwardingReq::unsafe_arena_release_cp_up_hdr() {
  // @@protoc_insertion_point(field_release:srvEbm.DataForwardingReq.cp_up_hdr)
  
  ::structure::CpUpHdr* temp = cp_up_hdr_;
  cp_up_hdr_ = nullptr;
  return temp;
}
inline ::structure::CpUpHdr* DataForwardingReq::_internal_mutable_cp_up_hdr() {
  
  if (cp_up_hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::structure::CpUpHdr>(GetArena());
    cp_up_hdr_ = p;
  }
  return cp_up_hdr_;
}
inline ::structure::CpUpHdr* DataForwardingReq::mutable_cp_up_hdr() {
  // @@protoc_insertion_point(field_mutable:srvEbm.DataForwardingReq.cp_up_hdr)
  return _internal_mutable_cp_up_hdr();
}
inline void DataForwardingReq::set_allocated_cp_up_hdr(::structure::CpUpHdr* cp_up_hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr_);
  }
  if (cp_up_hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr)->GetArena();
    if (message_arena != submessage_arena) {
      cp_up_hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cp_up_hdr, submessage_arena);
    }
    
  } else {
    
  }
  cp_up_hdr_ = cp_up_hdr;
  // @@protoc_insertion_point(field_set_allocated:srvEbm.DataForwardingReq.cp_up_hdr)
}

// bool is_ul_data_fwd_Req = 30;
inline void DataForwardingReq::clear_is_ul_data_fwd_req() {
  is_ul_data_fwd_req_ = false;
}
inline bool DataForwardingReq::_internal_is_ul_data_fwd_req() const {
  return is_ul_data_fwd_req_;
}
inline bool DataForwardingReq::is_ul_data_fwd_req() const {
  // @@protoc_insertion_point(field_get:srvEbm.DataForwardingReq.is_ul_data_fwd_Req)
  return _internal_is_ul_data_fwd_req();
}
inline void DataForwardingReq::_internal_set_is_ul_data_fwd_req(bool value) {
  
  is_ul_data_fwd_req_ = value;
}
inline void DataForwardingReq::set_is_ul_data_fwd_req(bool value) {
  _internal_set_is_ul_data_fwd_req(value);
  // @@protoc_insertion_point(field_set:srvEbm.DataForwardingReq.is_ul_data_fwd_Req)
}

// .structure.HandoverType handover_type = 40;
inline void DataForwardingReq::clear_handover_type() {
  handover_type_ = 0;
}
inline ::structure::HandoverType DataForwardingReq::_internal_handover_type() const {
  return static_cast< ::structure::HandoverType >(handover_type_);
}
inline ::structure::HandoverType DataForwardingReq::handover_type() const {
  // @@protoc_insertion_point(field_get:srvEbm.DataForwardingReq.handover_type)
  return _internal_handover_type();
}
inline void DataForwardingReq::_internal_set_handover_type(::structure::HandoverType value) {
  
  handover_type_ = value;
}
inline void DataForwardingReq::set_handover_type(::structure::HandoverType value) {
  _internal_set_handover_type(value);
  // @@protoc_insertion_point(field_set:srvEbm.DataForwardingReq.handover_type)
}

// -------------------------------------------------------------------

// UeInactivityTimerReq

// .mhdr.MsgHdr hdr = 10;
inline bool UeInactivityTimerReq::_internal_has_hdr() const {
  return this != internal_default_instance() && hdr_ != nullptr;
}
inline bool UeInactivityTimerReq::has_hdr() const {
  return _internal_has_hdr();
}
inline const ::mhdr::MsgHdr& UeInactivityTimerReq::_internal_hdr() const {
  const ::mhdr::MsgHdr* p = hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mhdr::MsgHdr*>(
      &::mhdr::_MsgHdr_default_instance_);
}
inline const ::mhdr::MsgHdr& UeInactivityTimerReq::hdr() const {
  // @@protoc_insertion_point(field_get:srvEbm.UeInactivityTimerReq.hdr)
  return _internal_hdr();
}
inline void UeInactivityTimerReq::unsafe_arena_set_allocated_hdr(
    ::mhdr::MsgHdr* hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  hdr_ = hdr;
  if (hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvEbm.UeInactivityTimerReq.hdr)
}
inline ::mhdr::MsgHdr* UeInactivityTimerReq::release_hdr() {
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mhdr::MsgHdr* UeInactivityTimerReq::unsafe_arena_release_hdr() {
  // @@protoc_insertion_point(field_release:srvEbm.UeInactivityTimerReq.hdr)
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  return temp;
}
inline ::mhdr::MsgHdr* UeInactivityTimerReq::_internal_mutable_hdr() {
  
  if (hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::mhdr::MsgHdr>(GetArena());
    hdr_ = p;
  }
  return hdr_;
}
inline ::mhdr::MsgHdr* UeInactivityTimerReq::mutable_hdr() {
  // @@protoc_insertion_point(field_mutable:srvEbm.UeInactivityTimerReq.hdr)
  return _internal_mutable_hdr();
}
inline void UeInactivityTimerReq::set_allocated_hdr(::mhdr::MsgHdr* hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  if (hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr)->GetArena();
    if (message_arena != submessage_arena) {
      hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hdr, submessage_arena);
    }
    
  } else {
    
  }
  hdr_ = hdr;
  // @@protoc_insertion_point(field_set_allocated:srvEbm.UeInactivityTimerReq.hdr)
}

// .structure.CpUpHdr cp_up_hdr = 20;
inline bool UeInactivityTimerReq::_internal_has_cp_up_hdr() const {
  return this != internal_default_instance() && cp_up_hdr_ != nullptr;
}
inline bool UeInactivityTimerReq::has_cp_up_hdr() const {
  return _internal_has_cp_up_hdr();
}
inline const ::structure::CpUpHdr& UeInactivityTimerReq::_internal_cp_up_hdr() const {
  const ::structure::CpUpHdr* p = cp_up_hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::structure::CpUpHdr*>(
      &::structure::_CpUpHdr_default_instance_);
}
inline const ::structure::CpUpHdr& UeInactivityTimerReq::cp_up_hdr() const {
  // @@protoc_insertion_point(field_get:srvEbm.UeInactivityTimerReq.cp_up_hdr)
  return _internal_cp_up_hdr();
}
inline void UeInactivityTimerReq::unsafe_arena_set_allocated_cp_up_hdr(
    ::structure::CpUpHdr* cp_up_hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr_);
  }
  cp_up_hdr_ = cp_up_hdr;
  if (cp_up_hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvEbm.UeInactivityTimerReq.cp_up_hdr)
}
inline ::structure::CpUpHdr* UeInactivityTimerReq::release_cp_up_hdr() {
  
  ::structure::CpUpHdr* temp = cp_up_hdr_;
  cp_up_hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::structure::CpUpHdr* UeInactivityTimerReq::unsafe_arena_release_cp_up_hdr() {
  // @@protoc_insertion_point(field_release:srvEbm.UeInactivityTimerReq.cp_up_hdr)
  
  ::structure::CpUpHdr* temp = cp_up_hdr_;
  cp_up_hdr_ = nullptr;
  return temp;
}
inline ::structure::CpUpHdr* UeInactivityTimerReq::_internal_mutable_cp_up_hdr() {
  
  if (cp_up_hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::structure::CpUpHdr>(GetArena());
    cp_up_hdr_ = p;
  }
  return cp_up_hdr_;
}
inline ::structure::CpUpHdr* UeInactivityTimerReq::mutable_cp_up_hdr() {
  // @@protoc_insertion_point(field_mutable:srvEbm.UeInactivityTimerReq.cp_up_hdr)
  return _internal_mutable_cp_up_hdr();
}
inline void UeInactivityTimerReq::set_allocated_cp_up_hdr(::structure::CpUpHdr* cp_up_hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr_);
  }
  if (cp_up_hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr)->GetArena();
    if (message_arena != submessage_arena) {
      cp_up_hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cp_up_hdr, submessage_arena);
    }
    
  } else {
    
  }
  cp_up_hdr_ = cp_up_hdr;
  // @@protoc_insertion_point(field_set_allocated:srvEbm.UeInactivityTimerReq.cp_up_hdr)
}

// -------------------------------------------------------------------

// AddPDCPConfigReq

// .mhdr.MsgHdr hdr = 10;
inline bool AddPDCPConfigReq::_internal_has_hdr() const {
  return this != internal_default_instance() && hdr_ != nullptr;
}
inline bool AddPDCPConfigReq::has_hdr() const {
  return _internal_has_hdr();
}
inline const ::mhdr::MsgHdr& AddPDCPConfigReq::_internal_hdr() const {
  const ::mhdr::MsgHdr* p = hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mhdr::MsgHdr*>(
      &::mhdr::_MsgHdr_default_instance_);
}
inline const ::mhdr::MsgHdr& AddPDCPConfigReq::hdr() const {
  // @@protoc_insertion_point(field_get:srvEbm.AddPDCPConfigReq.hdr)
  return _internal_hdr();
}
inline void AddPDCPConfigReq::unsafe_arena_set_allocated_hdr(
    ::mhdr::MsgHdr* hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  hdr_ = hdr;
  if (hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvEbm.AddPDCPConfigReq.hdr)
}
inline ::mhdr::MsgHdr* AddPDCPConfigReq::release_hdr() {
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mhdr::MsgHdr* AddPDCPConfigReq::unsafe_arena_release_hdr() {
  // @@protoc_insertion_point(field_release:srvEbm.AddPDCPConfigReq.hdr)
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  return temp;
}
inline ::mhdr::MsgHdr* AddPDCPConfigReq::_internal_mutable_hdr() {
  
  if (hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::mhdr::MsgHdr>(GetArena());
    hdr_ = p;
  }
  return hdr_;
}
inline ::mhdr::MsgHdr* AddPDCPConfigReq::mutable_hdr() {
  // @@protoc_insertion_point(field_mutable:srvEbm.AddPDCPConfigReq.hdr)
  return _internal_mutable_hdr();
}
inline void AddPDCPConfigReq::set_allocated_hdr(::mhdr::MsgHdr* hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  if (hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr)->GetArena();
    if (message_arena != submessage_arena) {
      hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hdr, submessage_arena);
    }
    
  } else {
    
  }
  hdr_ = hdr;
  // @@protoc_insertion_point(field_set_allocated:srvEbm.AddPDCPConfigReq.hdr)
}

// .structure.CpUpHdr cp_up_hdr = 20;
inline bool AddPDCPConfigReq::_internal_has_cp_up_hdr() const {
  return this != internal_default_instance() && cp_up_hdr_ != nullptr;
}
inline bool AddPDCPConfigReq::has_cp_up_hdr() const {
  return _internal_has_cp_up_hdr();
}
inline const ::structure::CpUpHdr& AddPDCPConfigReq::_internal_cp_up_hdr() const {
  const ::structure::CpUpHdr* p = cp_up_hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::structure::CpUpHdr*>(
      &::structure::_CpUpHdr_default_instance_);
}
inline const ::structure::CpUpHdr& AddPDCPConfigReq::cp_up_hdr() const {
  // @@protoc_insertion_point(field_get:srvEbm.AddPDCPConfigReq.cp_up_hdr)
  return _internal_cp_up_hdr();
}
inline void AddPDCPConfigReq::unsafe_arena_set_allocated_cp_up_hdr(
    ::structure::CpUpHdr* cp_up_hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr_);
  }
  cp_up_hdr_ = cp_up_hdr;
  if (cp_up_hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvEbm.AddPDCPConfigReq.cp_up_hdr)
}
inline ::structure::CpUpHdr* AddPDCPConfigReq::release_cp_up_hdr() {
  
  ::structure::CpUpHdr* temp = cp_up_hdr_;
  cp_up_hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::structure::CpUpHdr* AddPDCPConfigReq::unsafe_arena_release_cp_up_hdr() {
  // @@protoc_insertion_point(field_release:srvEbm.AddPDCPConfigReq.cp_up_hdr)
  
  ::structure::CpUpHdr* temp = cp_up_hdr_;
  cp_up_hdr_ = nullptr;
  return temp;
}
inline ::structure::CpUpHdr* AddPDCPConfigReq::_internal_mutable_cp_up_hdr() {
  
  if (cp_up_hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::structure::CpUpHdr>(GetArena());
    cp_up_hdr_ = p;
  }
  return cp_up_hdr_;
}
inline ::structure::CpUpHdr* AddPDCPConfigReq::mutable_cp_up_hdr() {
  // @@protoc_insertion_point(field_mutable:srvEbm.AddPDCPConfigReq.cp_up_hdr)
  return _internal_mutable_cp_up_hdr();
}
inline void AddPDCPConfigReq::set_allocated_cp_up_hdr(::structure::CpUpHdr* cp_up_hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr_);
  }
  if (cp_up_hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr)->GetArena();
    if (message_arena != submessage_arena) {
      cp_up_hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cp_up_hdr, submessage_arena);
    }
    
  } else {
    
  }
  cp_up_hdr_ = cp_up_hdr;
  // @@protoc_insertion_point(field_set_allocated:srvEbm.AddPDCPConfigReq.cp_up_hdr)
}

// bool is_ho = 30;
inline void AddPDCPConfigReq::clear_is_ho() {
  is_ho_ = false;
}
inline bool AddPDCPConfigReq::_internal_is_ho() const {
  return is_ho_;
}
inline bool AddPDCPConfigReq::is_ho() const {
  // @@protoc_insertion_point(field_get:srvEbm.AddPDCPConfigReq.is_ho)
  return _internal_is_ho();
}
inline void AddPDCPConfigReq::_internal_set_is_ho(bool value) {
  
  is_ho_ = value;
}
inline void AddPDCPConfigReq::set_is_ho(bool value) {
  _internal_set_is_ho(value);
  // @@protoc_insertion_point(field_set:srvEbm.AddPDCPConfigReq.is_ho)
}

// .structure.SecurityConfig security_config = 31;
inline bool AddPDCPConfigReq::_internal_has_security_config() const {
  return this != internal_default_instance() && security_config_ != nullptr;
}
inline bool AddPDCPConfigReq::has_security_config() const {
  return _internal_has_security_config();
}
inline const ::structure::SecurityConfig& AddPDCPConfigReq::_internal_security_config() const {
  const ::structure::SecurityConfig* p = security_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::structure::SecurityConfig*>(
      &::structure::_SecurityConfig_default_instance_);
}
inline const ::structure::SecurityConfig& AddPDCPConfigReq::security_config() const {
  // @@protoc_insertion_point(field_get:srvEbm.AddPDCPConfigReq.security_config)
  return _internal_security_config();
}
inline void AddPDCPConfigReq::unsafe_arena_set_allocated_security_config(
    ::structure::SecurityConfig* security_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(security_config_);
  }
  security_config_ = security_config;
  if (security_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvEbm.AddPDCPConfigReq.security_config)
}
inline ::structure::SecurityConfig* AddPDCPConfigReq::release_security_config() {
  
  ::structure::SecurityConfig* temp = security_config_;
  security_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::structure::SecurityConfig* AddPDCPConfigReq::unsafe_arena_release_security_config() {
  // @@protoc_insertion_point(field_release:srvEbm.AddPDCPConfigReq.security_config)
  
  ::structure::SecurityConfig* temp = security_config_;
  security_config_ = nullptr;
  return temp;
}
inline ::structure::SecurityConfig* AddPDCPConfigReq::_internal_mutable_security_config() {
  
  if (security_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::structure::SecurityConfig>(GetArena());
    security_config_ = p;
  }
  return security_config_;
}
inline ::structure::SecurityConfig* AddPDCPConfigReq::mutable_security_config() {
  // @@protoc_insertion_point(field_mutable:srvEbm.AddPDCPConfigReq.security_config)
  return _internal_mutable_security_config();
}
inline void AddPDCPConfigReq::set_allocated_security_config(::structure::SecurityConfig* security_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(security_config_);
  }
  if (security_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(security_config)->GetArena();
    if (message_arena != submessage_arena) {
      security_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, security_config, submessage_arena);
    }
    
  } else {
    
  }
  security_config_ = security_config;
  // @@protoc_insertion_point(field_set_allocated:srvEbm.AddPDCPConfigReq.security_config)
}

// uint32 num_ent = 40;
inline void AddPDCPConfigReq::clear_num_ent() {
  num_ent_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddPDCPConfigReq::_internal_num_ent() const {
  return num_ent_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddPDCPConfigReq::num_ent() const {
  // @@protoc_insertion_point(field_get:srvEbm.AddPDCPConfigReq.num_ent)
  return _internal_num_ent();
}
inline void AddPDCPConfigReq::_internal_set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_ent_ = value;
}
inline void AddPDCPConfigReq::set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_ent(value);
  // @@protoc_insertion_point(field_set:srvEbm.AddPDCPConfigReq.num_ent)
}

// uint32 rlc_ul_sap_id = 43;
inline void AddPDCPConfigReq::clear_rlc_ul_sap_id() {
  rlc_ul_sap_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddPDCPConfigReq::_internal_rlc_ul_sap_id() const {
  return rlc_ul_sap_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddPDCPConfigReq::rlc_ul_sap_id() const {
  // @@protoc_insertion_point(field_get:srvEbm.AddPDCPConfigReq.rlc_ul_sap_id)
  return _internal_rlc_ul_sap_id();
}
inline void AddPDCPConfigReq::_internal_set_rlc_ul_sap_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rlc_ul_sap_id_ = value;
}
inline void AddPDCPConfigReq::set_rlc_ul_sap_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rlc_ul_sap_id(value);
  // @@protoc_insertion_point(field_set:srvEbm.AddPDCPConfigReq.rlc_ul_sap_id)
}

// uint32 rlc_dl_sap_id = 44;
inline void AddPDCPConfigReq::clear_rlc_dl_sap_id() {
  rlc_dl_sap_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddPDCPConfigReq::_internal_rlc_dl_sap_id() const {
  return rlc_dl_sap_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddPDCPConfigReq::rlc_dl_sap_id() const {
  // @@protoc_insertion_point(field_get:srvEbm.AddPDCPConfigReq.rlc_dl_sap_id)
  return _internal_rlc_dl_sap_id();
}
inline void AddPDCPConfigReq::_internal_set_rlc_dl_sap_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rlc_dl_sap_id_ = value;
}
inline void AddPDCPConfigReq::set_rlc_dl_sap_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rlc_dl_sap_id(value);
  // @@protoc_insertion_point(field_set:srvEbm.AddPDCPConfigReq.rlc_dl_sap_id)
}

// repeated .structure.PDCPAddCfgEnt config_list = 50;
inline int AddPDCPConfigReq::_internal_config_list_size() const {
  return config_list_.size();
}
inline int AddPDCPConfigReq::config_list_size() const {
  return _internal_config_list_size();
}
inline ::structure::PDCPAddCfgEnt* AddPDCPConfigReq::mutable_config_list(int index) {
  // @@protoc_insertion_point(field_mutable:srvEbm.AddPDCPConfigReq.config_list)
  return config_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::PDCPAddCfgEnt >*
AddPDCPConfigReq::mutable_config_list() {
  // @@protoc_insertion_point(field_mutable_list:srvEbm.AddPDCPConfigReq.config_list)
  return &config_list_;
}
inline const ::structure::PDCPAddCfgEnt& AddPDCPConfigReq::_internal_config_list(int index) const {
  return config_list_.Get(index);
}
inline const ::structure::PDCPAddCfgEnt& AddPDCPConfigReq::config_list(int index) const {
  // @@protoc_insertion_point(field_get:srvEbm.AddPDCPConfigReq.config_list)
  return _internal_config_list(index);
}
inline ::structure::PDCPAddCfgEnt* AddPDCPConfigReq::_internal_add_config_list() {
  return config_list_.Add();
}
inline ::structure::PDCPAddCfgEnt* AddPDCPConfigReq::add_config_list() {
  // @@protoc_insertion_point(field_add:srvEbm.AddPDCPConfigReq.config_list)
  return _internal_add_config_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::PDCPAddCfgEnt >&
AddPDCPConfigReq::config_list() const {
  // @@protoc_insertion_point(field_list:srvEbm.AddPDCPConfigReq.config_list)
  return config_list_;
}

// -------------------------------------------------------------------

// ModifyPDCPConfigReq

// .mhdr.MsgHdr hdr = 10;
inline bool ModifyPDCPConfigReq::_internal_has_hdr() const {
  return this != internal_default_instance() && hdr_ != nullptr;
}
inline bool ModifyPDCPConfigReq::has_hdr() const {
  return _internal_has_hdr();
}
inline const ::mhdr::MsgHdr& ModifyPDCPConfigReq::_internal_hdr() const {
  const ::mhdr::MsgHdr* p = hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mhdr::MsgHdr*>(
      &::mhdr::_MsgHdr_default_instance_);
}
inline const ::mhdr::MsgHdr& ModifyPDCPConfigReq::hdr() const {
  // @@protoc_insertion_point(field_get:srvEbm.ModifyPDCPConfigReq.hdr)
  return _internal_hdr();
}
inline void ModifyPDCPConfigReq::unsafe_arena_set_allocated_hdr(
    ::mhdr::MsgHdr* hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  hdr_ = hdr;
  if (hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvEbm.ModifyPDCPConfigReq.hdr)
}
inline ::mhdr::MsgHdr* ModifyPDCPConfigReq::release_hdr() {
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mhdr::MsgHdr* ModifyPDCPConfigReq::unsafe_arena_release_hdr() {
  // @@protoc_insertion_point(field_release:srvEbm.ModifyPDCPConfigReq.hdr)
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  return temp;
}
inline ::mhdr::MsgHdr* ModifyPDCPConfigReq::_internal_mutable_hdr() {
  
  if (hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::mhdr::MsgHdr>(GetArena());
    hdr_ = p;
  }
  return hdr_;
}
inline ::mhdr::MsgHdr* ModifyPDCPConfigReq::mutable_hdr() {
  // @@protoc_insertion_point(field_mutable:srvEbm.ModifyPDCPConfigReq.hdr)
  return _internal_mutable_hdr();
}
inline void ModifyPDCPConfigReq::set_allocated_hdr(::mhdr::MsgHdr* hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  if (hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr)->GetArena();
    if (message_arena != submessage_arena) {
      hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hdr, submessage_arena);
    }
    
  } else {
    
  }
  hdr_ = hdr;
  // @@protoc_insertion_point(field_set_allocated:srvEbm.ModifyPDCPConfigReq.hdr)
}

// .structure.CpUpHdr cp_up_hdr = 20;
inline bool ModifyPDCPConfigReq::_internal_has_cp_up_hdr() const {
  return this != internal_default_instance() && cp_up_hdr_ != nullptr;
}
inline bool ModifyPDCPConfigReq::has_cp_up_hdr() const {
  return _internal_has_cp_up_hdr();
}
inline const ::structure::CpUpHdr& ModifyPDCPConfigReq::_internal_cp_up_hdr() const {
  const ::structure::CpUpHdr* p = cp_up_hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::structure::CpUpHdr*>(
      &::structure::_CpUpHdr_default_instance_);
}
inline const ::structure::CpUpHdr& ModifyPDCPConfigReq::cp_up_hdr() const {
  // @@protoc_insertion_point(field_get:srvEbm.ModifyPDCPConfigReq.cp_up_hdr)
  return _internal_cp_up_hdr();
}
inline void ModifyPDCPConfigReq::unsafe_arena_set_allocated_cp_up_hdr(
    ::structure::CpUpHdr* cp_up_hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr_);
  }
  cp_up_hdr_ = cp_up_hdr;
  if (cp_up_hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvEbm.ModifyPDCPConfigReq.cp_up_hdr)
}
inline ::structure::CpUpHdr* ModifyPDCPConfigReq::release_cp_up_hdr() {
  
  ::structure::CpUpHdr* temp = cp_up_hdr_;
  cp_up_hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::structure::CpUpHdr* ModifyPDCPConfigReq::unsafe_arena_release_cp_up_hdr() {
  // @@protoc_insertion_point(field_release:srvEbm.ModifyPDCPConfigReq.cp_up_hdr)
  
  ::structure::CpUpHdr* temp = cp_up_hdr_;
  cp_up_hdr_ = nullptr;
  return temp;
}
inline ::structure::CpUpHdr* ModifyPDCPConfigReq::_internal_mutable_cp_up_hdr() {
  
  if (cp_up_hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::structure::CpUpHdr>(GetArena());
    cp_up_hdr_ = p;
  }
  return cp_up_hdr_;
}
inline ::structure::CpUpHdr* ModifyPDCPConfigReq::mutable_cp_up_hdr() {
  // @@protoc_insertion_point(field_mutable:srvEbm.ModifyPDCPConfigReq.cp_up_hdr)
  return _internal_mutable_cp_up_hdr();
}
inline void ModifyPDCPConfigReq::set_allocated_cp_up_hdr(::structure::CpUpHdr* cp_up_hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr_);
  }
  if (cp_up_hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr)->GetArena();
    if (message_arena != submessage_arena) {
      cp_up_hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cp_up_hdr, submessage_arena);
    }
    
  } else {
    
  }
  cp_up_hdr_ = cp_up_hdr;
  // @@protoc_insertion_point(field_set_allocated:srvEbm.ModifyPDCPConfigReq.cp_up_hdr)
}

// bool is_ho = 30;
inline void ModifyPDCPConfigReq::clear_is_ho() {
  is_ho_ = false;
}
inline bool ModifyPDCPConfigReq::_internal_is_ho() const {
  return is_ho_;
}
inline bool ModifyPDCPConfigReq::is_ho() const {
  // @@protoc_insertion_point(field_get:srvEbm.ModifyPDCPConfigReq.is_ho)
  return _internal_is_ho();
}
inline void ModifyPDCPConfigReq::_internal_set_is_ho(bool value) {
  
  is_ho_ = value;
}
inline void ModifyPDCPConfigReq::set_is_ho(bool value) {
  _internal_set_is_ho(value);
  // @@protoc_insertion_point(field_set:srvEbm.ModifyPDCPConfigReq.is_ho)
}

// .structure.SecurityConfig security_config = 31;
inline bool ModifyPDCPConfigReq::_internal_has_security_config() const {
  return this != internal_default_instance() && security_config_ != nullptr;
}
inline bool ModifyPDCPConfigReq::has_security_config() const {
  return _internal_has_security_config();
}
inline const ::structure::SecurityConfig& ModifyPDCPConfigReq::_internal_security_config() const {
  const ::structure::SecurityConfig* p = security_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::structure::SecurityConfig*>(
      &::structure::_SecurityConfig_default_instance_);
}
inline const ::structure::SecurityConfig& ModifyPDCPConfigReq::security_config() const {
  // @@protoc_insertion_point(field_get:srvEbm.ModifyPDCPConfigReq.security_config)
  return _internal_security_config();
}
inline void ModifyPDCPConfigReq::unsafe_arena_set_allocated_security_config(
    ::structure::SecurityConfig* security_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(security_config_);
  }
  security_config_ = security_config;
  if (security_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvEbm.ModifyPDCPConfigReq.security_config)
}
inline ::structure::SecurityConfig* ModifyPDCPConfigReq::release_security_config() {
  
  ::structure::SecurityConfig* temp = security_config_;
  security_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::structure::SecurityConfig* ModifyPDCPConfigReq::unsafe_arena_release_security_config() {
  // @@protoc_insertion_point(field_release:srvEbm.ModifyPDCPConfigReq.security_config)
  
  ::structure::SecurityConfig* temp = security_config_;
  security_config_ = nullptr;
  return temp;
}
inline ::structure::SecurityConfig* ModifyPDCPConfigReq::_internal_mutable_security_config() {
  
  if (security_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::structure::SecurityConfig>(GetArena());
    security_config_ = p;
  }
  return security_config_;
}
inline ::structure::SecurityConfig* ModifyPDCPConfigReq::mutable_security_config() {
  // @@protoc_insertion_point(field_mutable:srvEbm.ModifyPDCPConfigReq.security_config)
  return _internal_mutable_security_config();
}
inline void ModifyPDCPConfigReq::set_allocated_security_config(::structure::SecurityConfig* security_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(security_config_);
  }
  if (security_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(security_config)->GetArena();
    if (message_arena != submessage_arena) {
      security_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, security_config, submessage_arena);
    }
    
  } else {
    
  }
  security_config_ = security_config;
  // @@protoc_insertion_point(field_set_allocated:srvEbm.ModifyPDCPConfigReq.security_config)
}

// uint32 num_ent = 40;
inline void ModifyPDCPConfigReq::clear_num_ent() {
  num_ent_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModifyPDCPConfigReq::_internal_num_ent() const {
  return num_ent_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModifyPDCPConfigReq::num_ent() const {
  // @@protoc_insertion_point(field_get:srvEbm.ModifyPDCPConfigReq.num_ent)
  return _internal_num_ent();
}
inline void ModifyPDCPConfigReq::_internal_set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_ent_ = value;
}
inline void ModifyPDCPConfigReq::set_num_ent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_ent(value);
  // @@protoc_insertion_point(field_set:srvEbm.ModifyPDCPConfigReq.num_ent)
}

// uint32 new_cp_ue_id = 43;
inline void ModifyPDCPConfigReq::clear_new_cp_ue_id() {
  new_cp_ue_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModifyPDCPConfigReq::_internal_new_cp_ue_id() const {
  return new_cp_ue_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModifyPDCPConfigReq::new_cp_ue_id() const {
  // @@protoc_insertion_point(field_get:srvEbm.ModifyPDCPConfigReq.new_cp_ue_id)
  return _internal_new_cp_ue_id();
}
inline void ModifyPDCPConfigReq::_internal_set_new_cp_ue_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  new_cp_ue_id_ = value;
}
inline void ModifyPDCPConfigReq::set_new_cp_ue_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_new_cp_ue_id(value);
  // @@protoc_insertion_point(field_set:srvEbm.ModifyPDCPConfigReq.new_cp_ue_id)
}

// uint32 new_cell_id = 44;
inline void ModifyPDCPConfigReq::clear_new_cell_id() {
  new_cell_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModifyPDCPConfigReq::_internal_new_cell_id() const {
  return new_cell_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModifyPDCPConfigReq::new_cell_id() const {
  // @@protoc_insertion_point(field_get:srvEbm.ModifyPDCPConfigReq.new_cell_id)
  return _internal_new_cell_id();
}
inline void ModifyPDCPConfigReq::_internal_set_new_cell_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  new_cell_id_ = value;
}
inline void ModifyPDCPConfigReq::set_new_cell_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_new_cell_id(value);
  // @@protoc_insertion_point(field_set:srvEbm.ModifyPDCPConfigReq.new_cell_id)
}

// repeated .structure.PDCPModCfgEnt config_list = 50;
inline int ModifyPDCPConfigReq::_internal_config_list_size() const {
  return config_list_.size();
}
inline int ModifyPDCPConfigReq::config_list_size() const {
  return _internal_config_list_size();
}
inline ::structure::PDCPModCfgEnt* ModifyPDCPConfigReq::mutable_config_list(int index) {
  // @@protoc_insertion_point(field_mutable:srvEbm.ModifyPDCPConfigReq.config_list)
  return config_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::PDCPModCfgEnt >*
ModifyPDCPConfigReq::mutable_config_list() {
  // @@protoc_insertion_point(field_mutable_list:srvEbm.ModifyPDCPConfigReq.config_list)
  return &config_list_;
}
inline const ::structure::PDCPModCfgEnt& ModifyPDCPConfigReq::_internal_config_list(int index) const {
  return config_list_.Get(index);
}
inline const ::structure::PDCPModCfgEnt& ModifyPDCPConfigReq::config_list(int index) const {
  // @@protoc_insertion_point(field_get:srvEbm.ModifyPDCPConfigReq.config_list)
  return _internal_config_list(index);
}
inline ::structure::PDCPModCfgEnt* ModifyPDCPConfigReq::_internal_add_config_list() {
  return config_list_.Add();
}
inline ::structure::PDCPModCfgEnt* ModifyPDCPConfigReq::add_config_list() {
  // @@protoc_insertion_point(field_add:srvEbm.ModifyPDCPConfigReq.config_list)
  return _internal_add_config_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::PDCPModCfgEnt >&
ModifyPDCPConfigReq::config_list() const {
  // @@protoc_insertion_point(field_list:srvEbm.ModifyPDCPConfigReq.config_list)
  return config_list_;
}

// -------------------------------------------------------------------

// TunnelStateChangeReq

// .mhdr.MsgHdr hdr = 10;
inline bool TunnelStateChangeReq::_internal_has_hdr() const {
  return this != internal_default_instance() && hdr_ != nullptr;
}
inline bool TunnelStateChangeReq::has_hdr() const {
  return _internal_has_hdr();
}
inline const ::mhdr::MsgHdr& TunnelStateChangeReq::_internal_hdr() const {
  const ::mhdr::MsgHdr* p = hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mhdr::MsgHdr*>(
      &::mhdr::_MsgHdr_default_instance_);
}
inline const ::mhdr::MsgHdr& TunnelStateChangeReq::hdr() const {
  // @@protoc_insertion_point(field_get:srvEbm.TunnelStateChangeReq.hdr)
  return _internal_hdr();
}
inline void TunnelStateChangeReq::unsafe_arena_set_allocated_hdr(
    ::mhdr::MsgHdr* hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  hdr_ = hdr;
  if (hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvEbm.TunnelStateChangeReq.hdr)
}
inline ::mhdr::MsgHdr* TunnelStateChangeReq::release_hdr() {
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mhdr::MsgHdr* TunnelStateChangeReq::unsafe_arena_release_hdr() {
  // @@protoc_insertion_point(field_release:srvEbm.TunnelStateChangeReq.hdr)
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  return temp;
}
inline ::mhdr::MsgHdr* TunnelStateChangeReq::_internal_mutable_hdr() {
  
  if (hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::mhdr::MsgHdr>(GetArena());
    hdr_ = p;
  }
  return hdr_;
}
inline ::mhdr::MsgHdr* TunnelStateChangeReq::mutable_hdr() {
  // @@protoc_insertion_point(field_mutable:srvEbm.TunnelStateChangeReq.hdr)
  return _internal_mutable_hdr();
}
inline void TunnelStateChangeReq::set_allocated_hdr(::mhdr::MsgHdr* hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  if (hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr)->GetArena();
    if (message_arena != submessage_arena) {
      hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hdr, submessage_arena);
    }
    
  } else {
    
  }
  hdr_ = hdr;
  // @@protoc_insertion_point(field_set_allocated:srvEbm.TunnelStateChangeReq.hdr)
}

// .structure.CpUpHdr cp_up_hdr = 20;
inline bool TunnelStateChangeReq::_internal_has_cp_up_hdr() const {
  return this != internal_default_instance() && cp_up_hdr_ != nullptr;
}
inline bool TunnelStateChangeReq::has_cp_up_hdr() const {
  return _internal_has_cp_up_hdr();
}
inline const ::structure::CpUpHdr& TunnelStateChangeReq::_internal_cp_up_hdr() const {
  const ::structure::CpUpHdr* p = cp_up_hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::structure::CpUpHdr*>(
      &::structure::_CpUpHdr_default_instance_);
}
inline const ::structure::CpUpHdr& TunnelStateChangeReq::cp_up_hdr() const {
  // @@protoc_insertion_point(field_get:srvEbm.TunnelStateChangeReq.cp_up_hdr)
  return _internal_cp_up_hdr();
}
inline void TunnelStateChangeReq::unsafe_arena_set_allocated_cp_up_hdr(
    ::structure::CpUpHdr* cp_up_hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr_);
  }
  cp_up_hdr_ = cp_up_hdr;
  if (cp_up_hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvEbm.TunnelStateChangeReq.cp_up_hdr)
}
inline ::structure::CpUpHdr* TunnelStateChangeReq::release_cp_up_hdr() {
  
  ::structure::CpUpHdr* temp = cp_up_hdr_;
  cp_up_hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::structure::CpUpHdr* TunnelStateChangeReq::unsafe_arena_release_cp_up_hdr() {
  // @@protoc_insertion_point(field_release:srvEbm.TunnelStateChangeReq.cp_up_hdr)
  
  ::structure::CpUpHdr* temp = cp_up_hdr_;
  cp_up_hdr_ = nullptr;
  return temp;
}
inline ::structure::CpUpHdr* TunnelStateChangeReq::_internal_mutable_cp_up_hdr() {
  
  if (cp_up_hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::structure::CpUpHdr>(GetArena());
    cp_up_hdr_ = p;
  }
  return cp_up_hdr_;
}
inline ::structure::CpUpHdr* TunnelStateChangeReq::mutable_cp_up_hdr() {
  // @@protoc_insertion_point(field_mutable:srvEbm.TunnelStateChangeReq.cp_up_hdr)
  return _internal_mutable_cp_up_hdr();
}
inline void TunnelStateChangeReq::set_allocated_cp_up_hdr(::structure::CpUpHdr* cp_up_hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr_);
  }
  if (cp_up_hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr)->GetArena();
    if (message_arena != submessage_arena) {
      cp_up_hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cp_up_hdr, submessage_arena);
    }
    
  } else {
    
  }
  cp_up_hdr_ = cp_up_hdr;
  // @@protoc_insertion_point(field_set_allocated:srvEbm.TunnelStateChangeReq.cp_up_hdr)
}

// .structure.TunnelStateInfo tunnel_state_info = 30;
inline bool TunnelStateChangeReq::_internal_has_tunnel_state_info() const {
  return this != internal_default_instance() && tunnel_state_info_ != nullptr;
}
inline bool TunnelStateChangeReq::has_tunnel_state_info() const {
  return _internal_has_tunnel_state_info();
}
inline const ::structure::TunnelStateInfo& TunnelStateChangeReq::_internal_tunnel_state_info() const {
  const ::structure::TunnelStateInfo* p = tunnel_state_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::structure::TunnelStateInfo*>(
      &::structure::_TunnelStateInfo_default_instance_);
}
inline const ::structure::TunnelStateInfo& TunnelStateChangeReq::tunnel_state_info() const {
  // @@protoc_insertion_point(field_get:srvEbm.TunnelStateChangeReq.tunnel_state_info)
  return _internal_tunnel_state_info();
}
inline void TunnelStateChangeReq::unsafe_arena_set_allocated_tunnel_state_info(
    ::structure::TunnelStateInfo* tunnel_state_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tunnel_state_info_);
  }
  tunnel_state_info_ = tunnel_state_info;
  if (tunnel_state_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvEbm.TunnelStateChangeReq.tunnel_state_info)
}
inline ::structure::TunnelStateInfo* TunnelStateChangeReq::release_tunnel_state_info() {
  
  ::structure::TunnelStateInfo* temp = tunnel_state_info_;
  tunnel_state_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::structure::TunnelStateInfo* TunnelStateChangeReq::unsafe_arena_release_tunnel_state_info() {
  // @@protoc_insertion_point(field_release:srvEbm.TunnelStateChangeReq.tunnel_state_info)
  
  ::structure::TunnelStateInfo* temp = tunnel_state_info_;
  tunnel_state_info_ = nullptr;
  return temp;
}
inline ::structure::TunnelStateInfo* TunnelStateChangeReq::_internal_mutable_tunnel_state_info() {
  
  if (tunnel_state_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::structure::TunnelStateInfo>(GetArena());
    tunnel_state_info_ = p;
  }
  return tunnel_state_info_;
}
inline ::structure::TunnelStateInfo* TunnelStateChangeReq::mutable_tunnel_state_info() {
  // @@protoc_insertion_point(field_mutable:srvEbm.TunnelStateChangeReq.tunnel_state_info)
  return _internal_mutable_tunnel_state_info();
}
inline void TunnelStateChangeReq::set_allocated_tunnel_state_info(::structure::TunnelStateInfo* tunnel_state_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tunnel_state_info_);
  }
  if (tunnel_state_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tunnel_state_info)->GetArena();
    if (message_arena != submessage_arena) {
      tunnel_state_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tunnel_state_info, submessage_arena);
    }
    
  } else {
    
  }
  tunnel_state_info_ = tunnel_state_info;
  // @@protoc_insertion_point(field_set_allocated:srvEbm.TunnelStateChangeReq.tunnel_state_info)
}

// -------------------------------------------------------------------

// IpAddressConfigMsg

// .mhdr.MsgHdr hdr = 10;
inline bool IpAddressConfigMsg::_internal_has_hdr() const {
  return this != internal_default_instance() && hdr_ != nullptr;
}
inline bool IpAddressConfigMsg::has_hdr() const {
  return _internal_has_hdr();
}
inline const ::mhdr::MsgHdr& IpAddressConfigMsg::_internal_hdr() const {
  const ::mhdr::MsgHdr* p = hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mhdr::MsgHdr*>(
      &::mhdr::_MsgHdr_default_instance_);
}
inline const ::mhdr::MsgHdr& IpAddressConfigMsg::hdr() const {
  // @@protoc_insertion_point(field_get:srvEbm.IpAddressConfigMsg.hdr)
  return _internal_hdr();
}
inline void IpAddressConfigMsg::unsafe_arena_set_allocated_hdr(
    ::mhdr::MsgHdr* hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  hdr_ = hdr;
  if (hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvEbm.IpAddressConfigMsg.hdr)
}
inline ::mhdr::MsgHdr* IpAddressConfigMsg::release_hdr() {
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mhdr::MsgHdr* IpAddressConfigMsg::unsafe_arena_release_hdr() {
  // @@protoc_insertion_point(field_release:srvEbm.IpAddressConfigMsg.hdr)
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  return temp;
}
inline ::mhdr::MsgHdr* IpAddressConfigMsg::_internal_mutable_hdr() {
  
  if (hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::mhdr::MsgHdr>(GetArena());
    hdr_ = p;
  }
  return hdr_;
}
inline ::mhdr::MsgHdr* IpAddressConfigMsg::mutable_hdr() {
  // @@protoc_insertion_point(field_mutable:srvEbm.IpAddressConfigMsg.hdr)
  return _internal_mutable_hdr();
}
inline void IpAddressConfigMsg::set_allocated_hdr(::mhdr::MsgHdr* hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  if (hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr)->GetArena();
    if (message_arena != submessage_arena) {
      hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hdr, submessage_arena);
    }
    
  } else {
    
  }
  hdr_ = hdr;
  // @@protoc_insertion_point(field_set_allocated:srvEbm.IpAddressConfigMsg.hdr)
}

// .structure.InterfaceType type = 20;
inline void IpAddressConfigMsg::clear_type() {
  type_ = 0;
}
inline ::structure::InterfaceType IpAddressConfigMsg::_internal_type() const {
  return static_cast< ::structure::InterfaceType >(type_);
}
inline ::structure::InterfaceType IpAddressConfigMsg::type() const {
  // @@protoc_insertion_point(field_get:srvEbm.IpAddressConfigMsg.type)
  return _internal_type();
}
inline void IpAddressConfigMsg::_internal_set_type(::structure::InterfaceType value) {
  
  type_ = value;
}
inline void IpAddressConfigMsg::set_type(::structure::InterfaceType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:srvEbm.IpAddressConfigMsg.type)
}

// .structure.IpAddressAction action = 30;
inline void IpAddressConfigMsg::clear_action() {
  action_ = 0;
}
inline ::structure::IpAddressAction IpAddressConfigMsg::_internal_action() const {
  return static_cast< ::structure::IpAddressAction >(action_);
}
inline ::structure::IpAddressAction IpAddressConfigMsg::action() const {
  // @@protoc_insertion_point(field_get:srvEbm.IpAddressConfigMsg.action)
  return _internal_action();
}
inline void IpAddressConfigMsg::_internal_set_action(::structure::IpAddressAction value) {
  
  action_ = value;
}
inline void IpAddressConfigMsg::set_action(::structure::IpAddressAction value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:srvEbm.IpAddressConfigMsg.action)
}

// .common.IpAddress address = 40;
inline bool IpAddressConfigMsg::_internal_has_address() const {
  return this != internal_default_instance() && address_ != nullptr;
}
inline bool IpAddressConfigMsg::has_address() const {
  return _internal_has_address();
}
inline const ::common::IpAddress& IpAddressConfigMsg::_internal_address() const {
  const ::common::IpAddress* p = address_;
  return p != nullptr ? *p : *reinterpret_cast<const ::common::IpAddress*>(
      &::common::_IpAddress_default_instance_);
}
inline const ::common::IpAddress& IpAddressConfigMsg::address() const {
  // @@protoc_insertion_point(field_get:srvEbm.IpAddressConfigMsg.address)
  return _internal_address();
}
inline void IpAddressConfigMsg::unsafe_arena_set_allocated_address(
    ::common::IpAddress* address) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(address_);
  }
  address_ = address;
  if (address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvEbm.IpAddressConfigMsg.address)
}
inline ::common::IpAddress* IpAddressConfigMsg::release_address() {
  
  ::common::IpAddress* temp = address_;
  address_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::IpAddress* IpAddressConfigMsg::unsafe_arena_release_address() {
  // @@protoc_insertion_point(field_release:srvEbm.IpAddressConfigMsg.address)
  
  ::common::IpAddress* temp = address_;
  address_ = nullptr;
  return temp;
}
inline ::common::IpAddress* IpAddressConfigMsg::_internal_mutable_address() {
  
  if (address_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::IpAddress>(GetArena());
    address_ = p;
  }
  return address_;
}
inline ::common::IpAddress* IpAddressConfigMsg::mutable_address() {
  // @@protoc_insertion_point(field_mutable:srvEbm.IpAddressConfigMsg.address)
  return _internal_mutable_address();
}
inline void IpAddressConfigMsg::set_allocated_address(::common::IpAddress* address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(address_);
  }
  if (address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(address)->GetArena();
    if (message_arena != submessage_arena) {
      address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, address, submessage_arena);
    }
    
  } else {
    
  }
  address_ = address;
  // @@protoc_insertion_point(field_set_allocated:srvEbm.IpAddressConfigMsg.address)
}

// -------------------------------------------------------------------

// PathManagementConfigMsg

// .mhdr.MsgHdr hdr = 10;
inline bool PathManagementConfigMsg::_internal_has_hdr() const {
  return this != internal_default_instance() && hdr_ != nullptr;
}
inline bool PathManagementConfigMsg::has_hdr() const {
  return _internal_has_hdr();
}
inline const ::mhdr::MsgHdr& PathManagementConfigMsg::_internal_hdr() const {
  const ::mhdr::MsgHdr* p = hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mhdr::MsgHdr*>(
      &::mhdr::_MsgHdr_default_instance_);
}
inline const ::mhdr::MsgHdr& PathManagementConfigMsg::hdr() const {
  // @@protoc_insertion_point(field_get:srvEbm.PathManagementConfigMsg.hdr)
  return _internal_hdr();
}
inline void PathManagementConfigMsg::unsafe_arena_set_allocated_hdr(
    ::mhdr::MsgHdr* hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  hdr_ = hdr;
  if (hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvEbm.PathManagementConfigMsg.hdr)
}
inline ::mhdr::MsgHdr* PathManagementConfigMsg::release_hdr() {
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mhdr::MsgHdr* PathManagementConfigMsg::unsafe_arena_release_hdr() {
  // @@protoc_insertion_point(field_release:srvEbm.PathManagementConfigMsg.hdr)
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  return temp;
}
inline ::mhdr::MsgHdr* PathManagementConfigMsg::_internal_mutable_hdr() {
  
  if (hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::mhdr::MsgHdr>(GetArena());
    hdr_ = p;
  }
  return hdr_;
}
inline ::mhdr::MsgHdr* PathManagementConfigMsg::mutable_hdr() {
  // @@protoc_insertion_point(field_mutable:srvEbm.PathManagementConfigMsg.hdr)
  return _internal_mutable_hdr();
}
inline void PathManagementConfigMsg::set_allocated_hdr(::mhdr::MsgHdr* hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  if (hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr)->GetArena();
    if (message_arena != submessage_arena) {
      hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hdr, submessage_arena);
    }
    
  } else {
    
  }
  hdr_ = hdr;
  // @@protoc_insertion_point(field_set_allocated:srvEbm.PathManagementConfigMsg.hdr)
}

// uint32 echo_interval_in_sec = 20;
inline void PathManagementConfigMsg::clear_echo_interval_in_sec() {
  echo_interval_in_sec_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PathManagementConfigMsg::_internal_echo_interval_in_sec() const {
  return echo_interval_in_sec_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PathManagementConfigMsg::echo_interval_in_sec() const {
  // @@protoc_insertion_point(field_get:srvEbm.PathManagementConfigMsg.echo_interval_in_sec)
  return _internal_echo_interval_in_sec();
}
inline void PathManagementConfigMsg::_internal_set_echo_interval_in_sec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  echo_interval_in_sec_ = value;
}
inline void PathManagementConfigMsg::set_echo_interval_in_sec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_echo_interval_in_sec(value);
  // @@protoc_insertion_point(field_set:srvEbm.PathManagementConfigMsg.echo_interval_in_sec)
}

// uint32 gtpu_t3_resp_timer = 30;
inline void PathManagementConfigMsg::clear_gtpu_t3_resp_timer() {
  gtpu_t3_resp_timer_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PathManagementConfigMsg::_internal_gtpu_t3_resp_timer() const {
  return gtpu_t3_resp_timer_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PathManagementConfigMsg::gtpu_t3_resp_timer() const {
  // @@protoc_insertion_point(field_get:srvEbm.PathManagementConfigMsg.gtpu_t3_resp_timer)
  return _internal_gtpu_t3_resp_timer();
}
inline void PathManagementConfigMsg::_internal_set_gtpu_t3_resp_timer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  gtpu_t3_resp_timer_ = value;
}
inline void PathManagementConfigMsg::set_gtpu_t3_resp_timer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gtpu_t3_resp_timer(value);
  // @@protoc_insertion_point(field_set:srvEbm.PathManagementConfigMsg.gtpu_t3_resp_timer)
}

// uint32 gtpu_n3_req = 40;
inline void PathManagementConfigMsg::clear_gtpu_n3_req() {
  gtpu_n3_req_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PathManagementConfigMsg::_internal_gtpu_n3_req() const {
  return gtpu_n3_req_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PathManagementConfigMsg::gtpu_n3_req() const {
  // @@protoc_insertion_point(field_get:srvEbm.PathManagementConfigMsg.gtpu_n3_req)
  return _internal_gtpu_n3_req();
}
inline void PathManagementConfigMsg::_internal_set_gtpu_n3_req(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  gtpu_n3_req_ = value;
}
inline void PathManagementConfigMsg::set_gtpu_n3_req(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gtpu_n3_req(value);
  // @@protoc_insertion_point(field_set:srvEbm.PathManagementConfigMsg.gtpu_n3_req)
}

// uint32 path_info_clear_timer = 50;
inline void PathManagementConfigMsg::clear_path_info_clear_timer() {
  path_info_clear_timer_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PathManagementConfigMsg::_internal_path_info_clear_timer() const {
  return path_info_clear_timer_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PathManagementConfigMsg::path_info_clear_timer() const {
  // @@protoc_insertion_point(field_get:srvEbm.PathManagementConfigMsg.path_info_clear_timer)
  return _internal_path_info_clear_timer();
}
inline void PathManagementConfigMsg::_internal_set_path_info_clear_timer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  path_info_clear_timer_ = value;
}
inline void PathManagementConfigMsg::set_path_info_clear_timer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_path_info_clear_timer(value);
  // @@protoc_insertion_point(field_set:srvEbm.PathManagementConfigMsg.path_info_clear_timer)
}

// -------------------------------------------------------------------

// NotifyPathStatusMsg

// .mhdr.MsgHdr hdr = 10;
inline bool NotifyPathStatusMsg::_internal_has_hdr() const {
  return this != internal_default_instance() && hdr_ != nullptr;
}
inline bool NotifyPathStatusMsg::has_hdr() const {
  return _internal_has_hdr();
}
inline const ::mhdr::MsgHdr& NotifyPathStatusMsg::_internal_hdr() const {
  const ::mhdr::MsgHdr* p = hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mhdr::MsgHdr*>(
      &::mhdr::_MsgHdr_default_instance_);
}
inline const ::mhdr::MsgHdr& NotifyPathStatusMsg::hdr() const {
  // @@protoc_insertion_point(field_get:srvEbm.NotifyPathStatusMsg.hdr)
  return _internal_hdr();
}
inline void NotifyPathStatusMsg::unsafe_arena_set_allocated_hdr(
    ::mhdr::MsgHdr* hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  hdr_ = hdr;
  if (hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvEbm.NotifyPathStatusMsg.hdr)
}
inline ::mhdr::MsgHdr* NotifyPathStatusMsg::release_hdr() {
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mhdr::MsgHdr* NotifyPathStatusMsg::unsafe_arena_release_hdr() {
  // @@protoc_insertion_point(field_release:srvEbm.NotifyPathStatusMsg.hdr)
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  return temp;
}
inline ::mhdr::MsgHdr* NotifyPathStatusMsg::_internal_mutable_hdr() {
  
  if (hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::mhdr::MsgHdr>(GetArena());
    hdr_ = p;
  }
  return hdr_;
}
inline ::mhdr::MsgHdr* NotifyPathStatusMsg::mutable_hdr() {
  // @@protoc_insertion_point(field_mutable:srvEbm.NotifyPathStatusMsg.hdr)
  return _internal_mutable_hdr();
}
inline void NotifyPathStatusMsg::set_allocated_hdr(::mhdr::MsgHdr* hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  if (hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr)->GetArena();
    if (message_arena != submessage_arena) {
      hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hdr, submessage_arena);
    }
    
  } else {
    
  }
  hdr_ = hdr;
  // @@protoc_insertion_point(field_set_allocated:srvEbm.NotifyPathStatusMsg.hdr)
}

// .common.IpAddress local_ip = 20;
inline bool NotifyPathStatusMsg::_internal_has_local_ip() const {
  return this != internal_default_instance() && local_ip_ != nullptr;
}
inline bool NotifyPathStatusMsg::has_local_ip() const {
  return _internal_has_local_ip();
}
inline const ::common::IpAddress& NotifyPathStatusMsg::_internal_local_ip() const {
  const ::common::IpAddress* p = local_ip_;
  return p != nullptr ? *p : *reinterpret_cast<const ::common::IpAddress*>(
      &::common::_IpAddress_default_instance_);
}
inline const ::common::IpAddress& NotifyPathStatusMsg::local_ip() const {
  // @@protoc_insertion_point(field_get:srvEbm.NotifyPathStatusMsg.local_ip)
  return _internal_local_ip();
}
inline void NotifyPathStatusMsg::unsafe_arena_set_allocated_local_ip(
    ::common::IpAddress* local_ip) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_ip_);
  }
  local_ip_ = local_ip;
  if (local_ip) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvEbm.NotifyPathStatusMsg.local_ip)
}
inline ::common::IpAddress* NotifyPathStatusMsg::release_local_ip() {
  
  ::common::IpAddress* temp = local_ip_;
  local_ip_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::IpAddress* NotifyPathStatusMsg::unsafe_arena_release_local_ip() {
  // @@protoc_insertion_point(field_release:srvEbm.NotifyPathStatusMsg.local_ip)
  
  ::common::IpAddress* temp = local_ip_;
  local_ip_ = nullptr;
  return temp;
}
inline ::common::IpAddress* NotifyPathStatusMsg::_internal_mutable_local_ip() {
  
  if (local_ip_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::IpAddress>(GetArena());
    local_ip_ = p;
  }
  return local_ip_;
}
inline ::common::IpAddress* NotifyPathStatusMsg::mutable_local_ip() {
  // @@protoc_insertion_point(field_mutable:srvEbm.NotifyPathStatusMsg.local_ip)
  return _internal_mutable_local_ip();
}
inline void NotifyPathStatusMsg::set_allocated_local_ip(::common::IpAddress* local_ip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_ip_);
  }
  if (local_ip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_ip)->GetArena();
    if (message_arena != submessage_arena) {
      local_ip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_ip, submessage_arena);
    }
    
  } else {
    
  }
  local_ip_ = local_ip;
  // @@protoc_insertion_point(field_set_allocated:srvEbm.NotifyPathStatusMsg.local_ip)
}

// .common.IpAddress remote_ip = 30;
inline bool NotifyPathStatusMsg::_internal_has_remote_ip() const {
  return this != internal_default_instance() && remote_ip_ != nullptr;
}
inline bool NotifyPathStatusMsg::has_remote_ip() const {
  return _internal_has_remote_ip();
}
inline const ::common::IpAddress& NotifyPathStatusMsg::_internal_remote_ip() const {
  const ::common::IpAddress* p = remote_ip_;
  return p != nullptr ? *p : *reinterpret_cast<const ::common::IpAddress*>(
      &::common::_IpAddress_default_instance_);
}
inline const ::common::IpAddress& NotifyPathStatusMsg::remote_ip() const {
  // @@protoc_insertion_point(field_get:srvEbm.NotifyPathStatusMsg.remote_ip)
  return _internal_remote_ip();
}
inline void NotifyPathStatusMsg::unsafe_arena_set_allocated_remote_ip(
    ::common::IpAddress* remote_ip) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(remote_ip_);
  }
  remote_ip_ = remote_ip;
  if (remote_ip) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvEbm.NotifyPathStatusMsg.remote_ip)
}
inline ::common::IpAddress* NotifyPathStatusMsg::release_remote_ip() {
  
  ::common::IpAddress* temp = remote_ip_;
  remote_ip_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::IpAddress* NotifyPathStatusMsg::unsafe_arena_release_remote_ip() {
  // @@protoc_insertion_point(field_release:srvEbm.NotifyPathStatusMsg.remote_ip)
  
  ::common::IpAddress* temp = remote_ip_;
  remote_ip_ = nullptr;
  return temp;
}
inline ::common::IpAddress* NotifyPathStatusMsg::_internal_mutable_remote_ip() {
  
  if (remote_ip_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::IpAddress>(GetArena());
    remote_ip_ = p;
  }
  return remote_ip_;
}
inline ::common::IpAddress* NotifyPathStatusMsg::mutable_remote_ip() {
  // @@protoc_insertion_point(field_mutable:srvEbm.NotifyPathStatusMsg.remote_ip)
  return _internal_mutable_remote_ip();
}
inline void NotifyPathStatusMsg::set_allocated_remote_ip(::common::IpAddress* remote_ip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(remote_ip_);
  }
  if (remote_ip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(remote_ip)->GetArena();
    if (message_arena != submessage_arena) {
      remote_ip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remote_ip, submessage_arena);
    }
    
  } else {
    
  }
  remote_ip_ = remote_ip;
  // @@protoc_insertion_point(field_set_allocated:srvEbm.NotifyPathStatusMsg.remote_ip)
}

// .structure.InterfaceType type = 40;
inline void NotifyPathStatusMsg::clear_type() {
  type_ = 0;
}
inline ::structure::InterfaceType NotifyPathStatusMsg::_internal_type() const {
  return static_cast< ::structure::InterfaceType >(type_);
}
inline ::structure::InterfaceType NotifyPathStatusMsg::type() const {
  // @@protoc_insertion_point(field_get:srvEbm.NotifyPathStatusMsg.type)
  return _internal_type();
}
inline void NotifyPathStatusMsg::_internal_set_type(::structure::InterfaceType value) {
  
  type_ = value;
}
inline void NotifyPathStatusMsg::set_type(::structure::InterfaceType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:srvEbm.NotifyPathStatusMsg.type)
}

// .structure.PathStatus status = 50;
inline void NotifyPathStatusMsg::clear_status() {
  status_ = 0;
}
inline ::structure::PathStatus NotifyPathStatusMsg::_internal_status() const {
  return static_cast< ::structure::PathStatus >(status_);
}
inline ::structure::PathStatus NotifyPathStatusMsg::status() const {
  // @@protoc_insertion_point(field_get:srvEbm.NotifyPathStatusMsg.status)
  return _internal_status();
}
inline void NotifyPathStatusMsg::_internal_set_status(::structure::PathStatus value) {
  
  status_ = value;
}
inline void NotifyPathStatusMsg::set_status(::structure::PathStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:srvEbm.NotifyPathStatusMsg.status)
}

// repeated .structure.UeInfo ue_info = 60;
inline int NotifyPathStatusMsg::_internal_ue_info_size() const {
  return ue_info_.size();
}
inline int NotifyPathStatusMsg::ue_info_size() const {
  return _internal_ue_info_size();
}
inline ::structure::UeInfo* NotifyPathStatusMsg::mutable_ue_info(int index) {
  // @@protoc_insertion_point(field_mutable:srvEbm.NotifyPathStatusMsg.ue_info)
  return ue_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::UeInfo >*
NotifyPathStatusMsg::mutable_ue_info() {
  // @@protoc_insertion_point(field_mutable_list:srvEbm.NotifyPathStatusMsg.ue_info)
  return &ue_info_;
}
inline const ::structure::UeInfo& NotifyPathStatusMsg::_internal_ue_info(int index) const {
  return ue_info_.Get(index);
}
inline const ::structure::UeInfo& NotifyPathStatusMsg::ue_info(int index) const {
  // @@protoc_insertion_point(field_get:srvEbm.NotifyPathStatusMsg.ue_info)
  return _internal_ue_info(index);
}
inline ::structure::UeInfo* NotifyPathStatusMsg::_internal_add_ue_info() {
  return ue_info_.Add();
}
inline ::structure::UeInfo* NotifyPathStatusMsg::add_ue_info() {
  // @@protoc_insertion_point(field_add:srvEbm.NotifyPathStatusMsg.ue_info)
  return _internal_add_ue_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structure::UeInfo >&
NotifyPathStatusMsg::ue_info() const {
  // @@protoc_insertion_point(field_list:srvEbm.NotifyPathStatusMsg.ue_info)
  return ue_info_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace srvEbm

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::srvEbm::method> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::srvEbm::method>() {
  return ::srvEbm::method_descriptor();
}
template <> struct is_proto_enum< ::srvEbm::version> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::srvEbm::version>() {
  return ::srvEbm::version_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_srvEbm_2eproto
