// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: structure.proto

#include "structure.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IpAddress_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mhdr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MsgHdr_mhdr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_structure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CuCpID_structure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_structure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CuUpID_structure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_structure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DlSduStaInfo_structure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_structure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GtpTunnelId_structure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_structure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HeaderCompressionConfig_structure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_structure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PDCPDCBearerInfo_structure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_structure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PDCPHoInfo_structure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_structure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pst_structure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_structure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RlcInfo_structure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_structure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SuSpID_structure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_structure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UlSduStaInfo_structure_2eproto;
namespace structure {
class PstDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Pst> _instance;
} _Pst_default_instance_;
class CuCpIDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CuCpID> _instance;
} _CuCpID_default_instance_;
class CuUpIDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CuUpID> _instance;
} _CuUpID_default_instance_;
class SuSpIDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SuSpID> _instance;
} _SuSpID_default_instance_;
class CpUpHdrDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CpUpHdr> _instance;
} _CpUpHdr_default_instance_;
class SecurityConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SecurityConfig> _instance;
} _SecurityConfig_default_instance_;
class SecurityCfgCfmDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SecurityCfgCfm> _instance;
} _SecurityCfgCfm_default_instance_;
class GtpTunnelIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GtpTunnelId> _instance;
} _GtpTunnelId_default_instance_;
class GtpTunnelInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GtpTunnelInfo> _instance;
} _GtpTunnelInfo_default_instance_;
class RlcInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RlcInfo> _instance;
} _RlcInfo_default_instance_;
class HeaderCompressionConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HeaderCompressionConfig> _instance;
} _HeaderCompressionConfig_default_instance_;
class PDCPHoInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PDCPHoInfo> _instance;
} _PDCPHoInfo_default_instance_;
class PDCPDCBearerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PDCPDCBearerInfo> _instance;
} _PDCPDCBearerInfo_default_instance_;
class PDCPAddCfgEntDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PDCPAddCfgEnt> _instance;
} _PDCPAddCfgEnt_default_instance_;
class PDCPModCfgEntDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PDCPModCfgEnt> _instance;
} _PDCPModCfgEnt_default_instance_;
class PDCPDelCfgEntDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PDCPDelCfgEnt> _instance;
} _PDCPDelCfgEnt_default_instance_;
class CreateTnlCfmEntDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateTnlCfmEnt> _instance;
} _CreateTnlCfmEnt_default_instance_;
class ModTnlCfmEntDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModTnlCfmEnt> _instance;
} _ModTnlCfmEnt_default_instance_;
class DelTnlCfmEntDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DelTnlCfmEnt> _instance;
} _DelTnlCfmEnt_default_instance_;
class PDCPAddCfgCfmEntDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PDCPAddCfgCfmEnt> _instance;
} _PDCPAddCfgCfmEnt_default_instance_;
class PDCPModCfgCfmEntDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PDCPModCfgCfmEnt> _instance;
} _PDCPModCfgCfmEnt_default_instance_;
class PDCPDelCfgCfmEntDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PDCPDelCfgCfmEnt> _instance;
} _PDCPDelCfgCfmEnt_default_instance_;
class UlSduStaInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UlSduStaInfo> _instance;
} _UlSduStaInfo_default_instance_;
class DlSduStaInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DlSduStaInfo> _instance;
} _DlSduStaInfo_default_instance_;
class SduStatusInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SduStatusInfo> _instance;
} _SduStatusInfo_default_instance_;
class TunnelStateInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TunnelStateInfo> _instance;
} _TunnelStateInfo_default_instance_;
class UeInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UeInfo> _instance;
} _UeInfo_default_instance_;
class ReqReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqReply> _instance;
} _ReqReply_default_instance_;
}  // namespace structure
static void InitDefaultsscc_info_CpUpHdr_structure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::structure::_CpUpHdr_default_instance_;
    new (ptr) ::structure::CpUpHdr();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::structure::CpUpHdr::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_CpUpHdr_structure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_CpUpHdr_structure_2eproto}, {
      &scc_info_Pst_structure_2eproto.base,
      &scc_info_CuCpID_structure_2eproto.base,
      &scc_info_CuUpID_structure_2eproto.base,
      &scc_info_SuSpID_structure_2eproto.base,}};

static void InitDefaultsscc_info_CreateTnlCfmEnt_structure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::structure::_CreateTnlCfmEnt_default_instance_;
    new (ptr) ::structure::CreateTnlCfmEnt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::structure::CreateTnlCfmEnt::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CreateTnlCfmEnt_structure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CreateTnlCfmEnt_structure_2eproto}, {
      &scc_info_GtpTunnelId_structure_2eproto.base,
      &scc_info_IpAddress_common_2eproto.base,}};

static void InitDefaultsscc_info_CuCpID_structure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::structure::_CuCpID_default_instance_;
    new (ptr) ::structure::CuCpID();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::structure::CuCpID::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CuCpID_structure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CuCpID_structure_2eproto}, {}};

static void InitDefaultsscc_info_CuUpID_structure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::structure::_CuUpID_default_instance_;
    new (ptr) ::structure::CuUpID();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::structure::CuUpID::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CuUpID_structure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CuUpID_structure_2eproto}, {}};

static void InitDefaultsscc_info_DelTnlCfmEnt_structure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::structure::_DelTnlCfmEnt_default_instance_;
    new (ptr) ::structure::DelTnlCfmEnt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::structure::DelTnlCfmEnt::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DelTnlCfmEnt_structure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DelTnlCfmEnt_structure_2eproto}, {
      &scc_info_GtpTunnelId_structure_2eproto.base,
      &scc_info_IpAddress_common_2eproto.base,}};

static void InitDefaultsscc_info_DlSduStaInfo_structure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::structure::_DlSduStaInfo_default_instance_;
    new (ptr) ::structure::DlSduStaInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::structure::DlSduStaInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DlSduStaInfo_structure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DlSduStaInfo_structure_2eproto}, {}};

static void InitDefaultsscc_info_GtpTunnelId_structure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::structure::_GtpTunnelId_default_instance_;
    new (ptr) ::structure::GtpTunnelId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::structure::GtpTunnelId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GtpTunnelId_structure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GtpTunnelId_structure_2eproto}, {}};

static void InitDefaultsscc_info_GtpTunnelInfo_structure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::structure::_GtpTunnelInfo_default_instance_;
    new (ptr) ::structure::GtpTunnelInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::structure::GtpTunnelInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GtpTunnelInfo_structure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GtpTunnelInfo_structure_2eproto}, {
      &scc_info_GtpTunnelId_structure_2eproto.base,
      &scc_info_IpAddress_common_2eproto.base,}};

static void InitDefaultsscc_info_HeaderCompressionConfig_structure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::structure::_HeaderCompressionConfig_default_instance_;
    new (ptr) ::structure::HeaderCompressionConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::structure::HeaderCompressionConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HeaderCompressionConfig_structure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HeaderCompressionConfig_structure_2eproto}, {}};

static void InitDefaultsscc_info_ModTnlCfmEnt_structure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::structure::_ModTnlCfmEnt_default_instance_;
    new (ptr) ::structure::ModTnlCfmEnt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::structure::ModTnlCfmEnt::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ModTnlCfmEnt_structure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ModTnlCfmEnt_structure_2eproto}, {
      &scc_info_GtpTunnelId_structure_2eproto.base,
      &scc_info_IpAddress_common_2eproto.base,}};

static void InitDefaultsscc_info_PDCPAddCfgCfmEnt_structure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::structure::_PDCPAddCfgCfmEnt_default_instance_;
    new (ptr) ::structure::PDCPAddCfgCfmEnt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::structure::PDCPAddCfgCfmEnt::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PDCPAddCfgCfmEnt_structure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PDCPAddCfgCfmEnt_structure_2eproto}, {}};

static void InitDefaultsscc_info_PDCPAddCfgEnt_structure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::structure::_PDCPAddCfgEnt_default_instance_;
    new (ptr) ::structure::PDCPAddCfgEnt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::structure::PDCPAddCfgEnt::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PDCPAddCfgEnt_structure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PDCPAddCfgEnt_structure_2eproto}, {
      &scc_info_RlcInfo_structure_2eproto.base,
      &scc_info_HeaderCompressionConfig_structure_2eproto.base,}};

static void InitDefaultsscc_info_PDCPDCBearerInfo_structure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::structure::_PDCPDCBearerInfo_default_instance_;
    new (ptr) ::structure::PDCPDCBearerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::structure::PDCPDCBearerInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PDCPDCBearerInfo_structure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PDCPDCBearerInfo_structure_2eproto}, {}};

static void InitDefaultsscc_info_PDCPDelCfgCfmEnt_structure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::structure::_PDCPDelCfgCfmEnt_default_instance_;
    new (ptr) ::structure::PDCPDelCfgCfmEnt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::structure::PDCPDelCfgCfmEnt::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PDCPDelCfgCfmEnt_structure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PDCPDelCfgCfmEnt_structure_2eproto}, {}};

static void InitDefaultsscc_info_PDCPDelCfgEnt_structure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::structure::_PDCPDelCfgEnt_default_instance_;
    new (ptr) ::structure::PDCPDelCfgEnt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::structure::PDCPDelCfgEnt::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PDCPDelCfgEnt_structure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PDCPDelCfgEnt_structure_2eproto}, {}};

static void InitDefaultsscc_info_PDCPHoInfo_structure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::structure::_PDCPHoInfo_default_instance_;
    new (ptr) ::structure::PDCPHoInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::structure::PDCPHoInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PDCPHoInfo_structure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PDCPHoInfo_structure_2eproto}, {}};

static void InitDefaultsscc_info_PDCPModCfgCfmEnt_structure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::structure::_PDCPModCfgCfmEnt_default_instance_;
    new (ptr) ::structure::PDCPModCfgCfmEnt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::structure::PDCPModCfgCfmEnt::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PDCPModCfgCfmEnt_structure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PDCPModCfgCfmEnt_structure_2eproto}, {}};

static void InitDefaultsscc_info_PDCPModCfgEnt_structure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::structure::_PDCPModCfgEnt_default_instance_;
    new (ptr) ::structure::PDCPModCfgEnt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::structure::PDCPModCfgEnt::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PDCPModCfgEnt_structure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PDCPModCfgEnt_structure_2eproto}, {
      &scc_info_HeaderCompressionConfig_structure_2eproto.base,
      &scc_info_PDCPHoInfo_structure_2eproto.base,
      &scc_info_PDCPDCBearerInfo_structure_2eproto.base,}};

static void InitDefaultsscc_info_Pst_structure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::structure::_Pst_default_instance_;
    new (ptr) ::structure::Pst();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::structure::Pst::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pst_structure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Pst_structure_2eproto}, {}};

static void InitDefaultsscc_info_ReqReply_structure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::structure::_ReqReply_default_instance_;
    new (ptr) ::structure::ReqReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::structure::ReqReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqReply_structure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReqReply_structure_2eproto}, {
      &scc_info_MsgHdr_mhdr_2eproto.base,}};

static void InitDefaultsscc_info_RlcInfo_structure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::structure::_RlcInfo_default_instance_;
    new (ptr) ::structure::RlcInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::structure::RlcInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RlcInfo_structure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RlcInfo_structure_2eproto}, {}};

static void InitDefaultsscc_info_SduStatusInfo_structure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::structure::_SduStatusInfo_default_instance_;
    new (ptr) ::structure::SduStatusInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::structure::SduStatusInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SduStatusInfo_structure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SduStatusInfo_structure_2eproto}, {
      &scc_info_UlSduStaInfo_structure_2eproto.base,
      &scc_info_DlSduStaInfo_structure_2eproto.base,}};

static void InitDefaultsscc_info_SecurityCfgCfm_structure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::structure::_SecurityCfgCfm_default_instance_;
    new (ptr) ::structure::SecurityCfgCfm();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::structure::SecurityCfgCfm::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SecurityCfgCfm_structure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SecurityCfgCfm_structure_2eproto}, {}};

static void InitDefaultsscc_info_SecurityConfig_structure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::structure::_SecurityConfig_default_instance_;
    new (ptr) ::structure::SecurityConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::structure::SecurityConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SecurityConfig_structure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SecurityConfig_structure_2eproto}, {}};

static void InitDefaultsscc_info_SuSpID_structure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::structure::_SuSpID_default_instance_;
    new (ptr) ::structure::SuSpID();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::structure::SuSpID::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SuSpID_structure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SuSpID_structure_2eproto}, {}};

static void InitDefaultsscc_info_TunnelStateInfo_structure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::structure::_TunnelStateInfo_default_instance_;
    new (ptr) ::structure::TunnelStateInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::structure::TunnelStateInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TunnelStateInfo_structure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TunnelStateInfo_structure_2eproto}, {}};

static void InitDefaultsscc_info_UeInfo_structure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::structure::_UeInfo_default_instance_;
    new (ptr) ::structure::UeInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::structure::UeInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UeInfo_structure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UeInfo_structure_2eproto}, {}};

static void InitDefaultsscc_info_UlSduStaInfo_structure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::structure::_UlSduStaInfo_default_instance_;
    new (ptr) ::structure::UlSduStaInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::structure::UlSduStaInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UlSduStaInfo_structure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UlSduStaInfo_structure_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_structure_2eproto[28];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_structure_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_structure_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_structure_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::structure::Pst, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::structure::Pst, dst_proc_id_),
  PROTOBUF_FIELD_OFFSET(::structure::Pst, src_proc_id_),
  PROTOBUF_FIELD_OFFSET(::structure::Pst, dst_ent_),
  PROTOBUF_FIELD_OFFSET(::structure::Pst, dst_inst_),
  PROTOBUF_FIELD_OFFSET(::structure::Pst, src_ent_),
  PROTOBUF_FIELD_OFFSET(::structure::Pst, src_inst_),
  PROTOBUF_FIELD_OFFSET(::structure::Pst, prior_),
  PROTOBUF_FIELD_OFFSET(::structure::Pst, route_),
  PROTOBUF_FIELD_OFFSET(::structure::Pst, event_),
  PROTOBUF_FIELD_OFFSET(::structure::Pst, region_),
  PROTOBUF_FIELD_OFFSET(::structure::Pst, pool_),
  PROTOBUF_FIELD_OFFSET(::structure::Pst, selector_),
  PROTOBUF_FIELD_OFFSET(::structure::Pst, interface_version_),
  PROTOBUF_FIELD_OFFSET(::structure::Pst, cell_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::structure::CuCpID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::structure::CuCpID, cp_id_),
  PROTOBUF_FIELD_OFFSET(::structure::CuCpID, cell_id_),
  PROTOBUF_FIELD_OFFSET(::structure::CuCpID, ue_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::structure::CuUpID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::structure::CuUpID, up_id_),
  PROTOBUF_FIELD_OFFSET(::structure::CuUpID, cell_id_),
  PROTOBUF_FIELD_OFFSET(::structure::CuUpID, ue_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::structure::SuSpID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::structure::SuSpID, su_id_),
  PROTOBUF_FIELD_OFFSET(::structure::SuSpID, sp_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::structure::CpUpHdr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::structure::CpUpHdr, pst_),
  PROTOBUF_FIELD_OFFSET(::structure::CpUpHdr, cu_cp_id_),
  PROTOBUF_FIELD_OFFSET(::structure::CpUpHdr, cu_up_id_),
  PROTOBUF_FIELD_OFFSET(::structure::CpUpHdr, su_sp_id_),
  PROTOBUF_FIELD_OFFSET(::structure::CpUpHdr, trans_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::structure::SecurityConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::structure::SecurityConfig, algorithm_type_),
  PROTOBUF_FIELD_OFFSET(::structure::SecurityConfig, encryption_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::structure::SecurityCfgCfm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::structure::SecurityCfgCfm, status_),
  PROTOBUF_FIELD_OFFSET(::structure::SecurityCfgCfm, reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::structure::GtpTunnelId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::structure::GtpTunnelId, cell_id_),
  PROTOBUF_FIELD_OFFSET(::structure::GtpTunnelId, crnti_),
  PROTOBUF_FIELD_OFFSET(::structure::GtpTunnelId, rb_id_),
  PROTOBUF_FIELD_OFFSET(::structure::GtpTunnelId, tnl_type_),
  PROTOBUF_FIELD_OFFSET(::structure::GtpTunnelId, tnl_priority_),
  PROTOBUF_FIELD_OFFSET(::structure::GtpTunnelId, rb_keep_indicator_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::structure::GtpTunnelInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::structure::GtpTunnelInfo, tnl_id_),
  PROTOBUF_FIELD_OFFSET(::structure::GtpTunnelInfo, dscp_),
  PROTOBUF_FIELD_OFFSET(::structure::GtpTunnelInfo, tunnel_type_),
  PROTOBUF_FIELD_OFFSET(::structure::GtpTunnelInfo, interface_type_),
  PROTOBUF_FIELD_OFFSET(::structure::GtpTunnelInfo, dst_addr_),
  PROTOBUF_FIELD_OFFSET(::structure::GtpTunnelInfo, src_addr_),
  PROTOBUF_FIELD_OFFSET(::structure::GtpTunnelInfo, rem_teid_),
  PROTOBUF_FIELD_OFFSET(::structure::GtpTunnelInfo, corr_id_),
  PROTOBUF_FIELD_OFFSET(::structure::GtpTunnelInfo, ho_src_enodeb_),
  PROTOBUF_FIELD_OFFSET(::structure::GtpTunnelInfo, ho_type_),
  PROTOBUF_FIELD_OFFSET(::structure::GtpTunnelInfo, is_fullcfg_),
  PROTOBUF_FIELD_OFFSET(::structure::GtpTunnelInfo, old_cell_id_),
  PROTOBUF_FIELD_OFFSET(::structure::GtpTunnelInfo, old_crnti_),
  PROTOBUF_FIELD_OFFSET(::structure::GtpTunnelInfo, rlc_mode_),
  PROTOBUF_FIELD_OFFSET(::structure::GtpTunnelInfo, qci_),
  PROTOBUF_FIELD_OFFSET(::structure::GtpTunnelInfo, end_cbr_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::structure::RlcInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::structure::RlcInfo, direction_),
  PROTOBUF_FIELD_OFFSET(::structure::RlcInfo, mode_),
  PROTOBUF_FIELD_OFFSET(::structure::RlcInfo, status_rep_require_),
  PROTOBUF_FIELD_OFFSET(::structure::RlcInfo, pdcp_sn_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::structure::HeaderCompressionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::structure::HeaderCompressionConfig, hdr_comp_used_),
  PROTOBUF_FIELD_OFFSET(::structure::HeaderCompressionConfig, max_cid_),
  PROTOBUF_FIELD_OFFSET(::structure::HeaderCompressionConfig, profile_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::structure::PDCPHoInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::structure::PDCPHoInfo, is_ho_pres_),
  PROTOBUF_FIELD_OFFSET(::structure::PDCPHoInfo, sn_len_),
  PROTOBUF_FIELD_OFFSET(::structure::PDCPHoInfo, dl_count_),
  PROTOBUF_FIELD_OFFSET(::structure::PDCPHoInfo, ul_count_),
  PROTOBUF_FIELD_OFFSET(::structure::PDCPHoInfo, num_bits_),
  PROTOBUF_FIELD_OFFSET(::structure::PDCPHoInfo, bit_map_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::structure::PDCPDCBearerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::structure::PDCPDCBearerInfo, sn_len_),
  PROTOBUF_FIELD_OFFSET(::structure::PDCPDCBearerInfo, bearer_type_),
  PROTOBUF_FIELD_OFFSET(::structure::PDCPDCBearerInfo, split_ratio_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::structure::PDCPAddCfgEnt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::structure::PDCPAddCfgEnt, rb_id_),
  PROTOBUF_FIELD_OFFSET(::structure::PDCPAddCfgEnt, qci_),
  PROTOBUF_FIELD_OFFSET(::structure::PDCPAddCfgEnt, rlc_info_),
  PROTOBUF_FIELD_OFFSET(::structure::PDCPAddCfgEnt, discard_timer_),
  PROTOBUF_FIELD_OFFSET(::structure::PDCPAddCfgEnt, re_ord_tmr_val_),
  PROTOBUF_FIELD_OFFSET(::structure::PDCPAddCfgEnt, hdr_cmp_cfg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::structure::PDCPModCfgEnt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::structure::PDCPModCfgEnt, rb_id_),
  PROTOBUF_FIELD_OFFSET(::structure::PDCPModCfgEnt, bit_flag_),
  PROTOBUF_FIELD_OFFSET(::structure::PDCPModCfgEnt, hdr_cmp_cfg_),
  PROTOBUF_FIELD_OFFSET(::structure::PDCPModCfgEnt, ho_info_),
  PROTOBUF_FIELD_OFFSET(::structure::PDCPModCfgEnt, re_ord_tmr_val_),
  PROTOBUF_FIELD_OFFSET(::structure::PDCPModCfgEnt, dc_bearer_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::structure::PDCPDelCfgEnt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::structure::PDCPDelCfgEnt, rb_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::structure::CreateTnlCfmEnt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::structure::CreateTnlCfmEnt, interface_type_),
  PROTOBUF_FIELD_OFFSET(::structure::CreateTnlCfmEnt, gtp_tunnel_id_),
  PROTOBUF_FIELD_OFFSET(::structure::CreateTnlCfmEnt, dst_addr_),
  PROTOBUF_FIELD_OFFSET(::structure::CreateTnlCfmEnt, src_addr_),
  PROTOBUF_FIELD_OFFSET(::structure::CreateTnlCfmEnt, local_gtp_teid_),
  PROTOBUF_FIELD_OFFSET(::structure::CreateTnlCfmEnt, remote_gtp_teid_),
  PROTOBUF_FIELD_OFFSET(::structure::CreateTnlCfmEnt, old_cell_id_),
  PROTOBUF_FIELD_OFFSET(::structure::CreateTnlCfmEnt, old_crnti_),
  PROTOBUF_FIELD_OFFSET(::structure::CreateTnlCfmEnt, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::structure::ModTnlCfmEnt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::structure::ModTnlCfmEnt, old_cell_id_),
  PROTOBUF_FIELD_OFFSET(::structure::ModTnlCfmEnt, old_crnti_),
  PROTOBUF_FIELD_OFFSET(::structure::ModTnlCfmEnt, interface_type_),
  PROTOBUF_FIELD_OFFSET(::structure::ModTnlCfmEnt, gtp_tunnel_id_),
  PROTOBUF_FIELD_OFFSET(::structure::ModTnlCfmEnt, dst_addr_),
  PROTOBUF_FIELD_OFFSET(::structure::ModTnlCfmEnt, src_addr_),
  PROTOBUF_FIELD_OFFSET(::structure::ModTnlCfmEnt, local_gtp_teid_),
  PROTOBUF_FIELD_OFFSET(::structure::ModTnlCfmEnt, remote_gtp_teid_),
  PROTOBUF_FIELD_OFFSET(::structure::ModTnlCfmEnt, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::structure::DelTnlCfmEnt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::structure::DelTnlCfmEnt, interface_type_),
  PROTOBUF_FIELD_OFFSET(::structure::DelTnlCfmEnt, gtp_tunnel_id_),
  PROTOBUF_FIELD_OFFSET(::structure::DelTnlCfmEnt, dst_addr_),
  PROTOBUF_FIELD_OFFSET(::structure::DelTnlCfmEnt, src_addr_),
  PROTOBUF_FIELD_OFFSET(::structure::DelTnlCfmEnt, local_gtp_teid_),
  PROTOBUF_FIELD_OFFSET(::structure::DelTnlCfmEnt, remote_gtp_teid_),
  PROTOBUF_FIELD_OFFSET(::structure::DelTnlCfmEnt, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::structure::PDCPAddCfgCfmEnt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::structure::PDCPAddCfgCfmEnt, rb_id_),
  PROTOBUF_FIELD_OFFSET(::structure::PDCPAddCfgCfmEnt, status_),
  PROTOBUF_FIELD_OFFSET(::structure::PDCPAddCfgCfmEnt, reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::structure::PDCPModCfgCfmEnt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::structure::PDCPModCfgCfmEnt, rb_id_),
  PROTOBUF_FIELD_OFFSET(::structure::PDCPModCfgCfmEnt, status_),
  PROTOBUF_FIELD_OFFSET(::structure::PDCPModCfgCfmEnt, reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::structure::PDCPDelCfgCfmEnt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::structure::PDCPDelCfgCfmEnt, rb_id_),
  PROTOBUF_FIELD_OFFSET(::structure::PDCPDelCfgCfmEnt, status_),
  PROTOBUF_FIELD_OFFSET(::structure::PDCPDelCfgCfmEnt, reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::structure::UlSduStaInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::structure::UlSduStaInfo, numbits_),
  PROTOBUF_FIELD_OFFSET(::structure::UlSduStaInfo, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::structure::DlSduStaInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::structure::DlSduStaInfo, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::structure::SduStatusInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::structure::SduStatusInfo, rbid_),
  PROTOBUF_FIELD_OFFSET(::structure::SduStatusInfo, dir_),
  PROTOBUF_FIELD_OFFSET(::structure::SduStatusInfo, snlen_),
  PROTOBUF_FIELD_OFFSET(::structure::SduStatusInfo, ulsdustainfo_),
  PROTOBUF_FIELD_OFFSET(::structure::SduStatusInfo, dlsdustainfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::structure::TunnelStateInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::structure::TunnelStateInfo, state_),
  PROTOBUF_FIELD_OFFSET(::structure::TunnelStateInfo, cause_),
  PROTOBUF_FIELD_OFFSET(::structure::TunnelStateInfo, local_gtp_teid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::structure::UeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::structure::UeInfo, ue_id_),
  PROTOBUF_FIELD_OFFSET(::structure::UeInfo, rb_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::structure::ReqReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::structure::ReqReply, hdr_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::structure::Pst)},
  { 19, -1, sizeof(::structure::CuCpID)},
  { 27, -1, sizeof(::structure::CuUpID)},
  { 35, -1, sizeof(::structure::SuSpID)},
  { 42, -1, sizeof(::structure::CpUpHdr)},
  { 52, -1, sizeof(::structure::SecurityConfig)},
  { 59, -1, sizeof(::structure::SecurityCfgCfm)},
  { 66, -1, sizeof(::structure::GtpTunnelId)},
  { 77, -1, sizeof(::structure::GtpTunnelInfo)},
  { 98, -1, sizeof(::structure::RlcInfo)},
  { 107, -1, sizeof(::structure::HeaderCompressionConfig)},
  { 115, -1, sizeof(::structure::PDCPHoInfo)},
  { 126, -1, sizeof(::structure::PDCPDCBearerInfo)},
  { 134, -1, sizeof(::structure::PDCPAddCfgEnt)},
  { 145, -1, sizeof(::structure::PDCPModCfgEnt)},
  { 156, -1, sizeof(::structure::PDCPDelCfgEnt)},
  { 162, -1, sizeof(::structure::CreateTnlCfmEnt)},
  { 176, -1, sizeof(::structure::ModTnlCfmEnt)},
  { 190, -1, sizeof(::structure::DelTnlCfmEnt)},
  { 202, -1, sizeof(::structure::PDCPAddCfgCfmEnt)},
  { 210, -1, sizeof(::structure::PDCPModCfgCfmEnt)},
  { 218, -1, sizeof(::structure::PDCPDelCfgCfmEnt)},
  { 226, -1, sizeof(::structure::UlSduStaInfo)},
  { 233, -1, sizeof(::structure::DlSduStaInfo)},
  { 239, -1, sizeof(::structure::SduStatusInfo)},
  { 249, -1, sizeof(::structure::TunnelStateInfo)},
  { 257, -1, sizeof(::structure::UeInfo)},
  { 264, -1, sizeof(::structure::ReqReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::structure::_Pst_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::structure::_CuCpID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::structure::_CuUpID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::structure::_SuSpID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::structure::_CpUpHdr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::structure::_SecurityConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::structure::_SecurityCfgCfm_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::structure::_GtpTunnelId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::structure::_GtpTunnelInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::structure::_RlcInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::structure::_HeaderCompressionConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::structure::_PDCPHoInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::structure::_PDCPDCBearerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::structure::_PDCPAddCfgEnt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::structure::_PDCPModCfgEnt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::structure::_PDCPDelCfgEnt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::structure::_CreateTnlCfmEnt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::structure::_ModTnlCfmEnt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::structure::_DelTnlCfmEnt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::structure::_PDCPAddCfgCfmEnt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::structure::_PDCPModCfgCfmEnt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::structure::_PDCPDelCfgCfmEnt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::structure::_UlSduStaInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::structure::_DlSduStaInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::structure::_SduStatusInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::structure::_TunnelStateInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::structure::_UeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::structure::_ReqReply_default_instance_),
};

const char descriptor_table_protodef_structure_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017structure.proto\022\tstructure\032\014common.pro"
  "to\032\nmhdr.proto\"\376\001\n\003Pst\022\023\n\013dst_proc_id\030\n "
  "\001(\r\022\023\n\013src_proc_id\030\013 \001(\r\022\017\n\007dst_ent\030\024 \001("
  "\r\022\020\n\010dst_inst\030\025 \001(\r\022\017\n\007src_ent\030\036 \001(\r\022\020\n\010"
  "src_inst\030\037 \001(\r\022\r\n\005prior\030( \001(\r\022\r\n\005route\030-"
  " \001(\r\022\r\n\005event\0302 \001(\r\022\016\n\006region\0307 \001(\r\022\014\n\004p"
  "ool\030< \001(\r\022\020\n\010selector\030A \001(\r\022\031\n\021interface"
  "_version\030F \001(\r\022\017\n\007cell_id\030K \001(\r\"7\n\006CuCpI"
  "D\022\r\n\005cp_id\030\n \001(\r\022\017\n\007cell_id\030\024 \001(\r\022\r\n\005ue_"
  "id\030\036 \001(\r\"7\n\006CuUpID\022\r\n\005up_id\030\n \001(\r\022\017\n\007cel"
  "l_id\030\024 \001(\r\022\r\n\005ue_id\030\036 \001(\004\"&\n\006SuSpID\022\r\n\005s"
  "u_id\030\n \001(\r\022\r\n\005sp_id\030\024 \001(\r\"\247\001\n\007CpUpHdr\022\033\n"
  "\003pst\030\n \001(\0132\016.structure.Pst\022#\n\010cu_cp_id\030\024"
  " \001(\0132\021.structure.CuCpID\022#\n\010cu_up_id\030\036 \001("
  "\0132\021.structure.CuUpID\022#\n\010su_sp_id\030( \001(\0132\021"
  ".structure.SuSpID\022\020\n\010trans_id\0302 \001(\r\"@\n\016S"
  "ecurityConfig\022\026\n\016algorithm_type\030\n \001(\r\022\026\n"
  "\016encryption_key\030\024 \003(\r\"0\n\016SecurityCfgCfm\022"
  "\016\n\006status\030\036 \001(\010\022\016\n\006reason\030( \001(\t\"\226\001\n\013GtpT"
  "unnelId\022\017\n\007cell_id\030\n \001(\r\022\r\n\005crnti\030\024 \001(\r\022"
  "\r\n\005rb_id\030\036 \001(\r\022\'\n\010tnl_type\030( \001(\0162\025.struc"
  "ture.TunnelType\022\024\n\014tnl_priority\0302 \001(\r\022\031\n"
  "\021rb_keep_indicator\030< \001(\r\"\302\003\n\rGtpTunnelIn"
  "fo\022&\n\006tnl_id\030\n \001(\0132\026.structure.GtpTunnel"
  "Id\022\014\n\004dscp\030\024 \001(\r\022*\n\013tunnel_type\030\025 \001(\0162\025."
  "structure.TunnelType\0220\n\016interface_type\030\026"
  " \001(\0162\030.structure.InterfaceType\022#\n\010dst_ad"
  "dr\030\036 \001(\0132\021.common.IpAddress\022#\n\010src_addr\030"
  "\037 \001(\0132\021.common.IpAddress\022\020\n\010rem_teid\030( \001"
  "(\r\022\017\n\007corr_id\030) \001(\r\022\025\n\rho_src_enodeb\0302 \001"
  "(\010\022(\n\007ho_type\0303 \001(\0162\027.structure.Handover"
  "Type\022\022\n\nis_fullCfg\030< \001(\010\022\023\n\013old_cell_id\030"
  "= \001(\r\022\021\n\told_crnti\030> \001(\r\022\020\n\010rlc_mode\030\? \001"
  "(\r\022\013\n\003qci\030F \001(\r\022\024\n\014end_cbr_type\030G \001(\r\"\\\n"
  "\007RlcInfo\022\021\n\tdirection\030\n \001(\r\022\014\n\004mode\030\024 \001("
  "\r\022\032\n\022status_rep_require\030\036 \001(\010\022\024\n\014pdcp_sn"
  "_size\030( \001(\r\"W\n\027HeaderCompressionConfig\022\025"
  "\n\rhdr_comp_used\030\n \001(\010\022\017\n\007max_cid\030\024 \001(\r\022\024"
  "\n\014profile_list\030\036 \003(\r\"\216\001\n\nPDCPHoInfo\022)\n\ni"
  "s_ho_pres\030\n \001(\0162\025.structure.PDCPHoPres\022\016"
  "\n\006sn_len\030\024 \001(\r\022\020\n\010dl_count\030\036 \001(\r\022\020\n\010ul_c"
  "ount\030( \001(\r\022\020\n\010num_bits\0302 \001(\r\022\017\n\007bit_map\030"
  "< \003(\r\"L\n\020PDCPDCBearerInfo\022\016\n\006sn_len\030\n \001("
  "\r\022\023\n\013bearer_type\030\024 \001(\r\022\023\n\013split_ratio\030\036 "
  "\001(\r\"\271\001\n\rPDCPAddCfgEnt\022\r\n\005rb_id\030\n \001(\r\022\013\n\003"
  "qci\030\024 \001(\r\022$\n\010rlc_info\030\036 \001(\0132\022.structure."
  "RlcInfo\022\025\n\rdiscard_timer\030( \001(\r\022\026\n\016re_ord"
  "_tmr_val\0302 \001(\r\0227\n\013hdr_cmp_cfg\030< \001(\0132\".st"
  "ructure.HeaderCompressionConfig\"\336\001\n\rPDCP"
  "ModCfgEnt\022\r\n\005rb_id\030\n \001(\r\022\020\n\010bit_flag\030\024 \001"
  "(\r\0227\n\013hdr_cmp_cfg\030\036 \001(\0132\".structure.Head"
  "erCompressionConfig\022&\n\007ho_info\030( \001(\0132\025.s"
  "tructure.PDCPHoInfo\022\026\n\016re_ord_tmr_val\0302 "
  "\001(\r\0223\n\016dc_bearer_info\030< \001(\0132\033.structure."
  "PDCPDCBearerInfo\"\036\n\rPDCPDelCfgEnt\022\r\n\005rb_"
  "id\030\n \001(\r\"\245\002\n\017CreateTnlCfmEnt\0220\n\016interfac"
  "e_type\030\030 \001(\0162\030.structure.InterfaceType\022-"
  "\n\rgtp_tunnel_id\030\031 \001(\0132\026.structure.GtpTun"
  "nelId\022#\n\010dst_addr\030\032 \001(\0132\021.common.IpAddre"
  "ss\022#\n\010src_addr\030\033 \001(\0132\021.common.IpAddress\022"
  "\026\n\016local_gtp_teid\030\036 \001(\r\022\027\n\017remote_gtp_te"
  "id\030# \001(\r\022\023\n\013old_cell_id\030$ \001(\r\022\021\n\told_crn"
  "ti\030% \001(\r\022\016\n\006status\030( \001(\010\"\242\002\n\014ModTnlCfmEn"
  "t\022\023\n\013old_cell_id\030\024 \001(\r\022\021\n\told_crnti\030\026 \001("
  "\r\0220\n\016interface_type\030\030 \001(\0162\030.structure.In"
  "terfaceType\022-\n\rgtp_tunnel_id\030\031 \001(\0132\026.str"
  "ucture.GtpTunnelId\022#\n\010dst_addr\030\032 \001(\0132\021.c"
  "ommon.IpAddress\022#\n\010src_addr\030\033 \001(\0132\021.comm"
  "on.IpAddress\022\026\n\016local_gtp_teid\030\036 \001(\r\022\027\n\017"
  "remote_gtp_teid\030# \001(\r\022\016\n\006status\030( \001(\010\"\372\001"
  "\n\014DelTnlCfmEnt\0220\n\016interface_type\030\030 \001(\0162\030"
  ".structure.InterfaceType\022-\n\rgtp_tunnel_i"
  "d\030\031 \001(\0132\026.structure.GtpTunnelId\022#\n\010dst_a"
  "ddr\030\032 \001(\0132\021.common.IpAddress\022#\n\010src_addr"
  "\030\033 \001(\0132\021.common.IpAddress\022\026\n\016local_gtp_t"
  "eid\030\036 \001(\r\022\027\n\017remote_gtp_teid\030# \001(\r\022\016\n\006st"
  "atus\030( \001(\010\"e\n\020PDCPAddCfgCfmEnt\022\r\n\005rb_id\030"
  "\n \001(\r\022\016\n\006status\030\024 \001(\010\0222\n\006reason\030\036 \001(\0162\"."
  "structure.PDCPConfigFailureReason\"e\n\020PDC"
  "PModCfgCfmEnt\022\r\n\005rb_id\030\n \001(\r\022\016\n\006status\030\024"
  " \001(\010\0222\n\006reason\030\036 \001(\0162\".structure.PDCPCon"
  "figFailureReason\"e\n\020PDCPDelCfgCfmEnt\022\r\n\005"
  "rb_id\030\n \001(\r\022\016\n\006status\030\024 \001(\010\0222\n\006reason\030\036 "
  "\001(\0162\".structure.PDCPConfigFailureReason\""
  ".\n\014UlSduStaInfo\022\017\n\007numBits\030\n \001(\r\022\r\n\005coun"
  "t\030\024 \001(\r\"\035\n\014DlSduStaInfo\022\r\n\005count\030\n \001(\r\"\227"
  "\001\n\rSduStatusInfo\022\014\n\004rbId\030\n \001(\r\022\013\n\003dir\030\024 "
  "\001(\r\022\r\n\005snLen\030\036 \001(\r\022-\n\014ulSduStaInfo\030( \001(\013"
  "2\027.structure.UlSduStaInfo\022-\n\014dlSduStaInf"
  "o\0302 \001(\0132\027.structure.DlSduStaInfo\"_\n\017Tunn"
  "elStateInfo\022%\n\005state\030\n \001(\0162\026.structure.T"
  "unnelState\022\r\n\005cause\030\024 \001(\r\022\026\n\016local_gtp_t"
  "eid\030\036 \001(\r\"&\n\006UeInfo\022\r\n\005ue_id\030\n \001(\004\022\r\n\005rb"
  "_id\030\024 \003(\r\"%\n\010ReqReply\022\031\n\003hdr\030\n \001(\0132\014.mhd"
  "r.MsgHdr*H\n\nTunnelType\022\006\n\002DL\020\000\022\006\n\002UL\020\001\022\017"
  "\n\013Dl_DATA_FWD\020\002\022\017\n\013UL_DATA_FWD\020\003\022\010\n\004LIPA"
  "\020\004*;\n\rInterfaceType\022\022\n\016INTERFACE_NONE\020\000\022"
  "\006\n\002S1\020\001\022\006\n\002V1\020\002\022\006\n\002X2\020\003*o\n\014HandoverType\022"
  "\020\n\014HO_TYPE_NONE\020\000\022\014\n\010S1_BASED\020\001\022\014\n\010X2_BA"
  "SED\020\002\022\r\n\tINTRA_BBU\020\003\022\020\n\014INTRA_DU_BBU\020\004\022\020"
  "\n\014INTER_DU_BBU\020\005*\345\001\n\027PDCPConfigFailureRe"
  "ason\022\r\n\tREAS_NONE\020\000\022\022\n\016ENT_CREAT_FAIL\020\001\022"
  "\024\n\020INVALID_RLC_MODE\020\005\022\027\n\023CIPHER_ALGO_INV"
  "ALID\020\010\022\020\n\014ENT_DEL_FAIL\020\t\022\017\n\013UE_DEL_FAIL\020"
  "\n\022\016\n\nREEST_FAIL\020\013\022\025\n\021COMP_ALGO_INVALID\020\014"
  "\022\r\n\tSAME_UEID\020\017\022\r\n\tSAME_RBID\020\020\022\020\n\014INVALI"
  "D_RBID\020\021*a\n\016PDCPConfigType\022\013\n\007CFG_ADD\020\000\022"
  "\016\n\nCFG_MODIFY\020\001\022\016\n\nCFG_DELETE\020\002\022\017\n\013REEST"
  "ABLISH\020\003\022\021\n\rCFG_DELETE_UE\020\004*4\n\nPDCPHoPre"
  "s\022\020\n\014HO_NOT_PRSNT\020\000\022\t\n\005HO_UL\020\001\022\t\n\005HO_DL\020"
  "\002*i\n\013TunnelState\022\023\n\017TNL_STATE_ERROR\020\000\022\024\n"
  "\020DRB_STATE_NORMAL\020\001\022\026\n\022DRB_STATE_BUFFERI"
  "N\020\002\022\027\n\023TNL_DL_FWDSTATE_NEW\020\003*1\n\017IpAddres"
  "sAction\022\016\n\nAction_add\020\000\022\016\n\nAction_del\020\001*"
  "E\n\nPathStatus\022\020\n\014StatusActive\020\000\022\022\n\016Statu"
  "sInactive\020\001\022\021\n\rStatusDeleted\020\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_structure_2eproto_deps[2] = {
  &::descriptor_table_common_2eproto,
  &::descriptor_table_mhdr_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_structure_2eproto_sccs[28] = {
  &scc_info_CpUpHdr_structure_2eproto.base,
  &scc_info_CreateTnlCfmEnt_structure_2eproto.base,
  &scc_info_CuCpID_structure_2eproto.base,
  &scc_info_CuUpID_structure_2eproto.base,
  &scc_info_DelTnlCfmEnt_structure_2eproto.base,
  &scc_info_DlSduStaInfo_structure_2eproto.base,
  &scc_info_GtpTunnelId_structure_2eproto.base,
  &scc_info_GtpTunnelInfo_structure_2eproto.base,
  &scc_info_HeaderCompressionConfig_structure_2eproto.base,
  &scc_info_ModTnlCfmEnt_structure_2eproto.base,
  &scc_info_PDCPAddCfgCfmEnt_structure_2eproto.base,
  &scc_info_PDCPAddCfgEnt_structure_2eproto.base,
  &scc_info_PDCPDCBearerInfo_structure_2eproto.base,
  &scc_info_PDCPDelCfgCfmEnt_structure_2eproto.base,
  &scc_info_PDCPDelCfgEnt_structure_2eproto.base,
  &scc_info_PDCPHoInfo_structure_2eproto.base,
  &scc_info_PDCPModCfgCfmEnt_structure_2eproto.base,
  &scc_info_PDCPModCfgEnt_structure_2eproto.base,
  &scc_info_Pst_structure_2eproto.base,
  &scc_info_ReqReply_structure_2eproto.base,
  &scc_info_RlcInfo_structure_2eproto.base,
  &scc_info_SduStatusInfo_structure_2eproto.base,
  &scc_info_SecurityCfgCfm_structure_2eproto.base,
  &scc_info_SecurityConfig_structure_2eproto.base,
  &scc_info_SuSpID_structure_2eproto.base,
  &scc_info_TunnelStateInfo_structure_2eproto.base,
  &scc_info_UeInfo_structure_2eproto.base,
  &scc_info_UlSduStaInfo_structure_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_structure_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_structure_2eproto = {
  false, false, descriptor_table_protodef_structure_2eproto, "structure.proto", 4638,
  &descriptor_table_structure_2eproto_once, descriptor_table_structure_2eproto_sccs, descriptor_table_structure_2eproto_deps, 28, 2,
  schemas, file_default_instances, TableStruct_structure_2eproto::offsets,
  file_level_metadata_structure_2eproto, 28, file_level_enum_descriptors_structure_2eproto, file_level_service_descriptors_structure_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_structure_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_structure_2eproto)), true);
namespace structure {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TunnelType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_structure_2eproto);
  return file_level_enum_descriptors_structure_2eproto[0];
}
bool TunnelType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InterfaceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_structure_2eproto);
  return file_level_enum_descriptors_structure_2eproto[1];
}
bool InterfaceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HandoverType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_structure_2eproto);
  return file_level_enum_descriptors_structure_2eproto[2];
}
bool HandoverType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PDCPConfigFailureReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_structure_2eproto);
  return file_level_enum_descriptors_structure_2eproto[3];
}
bool PDCPConfigFailureReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 5:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PDCPConfigType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_structure_2eproto);
  return file_level_enum_descriptors_structure_2eproto[4];
}
bool PDCPConfigType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PDCPHoPres_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_structure_2eproto);
  return file_level_enum_descriptors_structure_2eproto[5];
}
bool PDCPHoPres_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TunnelState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_structure_2eproto);
  return file_level_enum_descriptors_structure_2eproto[6];
}
bool TunnelState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IpAddressAction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_structure_2eproto);
  return file_level_enum_descriptors_structure_2eproto[7];
}
bool IpAddressAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PathStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_structure_2eproto);
  return file_level_enum_descriptors_structure_2eproto[8];
}
bool PathStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Pst::InitAsDefaultInstance() {
}
class Pst::_Internal {
 public:
};

Pst::Pst(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:structure.Pst)
}
Pst::Pst(const Pst& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&dst_proc_id_, &from.dst_proc_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cell_id_) -
    reinterpret_cast<char*>(&dst_proc_id_)) + sizeof(cell_id_));
  // @@protoc_insertion_point(copy_constructor:structure.Pst)
}

void Pst::SharedCtor() {
  ::memset(&dst_proc_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cell_id_) -
      reinterpret_cast<char*>(&dst_proc_id_)) + sizeof(cell_id_));
}

Pst::~Pst() {
  // @@protoc_insertion_point(destructor:structure.Pst)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Pst::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Pst::ArenaDtor(void* object) {
  Pst* _this = reinterpret_cast< Pst* >(object);
  (void)_this;
}
void Pst::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pst::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pst& Pst::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Pst_structure_2eproto.base);
  return *internal_default_instance();
}


void Pst::Clear() {
// @@protoc_insertion_point(message_clear_start:structure.Pst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dst_proc_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cell_id_) -
      reinterpret_cast<char*>(&dst_proc_id_)) + sizeof(cell_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pst::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 dst_proc_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          dst_proc_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 src_proc_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          src_proc_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 dst_ent = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          dst_ent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 dst_inst = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          dst_inst_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 src_ent = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          src_ent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 src_inst = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          src_inst_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 prior = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          prior_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 route = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          route_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 event = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          event_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 region = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          region_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pool = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          pool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 selector = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          selector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 interface_version = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          interface_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cell_id = 75;
      case 75:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          cell_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pst::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:structure.Pst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dst_proc_id = 10;
  if (this->dst_proc_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_dst_proc_id(), target);
  }

  // uint32 src_proc_id = 11;
  if (this->src_proc_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_src_proc_id(), target);
  }

  // uint32 dst_ent = 20;
  if (this->dst_ent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_dst_ent(), target);
  }

  // uint32 dst_inst = 21;
  if (this->dst_inst() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_dst_inst(), target);
  }

  // uint32 src_ent = 30;
  if (this->src_ent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_src_ent(), target);
  }

  // uint32 src_inst = 31;
  if (this->src_inst() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(31, this->_internal_src_inst(), target);
  }

  // uint32 prior = 40;
  if (this->prior() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(40, this->_internal_prior(), target);
  }

  // uint32 route = 45;
  if (this->route() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(45, this->_internal_route(), target);
  }

  // uint32 event = 50;
  if (this->event() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(50, this->_internal_event(), target);
  }

  // uint32 region = 55;
  if (this->region() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(55, this->_internal_region(), target);
  }

  // uint32 pool = 60;
  if (this->pool() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(60, this->_internal_pool(), target);
  }

  // uint32 selector = 65;
  if (this->selector() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(65, this->_internal_selector(), target);
  }

  // uint32 interface_version = 70;
  if (this->interface_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(70, this->_internal_interface_version(), target);
  }

  // uint32 cell_id = 75;
  if (this->cell_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(75, this->_internal_cell_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:structure.Pst)
  return target;
}

size_t Pst::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:structure.Pst)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 dst_proc_id = 10;
  if (this->dst_proc_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dst_proc_id());
  }

  // uint32 src_proc_id = 11;
  if (this->src_proc_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_src_proc_id());
  }

  // uint32 dst_ent = 20;
  if (this->dst_ent() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dst_ent());
  }

  // uint32 dst_inst = 21;
  if (this->dst_inst() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dst_inst());
  }

  // uint32 src_ent = 30;
  if (this->src_ent() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_src_ent());
  }

  // uint32 src_inst = 31;
  if (this->src_inst() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_src_inst());
  }

  // uint32 prior = 40;
  if (this->prior() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_prior());
  }

  // uint32 route = 45;
  if (this->route() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_route());
  }

  // uint32 event = 50;
  if (this->event() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_event());
  }

  // uint32 region = 55;
  if (this->region() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_region());
  }

  // uint32 pool = 60;
  if (this->pool() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pool());
  }

  // uint32 selector = 65;
  if (this->selector() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_selector());
  }

  // uint32 interface_version = 70;
  if (this->interface_version() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_interface_version());
  }

  // uint32 cell_id = 75;
  if (this->cell_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cell_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pst::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:structure.Pst)
  GOOGLE_DCHECK_NE(&from, this);
  const Pst* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pst>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:structure.Pst)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:structure.Pst)
    MergeFrom(*source);
  }
}

void Pst::MergeFrom(const Pst& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:structure.Pst)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dst_proc_id() != 0) {
    _internal_set_dst_proc_id(from._internal_dst_proc_id());
  }
  if (from.src_proc_id() != 0) {
    _internal_set_src_proc_id(from._internal_src_proc_id());
  }
  if (from.dst_ent() != 0) {
    _internal_set_dst_ent(from._internal_dst_ent());
  }
  if (from.dst_inst() != 0) {
    _internal_set_dst_inst(from._internal_dst_inst());
  }
  if (from.src_ent() != 0) {
    _internal_set_src_ent(from._internal_src_ent());
  }
  if (from.src_inst() != 0) {
    _internal_set_src_inst(from._internal_src_inst());
  }
  if (from.prior() != 0) {
    _internal_set_prior(from._internal_prior());
  }
  if (from.route() != 0) {
    _internal_set_route(from._internal_route());
  }
  if (from.event() != 0) {
    _internal_set_event(from._internal_event());
  }
  if (from.region() != 0) {
    _internal_set_region(from._internal_region());
  }
  if (from.pool() != 0) {
    _internal_set_pool(from._internal_pool());
  }
  if (from.selector() != 0) {
    _internal_set_selector(from._internal_selector());
  }
  if (from.interface_version() != 0) {
    _internal_set_interface_version(from._internal_interface_version());
  }
  if (from.cell_id() != 0) {
    _internal_set_cell_id(from._internal_cell_id());
  }
}

void Pst::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:structure.Pst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pst::CopyFrom(const Pst& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:structure.Pst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pst::IsInitialized() const {
  return true;
}

void Pst::InternalSwap(Pst* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pst, cell_id_)
      + sizeof(Pst::cell_id_)
      - PROTOBUF_FIELD_OFFSET(Pst, dst_proc_id_)>(
          reinterpret_cast<char*>(&dst_proc_id_),
          reinterpret_cast<char*>(&other->dst_proc_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pst::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CuCpID::InitAsDefaultInstance() {
}
class CuCpID::_Internal {
 public:
};

CuCpID::CuCpID(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:structure.CuCpID)
}
CuCpID::CuCpID(const CuCpID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ue_id_, &from.ue_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cell_id_) -
    reinterpret_cast<char*>(&ue_id_)) + sizeof(cell_id_));
  // @@protoc_insertion_point(copy_constructor:structure.CuCpID)
}

void CuCpID::SharedCtor() {
  ::memset(&ue_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cell_id_) -
      reinterpret_cast<char*>(&ue_id_)) + sizeof(cell_id_));
}

CuCpID::~CuCpID() {
  // @@protoc_insertion_point(destructor:structure.CuCpID)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CuCpID::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CuCpID::ArenaDtor(void* object) {
  CuCpID* _this = reinterpret_cast< CuCpID* >(object);
  (void)_this;
}
void CuCpID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CuCpID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CuCpID& CuCpID::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CuCpID_structure_2eproto.base);
  return *internal_default_instance();
}


void CuCpID::Clear() {
// @@protoc_insertion_point(message_clear_start:structure.CuCpID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ue_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cell_id_) -
      reinterpret_cast<char*>(&ue_id_)) + sizeof(cell_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CuCpID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 cp_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          cp_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cell_id = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          cell_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ue_id = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          ue_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CuCpID::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:structure.CuCpID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 cp_id = 10;
  if (this->cp_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_cp_id(), target);
  }

  // uint32 cell_id = 20;
  if (this->cell_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_cell_id(), target);
  }

  // uint32 ue_id = 30;
  if (this->ue_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_ue_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:structure.CuCpID)
  return target;
}

size_t CuCpID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:structure.CuCpID)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 ue_id = 30;
  if (this->ue_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ue_id());
  }

  // uint32 cp_id = 10;
  if (this->cp_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cp_id());
  }

  // uint32 cell_id = 20;
  if (this->cell_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cell_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CuCpID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:structure.CuCpID)
  GOOGLE_DCHECK_NE(&from, this);
  const CuCpID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CuCpID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:structure.CuCpID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:structure.CuCpID)
    MergeFrom(*source);
  }
}

void CuCpID::MergeFrom(const CuCpID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:structure.CuCpID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ue_id() != 0) {
    _internal_set_ue_id(from._internal_ue_id());
  }
  if (from.cp_id() != 0) {
    _internal_set_cp_id(from._internal_cp_id());
  }
  if (from.cell_id() != 0) {
    _internal_set_cell_id(from._internal_cell_id());
  }
}

void CuCpID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:structure.CuCpID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CuCpID::CopyFrom(const CuCpID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:structure.CuCpID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CuCpID::IsInitialized() const {
  return true;
}

void CuCpID::InternalSwap(CuCpID* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CuCpID, cell_id_)
      + sizeof(CuCpID::cell_id_)
      - PROTOBUF_FIELD_OFFSET(CuCpID, ue_id_)>(
          reinterpret_cast<char*>(&ue_id_),
          reinterpret_cast<char*>(&other->ue_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CuCpID::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CuUpID::InitAsDefaultInstance() {
}
class CuUpID::_Internal {
 public:
};

CuUpID::CuUpID(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:structure.CuUpID)
}
CuUpID::CuUpID(const CuUpID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&up_id_, &from.up_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ue_id_) -
    reinterpret_cast<char*>(&up_id_)) + sizeof(ue_id_));
  // @@protoc_insertion_point(copy_constructor:structure.CuUpID)
}

void CuUpID::SharedCtor() {
  ::memset(&up_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ue_id_) -
      reinterpret_cast<char*>(&up_id_)) + sizeof(ue_id_));
}

CuUpID::~CuUpID() {
  // @@protoc_insertion_point(destructor:structure.CuUpID)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CuUpID::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CuUpID::ArenaDtor(void* object) {
  CuUpID* _this = reinterpret_cast< CuUpID* >(object);
  (void)_this;
}
void CuUpID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CuUpID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CuUpID& CuUpID::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CuUpID_structure_2eproto.base);
  return *internal_default_instance();
}


void CuUpID::Clear() {
// @@protoc_insertion_point(message_clear_start:structure.CuUpID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&up_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ue_id_) -
      reinterpret_cast<char*>(&up_id_)) + sizeof(ue_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CuUpID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 up_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          up_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cell_id = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          cell_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 ue_id = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          ue_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CuUpID::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:structure.CuUpID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 up_id = 10;
  if (this->up_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_up_id(), target);
  }

  // uint32 cell_id = 20;
  if (this->cell_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_cell_id(), target);
  }

  // uint64 ue_id = 30;
  if (this->ue_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(30, this->_internal_ue_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:structure.CuUpID)
  return target;
}

size_t CuUpID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:structure.CuUpID)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 up_id = 10;
  if (this->up_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_up_id());
  }

  // uint32 cell_id = 20;
  if (this->cell_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cell_id());
  }

  // uint64 ue_id = 30;
  if (this->ue_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_ue_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CuUpID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:structure.CuUpID)
  GOOGLE_DCHECK_NE(&from, this);
  const CuUpID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CuUpID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:structure.CuUpID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:structure.CuUpID)
    MergeFrom(*source);
  }
}

void CuUpID::MergeFrom(const CuUpID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:structure.CuUpID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.up_id() != 0) {
    _internal_set_up_id(from._internal_up_id());
  }
  if (from.cell_id() != 0) {
    _internal_set_cell_id(from._internal_cell_id());
  }
  if (from.ue_id() != 0) {
    _internal_set_ue_id(from._internal_ue_id());
  }
}

void CuUpID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:structure.CuUpID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CuUpID::CopyFrom(const CuUpID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:structure.CuUpID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CuUpID::IsInitialized() const {
  return true;
}

void CuUpID::InternalSwap(CuUpID* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CuUpID, ue_id_)
      + sizeof(CuUpID::ue_id_)
      - PROTOBUF_FIELD_OFFSET(CuUpID, up_id_)>(
          reinterpret_cast<char*>(&up_id_),
          reinterpret_cast<char*>(&other->up_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CuUpID::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SuSpID::InitAsDefaultInstance() {
}
class SuSpID::_Internal {
 public:
};

SuSpID::SuSpID(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:structure.SuSpID)
}
SuSpID::SuSpID(const SuSpID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&su_id_, &from.su_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&sp_id_) -
    reinterpret_cast<char*>(&su_id_)) + sizeof(sp_id_));
  // @@protoc_insertion_point(copy_constructor:structure.SuSpID)
}

void SuSpID::SharedCtor() {
  ::memset(&su_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sp_id_) -
      reinterpret_cast<char*>(&su_id_)) + sizeof(sp_id_));
}

SuSpID::~SuSpID() {
  // @@protoc_insertion_point(destructor:structure.SuSpID)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SuSpID::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SuSpID::ArenaDtor(void* object) {
  SuSpID* _this = reinterpret_cast< SuSpID* >(object);
  (void)_this;
}
void SuSpID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SuSpID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SuSpID& SuSpID::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SuSpID_structure_2eproto.base);
  return *internal_default_instance();
}


void SuSpID::Clear() {
// @@protoc_insertion_point(message_clear_start:structure.SuSpID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&su_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sp_id_) -
      reinterpret_cast<char*>(&su_id_)) + sizeof(sp_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SuSpID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 su_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          su_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sp_id = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          sp_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SuSpID::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:structure.SuSpID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 su_id = 10;
  if (this->su_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_su_id(), target);
  }

  // uint32 sp_id = 20;
  if (this->sp_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_sp_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:structure.SuSpID)
  return target;
}

size_t SuSpID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:structure.SuSpID)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 su_id = 10;
  if (this->su_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_su_id());
  }

  // uint32 sp_id = 20;
  if (this->sp_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sp_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SuSpID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:structure.SuSpID)
  GOOGLE_DCHECK_NE(&from, this);
  const SuSpID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SuSpID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:structure.SuSpID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:structure.SuSpID)
    MergeFrom(*source);
  }
}

void SuSpID::MergeFrom(const SuSpID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:structure.SuSpID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.su_id() != 0) {
    _internal_set_su_id(from._internal_su_id());
  }
  if (from.sp_id() != 0) {
    _internal_set_sp_id(from._internal_sp_id());
  }
}

void SuSpID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:structure.SuSpID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SuSpID::CopyFrom(const SuSpID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:structure.SuSpID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuSpID::IsInitialized() const {
  return true;
}

void SuSpID::InternalSwap(SuSpID* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SuSpID, sp_id_)
      + sizeof(SuSpID::sp_id_)
      - PROTOBUF_FIELD_OFFSET(SuSpID, su_id_)>(
          reinterpret_cast<char*>(&su_id_),
          reinterpret_cast<char*>(&other->su_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SuSpID::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CpUpHdr::InitAsDefaultInstance() {
  ::structure::_CpUpHdr_default_instance_._instance.get_mutable()->pst_ = const_cast< ::structure::Pst*>(
      ::structure::Pst::internal_default_instance());
  ::structure::_CpUpHdr_default_instance_._instance.get_mutable()->cu_cp_id_ = const_cast< ::structure::CuCpID*>(
      ::structure::CuCpID::internal_default_instance());
  ::structure::_CpUpHdr_default_instance_._instance.get_mutable()->cu_up_id_ = const_cast< ::structure::CuUpID*>(
      ::structure::CuUpID::internal_default_instance());
  ::structure::_CpUpHdr_default_instance_._instance.get_mutable()->su_sp_id_ = const_cast< ::structure::SuSpID*>(
      ::structure::SuSpID::internal_default_instance());
}
class CpUpHdr::_Internal {
 public:
  static const ::structure::Pst& pst(const CpUpHdr* msg);
  static const ::structure::CuCpID& cu_cp_id(const CpUpHdr* msg);
  static const ::structure::CuUpID& cu_up_id(const CpUpHdr* msg);
  static const ::structure::SuSpID& su_sp_id(const CpUpHdr* msg);
};

const ::structure::Pst&
CpUpHdr::_Internal::pst(const CpUpHdr* msg) {
  return *msg->pst_;
}
const ::structure::CuCpID&
CpUpHdr::_Internal::cu_cp_id(const CpUpHdr* msg) {
  return *msg->cu_cp_id_;
}
const ::structure::CuUpID&
CpUpHdr::_Internal::cu_up_id(const CpUpHdr* msg) {
  return *msg->cu_up_id_;
}
const ::structure::SuSpID&
CpUpHdr::_Internal::su_sp_id(const CpUpHdr* msg) {
  return *msg->su_sp_id_;
}
CpUpHdr::CpUpHdr(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:structure.CpUpHdr)
}
CpUpHdr::CpUpHdr(const CpUpHdr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pst()) {
    pst_ = new ::structure::Pst(*from.pst_);
  } else {
    pst_ = nullptr;
  }
  if (from._internal_has_cu_cp_id()) {
    cu_cp_id_ = new ::structure::CuCpID(*from.cu_cp_id_);
  } else {
    cu_cp_id_ = nullptr;
  }
  if (from._internal_has_cu_up_id()) {
    cu_up_id_ = new ::structure::CuUpID(*from.cu_up_id_);
  } else {
    cu_up_id_ = nullptr;
  }
  if (from._internal_has_su_sp_id()) {
    su_sp_id_ = new ::structure::SuSpID(*from.su_sp_id_);
  } else {
    su_sp_id_ = nullptr;
  }
  trans_id_ = from.trans_id_;
  // @@protoc_insertion_point(copy_constructor:structure.CpUpHdr)
}

void CpUpHdr::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CpUpHdr_structure_2eproto.base);
  ::memset(&pst_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trans_id_) -
      reinterpret_cast<char*>(&pst_)) + sizeof(trans_id_));
}

CpUpHdr::~CpUpHdr() {
  // @@protoc_insertion_point(destructor:structure.CpUpHdr)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CpUpHdr::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pst_;
  if (this != internal_default_instance()) delete cu_cp_id_;
  if (this != internal_default_instance()) delete cu_up_id_;
  if (this != internal_default_instance()) delete su_sp_id_;
}

void CpUpHdr::ArenaDtor(void* object) {
  CpUpHdr* _this = reinterpret_cast< CpUpHdr* >(object);
  (void)_this;
}
void CpUpHdr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CpUpHdr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CpUpHdr& CpUpHdr::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CpUpHdr_structure_2eproto.base);
  return *internal_default_instance();
}


void CpUpHdr::Clear() {
// @@protoc_insertion_point(message_clear_start:structure.CpUpHdr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && pst_ != nullptr) {
    delete pst_;
  }
  pst_ = nullptr;
  if (GetArena() == nullptr && cu_cp_id_ != nullptr) {
    delete cu_cp_id_;
  }
  cu_cp_id_ = nullptr;
  if (GetArena() == nullptr && cu_up_id_ != nullptr) {
    delete cu_up_id_;
  }
  cu_up_id_ = nullptr;
  if (GetArena() == nullptr && su_sp_id_ != nullptr) {
    delete su_sp_id_;
  }
  su_sp_id_ = nullptr;
  trans_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CpUpHdr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .structure.Pst pst = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_pst(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.CuCpID cu_cp_id = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_cu_cp_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.CuUpID cu_up_id = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_cu_up_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.SuSpID su_sp_id = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_su_sp_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 trans_id = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          trans_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CpUpHdr::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:structure.CpUpHdr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .structure.Pst pst = 10;
  if (this->has_pst()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::pst(this), target, stream);
  }

  // .structure.CuCpID cu_cp_id = 20;
  if (this->has_cu_cp_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::cu_cp_id(this), target, stream);
  }

  // .structure.CuUpID cu_up_id = 30;
  if (this->has_cu_up_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::cu_up_id(this), target, stream);
  }

  // .structure.SuSpID su_sp_id = 40;
  if (this->has_su_sp_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        40, _Internal::su_sp_id(this), target, stream);
  }

  // uint32 trans_id = 50;
  if (this->trans_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(50, this->_internal_trans_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:structure.CpUpHdr)
  return target;
}

size_t CpUpHdr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:structure.CpUpHdr)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .structure.Pst pst = 10;
  if (this->has_pst()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pst_);
  }

  // .structure.CuCpID cu_cp_id = 20;
  if (this->has_cu_cp_id()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cu_cp_id_);
  }

  // .structure.CuUpID cu_up_id = 30;
  if (this->has_cu_up_id()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cu_up_id_);
  }

  // .structure.SuSpID su_sp_id = 40;
  if (this->has_su_sp_id()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *su_sp_id_);
  }

  // uint32 trans_id = 50;
  if (this->trans_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_trans_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CpUpHdr::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:structure.CpUpHdr)
  GOOGLE_DCHECK_NE(&from, this);
  const CpUpHdr* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CpUpHdr>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:structure.CpUpHdr)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:structure.CpUpHdr)
    MergeFrom(*source);
  }
}

void CpUpHdr::MergeFrom(const CpUpHdr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:structure.CpUpHdr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pst()) {
    _internal_mutable_pst()->::structure::Pst::MergeFrom(from._internal_pst());
  }
  if (from.has_cu_cp_id()) {
    _internal_mutable_cu_cp_id()->::structure::CuCpID::MergeFrom(from._internal_cu_cp_id());
  }
  if (from.has_cu_up_id()) {
    _internal_mutable_cu_up_id()->::structure::CuUpID::MergeFrom(from._internal_cu_up_id());
  }
  if (from.has_su_sp_id()) {
    _internal_mutable_su_sp_id()->::structure::SuSpID::MergeFrom(from._internal_su_sp_id());
  }
  if (from.trans_id() != 0) {
    _internal_set_trans_id(from._internal_trans_id());
  }
}

void CpUpHdr::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:structure.CpUpHdr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CpUpHdr::CopyFrom(const CpUpHdr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:structure.CpUpHdr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CpUpHdr::IsInitialized() const {
  return true;
}

void CpUpHdr::InternalSwap(CpUpHdr* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CpUpHdr, trans_id_)
      + sizeof(CpUpHdr::trans_id_)
      - PROTOBUF_FIELD_OFFSET(CpUpHdr, pst_)>(
          reinterpret_cast<char*>(&pst_),
          reinterpret_cast<char*>(&other->pst_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CpUpHdr::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SecurityConfig::InitAsDefaultInstance() {
}
class SecurityConfig::_Internal {
 public:
};

SecurityConfig::SecurityConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  encryption_key_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:structure.SecurityConfig)
}
SecurityConfig::SecurityConfig(const SecurityConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      encryption_key_(from.encryption_key_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  algorithm_type_ = from.algorithm_type_;
  // @@protoc_insertion_point(copy_constructor:structure.SecurityConfig)
}

void SecurityConfig::SharedCtor() {
  algorithm_type_ = 0u;
}

SecurityConfig::~SecurityConfig() {
  // @@protoc_insertion_point(destructor:structure.SecurityConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SecurityConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SecurityConfig::ArenaDtor(void* object) {
  SecurityConfig* _this = reinterpret_cast< SecurityConfig* >(object);
  (void)_this;
}
void SecurityConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SecurityConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SecurityConfig& SecurityConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SecurityConfig_structure_2eproto.base);
  return *internal_default_instance();
}


void SecurityConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:structure.SecurityConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  encryption_key_.Clear();
  algorithm_type_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SecurityConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 algorithm_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          algorithm_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 encryption_key = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_encryption_key(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160) {
          _internal_add_encryption_key(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SecurityConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:structure.SecurityConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 algorithm_type = 10;
  if (this->algorithm_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_algorithm_type(), target);
  }

  // repeated uint32 encryption_key = 20;
  {
    int byte_size = _encryption_key_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          20, _internal_encryption_key(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:structure.SecurityConfig)
  return target;
}

size_t SecurityConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:structure.SecurityConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 encryption_key = 20;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->encryption_key_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _encryption_key_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 algorithm_type = 10;
  if (this->algorithm_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_algorithm_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecurityConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:structure.SecurityConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const SecurityConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SecurityConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:structure.SecurityConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:structure.SecurityConfig)
    MergeFrom(*source);
  }
}

void SecurityConfig::MergeFrom(const SecurityConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:structure.SecurityConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  encryption_key_.MergeFrom(from.encryption_key_);
  if (from.algorithm_type() != 0) {
    _internal_set_algorithm_type(from._internal_algorithm_type());
  }
}

void SecurityConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:structure.SecurityConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecurityConfig::CopyFrom(const SecurityConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:structure.SecurityConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecurityConfig::IsInitialized() const {
  return true;
}

void SecurityConfig::InternalSwap(SecurityConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  encryption_key_.InternalSwap(&other->encryption_key_);
  swap(algorithm_type_, other->algorithm_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SecurityConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SecurityCfgCfm::InitAsDefaultInstance() {
}
class SecurityCfgCfm::_Internal {
 public:
};

SecurityCfgCfm::SecurityCfgCfm(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:structure.SecurityCfgCfm)
}
SecurityCfgCfm::SecurityCfgCfm(const SecurityCfgCfm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reason().empty()) {
    reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_reason(),
      GetArena());
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:structure.SecurityCfgCfm)
}

void SecurityCfgCfm::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SecurityCfgCfm_structure_2eproto.base);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = false;
}

SecurityCfgCfm::~SecurityCfgCfm() {
  // @@protoc_insertion_point(destructor:structure.SecurityCfgCfm)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SecurityCfgCfm::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SecurityCfgCfm::ArenaDtor(void* object) {
  SecurityCfgCfm* _this = reinterpret_cast< SecurityCfgCfm* >(object);
  (void)_this;
}
void SecurityCfgCfm::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SecurityCfgCfm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SecurityCfgCfm& SecurityCfgCfm::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SecurityCfgCfm_structure_2eproto.base);
  return *internal_default_instance();
}


void SecurityCfgCfm::Clear() {
// @@protoc_insertion_point(message_clear_start:structure.SecurityCfgCfm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reason_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  status_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SecurityCfgCfm::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool status = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reason = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "structure.SecurityCfgCfm.reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SecurityCfgCfm::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:structure.SecurityCfgCfm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool status = 30;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(30, this->_internal_status(), target);
  }

  // string reason = 40;
  if (this->reason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "structure.SecurityCfgCfm.reason");
    target = stream->WriteStringMaybeAliased(
        40, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:structure.SecurityCfgCfm)
  return target;
}

size_t SecurityCfgCfm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:structure.SecurityCfgCfm)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reason = 40;
  if (this->reason().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // bool status = 30;
  if (this->status() != 0) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecurityCfgCfm::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:structure.SecurityCfgCfm)
  GOOGLE_DCHECK_NE(&from, this);
  const SecurityCfgCfm* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SecurityCfgCfm>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:structure.SecurityCfgCfm)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:structure.SecurityCfgCfm)
    MergeFrom(*source);
  }
}

void SecurityCfgCfm::MergeFrom(const SecurityCfgCfm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:structure.SecurityCfgCfm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reason().size() > 0) {
    _internal_set_reason(from._internal_reason());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void SecurityCfgCfm::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:structure.SecurityCfgCfm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecurityCfgCfm::CopyFrom(const SecurityCfgCfm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:structure.SecurityCfgCfm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecurityCfgCfm::IsInitialized() const {
  return true;
}

void SecurityCfgCfm::InternalSwap(SecurityCfgCfm* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SecurityCfgCfm::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GtpTunnelId::InitAsDefaultInstance() {
}
class GtpTunnelId::_Internal {
 public:
};

GtpTunnelId::GtpTunnelId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:structure.GtpTunnelId)
}
GtpTunnelId::GtpTunnelId(const GtpTunnelId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cell_id_, &from.cell_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&rb_keep_indicator_) -
    reinterpret_cast<char*>(&cell_id_)) + sizeof(rb_keep_indicator_));
  // @@protoc_insertion_point(copy_constructor:structure.GtpTunnelId)
}

void GtpTunnelId::SharedCtor() {
  ::memset(&cell_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rb_keep_indicator_) -
      reinterpret_cast<char*>(&cell_id_)) + sizeof(rb_keep_indicator_));
}

GtpTunnelId::~GtpTunnelId() {
  // @@protoc_insertion_point(destructor:structure.GtpTunnelId)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GtpTunnelId::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GtpTunnelId::ArenaDtor(void* object) {
  GtpTunnelId* _this = reinterpret_cast< GtpTunnelId* >(object);
  (void)_this;
}
void GtpTunnelId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GtpTunnelId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GtpTunnelId& GtpTunnelId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GtpTunnelId_structure_2eproto.base);
  return *internal_default_instance();
}


void GtpTunnelId::Clear() {
// @@protoc_insertion_point(message_clear_start:structure.GtpTunnelId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cell_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rb_keep_indicator_) -
      reinterpret_cast<char*>(&cell_id_)) + sizeof(rb_keep_indicator_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GtpTunnelId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 cell_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          cell_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 crnti = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          crnti_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rb_id = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          rb_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.TunnelType tnl_type = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_tnl_type(static_cast<::structure::TunnelType>(val));
        } else goto handle_unusual;
        continue;
      // uint32 tnl_priority = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          tnl_priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rb_keep_indicator = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          rb_keep_indicator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GtpTunnelId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:structure.GtpTunnelId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 cell_id = 10;
  if (this->cell_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_cell_id(), target);
  }

  // uint32 crnti = 20;
  if (this->crnti() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_crnti(), target);
  }

  // uint32 rb_id = 30;
  if (this->rb_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_rb_id(), target);
  }

  // .structure.TunnelType tnl_type = 40;
  if (this->tnl_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      40, this->_internal_tnl_type(), target);
  }

  // uint32 tnl_priority = 50;
  if (this->tnl_priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(50, this->_internal_tnl_priority(), target);
  }

  // uint32 rb_keep_indicator = 60;
  if (this->rb_keep_indicator() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(60, this->_internal_rb_keep_indicator(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:structure.GtpTunnelId)
  return target;
}

size_t GtpTunnelId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:structure.GtpTunnelId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 cell_id = 10;
  if (this->cell_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cell_id());
  }

  // uint32 crnti = 20;
  if (this->crnti() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_crnti());
  }

  // uint32 rb_id = 30;
  if (this->rb_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rb_id());
  }

  // .structure.TunnelType tnl_type = 40;
  if (this->tnl_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_tnl_type());
  }

  // uint32 tnl_priority = 50;
  if (this->tnl_priority() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tnl_priority());
  }

  // uint32 rb_keep_indicator = 60;
  if (this->rb_keep_indicator() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rb_keep_indicator());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GtpTunnelId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:structure.GtpTunnelId)
  GOOGLE_DCHECK_NE(&from, this);
  const GtpTunnelId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GtpTunnelId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:structure.GtpTunnelId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:structure.GtpTunnelId)
    MergeFrom(*source);
  }
}

void GtpTunnelId::MergeFrom(const GtpTunnelId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:structure.GtpTunnelId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cell_id() != 0) {
    _internal_set_cell_id(from._internal_cell_id());
  }
  if (from.crnti() != 0) {
    _internal_set_crnti(from._internal_crnti());
  }
  if (from.rb_id() != 0) {
    _internal_set_rb_id(from._internal_rb_id());
  }
  if (from.tnl_type() != 0) {
    _internal_set_tnl_type(from._internal_tnl_type());
  }
  if (from.tnl_priority() != 0) {
    _internal_set_tnl_priority(from._internal_tnl_priority());
  }
  if (from.rb_keep_indicator() != 0) {
    _internal_set_rb_keep_indicator(from._internal_rb_keep_indicator());
  }
}

void GtpTunnelId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:structure.GtpTunnelId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GtpTunnelId::CopyFrom(const GtpTunnelId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:structure.GtpTunnelId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GtpTunnelId::IsInitialized() const {
  return true;
}

void GtpTunnelId::InternalSwap(GtpTunnelId* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GtpTunnelId, rb_keep_indicator_)
      + sizeof(GtpTunnelId::rb_keep_indicator_)
      - PROTOBUF_FIELD_OFFSET(GtpTunnelId, cell_id_)>(
          reinterpret_cast<char*>(&cell_id_),
          reinterpret_cast<char*>(&other->cell_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GtpTunnelId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GtpTunnelInfo::InitAsDefaultInstance() {
  ::structure::_GtpTunnelInfo_default_instance_._instance.get_mutable()->tnl_id_ = const_cast< ::structure::GtpTunnelId*>(
      ::structure::GtpTunnelId::internal_default_instance());
  ::structure::_GtpTunnelInfo_default_instance_._instance.get_mutable()->dst_addr_ = const_cast< ::common::IpAddress*>(
      ::common::IpAddress::internal_default_instance());
  ::structure::_GtpTunnelInfo_default_instance_._instance.get_mutable()->src_addr_ = const_cast< ::common::IpAddress*>(
      ::common::IpAddress::internal_default_instance());
}
class GtpTunnelInfo::_Internal {
 public:
  static const ::structure::GtpTunnelId& tnl_id(const GtpTunnelInfo* msg);
  static const ::common::IpAddress& dst_addr(const GtpTunnelInfo* msg);
  static const ::common::IpAddress& src_addr(const GtpTunnelInfo* msg);
};

const ::structure::GtpTunnelId&
GtpTunnelInfo::_Internal::tnl_id(const GtpTunnelInfo* msg) {
  return *msg->tnl_id_;
}
const ::common::IpAddress&
GtpTunnelInfo::_Internal::dst_addr(const GtpTunnelInfo* msg) {
  return *msg->dst_addr_;
}
const ::common::IpAddress&
GtpTunnelInfo::_Internal::src_addr(const GtpTunnelInfo* msg) {
  return *msg->src_addr_;
}
void GtpTunnelInfo::clear_dst_addr() {
  if (GetArena() == nullptr && dst_addr_ != nullptr) {
    delete dst_addr_;
  }
  dst_addr_ = nullptr;
}
void GtpTunnelInfo::clear_src_addr() {
  if (GetArena() == nullptr && src_addr_ != nullptr) {
    delete src_addr_;
  }
  src_addr_ = nullptr;
}
GtpTunnelInfo::GtpTunnelInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:structure.GtpTunnelInfo)
}
GtpTunnelInfo::GtpTunnelInfo(const GtpTunnelInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tnl_id()) {
    tnl_id_ = new ::structure::GtpTunnelId(*from.tnl_id_);
  } else {
    tnl_id_ = nullptr;
  }
  if (from._internal_has_dst_addr()) {
    dst_addr_ = new ::common::IpAddress(*from.dst_addr_);
  } else {
    dst_addr_ = nullptr;
  }
  if (from._internal_has_src_addr()) {
    src_addr_ = new ::common::IpAddress(*from.src_addr_);
  } else {
    src_addr_ = nullptr;
  }
  ::memcpy(&dscp_, &from.dscp_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_cbr_type_) -
    reinterpret_cast<char*>(&dscp_)) + sizeof(end_cbr_type_));
  // @@protoc_insertion_point(copy_constructor:structure.GtpTunnelInfo)
}

void GtpTunnelInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GtpTunnelInfo_structure_2eproto.base);
  ::memset(&tnl_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_cbr_type_) -
      reinterpret_cast<char*>(&tnl_id_)) + sizeof(end_cbr_type_));
}

GtpTunnelInfo::~GtpTunnelInfo() {
  // @@protoc_insertion_point(destructor:structure.GtpTunnelInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GtpTunnelInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete tnl_id_;
  if (this != internal_default_instance()) delete dst_addr_;
  if (this != internal_default_instance()) delete src_addr_;
}

void GtpTunnelInfo::ArenaDtor(void* object) {
  GtpTunnelInfo* _this = reinterpret_cast< GtpTunnelInfo* >(object);
  (void)_this;
}
void GtpTunnelInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GtpTunnelInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GtpTunnelInfo& GtpTunnelInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GtpTunnelInfo_structure_2eproto.base);
  return *internal_default_instance();
}


void GtpTunnelInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:structure.GtpTunnelInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && tnl_id_ != nullptr) {
    delete tnl_id_;
  }
  tnl_id_ = nullptr;
  if (GetArena() == nullptr && dst_addr_ != nullptr) {
    delete dst_addr_;
  }
  dst_addr_ = nullptr;
  if (GetArena() == nullptr && src_addr_ != nullptr) {
    delete src_addr_;
  }
  src_addr_ = nullptr;
  ::memset(&dscp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_cbr_type_) -
      reinterpret_cast<char*>(&dscp_)) + sizeof(end_cbr_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GtpTunnelInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .structure.GtpTunnelId tnl_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_tnl_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 dscp = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          dscp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.TunnelType tunnel_type = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_tunnel_type(static_cast<::structure::TunnelType>(val));
        } else goto handle_unusual;
        continue;
      // .structure.InterfaceType interface_type = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_interface_type(static_cast<::structure::InterfaceType>(val));
        } else goto handle_unusual;
        continue;
      // .common.IpAddress dst_addr = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_dst_addr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.IpAddress src_addr = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_src_addr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rem_teid = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          rem_teid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 corr_id = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          corr_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ho_src_enodeb = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ho_src_enodeb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.HandoverType ho_type = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ho_type(static_cast<::structure::HandoverType>(val));
        } else goto handle_unusual;
        continue;
      // bool is_fullCfg = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          is_fullcfg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 old_cell_id = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          old_cell_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 old_crnti = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          old_crnti_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rlc_mode = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          rlc_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 qci = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          qci_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 end_cbr_type = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          end_cbr_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GtpTunnelInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:structure.GtpTunnelInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .structure.GtpTunnelId tnl_id = 10;
  if (this->has_tnl_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::tnl_id(this), target, stream);
  }

  // uint32 dscp = 20;
  if (this->dscp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_dscp(), target);
  }

  // .structure.TunnelType tunnel_type = 21;
  if (this->tunnel_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      21, this->_internal_tunnel_type(), target);
  }

  // .structure.InterfaceType interface_type = 22;
  if (this->interface_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      22, this->_internal_interface_type(), target);
  }

  // .common.IpAddress dst_addr = 30;
  if (this->has_dst_addr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::dst_addr(this), target, stream);
  }

  // .common.IpAddress src_addr = 31;
  if (this->has_src_addr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::src_addr(this), target, stream);
  }

  // uint32 rem_teid = 40;
  if (this->rem_teid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(40, this->_internal_rem_teid(), target);
  }

  // uint32 corr_id = 41;
  if (this->corr_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(41, this->_internal_corr_id(), target);
  }

  // bool ho_src_enodeb = 50;
  if (this->ho_src_enodeb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(50, this->_internal_ho_src_enodeb(), target);
  }

  // .structure.HandoverType ho_type = 51;
  if (this->ho_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      51, this->_internal_ho_type(), target);
  }

  // bool is_fullCfg = 60;
  if (this->is_fullcfg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(60, this->_internal_is_fullcfg(), target);
  }

  // uint32 old_cell_id = 61;
  if (this->old_cell_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(61, this->_internal_old_cell_id(), target);
  }

  // uint32 old_crnti = 62;
  if (this->old_crnti() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(62, this->_internal_old_crnti(), target);
  }

  // uint32 rlc_mode = 63;
  if (this->rlc_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(63, this->_internal_rlc_mode(), target);
  }

  // uint32 qci = 70;
  if (this->qci() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(70, this->_internal_qci(), target);
  }

  // uint32 end_cbr_type = 71;
  if (this->end_cbr_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(71, this->_internal_end_cbr_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:structure.GtpTunnelInfo)
  return target;
}

size_t GtpTunnelInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:structure.GtpTunnelInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .structure.GtpTunnelId tnl_id = 10;
  if (this->has_tnl_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tnl_id_);
  }

  // .common.IpAddress dst_addr = 30;
  if (this->has_dst_addr()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dst_addr_);
  }

  // .common.IpAddress src_addr = 31;
  if (this->has_src_addr()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *src_addr_);
  }

  // uint32 dscp = 20;
  if (this->dscp() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dscp());
  }

  // .structure.TunnelType tunnel_type = 21;
  if (this->tunnel_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_tunnel_type());
  }

  // .structure.InterfaceType interface_type = 22;
  if (this->interface_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_interface_type());
  }

  // uint32 rem_teid = 40;
  if (this->rem_teid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rem_teid());
  }

  // uint32 corr_id = 41;
  if (this->corr_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_corr_id());
  }

  // .structure.HandoverType ho_type = 51;
  if (this->ho_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ho_type());
  }

  // bool ho_src_enodeb = 50;
  if (this->ho_src_enodeb() != 0) {
    total_size += 2 + 1;
  }

  // bool is_fullCfg = 60;
  if (this->is_fullcfg() != 0) {
    total_size += 2 + 1;
  }

  // uint32 old_cell_id = 61;
  if (this->old_cell_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_old_cell_id());
  }

  // uint32 old_crnti = 62;
  if (this->old_crnti() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_old_crnti());
  }

  // uint32 rlc_mode = 63;
  if (this->rlc_mode() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rlc_mode());
  }

  // uint32 qci = 70;
  if (this->qci() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_qci());
  }

  // uint32 end_cbr_type = 71;
  if (this->end_cbr_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_end_cbr_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GtpTunnelInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:structure.GtpTunnelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GtpTunnelInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GtpTunnelInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:structure.GtpTunnelInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:structure.GtpTunnelInfo)
    MergeFrom(*source);
  }
}

void GtpTunnelInfo::MergeFrom(const GtpTunnelInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:structure.GtpTunnelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tnl_id()) {
    _internal_mutable_tnl_id()->::structure::GtpTunnelId::MergeFrom(from._internal_tnl_id());
  }
  if (from.has_dst_addr()) {
    _internal_mutable_dst_addr()->::common::IpAddress::MergeFrom(from._internal_dst_addr());
  }
  if (from.has_src_addr()) {
    _internal_mutable_src_addr()->::common::IpAddress::MergeFrom(from._internal_src_addr());
  }
  if (from.dscp() != 0) {
    _internal_set_dscp(from._internal_dscp());
  }
  if (from.tunnel_type() != 0) {
    _internal_set_tunnel_type(from._internal_tunnel_type());
  }
  if (from.interface_type() != 0) {
    _internal_set_interface_type(from._internal_interface_type());
  }
  if (from.rem_teid() != 0) {
    _internal_set_rem_teid(from._internal_rem_teid());
  }
  if (from.corr_id() != 0) {
    _internal_set_corr_id(from._internal_corr_id());
  }
  if (from.ho_type() != 0) {
    _internal_set_ho_type(from._internal_ho_type());
  }
  if (from.ho_src_enodeb() != 0) {
    _internal_set_ho_src_enodeb(from._internal_ho_src_enodeb());
  }
  if (from.is_fullcfg() != 0) {
    _internal_set_is_fullcfg(from._internal_is_fullcfg());
  }
  if (from.old_cell_id() != 0) {
    _internal_set_old_cell_id(from._internal_old_cell_id());
  }
  if (from.old_crnti() != 0) {
    _internal_set_old_crnti(from._internal_old_crnti());
  }
  if (from.rlc_mode() != 0) {
    _internal_set_rlc_mode(from._internal_rlc_mode());
  }
  if (from.qci() != 0) {
    _internal_set_qci(from._internal_qci());
  }
  if (from.end_cbr_type() != 0) {
    _internal_set_end_cbr_type(from._internal_end_cbr_type());
  }
}

void GtpTunnelInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:structure.GtpTunnelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GtpTunnelInfo::CopyFrom(const GtpTunnelInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:structure.GtpTunnelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GtpTunnelInfo::IsInitialized() const {
  return true;
}

void GtpTunnelInfo::InternalSwap(GtpTunnelInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GtpTunnelInfo, end_cbr_type_)
      + sizeof(GtpTunnelInfo::end_cbr_type_)
      - PROTOBUF_FIELD_OFFSET(GtpTunnelInfo, tnl_id_)>(
          reinterpret_cast<char*>(&tnl_id_),
          reinterpret_cast<char*>(&other->tnl_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GtpTunnelInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RlcInfo::InitAsDefaultInstance() {
}
class RlcInfo::_Internal {
 public:
};

RlcInfo::RlcInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:structure.RlcInfo)
}
RlcInfo::RlcInfo(const RlcInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&direction_, &from.direction_,
    static_cast<size_t>(reinterpret_cast<char*>(&pdcp_sn_size_) -
    reinterpret_cast<char*>(&direction_)) + sizeof(pdcp_sn_size_));
  // @@protoc_insertion_point(copy_constructor:structure.RlcInfo)
}

void RlcInfo::SharedCtor() {
  ::memset(&direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pdcp_sn_size_) -
      reinterpret_cast<char*>(&direction_)) + sizeof(pdcp_sn_size_));
}

RlcInfo::~RlcInfo() {
  // @@protoc_insertion_point(destructor:structure.RlcInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RlcInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RlcInfo::ArenaDtor(void* object) {
  RlcInfo* _this = reinterpret_cast< RlcInfo* >(object);
  (void)_this;
}
void RlcInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RlcInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RlcInfo& RlcInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RlcInfo_structure_2eproto.base);
  return *internal_default_instance();
}


void RlcInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:structure.RlcInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pdcp_sn_size_) -
      reinterpret_cast<char*>(&direction_)) + sizeof(pdcp_sn_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RlcInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 direction = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 mode = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool status_rep_require = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          status_rep_require_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pdcp_sn_size = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          pdcp_sn_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RlcInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:structure.RlcInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 direction = 10;
  if (this->direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_direction(), target);
  }

  // uint32 mode = 20;
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_mode(), target);
  }

  // bool status_rep_require = 30;
  if (this->status_rep_require() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(30, this->_internal_status_rep_require(), target);
  }

  // uint32 pdcp_sn_size = 40;
  if (this->pdcp_sn_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(40, this->_internal_pdcp_sn_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:structure.RlcInfo)
  return target;
}

size_t RlcInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:structure.RlcInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 direction = 10;
  if (this->direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_direction());
  }

  // uint32 mode = 20;
  if (this->mode() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mode());
  }

  // bool status_rep_require = 30;
  if (this->status_rep_require() != 0) {
    total_size += 2 + 1;
  }

  // uint32 pdcp_sn_size = 40;
  if (this->pdcp_sn_size() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pdcp_sn_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RlcInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:structure.RlcInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RlcInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RlcInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:structure.RlcInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:structure.RlcInfo)
    MergeFrom(*source);
  }
}

void RlcInfo::MergeFrom(const RlcInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:structure.RlcInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.direction() != 0) {
    _internal_set_direction(from._internal_direction());
  }
  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (from.status_rep_require() != 0) {
    _internal_set_status_rep_require(from._internal_status_rep_require());
  }
  if (from.pdcp_sn_size() != 0) {
    _internal_set_pdcp_sn_size(from._internal_pdcp_sn_size());
  }
}

void RlcInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:structure.RlcInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RlcInfo::CopyFrom(const RlcInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:structure.RlcInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RlcInfo::IsInitialized() const {
  return true;
}

void RlcInfo::InternalSwap(RlcInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RlcInfo, pdcp_sn_size_)
      + sizeof(RlcInfo::pdcp_sn_size_)
      - PROTOBUF_FIELD_OFFSET(RlcInfo, direction_)>(
          reinterpret_cast<char*>(&direction_),
          reinterpret_cast<char*>(&other->direction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RlcInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HeaderCompressionConfig::InitAsDefaultInstance() {
}
class HeaderCompressionConfig::_Internal {
 public:
};

HeaderCompressionConfig::HeaderCompressionConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  profile_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:structure.HeaderCompressionConfig)
}
HeaderCompressionConfig::HeaderCompressionConfig(const HeaderCompressionConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      profile_list_(from.profile_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hdr_comp_used_, &from.hdr_comp_used_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_cid_) -
    reinterpret_cast<char*>(&hdr_comp_used_)) + sizeof(max_cid_));
  // @@protoc_insertion_point(copy_constructor:structure.HeaderCompressionConfig)
}

void HeaderCompressionConfig::SharedCtor() {
  ::memset(&hdr_comp_used_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_cid_) -
      reinterpret_cast<char*>(&hdr_comp_used_)) + sizeof(max_cid_));
}

HeaderCompressionConfig::~HeaderCompressionConfig() {
  // @@protoc_insertion_point(destructor:structure.HeaderCompressionConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HeaderCompressionConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HeaderCompressionConfig::ArenaDtor(void* object) {
  HeaderCompressionConfig* _this = reinterpret_cast< HeaderCompressionConfig* >(object);
  (void)_this;
}
void HeaderCompressionConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HeaderCompressionConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HeaderCompressionConfig& HeaderCompressionConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HeaderCompressionConfig_structure_2eproto.base);
  return *internal_default_instance();
}


void HeaderCompressionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:structure.HeaderCompressionConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  profile_list_.Clear();
  ::memset(&hdr_comp_used_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_cid_) -
      reinterpret_cast<char*>(&hdr_comp_used_)) + sizeof(max_cid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeaderCompressionConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool hdr_comp_used = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          hdr_comp_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_cid = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          max_cid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 profile_list = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_profile_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240) {
          _internal_add_profile_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HeaderCompressionConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:structure.HeaderCompressionConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool hdr_comp_used = 10;
  if (this->hdr_comp_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_hdr_comp_used(), target);
  }

  // uint32 max_cid = 20;
  if (this->max_cid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_max_cid(), target);
  }

  // repeated uint32 profile_list = 30;
  {
    int byte_size = _profile_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          30, _internal_profile_list(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:structure.HeaderCompressionConfig)
  return target;
}

size_t HeaderCompressionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:structure.HeaderCompressionConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 profile_list = 30;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->profile_list_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _profile_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bool hdr_comp_used = 10;
  if (this->hdr_comp_used() != 0) {
    total_size += 1 + 1;
  }

  // uint32 max_cid = 20;
  if (this->max_cid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_cid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeaderCompressionConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:structure.HeaderCompressionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const HeaderCompressionConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HeaderCompressionConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:structure.HeaderCompressionConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:structure.HeaderCompressionConfig)
    MergeFrom(*source);
  }
}

void HeaderCompressionConfig::MergeFrom(const HeaderCompressionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:structure.HeaderCompressionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  profile_list_.MergeFrom(from.profile_list_);
  if (from.hdr_comp_used() != 0) {
    _internal_set_hdr_comp_used(from._internal_hdr_comp_used());
  }
  if (from.max_cid() != 0) {
    _internal_set_max_cid(from._internal_max_cid());
  }
}

void HeaderCompressionConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:structure.HeaderCompressionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeaderCompressionConfig::CopyFrom(const HeaderCompressionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:structure.HeaderCompressionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeaderCompressionConfig::IsInitialized() const {
  return true;
}

void HeaderCompressionConfig::InternalSwap(HeaderCompressionConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  profile_list_.InternalSwap(&other->profile_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeaderCompressionConfig, max_cid_)
      + sizeof(HeaderCompressionConfig::max_cid_)
      - PROTOBUF_FIELD_OFFSET(HeaderCompressionConfig, hdr_comp_used_)>(
          reinterpret_cast<char*>(&hdr_comp_used_),
          reinterpret_cast<char*>(&other->hdr_comp_used_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HeaderCompressionConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PDCPHoInfo::InitAsDefaultInstance() {
}
class PDCPHoInfo::_Internal {
 public:
};

PDCPHoInfo::PDCPHoInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bit_map_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:structure.PDCPHoInfo)
}
PDCPHoInfo::PDCPHoInfo(const PDCPHoInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bit_map_(from.bit_map_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&num_bits_, &from.num_bits_,
    static_cast<size_t>(reinterpret_cast<char*>(&ul_count_) -
    reinterpret_cast<char*>(&num_bits_)) + sizeof(ul_count_));
  // @@protoc_insertion_point(copy_constructor:structure.PDCPHoInfo)
}

void PDCPHoInfo::SharedCtor() {
  ::memset(&num_bits_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ul_count_) -
      reinterpret_cast<char*>(&num_bits_)) + sizeof(ul_count_));
}

PDCPHoInfo::~PDCPHoInfo() {
  // @@protoc_insertion_point(destructor:structure.PDCPHoInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PDCPHoInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PDCPHoInfo::ArenaDtor(void* object) {
  PDCPHoInfo* _this = reinterpret_cast< PDCPHoInfo* >(object);
  (void)_this;
}
void PDCPHoInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PDCPHoInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PDCPHoInfo& PDCPHoInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PDCPHoInfo_structure_2eproto.base);
  return *internal_default_instance();
}


void PDCPHoInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:structure.PDCPHoInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bit_map_.Clear();
  ::memset(&num_bits_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ul_count_) -
      reinterpret_cast<char*>(&num_bits_)) + sizeof(ul_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PDCPHoInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .structure.PDCPHoPres is_ho_pres = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_is_ho_pres(static_cast<::structure::PDCPHoPres>(val));
        } else goto handle_unusual;
        continue;
      // uint32 sn_len = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          sn_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 dl_count = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          dl_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ul_count = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ul_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_bits = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          num_bits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 bit_map = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_bit_map(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224) {
          _internal_add_bit_map(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PDCPHoInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:structure.PDCPHoInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .structure.PDCPHoPres is_ho_pres = 10;
  if (this->is_ho_pres() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_is_ho_pres(), target);
  }

  // uint32 sn_len = 20;
  if (this->sn_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_sn_len(), target);
  }

  // uint32 dl_count = 30;
  if (this->dl_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_dl_count(), target);
  }

  // uint32 ul_count = 40;
  if (this->ul_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(40, this->_internal_ul_count(), target);
  }

  // uint32 num_bits = 50;
  if (this->num_bits() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(50, this->_internal_num_bits(), target);
  }

  // repeated uint32 bit_map = 60;
  {
    int byte_size = _bit_map_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          60, _internal_bit_map(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:structure.PDCPHoInfo)
  return target;
}

size_t PDCPHoInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:structure.PDCPHoInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 bit_map = 60;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->bit_map_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bit_map_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 num_bits = 50;
  if (this->num_bits() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_bits());
  }

  // .structure.PDCPHoPres is_ho_pres = 10;
  if (this->is_ho_pres() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_is_ho_pres());
  }

  // uint32 sn_len = 20;
  if (this->sn_len() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sn_len());
  }

  // uint32 dl_count = 30;
  if (this->dl_count() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dl_count());
  }

  // uint32 ul_count = 40;
  if (this->ul_count() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ul_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PDCPHoInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:structure.PDCPHoInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PDCPHoInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PDCPHoInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:structure.PDCPHoInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:structure.PDCPHoInfo)
    MergeFrom(*source);
  }
}

void PDCPHoInfo::MergeFrom(const PDCPHoInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:structure.PDCPHoInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bit_map_.MergeFrom(from.bit_map_);
  if (from.num_bits() != 0) {
    _internal_set_num_bits(from._internal_num_bits());
  }
  if (from.is_ho_pres() != 0) {
    _internal_set_is_ho_pres(from._internal_is_ho_pres());
  }
  if (from.sn_len() != 0) {
    _internal_set_sn_len(from._internal_sn_len());
  }
  if (from.dl_count() != 0) {
    _internal_set_dl_count(from._internal_dl_count());
  }
  if (from.ul_count() != 0) {
    _internal_set_ul_count(from._internal_ul_count());
  }
}

void PDCPHoInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:structure.PDCPHoInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PDCPHoInfo::CopyFrom(const PDCPHoInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:structure.PDCPHoInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PDCPHoInfo::IsInitialized() const {
  return true;
}

void PDCPHoInfo::InternalSwap(PDCPHoInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bit_map_.InternalSwap(&other->bit_map_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PDCPHoInfo, ul_count_)
      + sizeof(PDCPHoInfo::ul_count_)
      - PROTOBUF_FIELD_OFFSET(PDCPHoInfo, num_bits_)>(
          reinterpret_cast<char*>(&num_bits_),
          reinterpret_cast<char*>(&other->num_bits_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PDCPHoInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PDCPDCBearerInfo::InitAsDefaultInstance() {
}
class PDCPDCBearerInfo::_Internal {
 public:
};

PDCPDCBearerInfo::PDCPDCBearerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:structure.PDCPDCBearerInfo)
}
PDCPDCBearerInfo::PDCPDCBearerInfo(const PDCPDCBearerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&split_ratio_, &from.split_ratio_,
    static_cast<size_t>(reinterpret_cast<char*>(&bearer_type_) -
    reinterpret_cast<char*>(&split_ratio_)) + sizeof(bearer_type_));
  // @@protoc_insertion_point(copy_constructor:structure.PDCPDCBearerInfo)
}

void PDCPDCBearerInfo::SharedCtor() {
  ::memset(&split_ratio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bearer_type_) -
      reinterpret_cast<char*>(&split_ratio_)) + sizeof(bearer_type_));
}

PDCPDCBearerInfo::~PDCPDCBearerInfo() {
  // @@protoc_insertion_point(destructor:structure.PDCPDCBearerInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PDCPDCBearerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PDCPDCBearerInfo::ArenaDtor(void* object) {
  PDCPDCBearerInfo* _this = reinterpret_cast< PDCPDCBearerInfo* >(object);
  (void)_this;
}
void PDCPDCBearerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PDCPDCBearerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PDCPDCBearerInfo& PDCPDCBearerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PDCPDCBearerInfo_structure_2eproto.base);
  return *internal_default_instance();
}


void PDCPDCBearerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:structure.PDCPDCBearerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&split_ratio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bearer_type_) -
      reinterpret_cast<char*>(&split_ratio_)) + sizeof(bearer_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PDCPDCBearerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 sn_len = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          sn_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 bearer_type = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          bearer_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 split_ratio = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          split_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PDCPDCBearerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:structure.PDCPDCBearerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sn_len = 10;
  if (this->sn_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_sn_len(), target);
  }

  // uint32 bearer_type = 20;
  if (this->bearer_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_bearer_type(), target);
  }

  // uint32 split_ratio = 30;
  if (this->split_ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_split_ratio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:structure.PDCPDCBearerInfo)
  return target;
}

size_t PDCPDCBearerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:structure.PDCPDCBearerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 split_ratio = 30;
  if (this->split_ratio() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_split_ratio());
  }

  // uint32 sn_len = 10;
  if (this->sn_len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sn_len());
  }

  // uint32 bearer_type = 20;
  if (this->bearer_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bearer_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PDCPDCBearerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:structure.PDCPDCBearerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PDCPDCBearerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PDCPDCBearerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:structure.PDCPDCBearerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:structure.PDCPDCBearerInfo)
    MergeFrom(*source);
  }
}

void PDCPDCBearerInfo::MergeFrom(const PDCPDCBearerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:structure.PDCPDCBearerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.split_ratio() != 0) {
    _internal_set_split_ratio(from._internal_split_ratio());
  }
  if (from.sn_len() != 0) {
    _internal_set_sn_len(from._internal_sn_len());
  }
  if (from.bearer_type() != 0) {
    _internal_set_bearer_type(from._internal_bearer_type());
  }
}

void PDCPDCBearerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:structure.PDCPDCBearerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PDCPDCBearerInfo::CopyFrom(const PDCPDCBearerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:structure.PDCPDCBearerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PDCPDCBearerInfo::IsInitialized() const {
  return true;
}

void PDCPDCBearerInfo::InternalSwap(PDCPDCBearerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PDCPDCBearerInfo, bearer_type_)
      + sizeof(PDCPDCBearerInfo::bearer_type_)
      - PROTOBUF_FIELD_OFFSET(PDCPDCBearerInfo, split_ratio_)>(
          reinterpret_cast<char*>(&split_ratio_),
          reinterpret_cast<char*>(&other->split_ratio_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PDCPDCBearerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PDCPAddCfgEnt::InitAsDefaultInstance() {
  ::structure::_PDCPAddCfgEnt_default_instance_._instance.get_mutable()->rlc_info_ = const_cast< ::structure::RlcInfo*>(
      ::structure::RlcInfo::internal_default_instance());
  ::structure::_PDCPAddCfgEnt_default_instance_._instance.get_mutable()->hdr_cmp_cfg_ = const_cast< ::structure::HeaderCompressionConfig*>(
      ::structure::HeaderCompressionConfig::internal_default_instance());
}
class PDCPAddCfgEnt::_Internal {
 public:
  static const ::structure::RlcInfo& rlc_info(const PDCPAddCfgEnt* msg);
  static const ::structure::HeaderCompressionConfig& hdr_cmp_cfg(const PDCPAddCfgEnt* msg);
};

const ::structure::RlcInfo&
PDCPAddCfgEnt::_Internal::rlc_info(const PDCPAddCfgEnt* msg) {
  return *msg->rlc_info_;
}
const ::structure::HeaderCompressionConfig&
PDCPAddCfgEnt::_Internal::hdr_cmp_cfg(const PDCPAddCfgEnt* msg) {
  return *msg->hdr_cmp_cfg_;
}
PDCPAddCfgEnt::PDCPAddCfgEnt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:structure.PDCPAddCfgEnt)
}
PDCPAddCfgEnt::PDCPAddCfgEnt(const PDCPAddCfgEnt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rlc_info()) {
    rlc_info_ = new ::structure::RlcInfo(*from.rlc_info_);
  } else {
    rlc_info_ = nullptr;
  }
  if (from._internal_has_hdr_cmp_cfg()) {
    hdr_cmp_cfg_ = new ::structure::HeaderCompressionConfig(*from.hdr_cmp_cfg_);
  } else {
    hdr_cmp_cfg_ = nullptr;
  }
  ::memcpy(&rb_id_, &from.rb_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&re_ord_tmr_val_) -
    reinterpret_cast<char*>(&rb_id_)) + sizeof(re_ord_tmr_val_));
  // @@protoc_insertion_point(copy_constructor:structure.PDCPAddCfgEnt)
}

void PDCPAddCfgEnt::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PDCPAddCfgEnt_structure_2eproto.base);
  ::memset(&rlc_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&re_ord_tmr_val_) -
      reinterpret_cast<char*>(&rlc_info_)) + sizeof(re_ord_tmr_val_));
}

PDCPAddCfgEnt::~PDCPAddCfgEnt() {
  // @@protoc_insertion_point(destructor:structure.PDCPAddCfgEnt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PDCPAddCfgEnt::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete rlc_info_;
  if (this != internal_default_instance()) delete hdr_cmp_cfg_;
}

void PDCPAddCfgEnt::ArenaDtor(void* object) {
  PDCPAddCfgEnt* _this = reinterpret_cast< PDCPAddCfgEnt* >(object);
  (void)_this;
}
void PDCPAddCfgEnt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PDCPAddCfgEnt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PDCPAddCfgEnt& PDCPAddCfgEnt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PDCPAddCfgEnt_structure_2eproto.base);
  return *internal_default_instance();
}


void PDCPAddCfgEnt::Clear() {
// @@protoc_insertion_point(message_clear_start:structure.PDCPAddCfgEnt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && rlc_info_ != nullptr) {
    delete rlc_info_;
  }
  rlc_info_ = nullptr;
  if (GetArena() == nullptr && hdr_cmp_cfg_ != nullptr) {
    delete hdr_cmp_cfg_;
  }
  hdr_cmp_cfg_ = nullptr;
  ::memset(&rb_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&re_ord_tmr_val_) -
      reinterpret_cast<char*>(&rb_id_)) + sizeof(re_ord_tmr_val_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PDCPAddCfgEnt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 rb_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          rb_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 qci = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          qci_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.RlcInfo rlc_info = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_rlc_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 discard_timer = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          discard_timer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 re_ord_tmr_val = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          re_ord_tmr_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.HeaderCompressionConfig hdr_cmp_cfg = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdr_cmp_cfg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PDCPAddCfgEnt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:structure.PDCPAddCfgEnt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 rb_id = 10;
  if (this->rb_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_rb_id(), target);
  }

  // uint32 qci = 20;
  if (this->qci() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_qci(), target);
  }

  // .structure.RlcInfo rlc_info = 30;
  if (this->has_rlc_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::rlc_info(this), target, stream);
  }

  // uint32 discard_timer = 40;
  if (this->discard_timer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(40, this->_internal_discard_timer(), target);
  }

  // uint32 re_ord_tmr_val = 50;
  if (this->re_ord_tmr_val() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(50, this->_internal_re_ord_tmr_val(), target);
  }

  // .structure.HeaderCompressionConfig hdr_cmp_cfg = 60;
  if (this->has_hdr_cmp_cfg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        60, _Internal::hdr_cmp_cfg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:structure.PDCPAddCfgEnt)
  return target;
}

size_t PDCPAddCfgEnt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:structure.PDCPAddCfgEnt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .structure.RlcInfo rlc_info = 30;
  if (this->has_rlc_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rlc_info_);
  }

  // .structure.HeaderCompressionConfig hdr_cmp_cfg = 60;
  if (this->has_hdr_cmp_cfg()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hdr_cmp_cfg_);
  }

  // uint32 rb_id = 10;
  if (this->rb_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rb_id());
  }

  // uint32 qci = 20;
  if (this->qci() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_qci());
  }

  // uint32 discard_timer = 40;
  if (this->discard_timer() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_discard_timer());
  }

  // uint32 re_ord_tmr_val = 50;
  if (this->re_ord_tmr_val() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_re_ord_tmr_val());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PDCPAddCfgEnt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:structure.PDCPAddCfgEnt)
  GOOGLE_DCHECK_NE(&from, this);
  const PDCPAddCfgEnt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PDCPAddCfgEnt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:structure.PDCPAddCfgEnt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:structure.PDCPAddCfgEnt)
    MergeFrom(*source);
  }
}

void PDCPAddCfgEnt::MergeFrom(const PDCPAddCfgEnt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:structure.PDCPAddCfgEnt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_rlc_info()) {
    _internal_mutable_rlc_info()->::structure::RlcInfo::MergeFrom(from._internal_rlc_info());
  }
  if (from.has_hdr_cmp_cfg()) {
    _internal_mutable_hdr_cmp_cfg()->::structure::HeaderCompressionConfig::MergeFrom(from._internal_hdr_cmp_cfg());
  }
  if (from.rb_id() != 0) {
    _internal_set_rb_id(from._internal_rb_id());
  }
  if (from.qci() != 0) {
    _internal_set_qci(from._internal_qci());
  }
  if (from.discard_timer() != 0) {
    _internal_set_discard_timer(from._internal_discard_timer());
  }
  if (from.re_ord_tmr_val() != 0) {
    _internal_set_re_ord_tmr_val(from._internal_re_ord_tmr_val());
  }
}

void PDCPAddCfgEnt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:structure.PDCPAddCfgEnt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PDCPAddCfgEnt::CopyFrom(const PDCPAddCfgEnt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:structure.PDCPAddCfgEnt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PDCPAddCfgEnt::IsInitialized() const {
  return true;
}

void PDCPAddCfgEnt::InternalSwap(PDCPAddCfgEnt* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PDCPAddCfgEnt, re_ord_tmr_val_)
      + sizeof(PDCPAddCfgEnt::re_ord_tmr_val_)
      - PROTOBUF_FIELD_OFFSET(PDCPAddCfgEnt, rlc_info_)>(
          reinterpret_cast<char*>(&rlc_info_),
          reinterpret_cast<char*>(&other->rlc_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PDCPAddCfgEnt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PDCPModCfgEnt::InitAsDefaultInstance() {
  ::structure::_PDCPModCfgEnt_default_instance_._instance.get_mutable()->hdr_cmp_cfg_ = const_cast< ::structure::HeaderCompressionConfig*>(
      ::structure::HeaderCompressionConfig::internal_default_instance());
  ::structure::_PDCPModCfgEnt_default_instance_._instance.get_mutable()->ho_info_ = const_cast< ::structure::PDCPHoInfo*>(
      ::structure::PDCPHoInfo::internal_default_instance());
  ::structure::_PDCPModCfgEnt_default_instance_._instance.get_mutable()->dc_bearer_info_ = const_cast< ::structure::PDCPDCBearerInfo*>(
      ::structure::PDCPDCBearerInfo::internal_default_instance());
}
class PDCPModCfgEnt::_Internal {
 public:
  static const ::structure::HeaderCompressionConfig& hdr_cmp_cfg(const PDCPModCfgEnt* msg);
  static const ::structure::PDCPHoInfo& ho_info(const PDCPModCfgEnt* msg);
  static const ::structure::PDCPDCBearerInfo& dc_bearer_info(const PDCPModCfgEnt* msg);
};

const ::structure::HeaderCompressionConfig&
PDCPModCfgEnt::_Internal::hdr_cmp_cfg(const PDCPModCfgEnt* msg) {
  return *msg->hdr_cmp_cfg_;
}
const ::structure::PDCPHoInfo&
PDCPModCfgEnt::_Internal::ho_info(const PDCPModCfgEnt* msg) {
  return *msg->ho_info_;
}
const ::structure::PDCPDCBearerInfo&
PDCPModCfgEnt::_Internal::dc_bearer_info(const PDCPModCfgEnt* msg) {
  return *msg->dc_bearer_info_;
}
PDCPModCfgEnt::PDCPModCfgEnt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:structure.PDCPModCfgEnt)
}
PDCPModCfgEnt::PDCPModCfgEnt(const PDCPModCfgEnt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hdr_cmp_cfg()) {
    hdr_cmp_cfg_ = new ::structure::HeaderCompressionConfig(*from.hdr_cmp_cfg_);
  } else {
    hdr_cmp_cfg_ = nullptr;
  }
  if (from._internal_has_ho_info()) {
    ho_info_ = new ::structure::PDCPHoInfo(*from.ho_info_);
  } else {
    ho_info_ = nullptr;
  }
  if (from._internal_has_dc_bearer_info()) {
    dc_bearer_info_ = new ::structure::PDCPDCBearerInfo(*from.dc_bearer_info_);
  } else {
    dc_bearer_info_ = nullptr;
  }
  ::memcpy(&re_ord_tmr_val_, &from.re_ord_tmr_val_,
    static_cast<size_t>(reinterpret_cast<char*>(&bit_flag_) -
    reinterpret_cast<char*>(&re_ord_tmr_val_)) + sizeof(bit_flag_));
  // @@protoc_insertion_point(copy_constructor:structure.PDCPModCfgEnt)
}

void PDCPModCfgEnt::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PDCPModCfgEnt_structure_2eproto.base);
  ::memset(&hdr_cmp_cfg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bit_flag_) -
      reinterpret_cast<char*>(&hdr_cmp_cfg_)) + sizeof(bit_flag_));
}

PDCPModCfgEnt::~PDCPModCfgEnt() {
  // @@protoc_insertion_point(destructor:structure.PDCPModCfgEnt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PDCPModCfgEnt::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete hdr_cmp_cfg_;
  if (this != internal_default_instance()) delete ho_info_;
  if (this != internal_default_instance()) delete dc_bearer_info_;
}

void PDCPModCfgEnt::ArenaDtor(void* object) {
  PDCPModCfgEnt* _this = reinterpret_cast< PDCPModCfgEnt* >(object);
  (void)_this;
}
void PDCPModCfgEnt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PDCPModCfgEnt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PDCPModCfgEnt& PDCPModCfgEnt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PDCPModCfgEnt_structure_2eproto.base);
  return *internal_default_instance();
}


void PDCPModCfgEnt::Clear() {
// @@protoc_insertion_point(message_clear_start:structure.PDCPModCfgEnt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && hdr_cmp_cfg_ != nullptr) {
    delete hdr_cmp_cfg_;
  }
  hdr_cmp_cfg_ = nullptr;
  if (GetArena() == nullptr && ho_info_ != nullptr) {
    delete ho_info_;
  }
  ho_info_ = nullptr;
  if (GetArena() == nullptr && dc_bearer_info_ != nullptr) {
    delete dc_bearer_info_;
  }
  dc_bearer_info_ = nullptr;
  ::memset(&re_ord_tmr_val_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bit_flag_) -
      reinterpret_cast<char*>(&re_ord_tmr_val_)) + sizeof(bit_flag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PDCPModCfgEnt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 rb_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          rb_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 bit_flag = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          bit_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.HeaderCompressionConfig hdr_cmp_cfg = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdr_cmp_cfg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.PDCPHoInfo ho_info = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_ho_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 re_ord_tmr_val = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          re_ord_tmr_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.PDCPDCBearerInfo dc_bearer_info = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_dc_bearer_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PDCPModCfgEnt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:structure.PDCPModCfgEnt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 rb_id = 10;
  if (this->rb_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_rb_id(), target);
  }

  // uint32 bit_flag = 20;
  if (this->bit_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_bit_flag(), target);
  }

  // .structure.HeaderCompressionConfig hdr_cmp_cfg = 30;
  if (this->has_hdr_cmp_cfg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::hdr_cmp_cfg(this), target, stream);
  }

  // .structure.PDCPHoInfo ho_info = 40;
  if (this->has_ho_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        40, _Internal::ho_info(this), target, stream);
  }

  // uint32 re_ord_tmr_val = 50;
  if (this->re_ord_tmr_val() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(50, this->_internal_re_ord_tmr_val(), target);
  }

  // .structure.PDCPDCBearerInfo dc_bearer_info = 60;
  if (this->has_dc_bearer_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        60, _Internal::dc_bearer_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:structure.PDCPModCfgEnt)
  return target;
}

size_t PDCPModCfgEnt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:structure.PDCPModCfgEnt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .structure.HeaderCompressionConfig hdr_cmp_cfg = 30;
  if (this->has_hdr_cmp_cfg()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hdr_cmp_cfg_);
  }

  // .structure.PDCPHoInfo ho_info = 40;
  if (this->has_ho_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ho_info_);
  }

  // .structure.PDCPDCBearerInfo dc_bearer_info = 60;
  if (this->has_dc_bearer_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dc_bearer_info_);
  }

  // uint32 re_ord_tmr_val = 50;
  if (this->re_ord_tmr_val() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_re_ord_tmr_val());
  }

  // uint32 rb_id = 10;
  if (this->rb_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rb_id());
  }

  // uint32 bit_flag = 20;
  if (this->bit_flag() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bit_flag());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PDCPModCfgEnt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:structure.PDCPModCfgEnt)
  GOOGLE_DCHECK_NE(&from, this);
  const PDCPModCfgEnt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PDCPModCfgEnt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:structure.PDCPModCfgEnt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:structure.PDCPModCfgEnt)
    MergeFrom(*source);
  }
}

void PDCPModCfgEnt::MergeFrom(const PDCPModCfgEnt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:structure.PDCPModCfgEnt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hdr_cmp_cfg()) {
    _internal_mutable_hdr_cmp_cfg()->::structure::HeaderCompressionConfig::MergeFrom(from._internal_hdr_cmp_cfg());
  }
  if (from.has_ho_info()) {
    _internal_mutable_ho_info()->::structure::PDCPHoInfo::MergeFrom(from._internal_ho_info());
  }
  if (from.has_dc_bearer_info()) {
    _internal_mutable_dc_bearer_info()->::structure::PDCPDCBearerInfo::MergeFrom(from._internal_dc_bearer_info());
  }
  if (from.re_ord_tmr_val() != 0) {
    _internal_set_re_ord_tmr_val(from._internal_re_ord_tmr_val());
  }
  if (from.rb_id() != 0) {
    _internal_set_rb_id(from._internal_rb_id());
  }
  if (from.bit_flag() != 0) {
    _internal_set_bit_flag(from._internal_bit_flag());
  }
}

void PDCPModCfgEnt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:structure.PDCPModCfgEnt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PDCPModCfgEnt::CopyFrom(const PDCPModCfgEnt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:structure.PDCPModCfgEnt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PDCPModCfgEnt::IsInitialized() const {
  return true;
}

void PDCPModCfgEnt::InternalSwap(PDCPModCfgEnt* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PDCPModCfgEnt, bit_flag_)
      + sizeof(PDCPModCfgEnt::bit_flag_)
      - PROTOBUF_FIELD_OFFSET(PDCPModCfgEnt, hdr_cmp_cfg_)>(
          reinterpret_cast<char*>(&hdr_cmp_cfg_),
          reinterpret_cast<char*>(&other->hdr_cmp_cfg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PDCPModCfgEnt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PDCPDelCfgEnt::InitAsDefaultInstance() {
}
class PDCPDelCfgEnt::_Internal {
 public:
};

PDCPDelCfgEnt::PDCPDelCfgEnt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:structure.PDCPDelCfgEnt)
}
PDCPDelCfgEnt::PDCPDelCfgEnt(const PDCPDelCfgEnt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rb_id_ = from.rb_id_;
  // @@protoc_insertion_point(copy_constructor:structure.PDCPDelCfgEnt)
}

void PDCPDelCfgEnt::SharedCtor() {
  rb_id_ = 0u;
}

PDCPDelCfgEnt::~PDCPDelCfgEnt() {
  // @@protoc_insertion_point(destructor:structure.PDCPDelCfgEnt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PDCPDelCfgEnt::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PDCPDelCfgEnt::ArenaDtor(void* object) {
  PDCPDelCfgEnt* _this = reinterpret_cast< PDCPDelCfgEnt* >(object);
  (void)_this;
}
void PDCPDelCfgEnt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PDCPDelCfgEnt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PDCPDelCfgEnt& PDCPDelCfgEnt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PDCPDelCfgEnt_structure_2eproto.base);
  return *internal_default_instance();
}


void PDCPDelCfgEnt::Clear() {
// @@protoc_insertion_point(message_clear_start:structure.PDCPDelCfgEnt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rb_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PDCPDelCfgEnt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 rb_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          rb_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PDCPDelCfgEnt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:structure.PDCPDelCfgEnt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 rb_id = 10;
  if (this->rb_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_rb_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:structure.PDCPDelCfgEnt)
  return target;
}

size_t PDCPDelCfgEnt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:structure.PDCPDelCfgEnt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 rb_id = 10;
  if (this->rb_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rb_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PDCPDelCfgEnt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:structure.PDCPDelCfgEnt)
  GOOGLE_DCHECK_NE(&from, this);
  const PDCPDelCfgEnt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PDCPDelCfgEnt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:structure.PDCPDelCfgEnt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:structure.PDCPDelCfgEnt)
    MergeFrom(*source);
  }
}

void PDCPDelCfgEnt::MergeFrom(const PDCPDelCfgEnt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:structure.PDCPDelCfgEnt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rb_id() != 0) {
    _internal_set_rb_id(from._internal_rb_id());
  }
}

void PDCPDelCfgEnt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:structure.PDCPDelCfgEnt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PDCPDelCfgEnt::CopyFrom(const PDCPDelCfgEnt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:structure.PDCPDelCfgEnt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PDCPDelCfgEnt::IsInitialized() const {
  return true;
}

void PDCPDelCfgEnt::InternalSwap(PDCPDelCfgEnt* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(rb_id_, other->rb_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PDCPDelCfgEnt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateTnlCfmEnt::InitAsDefaultInstance() {
  ::structure::_CreateTnlCfmEnt_default_instance_._instance.get_mutable()->gtp_tunnel_id_ = const_cast< ::structure::GtpTunnelId*>(
      ::structure::GtpTunnelId::internal_default_instance());
  ::structure::_CreateTnlCfmEnt_default_instance_._instance.get_mutable()->dst_addr_ = const_cast< ::common::IpAddress*>(
      ::common::IpAddress::internal_default_instance());
  ::structure::_CreateTnlCfmEnt_default_instance_._instance.get_mutable()->src_addr_ = const_cast< ::common::IpAddress*>(
      ::common::IpAddress::internal_default_instance());
}
class CreateTnlCfmEnt::_Internal {
 public:
  static const ::structure::GtpTunnelId& gtp_tunnel_id(const CreateTnlCfmEnt* msg);
  static const ::common::IpAddress& dst_addr(const CreateTnlCfmEnt* msg);
  static const ::common::IpAddress& src_addr(const CreateTnlCfmEnt* msg);
};

const ::structure::GtpTunnelId&
CreateTnlCfmEnt::_Internal::gtp_tunnel_id(const CreateTnlCfmEnt* msg) {
  return *msg->gtp_tunnel_id_;
}
const ::common::IpAddress&
CreateTnlCfmEnt::_Internal::dst_addr(const CreateTnlCfmEnt* msg) {
  return *msg->dst_addr_;
}
const ::common::IpAddress&
CreateTnlCfmEnt::_Internal::src_addr(const CreateTnlCfmEnt* msg) {
  return *msg->src_addr_;
}
void CreateTnlCfmEnt::clear_dst_addr() {
  if (GetArena() == nullptr && dst_addr_ != nullptr) {
    delete dst_addr_;
  }
  dst_addr_ = nullptr;
}
void CreateTnlCfmEnt::clear_src_addr() {
  if (GetArena() == nullptr && src_addr_ != nullptr) {
    delete src_addr_;
  }
  src_addr_ = nullptr;
}
CreateTnlCfmEnt::CreateTnlCfmEnt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:structure.CreateTnlCfmEnt)
}
CreateTnlCfmEnt::CreateTnlCfmEnt(const CreateTnlCfmEnt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_gtp_tunnel_id()) {
    gtp_tunnel_id_ = new ::structure::GtpTunnelId(*from.gtp_tunnel_id_);
  } else {
    gtp_tunnel_id_ = nullptr;
  }
  if (from._internal_has_dst_addr()) {
    dst_addr_ = new ::common::IpAddress(*from.dst_addr_);
  } else {
    dst_addr_ = nullptr;
  }
  if (from._internal_has_src_addr()) {
    src_addr_ = new ::common::IpAddress(*from.src_addr_);
  } else {
    src_addr_ = nullptr;
  }
  ::memcpy(&interface_type_, &from.interface_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&interface_type_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:structure.CreateTnlCfmEnt)
}

void CreateTnlCfmEnt::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateTnlCfmEnt_structure_2eproto.base);
  ::memset(&gtp_tunnel_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&gtp_tunnel_id_)) + sizeof(status_));
}

CreateTnlCfmEnt::~CreateTnlCfmEnt() {
  // @@protoc_insertion_point(destructor:structure.CreateTnlCfmEnt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateTnlCfmEnt::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete gtp_tunnel_id_;
  if (this != internal_default_instance()) delete dst_addr_;
  if (this != internal_default_instance()) delete src_addr_;
}

void CreateTnlCfmEnt::ArenaDtor(void* object) {
  CreateTnlCfmEnt* _this = reinterpret_cast< CreateTnlCfmEnt* >(object);
  (void)_this;
}
void CreateTnlCfmEnt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateTnlCfmEnt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateTnlCfmEnt& CreateTnlCfmEnt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateTnlCfmEnt_structure_2eproto.base);
  return *internal_default_instance();
}


void CreateTnlCfmEnt::Clear() {
// @@protoc_insertion_point(message_clear_start:structure.CreateTnlCfmEnt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && gtp_tunnel_id_ != nullptr) {
    delete gtp_tunnel_id_;
  }
  gtp_tunnel_id_ = nullptr;
  if (GetArena() == nullptr && dst_addr_ != nullptr) {
    delete dst_addr_;
  }
  dst_addr_ = nullptr;
  if (GetArena() == nullptr && src_addr_ != nullptr) {
    delete src_addr_;
  }
  src_addr_ = nullptr;
  ::memset(&interface_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&interface_type_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateTnlCfmEnt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .structure.InterfaceType interface_type = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_interface_type(static_cast<::structure::InterfaceType>(val));
        } else goto handle_unusual;
        continue;
      // .structure.GtpTunnelId gtp_tunnel_id = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_gtp_tunnel_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.IpAddress dst_addr = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_dst_addr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.IpAddress src_addr = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_src_addr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 local_gtp_teid = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          local_gtp_teid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 remote_gtp_teid = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          remote_gtp_teid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 old_cell_id = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          old_cell_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 old_crnti = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          old_crnti_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool status = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateTnlCfmEnt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:structure.CreateTnlCfmEnt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .structure.InterfaceType interface_type = 24;
  if (this->interface_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      24, this->_internal_interface_type(), target);
  }

  // .structure.GtpTunnelId gtp_tunnel_id = 25;
  if (this->has_gtp_tunnel_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::gtp_tunnel_id(this), target, stream);
  }

  // .common.IpAddress dst_addr = 26;
  if (this->has_dst_addr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::dst_addr(this), target, stream);
  }

  // .common.IpAddress src_addr = 27;
  if (this->has_src_addr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::src_addr(this), target, stream);
  }

  // uint32 local_gtp_teid = 30;
  if (this->local_gtp_teid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_local_gtp_teid(), target);
  }

  // uint32 remote_gtp_teid = 35;
  if (this->remote_gtp_teid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(35, this->_internal_remote_gtp_teid(), target);
  }

  // uint32 old_cell_id = 36;
  if (this->old_cell_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(36, this->_internal_old_cell_id(), target);
  }

  // uint32 old_crnti = 37;
  if (this->old_crnti() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(37, this->_internal_old_crnti(), target);
  }

  // bool status = 40;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(40, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:structure.CreateTnlCfmEnt)
  return target;
}

size_t CreateTnlCfmEnt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:structure.CreateTnlCfmEnt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .structure.GtpTunnelId gtp_tunnel_id = 25;
  if (this->has_gtp_tunnel_id()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gtp_tunnel_id_);
  }

  // .common.IpAddress dst_addr = 26;
  if (this->has_dst_addr()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dst_addr_);
  }

  // .common.IpAddress src_addr = 27;
  if (this->has_src_addr()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *src_addr_);
  }

  // .structure.InterfaceType interface_type = 24;
  if (this->interface_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_interface_type());
  }

  // uint32 local_gtp_teid = 30;
  if (this->local_gtp_teid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_local_gtp_teid());
  }

  // uint32 remote_gtp_teid = 35;
  if (this->remote_gtp_teid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_remote_gtp_teid());
  }

  // uint32 old_cell_id = 36;
  if (this->old_cell_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_old_cell_id());
  }

  // uint32 old_crnti = 37;
  if (this->old_crnti() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_old_crnti());
  }

  // bool status = 40;
  if (this->status() != 0) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateTnlCfmEnt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:structure.CreateTnlCfmEnt)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateTnlCfmEnt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateTnlCfmEnt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:structure.CreateTnlCfmEnt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:structure.CreateTnlCfmEnt)
    MergeFrom(*source);
  }
}

void CreateTnlCfmEnt::MergeFrom(const CreateTnlCfmEnt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:structure.CreateTnlCfmEnt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_gtp_tunnel_id()) {
    _internal_mutable_gtp_tunnel_id()->::structure::GtpTunnelId::MergeFrom(from._internal_gtp_tunnel_id());
  }
  if (from.has_dst_addr()) {
    _internal_mutable_dst_addr()->::common::IpAddress::MergeFrom(from._internal_dst_addr());
  }
  if (from.has_src_addr()) {
    _internal_mutable_src_addr()->::common::IpAddress::MergeFrom(from._internal_src_addr());
  }
  if (from.interface_type() != 0) {
    _internal_set_interface_type(from._internal_interface_type());
  }
  if (from.local_gtp_teid() != 0) {
    _internal_set_local_gtp_teid(from._internal_local_gtp_teid());
  }
  if (from.remote_gtp_teid() != 0) {
    _internal_set_remote_gtp_teid(from._internal_remote_gtp_teid());
  }
  if (from.old_cell_id() != 0) {
    _internal_set_old_cell_id(from._internal_old_cell_id());
  }
  if (from.old_crnti() != 0) {
    _internal_set_old_crnti(from._internal_old_crnti());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void CreateTnlCfmEnt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:structure.CreateTnlCfmEnt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateTnlCfmEnt::CopyFrom(const CreateTnlCfmEnt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:structure.CreateTnlCfmEnt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTnlCfmEnt::IsInitialized() const {
  return true;
}

void CreateTnlCfmEnt::InternalSwap(CreateTnlCfmEnt* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateTnlCfmEnt, status_)
      + sizeof(CreateTnlCfmEnt::status_)
      - PROTOBUF_FIELD_OFFSET(CreateTnlCfmEnt, gtp_tunnel_id_)>(
          reinterpret_cast<char*>(&gtp_tunnel_id_),
          reinterpret_cast<char*>(&other->gtp_tunnel_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateTnlCfmEnt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModTnlCfmEnt::InitAsDefaultInstance() {
  ::structure::_ModTnlCfmEnt_default_instance_._instance.get_mutable()->gtp_tunnel_id_ = const_cast< ::structure::GtpTunnelId*>(
      ::structure::GtpTunnelId::internal_default_instance());
  ::structure::_ModTnlCfmEnt_default_instance_._instance.get_mutable()->dst_addr_ = const_cast< ::common::IpAddress*>(
      ::common::IpAddress::internal_default_instance());
  ::structure::_ModTnlCfmEnt_default_instance_._instance.get_mutable()->src_addr_ = const_cast< ::common::IpAddress*>(
      ::common::IpAddress::internal_default_instance());
}
class ModTnlCfmEnt::_Internal {
 public:
  static const ::structure::GtpTunnelId& gtp_tunnel_id(const ModTnlCfmEnt* msg);
  static const ::common::IpAddress& dst_addr(const ModTnlCfmEnt* msg);
  static const ::common::IpAddress& src_addr(const ModTnlCfmEnt* msg);
};

const ::structure::GtpTunnelId&
ModTnlCfmEnt::_Internal::gtp_tunnel_id(const ModTnlCfmEnt* msg) {
  return *msg->gtp_tunnel_id_;
}
const ::common::IpAddress&
ModTnlCfmEnt::_Internal::dst_addr(const ModTnlCfmEnt* msg) {
  return *msg->dst_addr_;
}
const ::common::IpAddress&
ModTnlCfmEnt::_Internal::src_addr(const ModTnlCfmEnt* msg) {
  return *msg->src_addr_;
}
void ModTnlCfmEnt::clear_dst_addr() {
  if (GetArena() == nullptr && dst_addr_ != nullptr) {
    delete dst_addr_;
  }
  dst_addr_ = nullptr;
}
void ModTnlCfmEnt::clear_src_addr() {
  if (GetArena() == nullptr && src_addr_ != nullptr) {
    delete src_addr_;
  }
  src_addr_ = nullptr;
}
ModTnlCfmEnt::ModTnlCfmEnt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:structure.ModTnlCfmEnt)
}
ModTnlCfmEnt::ModTnlCfmEnt(const ModTnlCfmEnt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_gtp_tunnel_id()) {
    gtp_tunnel_id_ = new ::structure::GtpTunnelId(*from.gtp_tunnel_id_);
  } else {
    gtp_tunnel_id_ = nullptr;
  }
  if (from._internal_has_dst_addr()) {
    dst_addr_ = new ::common::IpAddress(*from.dst_addr_);
  } else {
    dst_addr_ = nullptr;
  }
  if (from._internal_has_src_addr()) {
    src_addr_ = new ::common::IpAddress(*from.src_addr_);
  } else {
    src_addr_ = nullptr;
  }
  ::memcpy(&old_cell_id_, &from.old_cell_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&old_cell_id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:structure.ModTnlCfmEnt)
}

void ModTnlCfmEnt::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModTnlCfmEnt_structure_2eproto.base);
  ::memset(&gtp_tunnel_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&gtp_tunnel_id_)) + sizeof(status_));
}

ModTnlCfmEnt::~ModTnlCfmEnt() {
  // @@protoc_insertion_point(destructor:structure.ModTnlCfmEnt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModTnlCfmEnt::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete gtp_tunnel_id_;
  if (this != internal_default_instance()) delete dst_addr_;
  if (this != internal_default_instance()) delete src_addr_;
}

void ModTnlCfmEnt::ArenaDtor(void* object) {
  ModTnlCfmEnt* _this = reinterpret_cast< ModTnlCfmEnt* >(object);
  (void)_this;
}
void ModTnlCfmEnt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModTnlCfmEnt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModTnlCfmEnt& ModTnlCfmEnt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModTnlCfmEnt_structure_2eproto.base);
  return *internal_default_instance();
}


void ModTnlCfmEnt::Clear() {
// @@protoc_insertion_point(message_clear_start:structure.ModTnlCfmEnt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && gtp_tunnel_id_ != nullptr) {
    delete gtp_tunnel_id_;
  }
  gtp_tunnel_id_ = nullptr;
  if (GetArena() == nullptr && dst_addr_ != nullptr) {
    delete dst_addr_;
  }
  dst_addr_ = nullptr;
  if (GetArena() == nullptr && src_addr_ != nullptr) {
    delete src_addr_;
  }
  src_addr_ = nullptr;
  ::memset(&old_cell_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&old_cell_id_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModTnlCfmEnt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 old_cell_id = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          old_cell_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 old_crnti = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          old_crnti_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.InterfaceType interface_type = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_interface_type(static_cast<::structure::InterfaceType>(val));
        } else goto handle_unusual;
        continue;
      // .structure.GtpTunnelId gtp_tunnel_id = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_gtp_tunnel_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.IpAddress dst_addr = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_dst_addr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.IpAddress src_addr = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_src_addr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 local_gtp_teid = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          local_gtp_teid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 remote_gtp_teid = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          remote_gtp_teid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool status = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModTnlCfmEnt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:structure.ModTnlCfmEnt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 old_cell_id = 20;
  if (this->old_cell_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_old_cell_id(), target);
  }

  // uint32 old_crnti = 22;
  if (this->old_crnti() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_old_crnti(), target);
  }

  // .structure.InterfaceType interface_type = 24;
  if (this->interface_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      24, this->_internal_interface_type(), target);
  }

  // .structure.GtpTunnelId gtp_tunnel_id = 25;
  if (this->has_gtp_tunnel_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::gtp_tunnel_id(this), target, stream);
  }

  // .common.IpAddress dst_addr = 26;
  if (this->has_dst_addr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::dst_addr(this), target, stream);
  }

  // .common.IpAddress src_addr = 27;
  if (this->has_src_addr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::src_addr(this), target, stream);
  }

  // uint32 local_gtp_teid = 30;
  if (this->local_gtp_teid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_local_gtp_teid(), target);
  }

  // uint32 remote_gtp_teid = 35;
  if (this->remote_gtp_teid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(35, this->_internal_remote_gtp_teid(), target);
  }

  // bool status = 40;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(40, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:structure.ModTnlCfmEnt)
  return target;
}

size_t ModTnlCfmEnt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:structure.ModTnlCfmEnt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .structure.GtpTunnelId gtp_tunnel_id = 25;
  if (this->has_gtp_tunnel_id()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gtp_tunnel_id_);
  }

  // .common.IpAddress dst_addr = 26;
  if (this->has_dst_addr()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dst_addr_);
  }

  // .common.IpAddress src_addr = 27;
  if (this->has_src_addr()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *src_addr_);
  }

  // uint32 old_cell_id = 20;
  if (this->old_cell_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_old_cell_id());
  }

  // uint32 old_crnti = 22;
  if (this->old_crnti() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_old_crnti());
  }

  // .structure.InterfaceType interface_type = 24;
  if (this->interface_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_interface_type());
  }

  // uint32 local_gtp_teid = 30;
  if (this->local_gtp_teid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_local_gtp_teid());
  }

  // uint32 remote_gtp_teid = 35;
  if (this->remote_gtp_teid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_remote_gtp_teid());
  }

  // bool status = 40;
  if (this->status() != 0) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModTnlCfmEnt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:structure.ModTnlCfmEnt)
  GOOGLE_DCHECK_NE(&from, this);
  const ModTnlCfmEnt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModTnlCfmEnt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:structure.ModTnlCfmEnt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:structure.ModTnlCfmEnt)
    MergeFrom(*source);
  }
}

void ModTnlCfmEnt::MergeFrom(const ModTnlCfmEnt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:structure.ModTnlCfmEnt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_gtp_tunnel_id()) {
    _internal_mutable_gtp_tunnel_id()->::structure::GtpTunnelId::MergeFrom(from._internal_gtp_tunnel_id());
  }
  if (from.has_dst_addr()) {
    _internal_mutable_dst_addr()->::common::IpAddress::MergeFrom(from._internal_dst_addr());
  }
  if (from.has_src_addr()) {
    _internal_mutable_src_addr()->::common::IpAddress::MergeFrom(from._internal_src_addr());
  }
  if (from.old_cell_id() != 0) {
    _internal_set_old_cell_id(from._internal_old_cell_id());
  }
  if (from.old_crnti() != 0) {
    _internal_set_old_crnti(from._internal_old_crnti());
  }
  if (from.interface_type() != 0) {
    _internal_set_interface_type(from._internal_interface_type());
  }
  if (from.local_gtp_teid() != 0) {
    _internal_set_local_gtp_teid(from._internal_local_gtp_teid());
  }
  if (from.remote_gtp_teid() != 0) {
    _internal_set_remote_gtp_teid(from._internal_remote_gtp_teid());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void ModTnlCfmEnt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:structure.ModTnlCfmEnt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModTnlCfmEnt::CopyFrom(const ModTnlCfmEnt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:structure.ModTnlCfmEnt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModTnlCfmEnt::IsInitialized() const {
  return true;
}

void ModTnlCfmEnt::InternalSwap(ModTnlCfmEnt* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModTnlCfmEnt, status_)
      + sizeof(ModTnlCfmEnt::status_)
      - PROTOBUF_FIELD_OFFSET(ModTnlCfmEnt, gtp_tunnel_id_)>(
          reinterpret_cast<char*>(&gtp_tunnel_id_),
          reinterpret_cast<char*>(&other->gtp_tunnel_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModTnlCfmEnt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DelTnlCfmEnt::InitAsDefaultInstance() {
  ::structure::_DelTnlCfmEnt_default_instance_._instance.get_mutable()->gtp_tunnel_id_ = const_cast< ::structure::GtpTunnelId*>(
      ::structure::GtpTunnelId::internal_default_instance());
  ::structure::_DelTnlCfmEnt_default_instance_._instance.get_mutable()->dst_addr_ = const_cast< ::common::IpAddress*>(
      ::common::IpAddress::internal_default_instance());
  ::structure::_DelTnlCfmEnt_default_instance_._instance.get_mutable()->src_addr_ = const_cast< ::common::IpAddress*>(
      ::common::IpAddress::internal_default_instance());
}
class DelTnlCfmEnt::_Internal {
 public:
  static const ::structure::GtpTunnelId& gtp_tunnel_id(const DelTnlCfmEnt* msg);
  static const ::common::IpAddress& dst_addr(const DelTnlCfmEnt* msg);
  static const ::common::IpAddress& src_addr(const DelTnlCfmEnt* msg);
};

const ::structure::GtpTunnelId&
DelTnlCfmEnt::_Internal::gtp_tunnel_id(const DelTnlCfmEnt* msg) {
  return *msg->gtp_tunnel_id_;
}
const ::common::IpAddress&
DelTnlCfmEnt::_Internal::dst_addr(const DelTnlCfmEnt* msg) {
  return *msg->dst_addr_;
}
const ::common::IpAddress&
DelTnlCfmEnt::_Internal::src_addr(const DelTnlCfmEnt* msg) {
  return *msg->src_addr_;
}
void DelTnlCfmEnt::clear_dst_addr() {
  if (GetArena() == nullptr && dst_addr_ != nullptr) {
    delete dst_addr_;
  }
  dst_addr_ = nullptr;
}
void DelTnlCfmEnt::clear_src_addr() {
  if (GetArena() == nullptr && src_addr_ != nullptr) {
    delete src_addr_;
  }
  src_addr_ = nullptr;
}
DelTnlCfmEnt::DelTnlCfmEnt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:structure.DelTnlCfmEnt)
}
DelTnlCfmEnt::DelTnlCfmEnt(const DelTnlCfmEnt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_gtp_tunnel_id()) {
    gtp_tunnel_id_ = new ::structure::GtpTunnelId(*from.gtp_tunnel_id_);
  } else {
    gtp_tunnel_id_ = nullptr;
  }
  if (from._internal_has_dst_addr()) {
    dst_addr_ = new ::common::IpAddress(*from.dst_addr_);
  } else {
    dst_addr_ = nullptr;
  }
  if (from._internal_has_src_addr()) {
    src_addr_ = new ::common::IpAddress(*from.src_addr_);
  } else {
    src_addr_ = nullptr;
  }
  ::memcpy(&interface_type_, &from.interface_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&interface_type_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:structure.DelTnlCfmEnt)
}

void DelTnlCfmEnt::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DelTnlCfmEnt_structure_2eproto.base);
  ::memset(&gtp_tunnel_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&gtp_tunnel_id_)) + sizeof(status_));
}

DelTnlCfmEnt::~DelTnlCfmEnt() {
  // @@protoc_insertion_point(destructor:structure.DelTnlCfmEnt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DelTnlCfmEnt::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete gtp_tunnel_id_;
  if (this != internal_default_instance()) delete dst_addr_;
  if (this != internal_default_instance()) delete src_addr_;
}

void DelTnlCfmEnt::ArenaDtor(void* object) {
  DelTnlCfmEnt* _this = reinterpret_cast< DelTnlCfmEnt* >(object);
  (void)_this;
}
void DelTnlCfmEnt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DelTnlCfmEnt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DelTnlCfmEnt& DelTnlCfmEnt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DelTnlCfmEnt_structure_2eproto.base);
  return *internal_default_instance();
}


void DelTnlCfmEnt::Clear() {
// @@protoc_insertion_point(message_clear_start:structure.DelTnlCfmEnt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && gtp_tunnel_id_ != nullptr) {
    delete gtp_tunnel_id_;
  }
  gtp_tunnel_id_ = nullptr;
  if (GetArena() == nullptr && dst_addr_ != nullptr) {
    delete dst_addr_;
  }
  dst_addr_ = nullptr;
  if (GetArena() == nullptr && src_addr_ != nullptr) {
    delete src_addr_;
  }
  src_addr_ = nullptr;
  ::memset(&interface_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&interface_type_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DelTnlCfmEnt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .structure.InterfaceType interface_type = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_interface_type(static_cast<::structure::InterfaceType>(val));
        } else goto handle_unusual;
        continue;
      // .structure.GtpTunnelId gtp_tunnel_id = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_gtp_tunnel_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.IpAddress dst_addr = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_dst_addr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.IpAddress src_addr = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_src_addr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 local_gtp_teid = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          local_gtp_teid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 remote_gtp_teid = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          remote_gtp_teid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool status = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DelTnlCfmEnt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:structure.DelTnlCfmEnt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .structure.InterfaceType interface_type = 24;
  if (this->interface_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      24, this->_internal_interface_type(), target);
  }

  // .structure.GtpTunnelId gtp_tunnel_id = 25;
  if (this->has_gtp_tunnel_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::gtp_tunnel_id(this), target, stream);
  }

  // .common.IpAddress dst_addr = 26;
  if (this->has_dst_addr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::dst_addr(this), target, stream);
  }

  // .common.IpAddress src_addr = 27;
  if (this->has_src_addr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::src_addr(this), target, stream);
  }

  // uint32 local_gtp_teid = 30;
  if (this->local_gtp_teid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_local_gtp_teid(), target);
  }

  // uint32 remote_gtp_teid = 35;
  if (this->remote_gtp_teid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(35, this->_internal_remote_gtp_teid(), target);
  }

  // bool status = 40;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(40, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:structure.DelTnlCfmEnt)
  return target;
}

size_t DelTnlCfmEnt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:structure.DelTnlCfmEnt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .structure.GtpTunnelId gtp_tunnel_id = 25;
  if (this->has_gtp_tunnel_id()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gtp_tunnel_id_);
  }

  // .common.IpAddress dst_addr = 26;
  if (this->has_dst_addr()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dst_addr_);
  }

  // .common.IpAddress src_addr = 27;
  if (this->has_src_addr()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *src_addr_);
  }

  // .structure.InterfaceType interface_type = 24;
  if (this->interface_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_interface_type());
  }

  // uint32 local_gtp_teid = 30;
  if (this->local_gtp_teid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_local_gtp_teid());
  }

  // uint32 remote_gtp_teid = 35;
  if (this->remote_gtp_teid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_remote_gtp_teid());
  }

  // bool status = 40;
  if (this->status() != 0) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DelTnlCfmEnt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:structure.DelTnlCfmEnt)
  GOOGLE_DCHECK_NE(&from, this);
  const DelTnlCfmEnt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DelTnlCfmEnt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:structure.DelTnlCfmEnt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:structure.DelTnlCfmEnt)
    MergeFrom(*source);
  }
}

void DelTnlCfmEnt::MergeFrom(const DelTnlCfmEnt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:structure.DelTnlCfmEnt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_gtp_tunnel_id()) {
    _internal_mutable_gtp_tunnel_id()->::structure::GtpTunnelId::MergeFrom(from._internal_gtp_tunnel_id());
  }
  if (from.has_dst_addr()) {
    _internal_mutable_dst_addr()->::common::IpAddress::MergeFrom(from._internal_dst_addr());
  }
  if (from.has_src_addr()) {
    _internal_mutable_src_addr()->::common::IpAddress::MergeFrom(from._internal_src_addr());
  }
  if (from.interface_type() != 0) {
    _internal_set_interface_type(from._internal_interface_type());
  }
  if (from.local_gtp_teid() != 0) {
    _internal_set_local_gtp_teid(from._internal_local_gtp_teid());
  }
  if (from.remote_gtp_teid() != 0) {
    _internal_set_remote_gtp_teid(from._internal_remote_gtp_teid());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void DelTnlCfmEnt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:structure.DelTnlCfmEnt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelTnlCfmEnt::CopyFrom(const DelTnlCfmEnt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:structure.DelTnlCfmEnt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelTnlCfmEnt::IsInitialized() const {
  return true;
}

void DelTnlCfmEnt::InternalSwap(DelTnlCfmEnt* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DelTnlCfmEnt, status_)
      + sizeof(DelTnlCfmEnt::status_)
      - PROTOBUF_FIELD_OFFSET(DelTnlCfmEnt, gtp_tunnel_id_)>(
          reinterpret_cast<char*>(&gtp_tunnel_id_),
          reinterpret_cast<char*>(&other->gtp_tunnel_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DelTnlCfmEnt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PDCPAddCfgCfmEnt::InitAsDefaultInstance() {
}
class PDCPAddCfgCfmEnt::_Internal {
 public:
};

PDCPAddCfgCfmEnt::PDCPAddCfgCfmEnt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:structure.PDCPAddCfgCfmEnt)
}
PDCPAddCfgCfmEnt::PDCPAddCfgCfmEnt(const PDCPAddCfgCfmEnt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&reason_, &from.reason_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&reason_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:structure.PDCPAddCfgCfmEnt)
}

void PDCPAddCfgCfmEnt::SharedCtor() {
  ::memset(&reason_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&reason_)) + sizeof(status_));
}

PDCPAddCfgCfmEnt::~PDCPAddCfgCfmEnt() {
  // @@protoc_insertion_point(destructor:structure.PDCPAddCfgCfmEnt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PDCPAddCfgCfmEnt::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PDCPAddCfgCfmEnt::ArenaDtor(void* object) {
  PDCPAddCfgCfmEnt* _this = reinterpret_cast< PDCPAddCfgCfmEnt* >(object);
  (void)_this;
}
void PDCPAddCfgCfmEnt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PDCPAddCfgCfmEnt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PDCPAddCfgCfmEnt& PDCPAddCfgCfmEnt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PDCPAddCfgCfmEnt_structure_2eproto.base);
  return *internal_default_instance();
}


void PDCPAddCfgCfmEnt::Clear() {
// @@protoc_insertion_point(message_clear_start:structure.PDCPAddCfgCfmEnt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&reason_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&reason_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PDCPAddCfgCfmEnt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 rb_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          rb_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool status = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.PDCPConfigFailureReason reason = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reason(static_cast<::structure::PDCPConfigFailureReason>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PDCPAddCfgCfmEnt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:structure.PDCPAddCfgCfmEnt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 rb_id = 10;
  if (this->rb_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_rb_id(), target);
  }

  // bool status = 20;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_status(), target);
  }

  // .structure.PDCPConfigFailureReason reason = 30;
  if (this->reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      30, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:structure.PDCPAddCfgCfmEnt)
  return target;
}

size_t PDCPAddCfgCfmEnt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:structure.PDCPAddCfgCfmEnt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .structure.PDCPConfigFailureReason reason = 30;
  if (this->reason() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reason());
  }

  // uint32 rb_id = 10;
  if (this->rb_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rb_id());
  }

  // bool status = 20;
  if (this->status() != 0) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PDCPAddCfgCfmEnt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:structure.PDCPAddCfgCfmEnt)
  GOOGLE_DCHECK_NE(&from, this);
  const PDCPAddCfgCfmEnt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PDCPAddCfgCfmEnt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:structure.PDCPAddCfgCfmEnt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:structure.PDCPAddCfgCfmEnt)
    MergeFrom(*source);
  }
}

void PDCPAddCfgCfmEnt::MergeFrom(const PDCPAddCfgCfmEnt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:structure.PDCPAddCfgCfmEnt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reason() != 0) {
    _internal_set_reason(from._internal_reason());
  }
  if (from.rb_id() != 0) {
    _internal_set_rb_id(from._internal_rb_id());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void PDCPAddCfgCfmEnt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:structure.PDCPAddCfgCfmEnt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PDCPAddCfgCfmEnt::CopyFrom(const PDCPAddCfgCfmEnt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:structure.PDCPAddCfgCfmEnt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PDCPAddCfgCfmEnt::IsInitialized() const {
  return true;
}

void PDCPAddCfgCfmEnt::InternalSwap(PDCPAddCfgCfmEnt* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PDCPAddCfgCfmEnt, status_)
      + sizeof(PDCPAddCfgCfmEnt::status_)
      - PROTOBUF_FIELD_OFFSET(PDCPAddCfgCfmEnt, reason_)>(
          reinterpret_cast<char*>(&reason_),
          reinterpret_cast<char*>(&other->reason_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PDCPAddCfgCfmEnt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PDCPModCfgCfmEnt::InitAsDefaultInstance() {
}
class PDCPModCfgCfmEnt::_Internal {
 public:
};

PDCPModCfgCfmEnt::PDCPModCfgCfmEnt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:structure.PDCPModCfgCfmEnt)
}
PDCPModCfgCfmEnt::PDCPModCfgCfmEnt(const PDCPModCfgCfmEnt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&reason_, &from.reason_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&reason_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:structure.PDCPModCfgCfmEnt)
}

void PDCPModCfgCfmEnt::SharedCtor() {
  ::memset(&reason_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&reason_)) + sizeof(status_));
}

PDCPModCfgCfmEnt::~PDCPModCfgCfmEnt() {
  // @@protoc_insertion_point(destructor:structure.PDCPModCfgCfmEnt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PDCPModCfgCfmEnt::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PDCPModCfgCfmEnt::ArenaDtor(void* object) {
  PDCPModCfgCfmEnt* _this = reinterpret_cast< PDCPModCfgCfmEnt* >(object);
  (void)_this;
}
void PDCPModCfgCfmEnt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PDCPModCfgCfmEnt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PDCPModCfgCfmEnt& PDCPModCfgCfmEnt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PDCPModCfgCfmEnt_structure_2eproto.base);
  return *internal_default_instance();
}


void PDCPModCfgCfmEnt::Clear() {
// @@protoc_insertion_point(message_clear_start:structure.PDCPModCfgCfmEnt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&reason_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&reason_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PDCPModCfgCfmEnt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 rb_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          rb_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool status = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.PDCPConfigFailureReason reason = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reason(static_cast<::structure::PDCPConfigFailureReason>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PDCPModCfgCfmEnt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:structure.PDCPModCfgCfmEnt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 rb_id = 10;
  if (this->rb_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_rb_id(), target);
  }

  // bool status = 20;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_status(), target);
  }

  // .structure.PDCPConfigFailureReason reason = 30;
  if (this->reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      30, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:structure.PDCPModCfgCfmEnt)
  return target;
}

size_t PDCPModCfgCfmEnt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:structure.PDCPModCfgCfmEnt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .structure.PDCPConfigFailureReason reason = 30;
  if (this->reason() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reason());
  }

  // uint32 rb_id = 10;
  if (this->rb_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rb_id());
  }

  // bool status = 20;
  if (this->status() != 0) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PDCPModCfgCfmEnt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:structure.PDCPModCfgCfmEnt)
  GOOGLE_DCHECK_NE(&from, this);
  const PDCPModCfgCfmEnt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PDCPModCfgCfmEnt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:structure.PDCPModCfgCfmEnt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:structure.PDCPModCfgCfmEnt)
    MergeFrom(*source);
  }
}

void PDCPModCfgCfmEnt::MergeFrom(const PDCPModCfgCfmEnt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:structure.PDCPModCfgCfmEnt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reason() != 0) {
    _internal_set_reason(from._internal_reason());
  }
  if (from.rb_id() != 0) {
    _internal_set_rb_id(from._internal_rb_id());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void PDCPModCfgCfmEnt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:structure.PDCPModCfgCfmEnt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PDCPModCfgCfmEnt::CopyFrom(const PDCPModCfgCfmEnt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:structure.PDCPModCfgCfmEnt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PDCPModCfgCfmEnt::IsInitialized() const {
  return true;
}

void PDCPModCfgCfmEnt::InternalSwap(PDCPModCfgCfmEnt* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PDCPModCfgCfmEnt, status_)
      + sizeof(PDCPModCfgCfmEnt::status_)
      - PROTOBUF_FIELD_OFFSET(PDCPModCfgCfmEnt, reason_)>(
          reinterpret_cast<char*>(&reason_),
          reinterpret_cast<char*>(&other->reason_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PDCPModCfgCfmEnt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PDCPDelCfgCfmEnt::InitAsDefaultInstance() {
}
class PDCPDelCfgCfmEnt::_Internal {
 public:
};

PDCPDelCfgCfmEnt::PDCPDelCfgCfmEnt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:structure.PDCPDelCfgCfmEnt)
}
PDCPDelCfgCfmEnt::PDCPDelCfgCfmEnt(const PDCPDelCfgCfmEnt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&reason_, &from.reason_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&reason_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:structure.PDCPDelCfgCfmEnt)
}

void PDCPDelCfgCfmEnt::SharedCtor() {
  ::memset(&reason_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&reason_)) + sizeof(status_));
}

PDCPDelCfgCfmEnt::~PDCPDelCfgCfmEnt() {
  // @@protoc_insertion_point(destructor:structure.PDCPDelCfgCfmEnt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PDCPDelCfgCfmEnt::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PDCPDelCfgCfmEnt::ArenaDtor(void* object) {
  PDCPDelCfgCfmEnt* _this = reinterpret_cast< PDCPDelCfgCfmEnt* >(object);
  (void)_this;
}
void PDCPDelCfgCfmEnt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PDCPDelCfgCfmEnt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PDCPDelCfgCfmEnt& PDCPDelCfgCfmEnt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PDCPDelCfgCfmEnt_structure_2eproto.base);
  return *internal_default_instance();
}


void PDCPDelCfgCfmEnt::Clear() {
// @@protoc_insertion_point(message_clear_start:structure.PDCPDelCfgCfmEnt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&reason_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&reason_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PDCPDelCfgCfmEnt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 rb_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          rb_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool status = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.PDCPConfigFailureReason reason = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reason(static_cast<::structure::PDCPConfigFailureReason>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PDCPDelCfgCfmEnt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:structure.PDCPDelCfgCfmEnt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 rb_id = 10;
  if (this->rb_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_rb_id(), target);
  }

  // bool status = 20;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_status(), target);
  }

  // .structure.PDCPConfigFailureReason reason = 30;
  if (this->reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      30, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:structure.PDCPDelCfgCfmEnt)
  return target;
}

size_t PDCPDelCfgCfmEnt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:structure.PDCPDelCfgCfmEnt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .structure.PDCPConfigFailureReason reason = 30;
  if (this->reason() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reason());
  }

  // uint32 rb_id = 10;
  if (this->rb_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rb_id());
  }

  // bool status = 20;
  if (this->status() != 0) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PDCPDelCfgCfmEnt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:structure.PDCPDelCfgCfmEnt)
  GOOGLE_DCHECK_NE(&from, this);
  const PDCPDelCfgCfmEnt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PDCPDelCfgCfmEnt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:structure.PDCPDelCfgCfmEnt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:structure.PDCPDelCfgCfmEnt)
    MergeFrom(*source);
  }
}

void PDCPDelCfgCfmEnt::MergeFrom(const PDCPDelCfgCfmEnt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:structure.PDCPDelCfgCfmEnt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reason() != 0) {
    _internal_set_reason(from._internal_reason());
  }
  if (from.rb_id() != 0) {
    _internal_set_rb_id(from._internal_rb_id());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void PDCPDelCfgCfmEnt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:structure.PDCPDelCfgCfmEnt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PDCPDelCfgCfmEnt::CopyFrom(const PDCPDelCfgCfmEnt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:structure.PDCPDelCfgCfmEnt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PDCPDelCfgCfmEnt::IsInitialized() const {
  return true;
}

void PDCPDelCfgCfmEnt::InternalSwap(PDCPDelCfgCfmEnt* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PDCPDelCfgCfmEnt, status_)
      + sizeof(PDCPDelCfgCfmEnt::status_)
      - PROTOBUF_FIELD_OFFSET(PDCPDelCfgCfmEnt, reason_)>(
          reinterpret_cast<char*>(&reason_),
          reinterpret_cast<char*>(&other->reason_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PDCPDelCfgCfmEnt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UlSduStaInfo::InitAsDefaultInstance() {
}
class UlSduStaInfo::_Internal {
 public:
};

UlSduStaInfo::UlSduStaInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:structure.UlSduStaInfo)
}
UlSduStaInfo::UlSduStaInfo(const UlSduStaInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&numbits_, &from.numbits_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&numbits_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:structure.UlSduStaInfo)
}

void UlSduStaInfo::SharedCtor() {
  ::memset(&numbits_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&numbits_)) + sizeof(count_));
}

UlSduStaInfo::~UlSduStaInfo() {
  // @@protoc_insertion_point(destructor:structure.UlSduStaInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UlSduStaInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UlSduStaInfo::ArenaDtor(void* object) {
  UlSduStaInfo* _this = reinterpret_cast< UlSduStaInfo* >(object);
  (void)_this;
}
void UlSduStaInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UlSduStaInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UlSduStaInfo& UlSduStaInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UlSduStaInfo_structure_2eproto.base);
  return *internal_default_instance();
}


void UlSduStaInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:structure.UlSduStaInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&numbits_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&numbits_)) + sizeof(count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UlSduStaInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 numBits = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          numbits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 count = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UlSduStaInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:structure.UlSduStaInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 numBits = 10;
  if (this->numbits() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_numbits(), target);
  }

  // uint32 count = 20;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:structure.UlSduStaInfo)
  return target;
}

size_t UlSduStaInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:structure.UlSduStaInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 numBits = 10;
  if (this->numbits() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_numbits());
  }

  // uint32 count = 20;
  if (this->count() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UlSduStaInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:structure.UlSduStaInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UlSduStaInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UlSduStaInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:structure.UlSduStaInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:structure.UlSduStaInfo)
    MergeFrom(*source);
  }
}

void UlSduStaInfo::MergeFrom(const UlSduStaInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:structure.UlSduStaInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.numbits() != 0) {
    _internal_set_numbits(from._internal_numbits());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void UlSduStaInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:structure.UlSduStaInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UlSduStaInfo::CopyFrom(const UlSduStaInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:structure.UlSduStaInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UlSduStaInfo::IsInitialized() const {
  return true;
}

void UlSduStaInfo::InternalSwap(UlSduStaInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UlSduStaInfo, count_)
      + sizeof(UlSduStaInfo::count_)
      - PROTOBUF_FIELD_OFFSET(UlSduStaInfo, numbits_)>(
          reinterpret_cast<char*>(&numbits_),
          reinterpret_cast<char*>(&other->numbits_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UlSduStaInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DlSduStaInfo::InitAsDefaultInstance() {
}
class DlSduStaInfo::_Internal {
 public:
};

DlSduStaInfo::DlSduStaInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:structure.DlSduStaInfo)
}
DlSduStaInfo::DlSduStaInfo(const DlSduStaInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:structure.DlSduStaInfo)
}

void DlSduStaInfo::SharedCtor() {
  count_ = 0u;
}

DlSduStaInfo::~DlSduStaInfo() {
  // @@protoc_insertion_point(destructor:structure.DlSduStaInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DlSduStaInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DlSduStaInfo::ArenaDtor(void* object) {
  DlSduStaInfo* _this = reinterpret_cast< DlSduStaInfo* >(object);
  (void)_this;
}
void DlSduStaInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DlSduStaInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DlSduStaInfo& DlSduStaInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DlSduStaInfo_structure_2eproto.base);
  return *internal_default_instance();
}


void DlSduStaInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:structure.DlSduStaInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DlSduStaInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 count = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DlSduStaInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:structure.DlSduStaInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 count = 10;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:structure.DlSduStaInfo)
  return target;
}

size_t DlSduStaInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:structure.DlSduStaInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 count = 10;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DlSduStaInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:structure.DlSduStaInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DlSduStaInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DlSduStaInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:structure.DlSduStaInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:structure.DlSduStaInfo)
    MergeFrom(*source);
  }
}

void DlSduStaInfo::MergeFrom(const DlSduStaInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:structure.DlSduStaInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void DlSduStaInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:structure.DlSduStaInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DlSduStaInfo::CopyFrom(const DlSduStaInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:structure.DlSduStaInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DlSduStaInfo::IsInitialized() const {
  return true;
}

void DlSduStaInfo::InternalSwap(DlSduStaInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DlSduStaInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SduStatusInfo::InitAsDefaultInstance() {
  ::structure::_SduStatusInfo_default_instance_._instance.get_mutable()->ulsdustainfo_ = const_cast< ::structure::UlSduStaInfo*>(
      ::structure::UlSduStaInfo::internal_default_instance());
  ::structure::_SduStatusInfo_default_instance_._instance.get_mutable()->dlsdustainfo_ = const_cast< ::structure::DlSduStaInfo*>(
      ::structure::DlSduStaInfo::internal_default_instance());
}
class SduStatusInfo::_Internal {
 public:
  static const ::structure::UlSduStaInfo& ulsdustainfo(const SduStatusInfo* msg);
  static const ::structure::DlSduStaInfo& dlsdustainfo(const SduStatusInfo* msg);
};

const ::structure::UlSduStaInfo&
SduStatusInfo::_Internal::ulsdustainfo(const SduStatusInfo* msg) {
  return *msg->ulsdustainfo_;
}
const ::structure::DlSduStaInfo&
SduStatusInfo::_Internal::dlsdustainfo(const SduStatusInfo* msg) {
  return *msg->dlsdustainfo_;
}
SduStatusInfo::SduStatusInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:structure.SduStatusInfo)
}
SduStatusInfo::SduStatusInfo(const SduStatusInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ulsdustainfo()) {
    ulsdustainfo_ = new ::structure::UlSduStaInfo(*from.ulsdustainfo_);
  } else {
    ulsdustainfo_ = nullptr;
  }
  if (from._internal_has_dlsdustainfo()) {
    dlsdustainfo_ = new ::structure::DlSduStaInfo(*from.dlsdustainfo_);
  } else {
    dlsdustainfo_ = nullptr;
  }
  ::memcpy(&snlen_, &from.snlen_,
    static_cast<size_t>(reinterpret_cast<char*>(&dir_) -
    reinterpret_cast<char*>(&snlen_)) + sizeof(dir_));
  // @@protoc_insertion_point(copy_constructor:structure.SduStatusInfo)
}

void SduStatusInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SduStatusInfo_structure_2eproto.base);
  ::memset(&ulsdustainfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dir_) -
      reinterpret_cast<char*>(&ulsdustainfo_)) + sizeof(dir_));
}

SduStatusInfo::~SduStatusInfo() {
  // @@protoc_insertion_point(destructor:structure.SduStatusInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SduStatusInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ulsdustainfo_;
  if (this != internal_default_instance()) delete dlsdustainfo_;
}

void SduStatusInfo::ArenaDtor(void* object) {
  SduStatusInfo* _this = reinterpret_cast< SduStatusInfo* >(object);
  (void)_this;
}
void SduStatusInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SduStatusInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SduStatusInfo& SduStatusInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SduStatusInfo_structure_2eproto.base);
  return *internal_default_instance();
}


void SduStatusInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:structure.SduStatusInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && ulsdustainfo_ != nullptr) {
    delete ulsdustainfo_;
  }
  ulsdustainfo_ = nullptr;
  if (GetArena() == nullptr && dlsdustainfo_ != nullptr) {
    delete dlsdustainfo_;
  }
  dlsdustainfo_ = nullptr;
  ::memset(&snlen_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dir_) -
      reinterpret_cast<char*>(&snlen_)) + sizeof(dir_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SduStatusInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 rbId = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          rbid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 dir = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          dir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 snLen = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          snlen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.UlSduStaInfo ulSduStaInfo = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_ulsdustainfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.DlSduStaInfo dlSduStaInfo = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_dlsdustainfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SduStatusInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:structure.SduStatusInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 rbId = 10;
  if (this->rbid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_rbid(), target);
  }

  // uint32 dir = 20;
  if (this->dir() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_dir(), target);
  }

  // uint32 snLen = 30;
  if (this->snlen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_snlen(), target);
  }

  // .structure.UlSduStaInfo ulSduStaInfo = 40;
  if (this->has_ulsdustainfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        40, _Internal::ulsdustainfo(this), target, stream);
  }

  // .structure.DlSduStaInfo dlSduStaInfo = 50;
  if (this->has_dlsdustainfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        50, _Internal::dlsdustainfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:structure.SduStatusInfo)
  return target;
}

size_t SduStatusInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:structure.SduStatusInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .structure.UlSduStaInfo ulSduStaInfo = 40;
  if (this->has_ulsdustainfo()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ulsdustainfo_);
  }

  // .structure.DlSduStaInfo dlSduStaInfo = 50;
  if (this->has_dlsdustainfo()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dlsdustainfo_);
  }

  // uint32 snLen = 30;
  if (this->snlen() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_snlen());
  }

  // uint32 rbId = 10;
  if (this->rbid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rbid());
  }

  // uint32 dir = 20;
  if (this->dir() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dir());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SduStatusInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:structure.SduStatusInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SduStatusInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SduStatusInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:structure.SduStatusInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:structure.SduStatusInfo)
    MergeFrom(*source);
  }
}

void SduStatusInfo::MergeFrom(const SduStatusInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:structure.SduStatusInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ulsdustainfo()) {
    _internal_mutable_ulsdustainfo()->::structure::UlSduStaInfo::MergeFrom(from._internal_ulsdustainfo());
  }
  if (from.has_dlsdustainfo()) {
    _internal_mutable_dlsdustainfo()->::structure::DlSduStaInfo::MergeFrom(from._internal_dlsdustainfo());
  }
  if (from.snlen() != 0) {
    _internal_set_snlen(from._internal_snlen());
  }
  if (from.rbid() != 0) {
    _internal_set_rbid(from._internal_rbid());
  }
  if (from.dir() != 0) {
    _internal_set_dir(from._internal_dir());
  }
}

void SduStatusInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:structure.SduStatusInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SduStatusInfo::CopyFrom(const SduStatusInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:structure.SduStatusInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SduStatusInfo::IsInitialized() const {
  return true;
}

void SduStatusInfo::InternalSwap(SduStatusInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SduStatusInfo, dir_)
      + sizeof(SduStatusInfo::dir_)
      - PROTOBUF_FIELD_OFFSET(SduStatusInfo, ulsdustainfo_)>(
          reinterpret_cast<char*>(&ulsdustainfo_),
          reinterpret_cast<char*>(&other->ulsdustainfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SduStatusInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TunnelStateInfo::InitAsDefaultInstance() {
}
class TunnelStateInfo::_Internal {
 public:
};

TunnelStateInfo::TunnelStateInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:structure.TunnelStateInfo)
}
TunnelStateInfo::TunnelStateInfo(const TunnelStateInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&local_gtp_teid_, &from.local_gtp_teid_,
    static_cast<size_t>(reinterpret_cast<char*>(&cause_) -
    reinterpret_cast<char*>(&local_gtp_teid_)) + sizeof(cause_));
  // @@protoc_insertion_point(copy_constructor:structure.TunnelStateInfo)
}

void TunnelStateInfo::SharedCtor() {
  ::memset(&local_gtp_teid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cause_) -
      reinterpret_cast<char*>(&local_gtp_teid_)) + sizeof(cause_));
}

TunnelStateInfo::~TunnelStateInfo() {
  // @@protoc_insertion_point(destructor:structure.TunnelStateInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TunnelStateInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TunnelStateInfo::ArenaDtor(void* object) {
  TunnelStateInfo* _this = reinterpret_cast< TunnelStateInfo* >(object);
  (void)_this;
}
void TunnelStateInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TunnelStateInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TunnelStateInfo& TunnelStateInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TunnelStateInfo_structure_2eproto.base);
  return *internal_default_instance();
}


void TunnelStateInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:structure.TunnelStateInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&local_gtp_teid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cause_) -
      reinterpret_cast<char*>(&local_gtp_teid_)) + sizeof(cause_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TunnelStateInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .structure.TunnelState state = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::structure::TunnelState>(val));
        } else goto handle_unusual;
        continue;
      // uint32 cause = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          cause_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 local_gtp_teid = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          local_gtp_teid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TunnelStateInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:structure.TunnelStateInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .structure.TunnelState state = 10;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_state(), target);
  }

  // uint32 cause = 20;
  if (this->cause() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_cause(), target);
  }

  // uint32 local_gtp_teid = 30;
  if (this->local_gtp_teid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_local_gtp_teid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:structure.TunnelStateInfo)
  return target;
}

size_t TunnelStateInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:structure.TunnelStateInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 local_gtp_teid = 30;
  if (this->local_gtp_teid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_local_gtp_teid());
  }

  // .structure.TunnelState state = 10;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  // uint32 cause = 20;
  if (this->cause() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cause());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TunnelStateInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:structure.TunnelStateInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TunnelStateInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TunnelStateInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:structure.TunnelStateInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:structure.TunnelStateInfo)
    MergeFrom(*source);
  }
}

void TunnelStateInfo::MergeFrom(const TunnelStateInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:structure.TunnelStateInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.local_gtp_teid() != 0) {
    _internal_set_local_gtp_teid(from._internal_local_gtp_teid());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.cause() != 0) {
    _internal_set_cause(from._internal_cause());
  }
}

void TunnelStateInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:structure.TunnelStateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TunnelStateInfo::CopyFrom(const TunnelStateInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:structure.TunnelStateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TunnelStateInfo::IsInitialized() const {
  return true;
}

void TunnelStateInfo::InternalSwap(TunnelStateInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TunnelStateInfo, cause_)
      + sizeof(TunnelStateInfo::cause_)
      - PROTOBUF_FIELD_OFFSET(TunnelStateInfo, local_gtp_teid_)>(
          reinterpret_cast<char*>(&local_gtp_teid_),
          reinterpret_cast<char*>(&other->local_gtp_teid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TunnelStateInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UeInfo::InitAsDefaultInstance() {
}
class UeInfo::_Internal {
 public:
};

UeInfo::UeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  rb_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:structure.UeInfo)
}
UeInfo::UeInfo(const UeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rb_id_(from.rb_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ue_id_ = from.ue_id_;
  // @@protoc_insertion_point(copy_constructor:structure.UeInfo)
}

void UeInfo::SharedCtor() {
  ue_id_ = PROTOBUF_ULONGLONG(0);
}

UeInfo::~UeInfo() {
  // @@protoc_insertion_point(destructor:structure.UeInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UeInfo::ArenaDtor(void* object) {
  UeInfo* _this = reinterpret_cast< UeInfo* >(object);
  (void)_this;
}
void UeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UeInfo& UeInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UeInfo_structure_2eproto.base);
  return *internal_default_instance();
}


void UeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:structure.UeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rb_id_.Clear();
  ue_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 ue_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ue_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 rb_id = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_rb_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160) {
          _internal_add_rb_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:structure.UeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 ue_id = 10;
  if (this->ue_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_ue_id(), target);
  }

  // repeated uint32 rb_id = 20;
  {
    int byte_size = _rb_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          20, _internal_rb_id(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:structure.UeInfo)
  return target;
}

size_t UeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:structure.UeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 rb_id = 20;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->rb_id_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _rb_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint64 ue_id = 10;
  if (this->ue_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_ue_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:structure.UeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:structure.UeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:structure.UeInfo)
    MergeFrom(*source);
  }
}

void UeInfo::MergeFrom(const UeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:structure.UeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rb_id_.MergeFrom(from.rb_id_);
  if (from.ue_id() != 0) {
    _internal_set_ue_id(from._internal_ue_id());
  }
}

void UeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:structure.UeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UeInfo::CopyFrom(const UeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:structure.UeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UeInfo::IsInitialized() const {
  return true;
}

void UeInfo::InternalSwap(UeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  rb_id_.InternalSwap(&other->rb_id_);
  swap(ue_id_, other->ue_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UeInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqReply::InitAsDefaultInstance() {
  ::structure::_ReqReply_default_instance_._instance.get_mutable()->hdr_ = const_cast< ::mhdr::MsgHdr*>(
      ::mhdr::MsgHdr::internal_default_instance());
}
class ReqReply::_Internal {
 public:
  static const ::mhdr::MsgHdr& hdr(const ReqReply* msg);
};

const ::mhdr::MsgHdr&
ReqReply::_Internal::hdr(const ReqReply* msg) {
  return *msg->hdr_;
}
void ReqReply::clear_hdr() {
  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
}
ReqReply::ReqReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:structure.ReqReply)
}
ReqReply::ReqReply(const ReqReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hdr()) {
    hdr_ = new ::mhdr::MsgHdr(*from.hdr_);
  } else {
    hdr_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:structure.ReqReply)
}

void ReqReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqReply_structure_2eproto.base);
  hdr_ = nullptr;
}

ReqReply::~ReqReply() {
  // @@protoc_insertion_point(destructor:structure.ReqReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete hdr_;
}

void ReqReply::ArenaDtor(void* object) {
  ReqReply* _this = reinterpret_cast< ReqReply* >(object);
  (void)_this;
}
void ReqReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqReply& ReqReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqReply_structure_2eproto.base);
  return *internal_default_instance();
}


void ReqReply::Clear() {
// @@protoc_insertion_point(message_clear_start:structure.ReqReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mhdr.MsgHdr hdr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:structure.ReqReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::hdr(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:structure.ReqReply)
  return target;
}

size_t ReqReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:structure.ReqReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hdr_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:structure.ReqReply)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:structure.ReqReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:structure.ReqReply)
    MergeFrom(*source);
  }
}

void ReqReply::MergeFrom(const ReqReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:structure.ReqReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hdr()) {
    _internal_mutable_hdr()->::mhdr::MsgHdr::MergeFrom(from._internal_hdr());
  }
}

void ReqReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:structure.ReqReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqReply::CopyFrom(const ReqReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:structure.ReqReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqReply::IsInitialized() const {
  return true;
}

void ReqReply::InternalSwap(ReqReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(hdr_, other->hdr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqReply::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace structure
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::structure::Pst* Arena::CreateMaybeMessage< ::structure::Pst >(Arena* arena) {
  return Arena::CreateMessageInternal< ::structure::Pst >(arena);
}
template<> PROTOBUF_NOINLINE ::structure::CuCpID* Arena::CreateMaybeMessage< ::structure::CuCpID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::structure::CuCpID >(arena);
}
template<> PROTOBUF_NOINLINE ::structure::CuUpID* Arena::CreateMaybeMessage< ::structure::CuUpID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::structure::CuUpID >(arena);
}
template<> PROTOBUF_NOINLINE ::structure::SuSpID* Arena::CreateMaybeMessage< ::structure::SuSpID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::structure::SuSpID >(arena);
}
template<> PROTOBUF_NOINLINE ::structure::CpUpHdr* Arena::CreateMaybeMessage< ::structure::CpUpHdr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::structure::CpUpHdr >(arena);
}
template<> PROTOBUF_NOINLINE ::structure::SecurityConfig* Arena::CreateMaybeMessage< ::structure::SecurityConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::structure::SecurityConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::structure::SecurityCfgCfm* Arena::CreateMaybeMessage< ::structure::SecurityCfgCfm >(Arena* arena) {
  return Arena::CreateMessageInternal< ::structure::SecurityCfgCfm >(arena);
}
template<> PROTOBUF_NOINLINE ::structure::GtpTunnelId* Arena::CreateMaybeMessage< ::structure::GtpTunnelId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::structure::GtpTunnelId >(arena);
}
template<> PROTOBUF_NOINLINE ::structure::GtpTunnelInfo* Arena::CreateMaybeMessage< ::structure::GtpTunnelInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::structure::GtpTunnelInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::structure::RlcInfo* Arena::CreateMaybeMessage< ::structure::RlcInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::structure::RlcInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::structure::HeaderCompressionConfig* Arena::CreateMaybeMessage< ::structure::HeaderCompressionConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::structure::HeaderCompressionConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::structure::PDCPHoInfo* Arena::CreateMaybeMessage< ::structure::PDCPHoInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::structure::PDCPHoInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::structure::PDCPDCBearerInfo* Arena::CreateMaybeMessage< ::structure::PDCPDCBearerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::structure::PDCPDCBearerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::structure::PDCPAddCfgEnt* Arena::CreateMaybeMessage< ::structure::PDCPAddCfgEnt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::structure::PDCPAddCfgEnt >(arena);
}
template<> PROTOBUF_NOINLINE ::structure::PDCPModCfgEnt* Arena::CreateMaybeMessage< ::structure::PDCPModCfgEnt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::structure::PDCPModCfgEnt >(arena);
}
template<> PROTOBUF_NOINLINE ::structure::PDCPDelCfgEnt* Arena::CreateMaybeMessage< ::structure::PDCPDelCfgEnt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::structure::PDCPDelCfgEnt >(arena);
}
template<> PROTOBUF_NOINLINE ::structure::CreateTnlCfmEnt* Arena::CreateMaybeMessage< ::structure::CreateTnlCfmEnt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::structure::CreateTnlCfmEnt >(arena);
}
template<> PROTOBUF_NOINLINE ::structure::ModTnlCfmEnt* Arena::CreateMaybeMessage< ::structure::ModTnlCfmEnt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::structure::ModTnlCfmEnt >(arena);
}
template<> PROTOBUF_NOINLINE ::structure::DelTnlCfmEnt* Arena::CreateMaybeMessage< ::structure::DelTnlCfmEnt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::structure::DelTnlCfmEnt >(arena);
}
template<> PROTOBUF_NOINLINE ::structure::PDCPAddCfgCfmEnt* Arena::CreateMaybeMessage< ::structure::PDCPAddCfgCfmEnt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::structure::PDCPAddCfgCfmEnt >(arena);
}
template<> PROTOBUF_NOINLINE ::structure::PDCPModCfgCfmEnt* Arena::CreateMaybeMessage< ::structure::PDCPModCfgCfmEnt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::structure::PDCPModCfgCfmEnt >(arena);
}
template<> PROTOBUF_NOINLINE ::structure::PDCPDelCfgCfmEnt* Arena::CreateMaybeMessage< ::structure::PDCPDelCfgCfmEnt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::structure::PDCPDelCfgCfmEnt >(arena);
}
template<> PROTOBUF_NOINLINE ::structure::UlSduStaInfo* Arena::CreateMaybeMessage< ::structure::UlSduStaInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::structure::UlSduStaInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::structure::DlSduStaInfo* Arena::CreateMaybeMessage< ::structure::DlSduStaInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::structure::DlSduStaInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::structure::SduStatusInfo* Arena::CreateMaybeMessage< ::structure::SduStatusInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::structure::SduStatusInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::structure::TunnelStateInfo* Arena::CreateMaybeMessage< ::structure::TunnelStateInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::structure::TunnelStateInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::structure::UeInfo* Arena::CreateMaybeMessage< ::structure::UeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::structure::UeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::structure::ReqReply* Arena::CreateMaybeMessage< ::structure::ReqReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::structure::ReqReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
